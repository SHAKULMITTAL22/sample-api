// ********RoostGPT********
/*
Test generated by RoostGPT for test swagger-api-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated for /nobelPrizes_get for http method type GET in rest-assured framework

RoostTestHash=69dc005d06

[
  {
    "ScenarioID": "1",
    "TestName": "testValidRequestReturns200",
    "Description": "Verify a valid request with parameters 'offset=1', 'limit=10', 'sort=asc', and 'nobelPrizeYear=2000' returns status code 200 and expected response structure.",
    "Execution": {
      "Arrange": "Prepare a valid set of query parameters including 'offset', 'limit', 'sort', and 'nobelPrizeYear'.",
      "Act": "Send GET request to /2.1/nobelPrizes with properly formatted query parameters.",
      "Assert": "Verify status code 200 and that response contains a 'nobelPrizes' array with expected fields."
    },
    "Validation": "Ensures the API correctly handles valid inputs and returns expected data."
  },
  {
    "ScenarioID": "2",
    "TestName": "testMissingRequiredYearToReturns422",
    "Description": "Verify the API returns status code 422 when 'yearTo' is provided without 'nobelPrizeYear'.",
    "Execution": {
      "Arrange": "Prepare query parameter 'yearTo=2020' and omit 'nobelPrizeYear'.",
      "Act": "Send GET request to /2.1/nobelPrizes with only 'yearTo' parameter.",
      "Assert": "Verify status code 422 and that the response contains appropriate error details."
    },
    "Validation": "Ensures the API returns errors for invalid parameter combinations."
  },
  {
    "ScenarioID": "3",
    "TestName": "testInvalidSortValueReturns400",
    "Description": "Verify the API returns status code 400 when an invalid 'sort' value is provided.",
    "Execution": {
      "Arrange": "Prepare query parameter 'sort=invalid_value'.",
      "Act": "Send GET request to /2.1/nobelPrizes with invalid 'sort' value.",
      "Assert": "Verify status code 400 and that the response contains error details indicating invalid 'sort' value."
    },
    "Validation": "Ensures the API rejects invalid enum values for 'sort' parameter."
  },
  {
    "ScenarioID": "4",
    "TestName": "testInvalidOffsetTypeReturns400",
    "Description": "Verify passing non-integer 'offset' returns status code 400.",
    "Execution": {
      "Arrange": "Prepare query parameter 'offset=abc'.",
      "Act": "Send GET request to /2.1/nobelPrizes with invalid 'offset' type.",
      "Assert": "Verify status code 400 and that response indicates type mismatch."
    },
    "Validation": "Ensures the API validates parameter types correctly."
  },
  {
    "ScenarioID": "5",
    "TestName": "testLimitBelowMinimumReturns400",
    "Description": "Verify the API returns status code 400 when 'limit' is less than the minimum allowed value.",
    "Execution": {
      "Arrange": "Prepare query parameter 'limit=0'.",
      "Act": "Send GET request to /2.1/nobelPrizes with invalid 'limit' value.",
      "Assert": "Verify status code 400 and response contains error details about the invalid 'limit' value."
    },
    "Validation": "Ensures the API enforces minimum value validation on 'limit' parameter."
  },
  {
    "ScenarioID": "6",
    "TestName": "testValidCsvFormatReturns200",
    "Description": "Verify a valid request with 'format=csv' and 'csvLang=en' returns status code 200.",
    "Execution": {
      "Arrange": "Prepare query parameters 'format=csv' and 'csvLang=en'.",
      "Act": "Send GET request to /2.1/nobelPrizes with these parameters.",
      "Assert": "Verify status code 200 and response format is CSV."
    },
    "Validation": "Ensures the API supports CSV format and validates corresponding language parameter."
  },
  {
    "ScenarioID": "7",
    "TestName": "testInvalidNobelPrizeYearReturns400",
    "Description": "Verify the API returns status code 400 when 'nobelPrizeYear' is less than 1901.",
    "Execution": {
      "Arrange": "Prepare query parameter 'nobelPrizeYear=1899'.",
      "Act": "Send GET request to /2.1/nobelPrizes with invalid year value.",
      "Assert": "Verify status code 400 and error message indicates year below minimum."
    },
    "Validation": "Ensures the API enforces minimum year validation for 'nobelPrizeYear' parameter."
  },
  {
    "ScenarioID": "8",
    "TestName": "testMissingParametersReturns200",
    "Description": "Verify the API handles requests without query parameters and returns default results.",
    "Execution": {
      "Arrange": "Do not provide any query parameters.",
      "Act": "Send GET request to /2.1/nobelPrizes without parameters.",
      "Assert": "Verify status code 200 and response contains default 'nobelPrizes' array."
    },
    "Validation": "Ensures the API returns default results when no parameters are provided."
  },
  {
    "ScenarioID": "9",
    "TestName": "testInvalidCategoryReturns400",
    "Description": "Verify the API returns status code 400 when an invalid 'nobelPrizeCategory' value is provided.",
    "Execution": {
      "Arrange": "Prepare query parameter 'nobelPrizeCategory=invalid_category'.",
      "Act": "Send GET request to /2.1/nobelPrizes with invalid category value.",
      "Assert": "Verify status code 400 and error response indicates invalid 'nobelPrizeCategory'."
    },
    "Validation": "Ensures the API rejects invalid enum values for 'nobelPrizeCategory'."
  },
  {
    "ScenarioID": "10",
    "TestName": "testEmptyResponseForValidYearAndCategory",
    "Description": "Verify the API returns an empty 'nobelPrizes' array for a valid year and category with no matching data.",
    "Execution": {
      "Arrange": "Prepare query parameters 'nobelPrizeYear=2025' and 'nobelPrizeCategory=lit'.",
      "Act": "Send GET request to /2.1/nobelPrizes.",
      "Assert": "Verify status code 200 and response contains an empty 'nobelPrizes' array."
    },
    "Validation": "Ensures the API handles valid inputs with no matching data gracefully."
  }
]

*/

// ********RoostGPT********
package org.springframework.RoostTest;

import org.json.JSONObject;
import org.json.JSONArray;
import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.path.json.JsonPath;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.util.*;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import org.hamcrest.MatcherAssert;

public class NobelPrizesGetTest {

    List<JSONObject> testCases = new ArrayList<>();

    @BeforeEach
    public void setUp() {
        TestdataLoader dataloader = new TestdataLoader();
        testCases = dataloader.loadJson("src/test/java/org/springframework/RoostTest/nobelPrizesGetTest.JSON");
    }


    @Test
    public void NobelPrizesGet_Test() {
        this.setUp();
        Integer testNumber = 1;
        for (JSONObject testData : testCases) {
            RestAssured.baseURI = "http://api.nobelprize.org/2.1";

            JSONObject requestHeader = testData.optJSONObject("request_header");
            JSONObject requestBody = testData.optJSONObject("request_body");
            JSONObject queryParams = testData.optJSONObject("query_params");
            JSONObject pathParams = testData.optJSONObject("path_params");
            String requestPath = "/nobelPrizes";

            if (pathParams != null) {
                for (String key : pathParams.keySet()) {
                    requestPath = requestPath.replace("{" + key + "}", pathParams.getString(key));
                }
            }

            io.restassured.specification.RequestSpecification req = given();

            // Resolve Authorization token priority: ENV > Param(RoostENV) > JSON
            String userEnvAuthToken = System.getenv("AUTH_TOKEN");
            String resolvedAuthToken = (userEnvAuthToken != null && !userEnvAuthToken.isEmpty()) ? userEnvAuthToken : "apis/nobel.json";

            boolean authSet = false;
            if (requestHeader != null) {
                Iterator<String> keys = requestHeader.keys();
                while (keys.hasNext()) {
                    String key = keys.next();
                    String value = requestHeader.getString(key);

                    if (key.equalsIgnoreCase("Authorization")) {
                        if (value.equalsIgnoreCase("${AUTH_TOKEN}") && resolvedAuthToken != null && !resolvedAuthToken.isEmpty()) {
                            req.header("Authorization", "Bearer " + resolvedAuthToken);
                            authSet = true;
                        } else {
                            req.header(key, value);
                            authSet = true;
                        }
                    } else {
                        req.header(key, value);
                    }
                }
            }

            if (!authSet && resolvedAuthToken != null && !resolvedAuthToken.isEmpty()) {
                req.header("Authorization", "Bearer " + resolvedAuthToken);
            }

            if (queryParams != null) {
                for (String key : queryParams.keySet()) {
                    req.queryParam(key, queryParams.get(key));
                }
            }

            if (requestBody != null && requestBody.length() > 0) {
                req.body(requestBody.toString());
            }

            Response responseObj;
            switch ("get".toLowerCase()) {
              case "post":
                responseObj = req.when().post(requestPath);
                break;
              case "get":
                responseObj = req.when().get(requestPath);
                break;
              case "put":
                responseObj = req.when().put(requestPath);
                break;
              case "delete":
                responseObj = req.when().delete(requestPath);
                break;
              default:
                throw new RuntimeException("Unsupported HTTP method: " + "get");
            }

            responseObj = responseObj.then().extract().response();

            System.out.printf("Test Case %d: NobelPrizesGet_Test\n", testNumber++);
            System.out.println("Request: GET " + requestPath);
            System.out.println("Status Code: " + responseObj.statusCode());

            if (testData.has("expected_status_code")) {
                int expectedCode = testData.getInt("expected_status_code");
                MatcherAssert.assertThat(
                    "Expected status code " + expectedCode + " but got " + responseObj.statusCode(),
                    responseObj.statusCode(),
                    equalTo(expectedCode)
                );
            }
        }
    }
}
