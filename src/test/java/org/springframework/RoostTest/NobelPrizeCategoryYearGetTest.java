// ********RoostGPT********
/*
Test generated by RoostGPT for test swagger-api-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated for /nobelPrize/{category}/{year}_get for http method type GET in rest-assured framework

RoostTestHash=968c47d2dc

[
  {
    "ScenarioID": "1",
    "TestName": "testValidRequestReturns200",
    "Description": "Test valid path params for 'category' and 'year' to receive a 200 response",
    "Execution": {
      "Arrange": "Prepare path params 'category=phy' and 'year=2020'",
      "Act": "Send GET request to /2.1/nobelPrize/phy/2020",
      "Assert": "Check for 200 status and response body contains Nobel Prize details"
    },
    "Validation": "Ensures API successfully returns correct response for valid input"
  },
  {
    "ScenarioID": "2",
    "TestName": "testMissingRequiredPathParamsReturns404",
    "Description": "Test missing path params to verify a 404 response",
    "Execution": {
      "Arrange": "Do not provide 'category' or 'year' path params",
      "Act": "Send GET request to /2.1/nobelPrize/",
      "Assert": "Verify 404 status and appropriate error message in response"
    },
    "Validation": "Ensures API detects missing required path parameters"
  },
  {
    "ScenarioID": "3",
    "TestName": "testInvalidCategoryEnumReturns422",
    "Description": "Test invalid 'category' not matching enum values to verify 422 response",
    "Execution": {
      "Arrange": "Prepare path params 'category=invalidCategory' and 'year=2020'",
      "Act": "Send GET request to /2.1/nobelPrize/invalidCategory/2020",
      "Assert": "Confirm 422 status and appropriate error message in response"
    },
    "Validation": "Ensures API rejects invalid enum values for 'category'"
  },
  {
    "ScenarioID": "4",
    "TestName": "testYearBelowMinimumReturns400",
    "Description": "Test 'year' below minimum value to verify 400 response",
    "Execution": {
      "Arrange": "Prepare path params 'category=lit' and 'year=1800'",
      "Act": "Send GET request to /2.1/nobelPrize/lit/1800",
      "Assert": "Confirm 400 status and appropriate error message in response"
    },
    "Validation": "Ensures API validates 'year' against minimum constraint"
  },
  {
    "ScenarioID": "5",
    "TestName": "testMalformedYearFormatReturns400",
    "Description": "Test 'year' with non-integer format to verify 400 response",
    "Execution": {
      "Arrange": "Prepare path params 'category=phy' and 'year=abcd'",
      "Act": "Send GET request to /2.1/nobelPrize/phy/abcd",
      "Assert": "Verify 400 status and appropriate error message in response"
    },
    "Validation": "Ensures API rejects malformed formats in path parameters"
  },
  {
    "ScenarioID": "6",
    "TestName": "testCategoryCaseSensitivityReturns422",
    "Description": "Test 'category' with improper case sensitivity to verify 422 response",
    "Execution": {
      "Arrange": "Prepare path params 'category=Pea' and 'year=2020'",
      "Act": "Send GET request to /2.1/nobelPrize/Pea/2020",
      "Assert": "Confirm 422 status and appropriate error message in response"
    },
    "Validation": "Ensures API enforces case sensitivity for 'category' enum values"
  },
  {
    "ScenarioID": "7",
    "TestName": "testInvalidPathFormatReturns400",
    "Description": "Test invalid path format and extra slashes to verify 400 response",
    "Execution": {
      "Arrange": "Prepare incorrect path format, e.g., '/2.1/nobelPrize//phy//2020'",
      "Act": "Send GET request to invalid endpoint",
      "Assert": "Verify 400 status and syntax error in response"
    },
    "Validation": "Ensures API detects malformed syntax in the request"
  },
  {
    "ScenarioID": "8",
    "TestName": "testValidYearBoundaryReturns200",
    "Description": "Test boundary value for 'year' (minimum allowed year) to verify 200 response",
    "Execution": {
      "Arrange": "Prepare path params 'category=med' and 'year=1901'",
      "Act": "Send GET request to /2.1/nobelPrize/med/1901",
      "Assert": "Check for 200 status and response contains expected Nobel Prize details"
    },
    "Validation": "Ensures API handles 'year' boundary condition correctly"
  },
  {
    "ScenarioID": "9",
    "TestName": "testYearFormatWithLeadingZerosReturns404",
    "Description": "Test 'year' with leading zeros to verify 404 response",
    "Execution": {
      "Arrange": "Prepare path params 'category=eco' and 'year=0010'",
      "Act": "Send GET request to /2.1/nobelPrize/eco/0010",
      "Assert": "Confirm 404 status and appropriate error message in response"
    },
    "Validation": "Ensures API rejects incorrectly formatted 'year' values"
  },
  {
    "ScenarioID": "10",
    "TestName": "testResponseContainsAllExpectedFieldsFor200",
    "Description": "Test response object includes all expected fields when given valid input",
    "Execution": {
      "Arrange": "Prepare path params 'category=che' and 'year=2021'",
      "Act": "Send GET request to /2.1/nobelPrize/che/2021",
      "Assert": "Verify all fields in the response match the schema including 'awardYear', 'category', 'laureates', etc."
    },
    "Validation": "Ensures API returns all expected fields in successful response"
  }
]

*/

// ********RoostGPT********
package org.springframework.RoostTest;
category,year
import org.json.JSONObject;
import org.json.JSONArray;
import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.path.json.JsonPath;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.util.*;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import org.hamcrest.MatcherAssert;

public class NobelPrizeCategoryYearGetTest {

    List<JSONObject> testCases = new ArrayList<>();

    @BeforeEach
    public void setUp() {
        TestdataLoader dataloader = new TestdataLoader();
        testCases = dataloader.loadJson("src/test/java/org/springframework/RoostTest/nobelPrize_category_yearGetTest.JSON");
    }


    @Test
    public void NobelPrizeCategoryYearGet_Test() {
        this.setUp();
        Integer testNumber = 1;
        for (JSONObject testData : testCases) {
            RestAssured.baseURI = "http://api.nobelprize.org/2.1";

            JSONObject requestHeader = testData.optJSONObject("request_header");
            JSONObject requestBody = testData.optJSONObject("request_body");
            JSONObject queryParams = testData.optJSONObject("query_params");
            JSONObject pathParams = testData.optJSONObject("path_params");
            String requestPath = "/nobelPrize/{category}/{year}";

            if (pathParams != null) {
                for (String key : pathParams.keySet()) {
                    requestPath = requestPath.replace("{" + key + "}", pathParams.getString(key));
                }
            }

            io.restassured.specification.RequestSpecification req = given();

            // Resolve Authorization token priority: ENV > Param(RoostENV) > JSON
            String userEnvAuthToken = System.getenv("AUTH_TOKEN");
            String resolvedAuthToken = (userEnvAuthToken != null && !userEnvAuthToken.isEmpty()) ? userEnvAuthToken : "apis/nobel.json";

            boolean authSet = false;
            if (requestHeader != null) {
                Iterator<String> keys = requestHeader.keys();
                while (keys.hasNext()) {
                    String key = keys.next();
                    String value = requestHeader.getString(key);

                    if (key.equalsIgnoreCase("Authorization")) {
                        if (value.equalsIgnoreCase("${AUTH_TOKEN}") && resolvedAuthToken != null && !resolvedAuthToken.isEmpty()) {
                            req.header("Authorization", "Bearer " + resolvedAuthToken);
                            authSet = true;
                        } else {
                            req.header(key, value);
                            authSet = true;
                        }
                    } else {
                        req.header(key, value);
                    }
                }
            }

            if (!authSet && resolvedAuthToken != null && !resolvedAuthToken.isEmpty()) {
                req.header("Authorization", "Bearer " + resolvedAuthToken);
            }

            if (queryParams != null) {
                for (String key : queryParams.keySet()) {
                    req.queryParam(key, queryParams.get(key));
                }
            }

            if (requestBody != null && requestBody.length() > 0) {
                req.body(requestBody.toString());
            }

            Response responseObj;
            switch ("get".toLowerCase()) {
              case "post":
                responseObj = req.when().post(requestPath);
                break;
              case "get":
                responseObj = req.when().get(requestPath);
                break;
              case "put":
                responseObj = req.when().put(requestPath);
                break;
              case "delete":
                responseObj = req.when().delete(requestPath);
                break;
              default:
                throw new RuntimeException("Unsupported HTTP method: " + "get");
            }

            responseObj = responseObj.then().extract().response();

            System.out.printf("Test Case %d: NobelPrizeCategoryYearGet_Test\n", testNumber++);
            System.out.println("Request: GET " + requestPath);
            System.out.println("Status Code: " + responseObj.statusCode());

            if (testData.has("expected_status_code")) {
                int expectedCode = testData.getInt("expected_status_code");
                MatcherAssert.assertThat(
                    "Expected status code " + expectedCode + " but got " + responseObj.statusCode(),
                    responseObj.statusCode(),
                    equalTo(expectedCode)
                );
            }
        }
    }
}
