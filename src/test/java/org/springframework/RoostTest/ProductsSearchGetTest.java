// ********RoostGPT********
/*
Test generated by RoostGPT for test api-swagger using AI Type Azure Open AI and AI Model Inference

Test generated for /products:search_get for http method type GET in rest-assured framework

RoostTestHash=9297411646

[
  {
    "ScenarioID": "1",
    "TestName": "testValidRequestReturns200",
    "Description": "Test a valid request with all required parameters",
    "Execution": {
      "Arrange": "Prepare valid query params: brand_name, product_name, upc, confidence_model",
      "Act": "Send GET request to /products:search with correct headers and params",
      "Assert": "Check for 200 status and response body contains product details"
    },
    "Validation": "Ensures API successfully returns correct response with valid input"
  },
  {
    "ScenarioID": "2",
    "TestName": "testMissingRequiredParam",
    "Description": "Test request with missing required parameter",
    "Execution": {
      "Arrange": "Prepare query params missing 'brand_name'",
      "Act": "Send GET request to /products:search with missing required param",
      "Assert": "Check for 400 status and appropriate error message"
    },
    "Validation": "Ensures API handles missing required parameters correctly"
  },
  {
    "ScenarioID": "3",
    "TestName": "testInvalidConfidenceModel",
    "Description": "Test request with invalid confidence_model value",
    "Execution": {
      "Arrange": "Prepare query params with invalid 'confidence_model' value (e.g., 99)",
      "Act": "Send GET request to /products:search with invalid confidence_model",
      "Assert": "Check for 400 status and appropriate error message"
    },
    "Validation": "Ensures API validates confidence_model enum correctly"
  },
  {
    "ScenarioID": "4",
    "TestName": "testMissingAuthToken",
    "Description": "Test request with missing authorization token",
    "Execution": {
      "Arrange": "Prepare valid query params but omit auth token",
      "Act": "Send GET request to /products:search without auth token",
      "Assert": "Check for 401 status and appropriate error message"
    },
    "Validation": "Ensures API enforces authentication"
  },
  {
    "ScenarioID": "5",
    "TestName": "testInvalidAuthToken",
    "Description": "Test request with invalid authorization token",
    "Execution": {
      "Arrange": "Prepare valid query params and invalid auth token",
      "Act": "Send GET request to /products:search with invalid auth token",
      "Assert": "Check for 403 status and appropriate error message"
    },
    "Validation": "Ensures API validates auth token correctly"
  },
  {
    "ScenarioID": "6",
    "TestName": "testEmptyBrandName",
    "Description": "Test request with empty brand_name",
    "Execution": {
      "Arrange": "Prepare query params with empty 'brand_name'",
      "Act": "Send GET request to /products:search with empty brand_name",
      "Assert": "Check for 400 status and appropriate error message"
    },
    "Validation": "Ensures API handles empty required parameters correctly"
  },
  {
    "ScenarioID": "7",
    "TestName": "testNoProductFound",
    "Description": "Test request with valid params but no matching product",
    "Execution": {
      "Arrange": "Prepare query params for non-existent product",
      "Act": "Send GET request to /products:search with valid params for non-existent product",
      "Assert": "Check for 200 status and response body contains error message 'No product found matching the provided search criteria'"
    },
    "Validation": "Ensures API returns appropriate message when no product is found"
  },
  {
    "ScenarioID": "8",
    "TestName": "testInvalidUPCFormat",
    "Description": "Test request with invalid UPC format",
    "Execution": {
      "Arrange": "Prepare query params with invalid 'upc' format (e.g., non-numeric)",
      "Act": "Send GET request to /products:search with invalid UPC format",
      "Assert": "Check for 400 status and appropriate error message"
    },
    "Validation": "Ensures API validates UPC format correctly"
  },
  {
    "ScenarioID": "9",
    "TestName": "testInvalidModelNumberType",
    "Description": "Test request with invalid model_number type",
    "Execution": {
      "Arrange": "Prepare query params with 'model_number' as non-string type (e.g., integer)",
      "Act": "Send GET request to /products:search with invalid model_number type",
      "Assert": "Check for 400 status and appropriate error message"
    },
    "Validation": "Ensures API validates model_number type correctly"
  },
  {
    "ScenarioID": "10",
    "TestName": "testNullProductDescription",
    "Description": "Test request with null product_description",
    "Execution": {
      "Arrange": "Prepare query params with 'product_description' as null",
      "Act": "Send GET request to /products:search with null product_description",
      "Assert": "Check for 400 status and appropriate error message"
    },
    "Validation": "Ensures API handles null values correctly"
  }
]

*/

// ********RoostGPT********
package org.springframework.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import org.json.JSONObject;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.MatcherAssert.assertThat;

public class ProductsSearchGetTest {

    private List<JSONObject> testCases;

    @BeforeEach
    public void setUp() {
        TestdataLoader dataloader = new TestdataLoader();
        testCases = dataloader.loadJson("src/test/java/org/springframework/RoostTest/products:searchGetTest.JSON");
    }

    @Test
    public void testProductsSearchGet() {
        setUp();
        int testNumber = 1;
        for (JSONObject testData : testCases) {
            RestAssured.baseURI = "https://api-staging.smartersorting.com/v1/marketplace";

            JSONObject requestHeader = testData.optJSONObject("request_header");
            JSONObject requestBody = testData.optJSONObject("request_body");
            JSONObject queryParams = testData.optJSONObject("query_params");
            JSONObject pathParams = testData.optJSONObject("path_params");
            String requestPath = "/products:search";

            if (pathParams != null) {
                for (String key : pathParams.keySet()) {
                    requestPath = requestPath.replace("{" + key + "}", pathParams.getString(key));
                }
            }

            RequestSpecification req = given();

            // Resolve Authorization token priority: ENV > Param(RoostENV) > JSON
            String userEnvAuthToken = System.getenv("AUTH_TOKEN");
            String resolvedAuthToken = (userEnvAuthToken != null && !userEnvAuthToken.isEmpty()) ? userEnvAuthToken : "apis/SmarterSorting-marketplace-api-0.0.8-resolved.yaml";

            boolean authSet = false;
            if (requestHeader != null) {
                Iterator<String> keys = requestHeader.keys();
                while (keys.hasNext()) {
                    String key = keys.next();
                    String value = requestHeader.getString(key);

                    if (key.equalsIgnoreCase("Authorization")) {
                        if (value.equalsIgnoreCase("${AUTH_TOKEN}") && resolvedAuthToken != null && !resolvedAuthToken.isEmpty()) {
                            req.header("Authorization", "Bearer " + resolvedAuthToken);
                            authSet = true;
                        } else {
                            req.header(key, value);
                            authSet = true;
                        }
                    } else {
                        req.header(key, value);
                    }
                }
            }

            if (!authSet && resolvedAuthToken != null && !resolvedAuthToken.isEmpty()) {
                req.header("Authorization", "Bearer " + resolvedAuthToken);
            }

            if (queryParams != null) {
                for (String key : queryParams.keySet()) {
                    req.queryParam(key, queryParams.get(key));
                }
            }

            if (requestBody != null && requestBody.length() > 0) {
                req.body(requestBody.toString());
            }

            Response responseObj = req.when().get(requestPath);

            System.out.printf("Test Case %d: ProductsSearchGet_Test\n", testNumber++);
            System.out.println("Request: GET " + requestPath);
            System.out.println("Status Code: " + responseObj.statusCode());

            if (testData.has("expected_status_code")) {
                int expectedCode = testData.getInt("expected_status_code");
                assertThat(
                    "Expected status code " + expectedCode + " but got " + responseObj.statusCode(),
                    responseObj.statusCode(),
                    equalTo(expectedCode)
                );

                // Validate response based on status code
                switch (expectedCode) {
                    case 200:
                        validateSuccessResponse(responseObj, testData);
                        break;
                    case 400:
                        validateErrorResponse(responseObj);
                        break;
                    case 401:
                        validateUnauthorizedResponse(responseObj);
                        break;
                    case 403:
                        validateForbiddenResponse(responseObj);
                        break;
                    case 404:
                        validateNotFoundResponse(responseObj);
                        break;
                    case 422:
                        validateUnprocessableEntityResponse(responseObj);
                        break;
                    default:
                        throw new RuntimeException("Unsupported status code: " + expectedCode);
                }
            }
        }
    }

    private void validateSuccessResponse(Response response, JSONObject testData) {
        // Validate the success response based on the test data
        if (testData.has("expected_response")) {
            JSONObject expectedResponse = testData.getJSONObject("expected_response");
            if (expectedResponse.has("product_details")) {
                assertThat("Response should contain product details",
                    response.jsonPath().getList("product_details"), notNullValue());
            } else if (expectedResponse.has("error_message")) {
                assertThat("Response should contain error message",
                    response.jsonPath().getString("error_message"), equalTo("No product found matching the provided search criteria"));
            }
        }
    }

    private void validateErrorResponse(Response response) {
        // Validate the 400 Bad Request response
        assertThat("Response should contain error details",
            response.jsonPath().getString("error"), notNullValue());
        assertThat("Error message should be appropriate",
            response.jsonPath().getString("error.message"), notNullValue());
    }

    private void validateUnauthorizedResponse(Response response) {
        // Validate the 401 Unauthorized response
        assertThat("Response should contain error details",
            response.jsonPath().getString("error"), notNullValue());
        assertThat("Error message should indicate missing authentication",
            response.jsonPath().getString("error.message"), equalTo("Authentication required"));
    }

    private void validateForbiddenResponse(Response response) {
        // Validate the 403 Forbidden response
        assertThat("Response should contain error details",
            response.jsonPath().getString("error"), notNullValue());
        assertThat("Error message should indicate invalid authentication",
            response.jsonPath().getString("error.message"), equalTo("Invalid authentication token"));
    }

    private void validateNotFoundResponse(Response response) {
        // Validate the 404 Not Found response
        assertThat("Response should contain error details",
            response.jsonPath().getString("error"), notNullValue());
        assertThat("Error message should indicate resource not found",
            response.jsonPath().getString("error.message"), equalTo("Resource not found"));
    }

    private void validateUnprocessableEntityResponse(Response response) {
        // Validate the 422 Unprocessable Entity response
        assertThat("Response should contain error details",
            response.jsonPath().getString("error"), notNullValue());
        assertThat("Error message should indicate unprocessable entity",
            response.jsonPath().getString("error.message"), equalTo("Unprocessable entity"));
    }
}
