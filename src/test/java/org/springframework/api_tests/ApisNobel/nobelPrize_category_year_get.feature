# ********RoostGPT********

# Test generated by RoostGPT for test swagger-api-test using AI Type Azure Open AI and AI Model roostgpt-4-32k
# 
# Feature file generated for /nobelPrize/{category}/{year}_get for http method type GET 
# RoostTestHash=9818bf6b39
# 
# 

# ********RoostGPT********
Feature: Nobel Prize API Feature

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase

  Scenario Outline: Validate successful response for Nobel Prize search
    Given path '2.1/nobelPrize', '<category>', '<year>'
    When method GET
    Then status 200
    And match response.nobelPrize == """ #object """
    And match response.nobelPrize.awardYear == """ #number """
    And match response.nobelPrize.category == """ #object """
    And match response.nobelPrize.category.en == """ #string """
    And match response.nobelPrize.category.se == """ #string """
    And match response.nobelPrize.categoryFullName == """ #object """
    And match response.nobelPrize.categoryFullName.en == """ #string """
    And match response.nobelPrize.categoryFullName.se == """ #string """
    And match response.nobelPrize.dateAwarded == """ #regex ^\\d{4}-\\d{2}-\\d{2} """
    And match response.nobelPrize.prizeAmount == """ #number """
    And match response.nobelPrize.prizeAmountAdjusted == """ #number """
    And match response.nobelPrize.topMotivation == """ #object """
    And match response.nobelPrize.topMotivation.en == """ #string """
    And match response.nobelPrize.laureates == """ #array """
    And match response.nobelPrize.laureates[*] == """ #object """
    And match response.nobelPrize.laureates[*].id == """ #number """
    And match response.nobelPrize.laureates[*].name == """ #object """
    And match response.nobelPrize.laureates[*].name.en == """ #string """
    And match response.nobelPrize.laureates[*].portion == """ #string """
    And match response.nobelPrize.laureates[*].sortOrder == """ #string """
    And match response.nobelPrize.laureates[*].motivation == """ #object """
    And match response.nobelPrize.laureates[*].motivation.en == """ #string """
    And match response.nobelPrize.laureates[*].links == """ #array """
    And match response.nobelPrize.laureates[*].links[*].rel == """ #string """
    And match response.nobelPrize.laureates[*].links[*].href == """ #string """
    And match response.nobelPrize.laureates[*].links[*].action == """ #string """

    Examples:
      | read('nobelPrize_category_year_get.csv') |

  Scenario Outline: Validate bad request response for malformed syntax
    Given path '2.1/nobelPrize', '<category>', '<year>'
    When method GET
    Then status 400
    And match response.code == """ '404' """
    And match response.message == """ #string """

    Examples:
      | category | year  |
      | ''       |  1900 |
      | 'chem'   | 'xyz' |

  Scenario Outline: Validate resource not found response
    Given path '2.1/nobelPrize', '<category>', '<year>'
    When method GET
    Then status 404
    And match response.code == """ '404' """
    And match response.message == """ #string """

    Examples:
      | category  | year |
      | 'unknown' | 2023 |

  Scenario Outline: Validate unprocessable entity due to semantic errors
    Given path '2.1/nobelPrize', '<category>', '<year>'
    When method GET
    Then status 422
    And match response.code == """ '404' """
    And match response.message == """ #string """

    Examples:
      | category | year  |
      | ''       |  1900 |
      | 'chem'   | 12345 |
