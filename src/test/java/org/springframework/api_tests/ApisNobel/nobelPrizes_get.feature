# ********RoostGPT********

# Test generated by RoostGPT for test swagger-api-test using AI Type Azure Open AI and AI Model roostgpt-4-32k
# 
# Feature file generated for /nobelPrizes_get for http method type GET 
# RoostTestHash=977dd819cb
# 
# 

# ********RoostGPT********
Feature: Testing Nobel Prizes RESTful API

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase

  Scenario Outline: Retrieve Nobel Prizes with different query parameters
    Given path '/2.1/nobelPrizes'
    And param offset = <offset>
    And param limit = <limit>
    And param sort = <sort>
    And param nobelPrizeYear = <nobelPrizeYear>
    And param yearTo = <yearTo>
    And param nobelPrizeCategory = <nobelPrizeCategory>
    And param format = <format>
    And param csvLang = <csvLang>
    When method GET
    Then status 200
    And match response.nobelPrizes == '#[]'
    And match response.meta ==
      """
      {
        offset: '#number',
        limit: '#number',
        nobelPrizeYear: '#number',
        yearTo: '#number',
        nobelPrizeCategory: '#string',
        count: '#number'
      }
      """
    And match response.links == '#array'

    Examples:
      | read('nobelPrizes_get.csv') |

  Scenario: Test response structure for successful call
    Given path '/2.1/nobelPrizes'
    When method GET
    Then status 200
    And match response.nobelPrizes == '#[]'
    And match each response.nobelPrizes ==
      """
      {
        awardYear: '#number',
        category: { en: '#string', se: '#string' },
        categoryFullName: { en: '#string', se: '#string' },
        dateAwarded: '#string',
        prizeAmount: '#number',
        prizeAmountAdjusted: '#number',
        topMotivation: '#object',
        laureates: '#array'
      }
      """
    And match each response.nobelPrizes[*].laureates ==
      """
      {
        id: '#number',
        name: { en: '#string', se: '#string' },
        portion: '#string',
        sortOrder: '#number',
        motivation: { en: '#string', se: '#string' }
      }
      """

  Scenario: Test for 400 Bad Request
    Given path '/2.1/nobelPrizes'
    And param limit = 0
    When method GET
    Then status 400
    And match response ==
      """
      {
        code: '#string',
        message: '#string'
      }
      """

  Scenario Outline: Test for 404 Not Found
    Given path '/2.1/nobelPrizes'
    And param nobelPrizeYear = <invalidYear>
    When method GET
    Then status 404
    And match response ==
      """
      {
        code: '#string',
        message: '#string'
      }
      """

    Examples:
      | invalidYear |
      |        1800 |
      |        2200 |

  Scenario: Test for 422 Unprocessable Entity
    Given path '/2.1/nobelPrizes'
    And param sort = 'invalid_sort'
    When method GET
    Then status 422
    And match response ==
      """
      {
        code: '#string',
        message: '#string'
      }
      """
