# ********RoostGPT********

# Test generated by RoostGPT for test api-swagger using AI Type Azure Open AI and AI Model Inference
# 
# Feature file generated for /employees_get for http method type GET 
# RoostTestHash=48e4dd6cd8
# 
# 

# ********RoostGPT********
Feature: Employee API

  Background:
    * def urlBase = karate.properties['URL_BASE']
    * url urlBase

  Scenario Outline: Search employees with valid query parameters
    * def queryParams = { searchString: '<searchString>' }
    * method get
    * path '/employees'
    * param queryParams
    * status 200
    * match response == '#[]'
    * match response contains { id: '#string', jobTitle: '#string', name: '#string', email: '#string' }
    * match response[*].id == '#string'
    * match response[*].jobTitle == '#string'
    * match response[*].name == '#string'
    * match response[*].email == '#string'
    * match response[*].id contains 'uuid'
    * match response[*].jobTitle contains 'System Analyst'
    * match response[*].name contains 'John Smith'
    * match response[*].email contains 'john.smith@acme-corp.com'

    Examples:
      | read('employees_get.csv') |

  Scenario: Search employees without query parameters
    * method get
    * path '/employees'
    * status 200
    * match response == '#[]'
    * match response contains { id: '#string', jobTitle: '#string', name: '#string', email: '#string' }
    * match response[*].id == '#string'
    * match response[*].jobTitle == '#string'
    * match response[*].name == '#string'
    * match response[*].email == '#string'
    * match response[*].id contains 'uuid'
    * match response[*].jobTitle contains 'System Analyst'
    * match response[*].name contains 'John Smith'
    * match response[*].email contains 'john.smith@acme-corp.com'

  Scenario: Search employees with invalid query parameters
    * def queryParams = { searchString: 'invalid' }
    * method get
    * path '/employees'
    * param queryParams
    * status 400
