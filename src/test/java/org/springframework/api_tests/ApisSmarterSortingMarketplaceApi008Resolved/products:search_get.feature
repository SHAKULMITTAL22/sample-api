# ********RoostGPT********

# Test generated by RoostGPT for test api-swagger using AI Type Azure Open AI and AI Model Inference
# 
# Feature file generated for /products:search_get for http method type GET 
# RoostTestHash=824ef8445c
# 
# 

# ********RoostGPT********
Feature: Search for product details and classification outputs for a product

  Background:
    * def urlBase = karate.properties['URL_BASE']
    * url urlBase
    * configure headers = { Authorization: #(karate.properties['AUTH_TOKEN']) }

  Scenario Outline: Search for product details with valid parameters
    Given url '/products:search'
    And param brand_name = '<brand_name>'
    And param product_name = '<product_name>'
    And param upc = '<upc>'
    And param model_number = '<model_number>'
    And param confidence_model = <confidence_model>
    And param product_description = '<product_description>'
    When method get
    Then status 200
    And match response.source_integrity.score == '#string'
    And match response.source_integrity.source == '#string'
    And match response.source_integrity.reason == '#string'
    And match response.path == '/products:search'

    Examples:
      | read('products:search_get.csv') |

  Scenario Outline: Search for product details with invalid parameters
    Given url '/products:search'
    And param brand_name = '<brand_name>'
    And param product_name = '<product_name>'
    And param upc = '<upc>'
    And param model_number = '<model_number>'
    And param confidence_model = <confidence_model>
    And param product_description = '<product_description>'
    When method get
    Then status 200
    And match response.error == '#string'
    And match response.path == '/products:search'

    Examples:
      | read('products:search_get.csv') |

  Scenario Outline: Search for product details with missing required parameters
    Given url '/products:search'
    And param brand_name = '<brand_name>'
    And param product_name = '<product_name>'
    And param upc = '<upc>'
    And param model_number = '<model_number>'
    And param confidence_model = <confidence_model>
    And param product_description = '<product_description>'
    When method get
    Then status 400
    And match response.error == '#string'
    And match response.path == '/products:search'

    Examples:
      | brand_name | product_name                                | upc            | model_number | confidence_model | product_description                                                                                                                                                                           |
      | Clorox     | Clorox Clinical Germicidal Cleaner + Bleach | 00048415000093 |       123456 |                  | Specially formulated to kill more than 50 microorganisms, including C. diff and the COVID-19 Virus1. This 3-in-1 solution cleans, disinfects and deodorizes with the power of CloroxÂ® bleach. |
      | Clorox     | Clorox Clinical Germicidal Cleaner + Bleach | 00048415000093 |       123456 |               98 |                                                                                                                                                                                               |
