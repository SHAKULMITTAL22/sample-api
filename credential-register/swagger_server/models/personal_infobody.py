# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class PersonalInfobody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, customer_id: float=None, dob: str=None, ssn: float=None, secrect_password: str=None, acc_number: str=None, last_deposit_amt: float=None):  # noqa: E501
        """PersonalInfobody - a model defined in Swagger

        :param customer_id: The customer_id of this PersonalInfobody.  # noqa: E501
        :type customer_id: float
        :param dob: The dob of this PersonalInfobody.  # noqa: E501
        :type dob: str
        :param ssn: The ssn of this PersonalInfobody.  # noqa: E501
        :type ssn: float
        :param secrect_password: The secrect_password of this PersonalInfobody.  # noqa: E501
        :type secrect_password: str
        :param acc_number: The acc_number of this PersonalInfobody.  # noqa: E501
        :type acc_number: str
        :param last_deposit_amt: The last_deposit_amt of this PersonalInfobody.  # noqa: E501
        :type last_deposit_amt: float
        """
        self.swagger_types = {
            'customer_id': float,
            'dob': str,
            'ssn': float,
            'secrect_password': str,
            'acc_number': str,
            'last_deposit_amt': float
        }

        self.attribute_map = {
            'customer_id': 'customerId',
            'dob': 'dob',
            'ssn': 'ssn',
            'secrect_password': 'secrectPassword',
            'acc_number': 'AccNumber',
            'last_deposit_amt': 'lastDepositAmt'
        }
        self._customer_id = customer_id
        self._dob = dob
        self._ssn = ssn
        self._secrect_password = secrect_password
        self._acc_number = acc_number
        self._last_deposit_amt = last_deposit_amt

    @classmethod
    def from_dict(cls, dikt) -> 'PersonalInfobody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The personalInfobody of this PersonalInfobody.  # noqa: E501
        :rtype: PersonalInfobody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_id(self) -> float:
        """Gets the customer_id of this PersonalInfobody.


        :return: The customer_id of this PersonalInfobody.
        :rtype: float
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id: float):
        """Sets the customer_id of this PersonalInfobody.


        :param customer_id: The customer_id of this PersonalInfobody.
        :type customer_id: float
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")  # noqa: E501

        self._customer_id = customer_id

    @property
    def dob(self) -> str:
        """Gets the dob of this PersonalInfobody.


        :return: The dob of this PersonalInfobody.
        :rtype: str
        """
        return self._dob

    @dob.setter
    def dob(self, dob: str):
        """Sets the dob of this PersonalInfobody.


        :param dob: The dob of this PersonalInfobody.
        :type dob: str
        """

        self._dob = dob

    @property
    def ssn(self) -> float:
        """Gets the ssn of this PersonalInfobody.


        :return: The ssn of this PersonalInfobody.
        :rtype: float
        """
        return self._ssn

    @ssn.setter
    def ssn(self, ssn: float):
        """Sets the ssn of this PersonalInfobody.


        :param ssn: The ssn of this PersonalInfobody.
        :type ssn: float
        """

        self._ssn = ssn

    @property
    def secrect_password(self) -> str:
        """Gets the secrect_password of this PersonalInfobody.


        :return: The secrect_password of this PersonalInfobody.
        :rtype: str
        """
        return self._secrect_password

    @secrect_password.setter
    def secrect_password(self, secrect_password: str):
        """Sets the secrect_password of this PersonalInfobody.


        :param secrect_password: The secrect_password of this PersonalInfobody.
        :type secrect_password: str
        """

        self._secrect_password = secrect_password

    @property
    def acc_number(self) -> str:
        """Gets the acc_number of this PersonalInfobody.


        :return: The acc_number of this PersonalInfobody.
        :rtype: str
        """
        return self._acc_number

    @acc_number.setter
    def acc_number(self, acc_number: str):
        """Sets the acc_number of this PersonalInfobody.


        :param acc_number: The acc_number of this PersonalInfobody.
        :type acc_number: str
        """

        self._acc_number = acc_number

    @property
    def last_deposit_amt(self) -> float:
        """Gets the last_deposit_amt of this PersonalInfobody.


        :return: The last_deposit_amt of this PersonalInfobody.
        :rtype: float
        """
        return self._last_deposit_amt

    @last_deposit_amt.setter
    def last_deposit_amt(self, last_deposit_amt: float):
        """Sets the last_deposit_amt of this PersonalInfobody.


        :param last_deposit_amt: The last_deposit_amt of this PersonalInfobody.
        :type last_deposit_amt: float
        """

        self._last_deposit_amt = last_deposit_amt
