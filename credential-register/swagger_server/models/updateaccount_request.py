# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class UpdateaccountRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, account_number: str=None, customer_id: float=None, email: str=None, alternate_phone_number: float=None, is_alternate_mobile_number: bool=None, phone: float=None, is_primary_mobile_number: bool=None, location: str=None, is_statement: bool=None):  # noqa: E501
        """UpdateaccountRequest - a model defined in Swagger

        :param account_number: The account_number of this UpdateaccountRequest.  # noqa: E501
        :type account_number: str
        :param customer_id: The customer_id of this UpdateaccountRequest.  # noqa: E501
        :type customer_id: float
        :param email: The email of this UpdateaccountRequest.  # noqa: E501
        :type email: str
        :param alternate_phone_number: The alternate_phone_number of this UpdateaccountRequest.  # noqa: E501
        :type alternate_phone_number: float
        :param is_alternate_mobile_number: The is_alternate_mobile_number of this UpdateaccountRequest.  # noqa: E501
        :type is_alternate_mobile_number: bool
        :param phone: The phone of this UpdateaccountRequest.  # noqa: E501
        :type phone: float
        :param is_primary_mobile_number: The is_primary_mobile_number of this UpdateaccountRequest.  # noqa: E501
        :type is_primary_mobile_number: bool
        :param location: The location of this UpdateaccountRequest.  # noqa: E501
        :type location: str
        :param is_statement: The is_statement of this UpdateaccountRequest.  # noqa: E501
        :type is_statement: bool
        """
        self.swagger_types = {
            'account_number': str,
            'customer_id': float,
            'email': str,
            'alternate_phone_number': float,
            'is_alternate_mobile_number': bool,
            'phone': float,
            'is_primary_mobile_number': bool,
            'location': str,
            'is_statement': bool
        }

        self.attribute_map = {
            'account_number': 'accountNumber',
            'customer_id': 'customerId',
            'email': 'email',
            'alternate_phone_number': 'alternatePhoneNumber',
            'is_alternate_mobile_number': 'isAlternateMobileNumber',
            'phone': 'phone',
            'is_primary_mobile_number': 'isPrimaryMobileNumber',
            'location': 'location',
            'is_statement': 'isStatement'
        }
        self._account_number = account_number
        self._customer_id = customer_id
        self._email = email
        self._alternate_phone_number = alternate_phone_number
        self._is_alternate_mobile_number = is_alternate_mobile_number
        self._phone = phone
        self._is_primary_mobile_number = is_primary_mobile_number
        self._location = location
        self._is_statement = is_statement

    @classmethod
    def from_dict(cls, dikt) -> 'UpdateaccountRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The updateaccountRequest of this UpdateaccountRequest.  # noqa: E501
        :rtype: UpdateaccountRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_number(self) -> str:
        """Gets the account_number of this UpdateaccountRequest.


        :return: The account_number of this UpdateaccountRequest.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number: str):
        """Sets the account_number of this UpdateaccountRequest.


        :param account_number: The account_number of this UpdateaccountRequest.
        :type account_number: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")  # noqa: E501

        self._account_number = account_number

    @property
    def customer_id(self) -> float:
        """Gets the customer_id of this UpdateaccountRequest.


        :return: The customer_id of this UpdateaccountRequest.
        :rtype: float
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id: float):
        """Sets the customer_id of this UpdateaccountRequest.


        :param customer_id: The customer_id of this UpdateaccountRequest.
        :type customer_id: float
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")  # noqa: E501

        self._customer_id = customer_id

    @property
    def email(self) -> str:
        """Gets the email of this UpdateaccountRequest.


        :return: The email of this UpdateaccountRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this UpdateaccountRequest.


        :param email: The email of this UpdateaccountRequest.
        :type email: str
        """

        self._email = email

    @property
    def alternate_phone_number(self) -> float:
        """Gets the alternate_phone_number of this UpdateaccountRequest.


        :return: The alternate_phone_number of this UpdateaccountRequest.
        :rtype: float
        """
        return self._alternate_phone_number

    @alternate_phone_number.setter
    def alternate_phone_number(self, alternate_phone_number: float):
        """Sets the alternate_phone_number of this UpdateaccountRequest.


        :param alternate_phone_number: The alternate_phone_number of this UpdateaccountRequest.
        :type alternate_phone_number: float
        """

        self._alternate_phone_number = alternate_phone_number

    @property
    def is_alternate_mobile_number(self) -> bool:
        """Gets the is_alternate_mobile_number of this UpdateaccountRequest.


        :return: The is_alternate_mobile_number of this UpdateaccountRequest.
        :rtype: bool
        """
        return self._is_alternate_mobile_number

    @is_alternate_mobile_number.setter
    def is_alternate_mobile_number(self, is_alternate_mobile_number: bool):
        """Sets the is_alternate_mobile_number of this UpdateaccountRequest.


        :param is_alternate_mobile_number: The is_alternate_mobile_number of this UpdateaccountRequest.
        :type is_alternate_mobile_number: bool
        """

        self._is_alternate_mobile_number = is_alternate_mobile_number

    @property
    def phone(self) -> float:
        """Gets the phone of this UpdateaccountRequest.


        :return: The phone of this UpdateaccountRequest.
        :rtype: float
        """
        return self._phone

    @phone.setter
    def phone(self, phone: float):
        """Sets the phone of this UpdateaccountRequest.


        :param phone: The phone of this UpdateaccountRequest.
        :type phone: float
        """

        self._phone = phone

    @property
    def is_primary_mobile_number(self) -> bool:
        """Gets the is_primary_mobile_number of this UpdateaccountRequest.


        :return: The is_primary_mobile_number of this UpdateaccountRequest.
        :rtype: bool
        """
        return self._is_primary_mobile_number

    @is_primary_mobile_number.setter
    def is_primary_mobile_number(self, is_primary_mobile_number: bool):
        """Sets the is_primary_mobile_number of this UpdateaccountRequest.


        :param is_primary_mobile_number: The is_primary_mobile_number of this UpdateaccountRequest.
        :type is_primary_mobile_number: bool
        """

        self._is_primary_mobile_number = is_primary_mobile_number

    @property
    def location(self) -> str:
        """Gets the location of this UpdateaccountRequest.


        :return: The location of this UpdateaccountRequest.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location: str):
        """Sets the location of this UpdateaccountRequest.


        :param location: The location of this UpdateaccountRequest.
        :type location: str
        """

        self._location = location

    @property
    def is_statement(self) -> bool:
        """Gets the is_statement of this UpdateaccountRequest.


        :return: The is_statement of this UpdateaccountRequest.
        :rtype: bool
        """
        return self._is_statement

    @is_statement.setter
    def is_statement(self, is_statement: bool):
        """Sets the is_statement of this UpdateaccountRequest.


        :param is_statement: The is_statement of this UpdateaccountRequest.
        :type is_statement: bool
        """

        self._is_statement = is_statement
