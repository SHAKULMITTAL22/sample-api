# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.get_account_data_accounts_card_details import GetAccountDataAccountsCardDetails  # noqa: F401,E501
from swagger_server.models.get_account_data_personal_banker_contact import GetAccountDataPersonalBankerContact  # noqa: F401,E501
from swagger_server import util


class GetAccountDataAccounts(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, customer_id: float=None, account_name: str=None, account_nickname: str=None, account_number: str=None, account_type: str=None, activated_date: str=None, available_balance: float=None, available_cash: float=None, available_cash_limit: float=None, available_credit: float=None, bank_name: str=None, branch_name: str=None, card_name: str=None, card_number: str=None, card_status: str=None, card_type: str=None, credit_limit: float=None, currency: str=None, current_balance: float=None, deactivated_date: str=None, due_amount: float=None, due_date: str=None, early_withdrawal_penalty: float=None, email: str=None, exp_date: str=None, fd_type: str=None, image: str=None, interest_rate: float=None, internal_transfer_from_enabled: bool=None, internal_transfer_to_enabled: bool=None, is_primary_mobile: bool=None, is_alternate_mobile_number: bool=None, is_statement: bool=None, last_draw_date: str=None, loan_maturity_date: str=None, loan_origination_date: str=None, location: str=None, last_updated: str=None, max_transaction_limit: str=None, maturity_date: str=None, minimum_payment_due: str=None, minimum_balance: str=None, monthly_payment: float=None, opening_balance: float=None, original_loan_amount: float=None, p2_p_limit: float=None, p2p_enabled: float=None, paybill_enabled: bool=None, payoff_amount: float=None, personal_banker_name: str=None, personal_banker_contact: GetAccountDataPersonalBankerContact=None, phone: float=None, posted_balance: float=None, principal_balance: str=None, product_code: str=None, product_name: str=None, property_address: str=None, reward_points: str=None, routing_number: str=None, statement_date: str=None, status: str=None, swift_code: str=None, total_balance: float=None, unbilled_amount: float=None, value_at_maturity: float=None, hold_amount: float=None, unclear_funds_amount: float=None, average_monthly_balance: float=None, net_withdrawable_balance: float=None, total_tenure: str=None, remaining_tenure: str=None, debit_account_number: str=None, late_fee: float=None, bounce_charge: float=None, total_charges: float=None, over_due_amount: float=None, card_details: List[GetAccountDataAccountsCardDetails]=None, is_cross_account: bool=None):  # noqa: E501
        """GetAccountDataAccounts - a model defined in Swagger

        :param customer_id: The customer_id of this GetAccountDataAccounts.  # noqa: E501
        :type customer_id: float
        :param account_name: The account_name of this GetAccountDataAccounts.  # noqa: E501
        :type account_name: str
        :param account_nickname: The account_nickname of this GetAccountDataAccounts.  # noqa: E501
        :type account_nickname: str
        :param account_number: The account_number of this GetAccountDataAccounts.  # noqa: E501
        :type account_number: str
        :param account_type: The account_type of this GetAccountDataAccounts.  # noqa: E501
        :type account_type: str
        :param activated_date: The activated_date of this GetAccountDataAccounts.  # noqa: E501
        :type activated_date: str
        :param available_balance: The available_balance of this GetAccountDataAccounts.  # noqa: E501
        :type available_balance: float
        :param available_cash: The available_cash of this GetAccountDataAccounts.  # noqa: E501
        :type available_cash: float
        :param available_cash_limit: The available_cash_limit of this GetAccountDataAccounts.  # noqa: E501
        :type available_cash_limit: float
        :param available_credit: The available_credit of this GetAccountDataAccounts.  # noqa: E501
        :type available_credit: float
        :param bank_name: The bank_name of this GetAccountDataAccounts.  # noqa: E501
        :type bank_name: str
        :param branch_name: The branch_name of this GetAccountDataAccounts.  # noqa: E501
        :type branch_name: str
        :param card_name: The card_name of this GetAccountDataAccounts.  # noqa: E501
        :type card_name: str
        :param card_number: The card_number of this GetAccountDataAccounts.  # noqa: E501
        :type card_number: str
        :param card_status: The card_status of this GetAccountDataAccounts.  # noqa: E501
        :type card_status: str
        :param card_type: The card_type of this GetAccountDataAccounts.  # noqa: E501
        :type card_type: str
        :param credit_limit: The credit_limit of this GetAccountDataAccounts.  # noqa: E501
        :type credit_limit: float
        :param currency: The currency of this GetAccountDataAccounts.  # noqa: E501
        :type currency: str
        :param current_balance: The current_balance of this GetAccountDataAccounts.  # noqa: E501
        :type current_balance: float
        :param deactivated_date: The deactivated_date of this GetAccountDataAccounts.  # noqa: E501
        :type deactivated_date: str
        :param due_amount: The due_amount of this GetAccountDataAccounts.  # noqa: E501
        :type due_amount: float
        :param due_date: The due_date of this GetAccountDataAccounts.  # noqa: E501
        :type due_date: str
        :param early_withdrawal_penalty: The early_withdrawal_penalty of this GetAccountDataAccounts.  # noqa: E501
        :type early_withdrawal_penalty: float
        :param email: The email of this GetAccountDataAccounts.  # noqa: E501
        :type email: str
        :param exp_date: The exp_date of this GetAccountDataAccounts.  # noqa: E501
        :type exp_date: str
        :param fd_type: The fd_type of this GetAccountDataAccounts.  # noqa: E501
        :type fd_type: str
        :param image: The image of this GetAccountDataAccounts.  # noqa: E501
        :type image: str
        :param interest_rate: The interest_rate of this GetAccountDataAccounts.  # noqa: E501
        :type interest_rate: float
        :param internal_transfer_from_enabled: The internal_transfer_from_enabled of this GetAccountDataAccounts.  # noqa: E501
        :type internal_transfer_from_enabled: bool
        :param internal_transfer_to_enabled: The internal_transfer_to_enabled of this GetAccountDataAccounts.  # noqa: E501
        :type internal_transfer_to_enabled: bool
        :param is_primary_mobile: The is_primary_mobile of this GetAccountDataAccounts.  # noqa: E501
        :type is_primary_mobile: bool
        :param is_alternate_mobile_number: The is_alternate_mobile_number of this GetAccountDataAccounts.  # noqa: E501
        :type is_alternate_mobile_number: bool
        :param is_statement: The is_statement of this GetAccountDataAccounts.  # noqa: E501
        :type is_statement: bool
        :param last_draw_date: The last_draw_date of this GetAccountDataAccounts.  # noqa: E501
        :type last_draw_date: str
        :param loan_maturity_date: The loan_maturity_date of this GetAccountDataAccounts.  # noqa: E501
        :type loan_maturity_date: str
        :param loan_origination_date: The loan_origination_date of this GetAccountDataAccounts.  # noqa: E501
        :type loan_origination_date: str
        :param location: The location of this GetAccountDataAccounts.  # noqa: E501
        :type location: str
        :param last_updated: The last_updated of this GetAccountDataAccounts.  # noqa: E501
        :type last_updated: str
        :param max_transaction_limit: The max_transaction_limit of this GetAccountDataAccounts.  # noqa: E501
        :type max_transaction_limit: str
        :param maturity_date: The maturity_date of this GetAccountDataAccounts.  # noqa: E501
        :type maturity_date: str
        :param minimum_payment_due: The minimum_payment_due of this GetAccountDataAccounts.  # noqa: E501
        :type minimum_payment_due: str
        :param minimum_balance: The minimum_balance of this GetAccountDataAccounts.  # noqa: E501
        :type minimum_balance: str
        :param monthly_payment: The monthly_payment of this GetAccountDataAccounts.  # noqa: E501
        :type monthly_payment: float
        :param opening_balance: The opening_balance of this GetAccountDataAccounts.  # noqa: E501
        :type opening_balance: float
        :param original_loan_amount: The original_loan_amount of this GetAccountDataAccounts.  # noqa: E501
        :type original_loan_amount: float
        :param p2_p_limit: The p2_p_limit of this GetAccountDataAccounts.  # noqa: E501
        :type p2_p_limit: float
        :param p2p_enabled: The p2p_enabled of this GetAccountDataAccounts.  # noqa: E501
        :type p2p_enabled: float
        :param paybill_enabled: The paybill_enabled of this GetAccountDataAccounts.  # noqa: E501
        :type paybill_enabled: bool
        :param payoff_amount: The payoff_amount of this GetAccountDataAccounts.  # noqa: E501
        :type payoff_amount: float
        :param personal_banker_name: The personal_banker_name of this GetAccountDataAccounts.  # noqa: E501
        :type personal_banker_name: str
        :param personal_banker_contact: The personal_banker_contact of this GetAccountDataAccounts.  # noqa: E501
        :type personal_banker_contact: GetAccountDataPersonalBankerContact
        :param phone: The phone of this GetAccountDataAccounts.  # noqa: E501
        :type phone: float
        :param posted_balance: The posted_balance of this GetAccountDataAccounts.  # noqa: E501
        :type posted_balance: float
        :param principal_balance: The principal_balance of this GetAccountDataAccounts.  # noqa: E501
        :type principal_balance: str
        :param product_code: The product_code of this GetAccountDataAccounts.  # noqa: E501
        :type product_code: str
        :param product_name: The product_name of this GetAccountDataAccounts.  # noqa: E501
        :type product_name: str
        :param property_address: The property_address of this GetAccountDataAccounts.  # noqa: E501
        :type property_address: str
        :param reward_points: The reward_points of this GetAccountDataAccounts.  # noqa: E501
        :type reward_points: str
        :param routing_number: The routing_number of this GetAccountDataAccounts.  # noqa: E501
        :type routing_number: str
        :param statement_date: The statement_date of this GetAccountDataAccounts.  # noqa: E501
        :type statement_date: str
        :param status: The status of this GetAccountDataAccounts.  # noqa: E501
        :type status: str
        :param swift_code: The swift_code of this GetAccountDataAccounts.  # noqa: E501
        :type swift_code: str
        :param total_balance: The total_balance of this GetAccountDataAccounts.  # noqa: E501
        :type total_balance: float
        :param unbilled_amount: The unbilled_amount of this GetAccountDataAccounts.  # noqa: E501
        :type unbilled_amount: float
        :param value_at_maturity: The value_at_maturity of this GetAccountDataAccounts.  # noqa: E501
        :type value_at_maturity: float
        :param hold_amount: The hold_amount of this GetAccountDataAccounts.  # noqa: E501
        :type hold_amount: float
        :param unclear_funds_amount: The unclear_funds_amount of this GetAccountDataAccounts.  # noqa: E501
        :type unclear_funds_amount: float
        :param average_monthly_balance: The average_monthly_balance of this GetAccountDataAccounts.  # noqa: E501
        :type average_monthly_balance: float
        :param net_withdrawable_balance: The net_withdrawable_balance of this GetAccountDataAccounts.  # noqa: E501
        :type net_withdrawable_balance: float
        :param total_tenure: The total_tenure of this GetAccountDataAccounts.  # noqa: E501
        :type total_tenure: str
        :param remaining_tenure: The remaining_tenure of this GetAccountDataAccounts.  # noqa: E501
        :type remaining_tenure: str
        :param debit_account_number: The debit_account_number of this GetAccountDataAccounts.  # noqa: E501
        :type debit_account_number: str
        :param late_fee: The late_fee of this GetAccountDataAccounts.  # noqa: E501
        :type late_fee: float
        :param bounce_charge: The bounce_charge of this GetAccountDataAccounts.  # noqa: E501
        :type bounce_charge: float
        :param total_charges: The total_charges of this GetAccountDataAccounts.  # noqa: E501
        :type total_charges: float
        :param over_due_amount: The over_due_amount of this GetAccountDataAccounts.  # noqa: E501
        :type over_due_amount: float
        :param card_details: The card_details of this GetAccountDataAccounts.  # noqa: E501
        :type card_details: List[GetAccountDataAccountsCardDetails]
        :param is_cross_account: The is_cross_account of this GetAccountDataAccounts.  # noqa: E501
        :type is_cross_account: bool
        """
        self.swagger_types = {
            'customer_id': float,
            'account_name': str,
            'account_nickname': str,
            'account_number': str,
            'account_type': str,
            'activated_date': str,
            'available_balance': float,
            'available_cash': float,
            'available_cash_limit': float,
            'available_credit': float,
            'bank_name': str,
            'branch_name': str,
            'card_name': str,
            'card_number': str,
            'card_status': str,
            'card_type': str,
            'credit_limit': float,
            'currency': str,
            'current_balance': float,
            'deactivated_date': str,
            'due_amount': float,
            'due_date': str,
            'early_withdrawal_penalty': float,
            'email': str,
            'exp_date': str,
            'fd_type': str,
            'image': str,
            'interest_rate': float,
            'internal_transfer_from_enabled': bool,
            'internal_transfer_to_enabled': bool,
            'is_primary_mobile': bool,
            'is_alternate_mobile_number': bool,
            'is_statement': bool,
            'last_draw_date': str,
            'loan_maturity_date': str,
            'loan_origination_date': str,
            'location': str,
            'last_updated': str,
            'max_transaction_limit': str,
            'maturity_date': str,
            'minimum_payment_due': str,
            'minimum_balance': str,
            'monthly_payment': float,
            'opening_balance': float,
            'original_loan_amount': float,
            'p2_p_limit': float,
            'p2p_enabled': float,
            'paybill_enabled': bool,
            'payoff_amount': float,
            'personal_banker_name': str,
            'personal_banker_contact': GetAccountDataPersonalBankerContact,
            'phone': float,
            'posted_balance': float,
            'principal_balance': str,
            'product_code': str,
            'product_name': str,
            'property_address': str,
            'reward_points': str,
            'routing_number': str,
            'statement_date': str,
            'status': str,
            'swift_code': str,
            'total_balance': float,
            'unbilled_amount': float,
            'value_at_maturity': float,
            'hold_amount': float,
            'unclear_funds_amount': float,
            'average_monthly_balance': float,
            'net_withdrawable_balance': float,
            'total_tenure': str,
            'remaining_tenure': str,
            'debit_account_number': str,
            'late_fee': float,
            'bounce_charge': float,
            'total_charges': float,
            'over_due_amount': float,
            'card_details': List[GetAccountDataAccountsCardDetails],
            'is_cross_account': bool
        }

        self.attribute_map = {
            'customer_id': 'customerId',
            'account_name': 'accountName',
            'account_nickname': 'accountNickname',
            'account_number': 'accountNumber',
            'account_type': 'accountType',
            'activated_date': 'activatedDate',
            'available_balance': 'availableBalance',
            'available_cash': 'availableCash',
            'available_cash_limit': 'availableCashLimit',
            'available_credit': 'availableCredit',
            'bank_name': 'bankName',
            'branch_name': 'branchName',
            'card_name': 'cardName',
            'card_number': 'cardNumber',
            'card_status': 'cardStatus',
            'card_type': 'cardType',
            'credit_limit': 'creditLimit',
            'currency': 'currency',
            'current_balance': 'currentBalance',
            'deactivated_date': 'deactivatedDate',
            'due_amount': 'dueAmount',
            'due_date': 'dueDate',
            'early_withdrawal_penalty': 'earlyWithdrawalPenalty',
            'email': 'email',
            'exp_date': 'expDate',
            'fd_type': 'fdType',
            'image': 'image',
            'interest_rate': 'interestRate',
            'internal_transfer_from_enabled': 'internalTransferFromEnabled',
            'internal_transfer_to_enabled': 'internalTransferToEnabled',
            'is_primary_mobile': 'isPrimaryMobile',
            'is_alternate_mobile_number': 'isAlternateMobileNumber',
            'is_statement': 'isStatement',
            'last_draw_date': 'lastDrawDate',
            'loan_maturity_date': 'loanMaturityDate',
            'loan_origination_date': 'loanOriginationDate',
            'location': 'location',
            'last_updated': 'lastUpdated',
            'max_transaction_limit': 'maxTransactionLimit',
            'maturity_date': 'maturityDate',
            'minimum_payment_due': 'minimumPaymentDue',
            'minimum_balance': 'minimumBalance',
            'monthly_payment': 'monthlyPayment',
            'opening_balance': 'openingBalance',
            'original_loan_amount': 'originalLoanAmount',
            'p2_p_limit': 'P2PLimit',
            'p2p_enabled': 'p2pEnabled',
            'paybill_enabled': 'paybillEnabled',
            'payoff_amount': 'payoffAmount',
            'personal_banker_name': 'personalBankerName',
            'personal_banker_contact': 'personalBankerContact',
            'phone': 'phone',
            'posted_balance': 'postedBalance',
            'principal_balance': 'principalBalance',
            'product_code': 'productCode',
            'product_name': 'productName',
            'property_address': 'propertyAddress',
            'reward_points': 'rewardPoints',
            'routing_number': 'routingNumber',
            'statement_date': 'statementDate',
            'status': 'status',
            'swift_code': 'swiftCode',
            'total_balance': 'totalBalance',
            'unbilled_amount': 'unbilledAmount',
            'value_at_maturity': 'valueAtMaturity',
            'hold_amount': 'holdAmount',
            'unclear_funds_amount': 'unclearFundsAmount',
            'average_monthly_balance': 'averageMonthlyBalance',
            'net_withdrawable_balance': 'netWithdrawableBalance',
            'total_tenure': 'totalTenure',
            'remaining_tenure': 'remainingTenure',
            'debit_account_number': 'debitAccountNumber',
            'late_fee': 'lateFee',
            'bounce_charge': 'bounceCharge',
            'total_charges': 'totalCharges',
            'over_due_amount': 'overDueAmount',
            'card_details': 'cardDetails',
            'is_cross_account': 'IsCrossAccount'
        }
        self._customer_id = customer_id
        self._account_name = account_name
        self._account_nickname = account_nickname
        self._account_number = account_number
        self._account_type = account_type
        self._activated_date = activated_date
        self._available_balance = available_balance
        self._available_cash = available_cash
        self._available_cash_limit = available_cash_limit
        self._available_credit = available_credit
        self._bank_name = bank_name
        self._branch_name = branch_name
        self._card_name = card_name
        self._card_number = card_number
        self._card_status = card_status
        self._card_type = card_type
        self._credit_limit = credit_limit
        self._currency = currency
        self._current_balance = current_balance
        self._deactivated_date = deactivated_date
        self._due_amount = due_amount
        self._due_date = due_date
        self._early_withdrawal_penalty = early_withdrawal_penalty
        self._email = email
        self._exp_date = exp_date
        self._fd_type = fd_type
        self._image = image
        self._interest_rate = interest_rate
        self._internal_transfer_from_enabled = internal_transfer_from_enabled
        self._internal_transfer_to_enabled = internal_transfer_to_enabled
        self._is_primary_mobile = is_primary_mobile
        self._is_alternate_mobile_number = is_alternate_mobile_number
        self._is_statement = is_statement
        self._last_draw_date = last_draw_date
        self._loan_maturity_date = loan_maturity_date
        self._loan_origination_date = loan_origination_date
        self._location = location
        self._last_updated = last_updated
        self._max_transaction_limit = max_transaction_limit
        self._maturity_date = maturity_date
        self._minimum_payment_due = minimum_payment_due
        self._minimum_balance = minimum_balance
        self._monthly_payment = monthly_payment
        self._opening_balance = opening_balance
        self._original_loan_amount = original_loan_amount
        self._p2_p_limit = p2_p_limit
        self._p2p_enabled = p2p_enabled
        self._paybill_enabled = paybill_enabled
        self._payoff_amount = payoff_amount
        self._personal_banker_name = personal_banker_name
        self._personal_banker_contact = personal_banker_contact
        self._phone = phone
        self._posted_balance = posted_balance
        self._principal_balance = principal_balance
        self._product_code = product_code
        self._product_name = product_name
        self._property_address = property_address
        self._reward_points = reward_points
        self._routing_number = routing_number
        self._statement_date = statement_date
        self._status = status
        self._swift_code = swift_code
        self._total_balance = total_balance
        self._unbilled_amount = unbilled_amount
        self._value_at_maturity = value_at_maturity
        self._hold_amount = hold_amount
        self._unclear_funds_amount = unclear_funds_amount
        self._average_monthly_balance = average_monthly_balance
        self._net_withdrawable_balance = net_withdrawable_balance
        self._total_tenure = total_tenure
        self._remaining_tenure = remaining_tenure
        self._debit_account_number = debit_account_number
        self._late_fee = late_fee
        self._bounce_charge = bounce_charge
        self._total_charges = total_charges
        self._over_due_amount = over_due_amount
        self._card_details = card_details
        self._is_cross_account = is_cross_account

    @classmethod
    def from_dict(cls, dikt) -> 'GetAccountDataAccounts':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The getAccountData_accounts of this GetAccountDataAccounts.  # noqa: E501
        :rtype: GetAccountDataAccounts
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_id(self) -> float:
        """Gets the customer_id of this GetAccountDataAccounts.


        :return: The customer_id of this GetAccountDataAccounts.
        :rtype: float
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id: float):
        """Sets the customer_id of this GetAccountDataAccounts.


        :param customer_id: The customer_id of this GetAccountDataAccounts.
        :type customer_id: float
        """

        self._customer_id = customer_id

    @property
    def account_name(self) -> str:
        """Gets the account_name of this GetAccountDataAccounts.


        :return: The account_name of this GetAccountDataAccounts.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name: str):
        """Sets the account_name of this GetAccountDataAccounts.


        :param account_name: The account_name of this GetAccountDataAccounts.
        :type account_name: str
        """

        self._account_name = account_name

    @property
    def account_nickname(self) -> str:
        """Gets the account_nickname of this GetAccountDataAccounts.


        :return: The account_nickname of this GetAccountDataAccounts.
        :rtype: str
        """
        return self._account_nickname

    @account_nickname.setter
    def account_nickname(self, account_nickname: str):
        """Sets the account_nickname of this GetAccountDataAccounts.


        :param account_nickname: The account_nickname of this GetAccountDataAccounts.
        :type account_nickname: str
        """

        self._account_nickname = account_nickname

    @property
    def account_number(self) -> str:
        """Gets the account_number of this GetAccountDataAccounts.


        :return: The account_number of this GetAccountDataAccounts.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number: str):
        """Sets the account_number of this GetAccountDataAccounts.


        :param account_number: The account_number of this GetAccountDataAccounts.
        :type account_number: str
        """

        self._account_number = account_number

    @property
    def account_type(self) -> str:
        """Gets the account_type of this GetAccountDataAccounts.


        :return: The account_type of this GetAccountDataAccounts.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type: str):
        """Sets the account_type of this GetAccountDataAccounts.


        :param account_type: The account_type of this GetAccountDataAccounts.
        :type account_type: str
        """

        self._account_type = account_type

    @property
    def activated_date(self) -> str:
        """Gets the activated_date of this GetAccountDataAccounts.


        :return: The activated_date of this GetAccountDataAccounts.
        :rtype: str
        """
        return self._activated_date

    @activated_date.setter
    def activated_date(self, activated_date: str):
        """Sets the activated_date of this GetAccountDataAccounts.


        :param activated_date: The activated_date of this GetAccountDataAccounts.
        :type activated_date: str
        """

        self._activated_date = activated_date

    @property
    def available_balance(self) -> float:
        """Gets the available_balance of this GetAccountDataAccounts.


        :return: The available_balance of this GetAccountDataAccounts.
        :rtype: float
        """
        return self._available_balance

    @available_balance.setter
    def available_balance(self, available_balance: float):
        """Sets the available_balance of this GetAccountDataAccounts.


        :param available_balance: The available_balance of this GetAccountDataAccounts.
        :type available_balance: float
        """

        self._available_balance = available_balance

    @property
    def available_cash(self) -> float:
        """Gets the available_cash of this GetAccountDataAccounts.


        :return: The available_cash of this GetAccountDataAccounts.
        :rtype: float
        """
        return self._available_cash

    @available_cash.setter
    def available_cash(self, available_cash: float):
        """Sets the available_cash of this GetAccountDataAccounts.


        :param available_cash: The available_cash of this GetAccountDataAccounts.
        :type available_cash: float
        """

        self._available_cash = available_cash

    @property
    def available_cash_limit(self) -> float:
        """Gets the available_cash_limit of this GetAccountDataAccounts.


        :return: The available_cash_limit of this GetAccountDataAccounts.
        :rtype: float
        """
        return self._available_cash_limit

    @available_cash_limit.setter
    def available_cash_limit(self, available_cash_limit: float):
        """Sets the available_cash_limit of this GetAccountDataAccounts.


        :param available_cash_limit: The available_cash_limit of this GetAccountDataAccounts.
        :type available_cash_limit: float
        """

        self._available_cash_limit = available_cash_limit

    @property
    def available_credit(self) -> float:
        """Gets the available_credit of this GetAccountDataAccounts.


        :return: The available_credit of this GetAccountDataAccounts.
        :rtype: float
        """
        return self._available_credit

    @available_credit.setter
    def available_credit(self, available_credit: float):
        """Sets the available_credit of this GetAccountDataAccounts.


        :param available_credit: The available_credit of this GetAccountDataAccounts.
        :type available_credit: float
        """

        self._available_credit = available_credit

    @property
    def bank_name(self) -> str:
        """Gets the bank_name of this GetAccountDataAccounts.

        IDFC specific  # noqa: E501

        :return: The bank_name of this GetAccountDataAccounts.
        :rtype: str
        """
        return self._bank_name

    @bank_name.setter
    def bank_name(self, bank_name: str):
        """Sets the bank_name of this GetAccountDataAccounts.

        IDFC specific  # noqa: E501

        :param bank_name: The bank_name of this GetAccountDataAccounts.
        :type bank_name: str
        """

        self._bank_name = bank_name

    @property
    def branch_name(self) -> str:
        """Gets the branch_name of this GetAccountDataAccounts.

        IDFC specific  # noqa: E501

        :return: The branch_name of this GetAccountDataAccounts.
        :rtype: str
        """
        return self._branch_name

    @branch_name.setter
    def branch_name(self, branch_name: str):
        """Sets the branch_name of this GetAccountDataAccounts.

        IDFC specific  # noqa: E501

        :param branch_name: The branch_name of this GetAccountDataAccounts.
        :type branch_name: str
        """

        self._branch_name = branch_name

    @property
    def card_name(self) -> str:
        """Gets the card_name of this GetAccountDataAccounts.


        :return: The card_name of this GetAccountDataAccounts.
        :rtype: str
        """
        return self._card_name

    @card_name.setter
    def card_name(self, card_name: str):
        """Sets the card_name of this GetAccountDataAccounts.


        :param card_name: The card_name of this GetAccountDataAccounts.
        :type card_name: str
        """

        self._card_name = card_name

    @property
    def card_number(self) -> str:
        """Gets the card_number of this GetAccountDataAccounts.


        :return: The card_number of this GetAccountDataAccounts.
        :rtype: str
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number: str):
        """Sets the card_number of this GetAccountDataAccounts.


        :param card_number: The card_number of this GetAccountDataAccounts.
        :type card_number: str
        """

        self._card_number = card_number

    @property
    def card_status(self) -> str:
        """Gets the card_status of this GetAccountDataAccounts.

        This can be any of these active, frozen, expired or blocked  # noqa: E501

        :return: The card_status of this GetAccountDataAccounts.
        :rtype: str
        """
        return self._card_status

    @card_status.setter
    def card_status(self, card_status: str):
        """Sets the card_status of this GetAccountDataAccounts.

        This can be any of these active, frozen, expired or blocked  # noqa: E501

        :param card_status: The card_status of this GetAccountDataAccounts.
        :type card_status: str
        """

        self._card_status = card_status

    @property
    def card_type(self) -> str:
        """Gets the card_type of this GetAccountDataAccounts.


        :return: The card_type of this GetAccountDataAccounts.
        :rtype: str
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type: str):
        """Sets the card_type of this GetAccountDataAccounts.


        :param card_type: The card_type of this GetAccountDataAccounts.
        :type card_type: str
        """

        self._card_type = card_type

    @property
    def credit_limit(self) -> float:
        """Gets the credit_limit of this GetAccountDataAccounts.


        :return: The credit_limit of this GetAccountDataAccounts.
        :rtype: float
        """
        return self._credit_limit

    @credit_limit.setter
    def credit_limit(self, credit_limit: float):
        """Sets the credit_limit of this GetAccountDataAccounts.


        :param credit_limit: The credit_limit of this GetAccountDataAccounts.
        :type credit_limit: float
        """

        self._credit_limit = credit_limit

    @property
    def currency(self) -> str:
        """Gets the currency of this GetAccountDataAccounts.


        :return: The currency of this GetAccountDataAccounts.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency: str):
        """Sets the currency of this GetAccountDataAccounts.


        :param currency: The currency of this GetAccountDataAccounts.
        :type currency: str
        """

        self._currency = currency

    @property
    def current_balance(self) -> float:
        """Gets the current_balance of this GetAccountDataAccounts.


        :return: The current_balance of this GetAccountDataAccounts.
        :rtype: float
        """
        return self._current_balance

    @current_balance.setter
    def current_balance(self, current_balance: float):
        """Sets the current_balance of this GetAccountDataAccounts.


        :param current_balance: The current_balance of this GetAccountDataAccounts.
        :type current_balance: float
        """

        self._current_balance = current_balance

    @property
    def deactivated_date(self) -> str:
        """Gets the deactivated_date of this GetAccountDataAccounts.


        :return: The deactivated_date of this GetAccountDataAccounts.
        :rtype: str
        """
        return self._deactivated_date

    @deactivated_date.setter
    def deactivated_date(self, deactivated_date: str):
        """Sets the deactivated_date of this GetAccountDataAccounts.


        :param deactivated_date: The deactivated_date of this GetAccountDataAccounts.
        :type deactivated_date: str
        """

        self._deactivated_date = deactivated_date

    @property
    def due_amount(self) -> float:
        """Gets the due_amount of this GetAccountDataAccounts.


        :return: The due_amount of this GetAccountDataAccounts.
        :rtype: float
        """
        return self._due_amount

    @due_amount.setter
    def due_amount(self, due_amount: float):
        """Sets the due_amount of this GetAccountDataAccounts.


        :param due_amount: The due_amount of this GetAccountDataAccounts.
        :type due_amount: float
        """

        self._due_amount = due_amount

    @property
    def due_date(self) -> str:
        """Gets the due_date of this GetAccountDataAccounts.


        :return: The due_date of this GetAccountDataAccounts.
        :rtype: str
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date: str):
        """Sets the due_date of this GetAccountDataAccounts.


        :param due_date: The due_date of this GetAccountDataAccounts.
        :type due_date: str
        """

        self._due_date = due_date

    @property
    def early_withdrawal_penalty(self) -> float:
        """Gets the early_withdrawal_penalty of this GetAccountDataAccounts.


        :return: The early_withdrawal_penalty of this GetAccountDataAccounts.
        :rtype: float
        """
        return self._early_withdrawal_penalty

    @early_withdrawal_penalty.setter
    def early_withdrawal_penalty(self, early_withdrawal_penalty: float):
        """Sets the early_withdrawal_penalty of this GetAccountDataAccounts.


        :param early_withdrawal_penalty: The early_withdrawal_penalty of this GetAccountDataAccounts.
        :type early_withdrawal_penalty: float
        """

        self._early_withdrawal_penalty = early_withdrawal_penalty

    @property
    def email(self) -> str:
        """Gets the email of this GetAccountDataAccounts.


        :return: The email of this GetAccountDataAccounts.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this GetAccountDataAccounts.


        :param email: The email of this GetAccountDataAccounts.
        :type email: str
        """

        self._email = email

    @property
    def exp_date(self) -> str:
        """Gets the exp_date of this GetAccountDataAccounts.

        It will be a number format lets say expiry is Dec2021, 1221 will be its value.  # noqa: E501

        :return: The exp_date of this GetAccountDataAccounts.
        :rtype: str
        """
        return self._exp_date

    @exp_date.setter
    def exp_date(self, exp_date: str):
        """Sets the exp_date of this GetAccountDataAccounts.

        It will be a number format lets say expiry is Dec2021, 1221 will be its value.  # noqa: E501

        :param exp_date: The exp_date of this GetAccountDataAccounts.
        :type exp_date: str
        """

        self._exp_date = exp_date

    @property
    def fd_type(self) -> str:
        """Gets the fd_type of this GetAccountDataAccounts.

        idfc specific can be short term,  re-investment, quarterly payout, monthly payout.  # noqa: E501

        :return: The fd_type of this GetAccountDataAccounts.
        :rtype: str
        """
        return self._fd_type

    @fd_type.setter
    def fd_type(self, fd_type: str):
        """Sets the fd_type of this GetAccountDataAccounts.

        idfc specific can be short term,  re-investment, quarterly payout, monthly payout.  # noqa: E501

        :param fd_type: The fd_type of this GetAccountDataAccounts.
        :type fd_type: str
        """

        self._fd_type = fd_type

    @property
    def image(self) -> str:
        """Gets the image of this GetAccountDataAccounts.


        :return: The image of this GetAccountDataAccounts.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image: str):
        """Sets the image of this GetAccountDataAccounts.


        :param image: The image of this GetAccountDataAccounts.
        :type image: str
        """

        self._image = image

    @property
    def interest_rate(self) -> float:
        """Gets the interest_rate of this GetAccountDataAccounts.


        :return: The interest_rate of this GetAccountDataAccounts.
        :rtype: float
        """
        return self._interest_rate

    @interest_rate.setter
    def interest_rate(self, interest_rate: float):
        """Sets the interest_rate of this GetAccountDataAccounts.


        :param interest_rate: The interest_rate of this GetAccountDataAccounts.
        :type interest_rate: float
        """

        self._interest_rate = interest_rate

    @property
    def internal_transfer_from_enabled(self) -> bool:
        """Gets the internal_transfer_from_enabled of this GetAccountDataAccounts.


        :return: The internal_transfer_from_enabled of this GetAccountDataAccounts.
        :rtype: bool
        """
        return self._internal_transfer_from_enabled

    @internal_transfer_from_enabled.setter
    def internal_transfer_from_enabled(self, internal_transfer_from_enabled: bool):
        """Sets the internal_transfer_from_enabled of this GetAccountDataAccounts.


        :param internal_transfer_from_enabled: The internal_transfer_from_enabled of this GetAccountDataAccounts.
        :type internal_transfer_from_enabled: bool
        """

        self._internal_transfer_from_enabled = internal_transfer_from_enabled

    @property
    def internal_transfer_to_enabled(self) -> bool:
        """Gets the internal_transfer_to_enabled of this GetAccountDataAccounts.


        :return: The internal_transfer_to_enabled of this GetAccountDataAccounts.
        :rtype: bool
        """
        return self._internal_transfer_to_enabled

    @internal_transfer_to_enabled.setter
    def internal_transfer_to_enabled(self, internal_transfer_to_enabled: bool):
        """Sets the internal_transfer_to_enabled of this GetAccountDataAccounts.


        :param internal_transfer_to_enabled: The internal_transfer_to_enabled of this GetAccountDataAccounts.
        :type internal_transfer_to_enabled: bool
        """

        self._internal_transfer_to_enabled = internal_transfer_to_enabled

    @property
    def is_primary_mobile(self) -> bool:
        """Gets the is_primary_mobile of this GetAccountDataAccounts.


        :return: The is_primary_mobile of this GetAccountDataAccounts.
        :rtype: bool
        """
        return self._is_primary_mobile

    @is_primary_mobile.setter
    def is_primary_mobile(self, is_primary_mobile: bool):
        """Sets the is_primary_mobile of this GetAccountDataAccounts.


        :param is_primary_mobile: The is_primary_mobile of this GetAccountDataAccounts.
        :type is_primary_mobile: bool
        """

        self._is_primary_mobile = is_primary_mobile

    @property
    def is_alternate_mobile_number(self) -> bool:
        """Gets the is_alternate_mobile_number of this GetAccountDataAccounts.


        :return: The is_alternate_mobile_number of this GetAccountDataAccounts.
        :rtype: bool
        """
        return self._is_alternate_mobile_number

    @is_alternate_mobile_number.setter
    def is_alternate_mobile_number(self, is_alternate_mobile_number: bool):
        """Sets the is_alternate_mobile_number of this GetAccountDataAccounts.


        :param is_alternate_mobile_number: The is_alternate_mobile_number of this GetAccountDataAccounts.
        :type is_alternate_mobile_number: bool
        """

        self._is_alternate_mobile_number = is_alternate_mobile_number

    @property
    def is_statement(self) -> bool:
        """Gets the is_statement of this GetAccountDataAccounts.


        :return: The is_statement of this GetAccountDataAccounts.
        :rtype: bool
        """
        return self._is_statement

    @is_statement.setter
    def is_statement(self, is_statement: bool):
        """Sets the is_statement of this GetAccountDataAccounts.


        :param is_statement: The is_statement of this GetAccountDataAccounts.
        :type is_statement: bool
        """

        self._is_statement = is_statement

    @property
    def last_draw_date(self) -> str:
        """Gets the last_draw_date of this GetAccountDataAccounts.


        :return: The last_draw_date of this GetAccountDataAccounts.
        :rtype: str
        """
        return self._last_draw_date

    @last_draw_date.setter
    def last_draw_date(self, last_draw_date: str):
        """Sets the last_draw_date of this GetAccountDataAccounts.


        :param last_draw_date: The last_draw_date of this GetAccountDataAccounts.
        :type last_draw_date: str
        """

        self._last_draw_date = last_draw_date

    @property
    def loan_maturity_date(self) -> str:
        """Gets the loan_maturity_date of this GetAccountDataAccounts.


        :return: The loan_maturity_date of this GetAccountDataAccounts.
        :rtype: str
        """
        return self._loan_maturity_date

    @loan_maturity_date.setter
    def loan_maturity_date(self, loan_maturity_date: str):
        """Sets the loan_maturity_date of this GetAccountDataAccounts.


        :param loan_maturity_date: The loan_maturity_date of this GetAccountDataAccounts.
        :type loan_maturity_date: str
        """

        self._loan_maturity_date = loan_maturity_date

    @property
    def loan_origination_date(self) -> str:
        """Gets the loan_origination_date of this GetAccountDataAccounts.


        :return: The loan_origination_date of this GetAccountDataAccounts.
        :rtype: str
        """
        return self._loan_origination_date

    @loan_origination_date.setter
    def loan_origination_date(self, loan_origination_date: str):
        """Sets the loan_origination_date of this GetAccountDataAccounts.


        :param loan_origination_date: The loan_origination_date of this GetAccountDataAccounts.
        :type loan_origination_date: str
        """

        self._loan_origination_date = loan_origination_date

    @property
    def location(self) -> str:
        """Gets the location of this GetAccountDataAccounts.


        :return: The location of this GetAccountDataAccounts.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location: str):
        """Sets the location of this GetAccountDataAccounts.


        :param location: The location of this GetAccountDataAccounts.
        :type location: str
        """

        self._location = location

    @property
    def last_updated(self) -> str:
        """Gets the last_updated of this GetAccountDataAccounts.


        :return: The last_updated of this GetAccountDataAccounts.
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated: str):
        """Sets the last_updated of this GetAccountDataAccounts.


        :param last_updated: The last_updated of this GetAccountDataAccounts.
        :type last_updated: str
        """

        self._last_updated = last_updated

    @property
    def max_transaction_limit(self) -> str:
        """Gets the max_transaction_limit of this GetAccountDataAccounts.


        :return: The max_transaction_limit of this GetAccountDataAccounts.
        :rtype: str
        """
        return self._max_transaction_limit

    @max_transaction_limit.setter
    def max_transaction_limit(self, max_transaction_limit: str):
        """Sets the max_transaction_limit of this GetAccountDataAccounts.


        :param max_transaction_limit: The max_transaction_limit of this GetAccountDataAccounts.
        :type max_transaction_limit: str
        """

        self._max_transaction_limit = max_transaction_limit

    @property
    def maturity_date(self) -> str:
        """Gets the maturity_date of this GetAccountDataAccounts.

        its a date format  # noqa: E501

        :return: The maturity_date of this GetAccountDataAccounts.
        :rtype: str
        """
        return self._maturity_date

    @maturity_date.setter
    def maturity_date(self, maturity_date: str):
        """Sets the maturity_date of this GetAccountDataAccounts.

        its a date format  # noqa: E501

        :param maturity_date: The maturity_date of this GetAccountDataAccounts.
        :type maturity_date: str
        """

        self._maturity_date = maturity_date

    @property
    def minimum_payment_due(self) -> str:
        """Gets the minimum_payment_due of this GetAccountDataAccounts.


        :return: The minimum_payment_due of this GetAccountDataAccounts.
        :rtype: str
        """
        return self._minimum_payment_due

    @minimum_payment_due.setter
    def minimum_payment_due(self, minimum_payment_due: str):
        """Sets the minimum_payment_due of this GetAccountDataAccounts.


        :param minimum_payment_due: The minimum_payment_due of this GetAccountDataAccounts.
        :type minimum_payment_due: str
        """

        self._minimum_payment_due = minimum_payment_due

    @property
    def minimum_balance(self) -> str:
        """Gets the minimum_balance of this GetAccountDataAccounts.


        :return: The minimum_balance of this GetAccountDataAccounts.
        :rtype: str
        """
        return self._minimum_balance

    @minimum_balance.setter
    def minimum_balance(self, minimum_balance: str):
        """Sets the minimum_balance of this GetAccountDataAccounts.


        :param minimum_balance: The minimum_balance of this GetAccountDataAccounts.
        :type minimum_balance: str
        """

        self._minimum_balance = minimum_balance

    @property
    def monthly_payment(self) -> float:
        """Gets the monthly_payment of this GetAccountDataAccounts.


        :return: The monthly_payment of this GetAccountDataAccounts.
        :rtype: float
        """
        return self._monthly_payment

    @monthly_payment.setter
    def monthly_payment(self, monthly_payment: float):
        """Sets the monthly_payment of this GetAccountDataAccounts.


        :param monthly_payment: The monthly_payment of this GetAccountDataAccounts.
        :type monthly_payment: float
        """

        self._monthly_payment = monthly_payment

    @property
    def opening_balance(self) -> float:
        """Gets the opening_balance of this GetAccountDataAccounts.


        :return: The opening_balance of this GetAccountDataAccounts.
        :rtype: float
        """
        return self._opening_balance

    @opening_balance.setter
    def opening_balance(self, opening_balance: float):
        """Sets the opening_balance of this GetAccountDataAccounts.


        :param opening_balance: The opening_balance of this GetAccountDataAccounts.
        :type opening_balance: float
        """

        self._opening_balance = opening_balance

    @property
    def original_loan_amount(self) -> float:
        """Gets the original_loan_amount of this GetAccountDataAccounts.


        :return: The original_loan_amount of this GetAccountDataAccounts.
        :rtype: float
        """
        return self._original_loan_amount

    @original_loan_amount.setter
    def original_loan_amount(self, original_loan_amount: float):
        """Sets the original_loan_amount of this GetAccountDataAccounts.


        :param original_loan_amount: The original_loan_amount of this GetAccountDataAccounts.
        :type original_loan_amount: float
        """

        self._original_loan_amount = original_loan_amount

    @property
    def p2_p_limit(self) -> float:
        """Gets the p2_p_limit of this GetAccountDataAccounts.


        :return: The p2_p_limit of this GetAccountDataAccounts.
        :rtype: float
        """
        return self._p2_p_limit

    @p2_p_limit.setter
    def p2_p_limit(self, p2_p_limit: float):
        """Sets the p2_p_limit of this GetAccountDataAccounts.


        :param p2_p_limit: The p2_p_limit of this GetAccountDataAccounts.
        :type p2_p_limit: float
        """

        self._p2_p_limit = p2_p_limit

    @property
    def p2p_enabled(self) -> float:
        """Gets the p2p_enabled of this GetAccountDataAccounts.


        :return: The p2p_enabled of this GetAccountDataAccounts.
        :rtype: float
        """
        return self._p2p_enabled

    @p2p_enabled.setter
    def p2p_enabled(self, p2p_enabled: float):
        """Sets the p2p_enabled of this GetAccountDataAccounts.


        :param p2p_enabled: The p2p_enabled of this GetAccountDataAccounts.
        :type p2p_enabled: float
        """

        self._p2p_enabled = p2p_enabled

    @property
    def paybill_enabled(self) -> bool:
        """Gets the paybill_enabled of this GetAccountDataAccounts.


        :return: The paybill_enabled of this GetAccountDataAccounts.
        :rtype: bool
        """
        return self._paybill_enabled

    @paybill_enabled.setter
    def paybill_enabled(self, paybill_enabled: bool):
        """Sets the paybill_enabled of this GetAccountDataAccounts.


        :param paybill_enabled: The paybill_enabled of this GetAccountDataAccounts.
        :type paybill_enabled: bool
        """

        self._paybill_enabled = paybill_enabled

    @property
    def payoff_amount(self) -> float:
        """Gets the payoff_amount of this GetAccountDataAccounts.


        :return: The payoff_amount of this GetAccountDataAccounts.
        :rtype: float
        """
        return self._payoff_amount

    @payoff_amount.setter
    def payoff_amount(self, payoff_amount: float):
        """Sets the payoff_amount of this GetAccountDataAccounts.


        :param payoff_amount: The payoff_amount of this GetAccountDataAccounts.
        :type payoff_amount: float
        """

        self._payoff_amount = payoff_amount

    @property
    def personal_banker_name(self) -> str:
        """Gets the personal_banker_name of this GetAccountDataAccounts.


        :return: The personal_banker_name of this GetAccountDataAccounts.
        :rtype: str
        """
        return self._personal_banker_name

    @personal_banker_name.setter
    def personal_banker_name(self, personal_banker_name: str):
        """Sets the personal_banker_name of this GetAccountDataAccounts.


        :param personal_banker_name: The personal_banker_name of this GetAccountDataAccounts.
        :type personal_banker_name: str
        """

        self._personal_banker_name = personal_banker_name

    @property
    def personal_banker_contact(self) -> GetAccountDataPersonalBankerContact:
        """Gets the personal_banker_contact of this GetAccountDataAccounts.


        :return: The personal_banker_contact of this GetAccountDataAccounts.
        :rtype: GetAccountDataPersonalBankerContact
        """
        return self._personal_banker_contact

    @personal_banker_contact.setter
    def personal_banker_contact(self, personal_banker_contact: GetAccountDataPersonalBankerContact):
        """Sets the personal_banker_contact of this GetAccountDataAccounts.


        :param personal_banker_contact: The personal_banker_contact of this GetAccountDataAccounts.
        :type personal_banker_contact: GetAccountDataPersonalBankerContact
        """

        self._personal_banker_contact = personal_banker_contact

    @property
    def phone(self) -> float:
        """Gets the phone of this GetAccountDataAccounts.


        :return: The phone of this GetAccountDataAccounts.
        :rtype: float
        """
        return self._phone

    @phone.setter
    def phone(self, phone: float):
        """Sets the phone of this GetAccountDataAccounts.


        :param phone: The phone of this GetAccountDataAccounts.
        :type phone: float
        """

        self._phone = phone

    @property
    def posted_balance(self) -> float:
        """Gets the posted_balance of this GetAccountDataAccounts.


        :return: The posted_balance of this GetAccountDataAccounts.
        :rtype: float
        """
        return self._posted_balance

    @posted_balance.setter
    def posted_balance(self, posted_balance: float):
        """Sets the posted_balance of this GetAccountDataAccounts.


        :param posted_balance: The posted_balance of this GetAccountDataAccounts.
        :type posted_balance: float
        """

        self._posted_balance = posted_balance

    @property
    def principal_balance(self) -> str:
        """Gets the principal_balance of this GetAccountDataAccounts.


        :return: The principal_balance of this GetAccountDataAccounts.
        :rtype: str
        """
        return self._principal_balance

    @principal_balance.setter
    def principal_balance(self, principal_balance: str):
        """Sets the principal_balance of this GetAccountDataAccounts.


        :param principal_balance: The principal_balance of this GetAccountDataAccounts.
        :type principal_balance: str
        """

        self._principal_balance = principal_balance

    @property
    def product_code(self) -> str:
        """Gets the product_code of this GetAccountDataAccounts.


        :return: The product_code of this GetAccountDataAccounts.
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code: str):
        """Sets the product_code of this GetAccountDataAccounts.


        :param product_code: The product_code of this GetAccountDataAccounts.
        :type product_code: str
        """

        self._product_code = product_code

    @property
    def product_name(self) -> str:
        """Gets the product_name of this GetAccountDataAccounts.


        :return: The product_name of this GetAccountDataAccounts.
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name: str):
        """Sets the product_name of this GetAccountDataAccounts.


        :param product_name: The product_name of this GetAccountDataAccounts.
        :type product_name: str
        """

        self._product_name = product_name

    @property
    def property_address(self) -> str:
        """Gets the property_address of this GetAccountDataAccounts.


        :return: The property_address of this GetAccountDataAccounts.
        :rtype: str
        """
        return self._property_address

    @property_address.setter
    def property_address(self, property_address: str):
        """Sets the property_address of this GetAccountDataAccounts.


        :param property_address: The property_address of this GetAccountDataAccounts.
        :type property_address: str
        """

        self._property_address = property_address

    @property
    def reward_points(self) -> str:
        """Gets the reward_points of this GetAccountDataAccounts.


        :return: The reward_points of this GetAccountDataAccounts.
        :rtype: str
        """
        return self._reward_points

    @reward_points.setter
    def reward_points(self, reward_points: str):
        """Sets the reward_points of this GetAccountDataAccounts.


        :param reward_points: The reward_points of this GetAccountDataAccounts.
        :type reward_points: str
        """

        self._reward_points = reward_points

    @property
    def routing_number(self) -> str:
        """Gets the routing_number of this GetAccountDataAccounts.


        :return: The routing_number of this GetAccountDataAccounts.
        :rtype: str
        """
        return self._routing_number

    @routing_number.setter
    def routing_number(self, routing_number: str):
        """Sets the routing_number of this GetAccountDataAccounts.


        :param routing_number: The routing_number of this GetAccountDataAccounts.
        :type routing_number: str
        """

        self._routing_number = routing_number

    @property
    def statement_date(self) -> str:
        """Gets the statement_date of this GetAccountDataAccounts.


        :return: The statement_date of this GetAccountDataAccounts.
        :rtype: str
        """
        return self._statement_date

    @statement_date.setter
    def statement_date(self, statement_date: str):
        """Sets the statement_date of this GetAccountDataAccounts.


        :param statement_date: The statement_date of this GetAccountDataAccounts.
        :type statement_date: str
        """

        self._statement_date = statement_date

    @property
    def status(self) -> str:
        """Gets the status of this GetAccountDataAccounts.


        :return: The status of this GetAccountDataAccounts.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this GetAccountDataAccounts.


        :param status: The status of this GetAccountDataAccounts.
        :type status: str
        """

        self._status = status

    @property
    def swift_code(self) -> str:
        """Gets the swift_code of this GetAccountDataAccounts.

        IDFC specific  # noqa: E501

        :return: The swift_code of this GetAccountDataAccounts.
        :rtype: str
        """
        return self._swift_code

    @swift_code.setter
    def swift_code(self, swift_code: str):
        """Sets the swift_code of this GetAccountDataAccounts.

        IDFC specific  # noqa: E501

        :param swift_code: The swift_code of this GetAccountDataAccounts.
        :type swift_code: str
        """

        self._swift_code = swift_code

    @property
    def total_balance(self) -> float:
        """Gets the total_balance of this GetAccountDataAccounts.


        :return: The total_balance of this GetAccountDataAccounts.
        :rtype: float
        """
        return self._total_balance

    @total_balance.setter
    def total_balance(self, total_balance: float):
        """Sets the total_balance of this GetAccountDataAccounts.


        :param total_balance: The total_balance of this GetAccountDataAccounts.
        :type total_balance: float
        """

        self._total_balance = total_balance

    @property
    def unbilled_amount(self) -> float:
        """Gets the unbilled_amount of this GetAccountDataAccounts.


        :return: The unbilled_amount of this GetAccountDataAccounts.
        :rtype: float
        """
        return self._unbilled_amount

    @unbilled_amount.setter
    def unbilled_amount(self, unbilled_amount: float):
        """Sets the unbilled_amount of this GetAccountDataAccounts.


        :param unbilled_amount: The unbilled_amount of this GetAccountDataAccounts.
        :type unbilled_amount: float
        """

        self._unbilled_amount = unbilled_amount

    @property
    def value_at_maturity(self) -> float:
        """Gets the value_at_maturity of this GetAccountDataAccounts.


        :return: The value_at_maturity of this GetAccountDataAccounts.
        :rtype: float
        """
        return self._value_at_maturity

    @value_at_maturity.setter
    def value_at_maturity(self, value_at_maturity: float):
        """Sets the value_at_maturity of this GetAccountDataAccounts.


        :param value_at_maturity: The value_at_maturity of this GetAccountDataAccounts.
        :type value_at_maturity: float
        """

        self._value_at_maturity = value_at_maturity

    @property
    def hold_amount(self) -> float:
        """Gets the hold_amount of this GetAccountDataAccounts.


        :return: The hold_amount of this GetAccountDataAccounts.
        :rtype: float
        """
        return self._hold_amount

    @hold_amount.setter
    def hold_amount(self, hold_amount: float):
        """Sets the hold_amount of this GetAccountDataAccounts.


        :param hold_amount: The hold_amount of this GetAccountDataAccounts.
        :type hold_amount: float
        """

        self._hold_amount = hold_amount

    @property
    def unclear_funds_amount(self) -> float:
        """Gets the unclear_funds_amount of this GetAccountDataAccounts.


        :return: The unclear_funds_amount of this GetAccountDataAccounts.
        :rtype: float
        """
        return self._unclear_funds_amount

    @unclear_funds_amount.setter
    def unclear_funds_amount(self, unclear_funds_amount: float):
        """Sets the unclear_funds_amount of this GetAccountDataAccounts.


        :param unclear_funds_amount: The unclear_funds_amount of this GetAccountDataAccounts.
        :type unclear_funds_amount: float
        """

        self._unclear_funds_amount = unclear_funds_amount

    @property
    def average_monthly_balance(self) -> float:
        """Gets the average_monthly_balance of this GetAccountDataAccounts.


        :return: The average_monthly_balance of this GetAccountDataAccounts.
        :rtype: float
        """
        return self._average_monthly_balance

    @average_monthly_balance.setter
    def average_monthly_balance(self, average_monthly_balance: float):
        """Sets the average_monthly_balance of this GetAccountDataAccounts.


        :param average_monthly_balance: The average_monthly_balance of this GetAccountDataAccounts.
        :type average_monthly_balance: float
        """

        self._average_monthly_balance = average_monthly_balance

    @property
    def net_withdrawable_balance(self) -> float:
        """Gets the net_withdrawable_balance of this GetAccountDataAccounts.


        :return: The net_withdrawable_balance of this GetAccountDataAccounts.
        :rtype: float
        """
        return self._net_withdrawable_balance

    @net_withdrawable_balance.setter
    def net_withdrawable_balance(self, net_withdrawable_balance: float):
        """Sets the net_withdrawable_balance of this GetAccountDataAccounts.


        :param net_withdrawable_balance: The net_withdrawable_balance of this GetAccountDataAccounts.
        :type net_withdrawable_balance: float
        """

        self._net_withdrawable_balance = net_withdrawable_balance

    @property
    def total_tenure(self) -> str:
        """Gets the total_tenure of this GetAccountDataAccounts.


        :return: The total_tenure of this GetAccountDataAccounts.
        :rtype: str
        """
        return self._total_tenure

    @total_tenure.setter
    def total_tenure(self, total_tenure: str):
        """Sets the total_tenure of this GetAccountDataAccounts.


        :param total_tenure: The total_tenure of this GetAccountDataAccounts.
        :type total_tenure: str
        """

        self._total_tenure = total_tenure

    @property
    def remaining_tenure(self) -> str:
        """Gets the remaining_tenure of this GetAccountDataAccounts.


        :return: The remaining_tenure of this GetAccountDataAccounts.
        :rtype: str
        """
        return self._remaining_tenure

    @remaining_tenure.setter
    def remaining_tenure(self, remaining_tenure: str):
        """Sets the remaining_tenure of this GetAccountDataAccounts.


        :param remaining_tenure: The remaining_tenure of this GetAccountDataAccounts.
        :type remaining_tenure: str
        """

        self._remaining_tenure = remaining_tenure

    @property
    def debit_account_number(self) -> str:
        """Gets the debit_account_number of this GetAccountDataAccounts.


        :return: The debit_account_number of this GetAccountDataAccounts.
        :rtype: str
        """
        return self._debit_account_number

    @debit_account_number.setter
    def debit_account_number(self, debit_account_number: str):
        """Sets the debit_account_number of this GetAccountDataAccounts.


        :param debit_account_number: The debit_account_number of this GetAccountDataAccounts.
        :type debit_account_number: str
        """

        self._debit_account_number = debit_account_number

    @property
    def late_fee(self) -> float:
        """Gets the late_fee of this GetAccountDataAccounts.


        :return: The late_fee of this GetAccountDataAccounts.
        :rtype: float
        """
        return self._late_fee

    @late_fee.setter
    def late_fee(self, late_fee: float):
        """Sets the late_fee of this GetAccountDataAccounts.


        :param late_fee: The late_fee of this GetAccountDataAccounts.
        :type late_fee: float
        """

        self._late_fee = late_fee

    @property
    def bounce_charge(self) -> float:
        """Gets the bounce_charge of this GetAccountDataAccounts.


        :return: The bounce_charge of this GetAccountDataAccounts.
        :rtype: float
        """
        return self._bounce_charge

    @bounce_charge.setter
    def bounce_charge(self, bounce_charge: float):
        """Sets the bounce_charge of this GetAccountDataAccounts.


        :param bounce_charge: The bounce_charge of this GetAccountDataAccounts.
        :type bounce_charge: float
        """

        self._bounce_charge = bounce_charge

    @property
    def total_charges(self) -> float:
        """Gets the total_charges of this GetAccountDataAccounts.


        :return: The total_charges of this GetAccountDataAccounts.
        :rtype: float
        """
        return self._total_charges

    @total_charges.setter
    def total_charges(self, total_charges: float):
        """Sets the total_charges of this GetAccountDataAccounts.


        :param total_charges: The total_charges of this GetAccountDataAccounts.
        :type total_charges: float
        """

        self._total_charges = total_charges

    @property
    def over_due_amount(self) -> float:
        """Gets the over_due_amount of this GetAccountDataAccounts.


        :return: The over_due_amount of this GetAccountDataAccounts.
        :rtype: float
        """
        return self._over_due_amount

    @over_due_amount.setter
    def over_due_amount(self, over_due_amount: float):
        """Sets the over_due_amount of this GetAccountDataAccounts.


        :param over_due_amount: The over_due_amount of this GetAccountDataAccounts.
        :type over_due_amount: float
        """

        self._over_due_amount = over_due_amount

    @property
    def card_details(self) -> List[GetAccountDataAccountsCardDetails]:
        """Gets the card_details of this GetAccountDataAccounts.


        :return: The card_details of this GetAccountDataAccounts.
        :rtype: List[GetAccountDataAccountsCardDetails]
        """
        return self._card_details

    @card_details.setter
    def card_details(self, card_details: List[GetAccountDataAccountsCardDetails]):
        """Sets the card_details of this GetAccountDataAccounts.


        :param card_details: The card_details of this GetAccountDataAccounts.
        :type card_details: List[GetAccountDataAccountsCardDetails]
        """

        self._card_details = card_details

    @property
    def is_cross_account(self) -> bool:
        """Gets the is_cross_account of this GetAccountDataAccounts.


        :return: The is_cross_account of this GetAccountDataAccounts.
        :rtype: bool
        """
        return self._is_cross_account

    @is_cross_account.setter
    def is_cross_account(self, is_cross_account: bool):
        """Sets the is_cross_account of this GetAccountDataAccounts.


        :param is_cross_account: The is_cross_account of this GetAccountDataAccounts.
        :type is_cross_account: bool
        """

        self._is_cross_account = is_cross_account
