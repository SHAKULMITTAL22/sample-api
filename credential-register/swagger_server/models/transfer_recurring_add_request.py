# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.transfer_recurring_add_request_recurring_options import TransferRecurringAddRequestRecurringOptions  # noqa: F401,E501
from swagger_server import util


class TransferRecurringAddRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, customer_id: float=None, amount: float=None, source_account_id: str=None, target_account_id: str=None, currency: str=None, status: str=None, scheduled_date: float=None, recurring_options: TransferRecurringAddRequestRecurringOptions=None):  # noqa: E501
        """TransferRecurringAddRequest - a model defined in Swagger

        :param customer_id: The customer_id of this TransferRecurringAddRequest.  # noqa: E501
        :type customer_id: float
        :param amount: The amount of this TransferRecurringAddRequest.  # noqa: E501
        :type amount: float
        :param source_account_id: The source_account_id of this TransferRecurringAddRequest.  # noqa: E501
        :type source_account_id: str
        :param target_account_id: The target_account_id of this TransferRecurringAddRequest.  # noqa: E501
        :type target_account_id: str
        :param currency: The currency of this TransferRecurringAddRequest.  # noqa: E501
        :type currency: str
        :param status: The status of this TransferRecurringAddRequest.  # noqa: E501
        :type status: str
        :param scheduled_date: The scheduled_date of this TransferRecurringAddRequest.  # noqa: E501
        :type scheduled_date: float
        :param recurring_options: The recurring_options of this TransferRecurringAddRequest.  # noqa: E501
        :type recurring_options: TransferRecurringAddRequestRecurringOptions
        """
        self.swagger_types = {
            'customer_id': float,
            'amount': float,
            'source_account_id': str,
            'target_account_id': str,
            'currency': str,
            'status': str,
            'scheduled_date': float,
            'recurring_options': TransferRecurringAddRequestRecurringOptions
        }

        self.attribute_map = {
            'customer_id': 'customerId',
            'amount': 'amount',
            'source_account_id': 'sourceAccountId',
            'target_account_id': 'targetAccountId',
            'currency': 'currency',
            'status': 'status',
            'scheduled_date': 'scheduledDate',
            'recurring_options': 'recurringOptions'
        }
        self._customer_id = customer_id
        self._amount = amount
        self._source_account_id = source_account_id
        self._target_account_id = target_account_id
        self._currency = currency
        self._status = status
        self._scheduled_date = scheduled_date
        self._recurring_options = recurring_options

    @classmethod
    def from_dict(cls, dikt) -> 'TransferRecurringAddRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The transferRecurringAddRequest of this TransferRecurringAddRequest.  # noqa: E501
        :rtype: TransferRecurringAddRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_id(self) -> float:
        """Gets the customer_id of this TransferRecurringAddRequest.


        :return: The customer_id of this TransferRecurringAddRequest.
        :rtype: float
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id: float):
        """Sets the customer_id of this TransferRecurringAddRequest.


        :param customer_id: The customer_id of this TransferRecurringAddRequest.
        :type customer_id: float
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")  # noqa: E501

        self._customer_id = customer_id

    @property
    def amount(self) -> float:
        """Gets the amount of this TransferRecurringAddRequest.


        :return: The amount of this TransferRecurringAddRequest.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount: float):
        """Sets the amount of this TransferRecurringAddRequest.


        :param amount: The amount of this TransferRecurringAddRequest.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def source_account_id(self) -> str:
        """Gets the source_account_id of this TransferRecurringAddRequest.


        :return: The source_account_id of this TransferRecurringAddRequest.
        :rtype: str
        """
        return self._source_account_id

    @source_account_id.setter
    def source_account_id(self, source_account_id: str):
        """Sets the source_account_id of this TransferRecurringAddRequest.


        :param source_account_id: The source_account_id of this TransferRecurringAddRequest.
        :type source_account_id: str
        """
        if source_account_id is None:
            raise ValueError("Invalid value for `source_account_id`, must not be `None`")  # noqa: E501

        self._source_account_id = source_account_id

    @property
    def target_account_id(self) -> str:
        """Gets the target_account_id of this TransferRecurringAddRequest.


        :return: The target_account_id of this TransferRecurringAddRequest.
        :rtype: str
        """
        return self._target_account_id

    @target_account_id.setter
    def target_account_id(self, target_account_id: str):
        """Sets the target_account_id of this TransferRecurringAddRequest.


        :param target_account_id: The target_account_id of this TransferRecurringAddRequest.
        :type target_account_id: str
        """
        if target_account_id is None:
            raise ValueError("Invalid value for `target_account_id`, must not be `None`")  # noqa: E501

        self._target_account_id = target_account_id

    @property
    def currency(self) -> str:
        """Gets the currency of this TransferRecurringAddRequest.


        :return: The currency of this TransferRecurringAddRequest.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency: str):
        """Sets the currency of this TransferRecurringAddRequest.


        :param currency: The currency of this TransferRecurringAddRequest.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def status(self) -> str:
        """Gets the status of this TransferRecurringAddRequest.


        :return: The status of this TransferRecurringAddRequest.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this TransferRecurringAddRequest.


        :param status: The status of this TransferRecurringAddRequest.
        :type status: str
        """

        self._status = status

    @property
    def scheduled_date(self) -> float:
        """Gets the scheduled_date of this TransferRecurringAddRequest.


        :return: The scheduled_date of this TransferRecurringAddRequest.
        :rtype: float
        """
        return self._scheduled_date

    @scheduled_date.setter
    def scheduled_date(self, scheduled_date: float):
        """Sets the scheduled_date of this TransferRecurringAddRequest.


        :param scheduled_date: The scheduled_date of this TransferRecurringAddRequest.
        :type scheduled_date: float
        """

        self._scheduled_date = scheduled_date

    @property
    def recurring_options(self) -> TransferRecurringAddRequestRecurringOptions:
        """Gets the recurring_options of this TransferRecurringAddRequest.


        :return: The recurring_options of this TransferRecurringAddRequest.
        :rtype: TransferRecurringAddRequestRecurringOptions
        """
        return self._recurring_options

    @recurring_options.setter
    def recurring_options(self, recurring_options: TransferRecurringAddRequestRecurringOptions):
        """Sets the recurring_options of this TransferRecurringAddRequest.


        :param recurring_options: The recurring_options of this TransferRecurringAddRequest.
        :type recurring_options: TransferRecurringAddRequestRecurringOptions
        """

        self._recurring_options = recurring_options
