# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class CcRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, customer_id: float=None, amount: float=None, currency: str=None, source_account_id: str=None, target_account_id: str=None, transaction_type: float=None, due_date: str=None):  # noqa: E501
        """CcRequest - a model defined in Swagger

        :param customer_id: The customer_id of this CcRequest.  # noqa: E501
        :type customer_id: float
        :param amount: The amount of this CcRequest.  # noqa: E501
        :type amount: float
        :param currency: The currency of this CcRequest.  # noqa: E501
        :type currency: str
        :param source_account_id: The source_account_id of this CcRequest.  # noqa: E501
        :type source_account_id: str
        :param target_account_id: The target_account_id of this CcRequest.  # noqa: E501
        :type target_account_id: str
        :param transaction_type: The transaction_type of this CcRequest.  # noqa: E501
        :type transaction_type: float
        :param due_date: The due_date of this CcRequest.  # noqa: E501
        :type due_date: str
        """
        self.swagger_types = {
            'customer_id': float,
            'amount': float,
            'currency': str,
            'source_account_id': str,
            'target_account_id': str,
            'transaction_type': float,
            'due_date': str
        }

        self.attribute_map = {
            'customer_id': 'customerId',
            'amount': 'amount',
            'currency': 'currency',
            'source_account_id': 'sourceAccountId',
            'target_account_id': 'targetAccountId',
            'transaction_type': 'transactionType',
            'due_date': 'dueDate'
        }
        self._customer_id = customer_id
        self._amount = amount
        self._currency = currency
        self._source_account_id = source_account_id
        self._target_account_id = target_account_id
        self._transaction_type = transaction_type
        self._due_date = due_date

    @classmethod
    def from_dict(cls, dikt) -> 'CcRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ccRequest of this CcRequest.  # noqa: E501
        :rtype: CcRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_id(self) -> float:
        """Gets the customer_id of this CcRequest.


        :return: The customer_id of this CcRequest.
        :rtype: float
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id: float):
        """Sets the customer_id of this CcRequest.


        :param customer_id: The customer_id of this CcRequest.
        :type customer_id: float
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")  # noqa: E501

        self._customer_id = customer_id

    @property
    def amount(self) -> float:
        """Gets the amount of this CcRequest.


        :return: The amount of this CcRequest.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount: float):
        """Sets the amount of this CcRequest.


        :param amount: The amount of this CcRequest.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def currency(self) -> str:
        """Gets the currency of this CcRequest.


        :return: The currency of this CcRequest.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency: str):
        """Sets the currency of this CcRequest.


        :param currency: The currency of this CcRequest.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def source_account_id(self) -> str:
        """Gets the source_account_id of this CcRequest.


        :return: The source_account_id of this CcRequest.
        :rtype: str
        """
        return self._source_account_id

    @source_account_id.setter
    def source_account_id(self, source_account_id: str):
        """Sets the source_account_id of this CcRequest.


        :param source_account_id: The source_account_id of this CcRequest.
        :type source_account_id: str
        """
        if source_account_id is None:
            raise ValueError("Invalid value for `source_account_id`, must not be `None`")  # noqa: E501

        self._source_account_id = source_account_id

    @property
    def target_account_id(self) -> str:
        """Gets the target_account_id of this CcRequest.


        :return: The target_account_id of this CcRequest.
        :rtype: str
        """
        return self._target_account_id

    @target_account_id.setter
    def target_account_id(self, target_account_id: str):
        """Sets the target_account_id of this CcRequest.


        :param target_account_id: The target_account_id of this CcRequest.
        :type target_account_id: str
        """
        if target_account_id is None:
            raise ValueError("Invalid value for `target_account_id`, must not be `None`")  # noqa: E501

        self._target_account_id = target_account_id

    @property
    def transaction_type(self) -> float:
        """Gets the transaction_type of this CcRequest.


        :return: The transaction_type of this CcRequest.
        :rtype: float
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type: float):
        """Sets the transaction_type of this CcRequest.


        :param transaction_type: The transaction_type of this CcRequest.
        :type transaction_type: float
        """
        if transaction_type is None:
            raise ValueError("Invalid value for `transaction_type`, must not be `None`")  # noqa: E501

        self._transaction_type = transaction_type

    @property
    def due_date(self) -> str:
        """Gets the due_date of this CcRequest.


        :return: The due_date of this CcRequest.
        :rtype: str
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date: str):
        """Sets the due_date of this CcRequest.


        :param due_date: The due_date of this CcRequest.
        :type due_date: str
        """
        if due_date is None:
            raise ValueError("Invalid value for `due_date`, must not be `None`")  # noqa: E501

        self._due_date = due_date
