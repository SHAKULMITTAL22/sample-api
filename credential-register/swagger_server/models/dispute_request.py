# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.dispute_request_transactions_data import DisputeRequestTransactionsData  # noqa: F401,E501
from swagger_server import util


class DisputeRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, customer_id: float=None, email_id: str=None, transactions_data: List[DisputeRequestTransactionsData]=None):  # noqa: E501
        """DisputeRequest - a model defined in Swagger

        :param customer_id: The customer_id of this DisputeRequest.  # noqa: E501
        :type customer_id: float
        :param email_id: The email_id of this DisputeRequest.  # noqa: E501
        :type email_id: str
        :param transactions_data: The transactions_data of this DisputeRequest.  # noqa: E501
        :type transactions_data: List[DisputeRequestTransactionsData]
        """
        self.swagger_types = {
            'customer_id': float,
            'email_id': str,
            'transactions_data': List[DisputeRequestTransactionsData]
        }

        self.attribute_map = {
            'customer_id': 'customerId',
            'email_id': 'emailId',
            'transactions_data': 'transactionsData'
        }
        self._customer_id = customer_id
        self._email_id = email_id
        self._transactions_data = transactions_data

    @classmethod
    def from_dict(cls, dikt) -> 'DisputeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The disputeRequest of this DisputeRequest.  # noqa: E501
        :rtype: DisputeRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_id(self) -> float:
        """Gets the customer_id of this DisputeRequest.


        :return: The customer_id of this DisputeRequest.
        :rtype: float
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id: float):
        """Sets the customer_id of this DisputeRequest.


        :param customer_id: The customer_id of this DisputeRequest.
        :type customer_id: float
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")  # noqa: E501

        self._customer_id = customer_id

    @property
    def email_id(self) -> str:
        """Gets the email_id of this DisputeRequest.


        :return: The email_id of this DisputeRequest.
        :rtype: str
        """
        return self._email_id

    @email_id.setter
    def email_id(self, email_id: str):
        """Sets the email_id of this DisputeRequest.


        :param email_id: The email_id of this DisputeRequest.
        :type email_id: str
        """

        self._email_id = email_id

    @property
    def transactions_data(self) -> List[DisputeRequestTransactionsData]:
        """Gets the transactions_data of this DisputeRequest.


        :return: The transactions_data of this DisputeRequest.
        :rtype: List[DisputeRequestTransactionsData]
        """
        return self._transactions_data

    @transactions_data.setter
    def transactions_data(self, transactions_data: List[DisputeRequestTransactionsData]):
        """Sets the transactions_data of this DisputeRequest.


        :param transactions_data: The transactions_data of this DisputeRequest.
        :type transactions_data: List[DisputeRequestTransactionsData]
        """
        if transactions_data is None:
            raise ValueError("Invalid value for `transactions_data`, must not be `None`")  # noqa: E501

        self._transactions_data = transactions_data
