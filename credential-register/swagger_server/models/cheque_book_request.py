# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ChequeBookRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, customer_id: float=None, number_of_cheque_books: float=None, number_of_leaves: float=None, account_number: str=None):  # noqa: E501
        """ChequeBookRequest - a model defined in Swagger

        :param customer_id: The customer_id of this ChequeBookRequest.  # noqa: E501
        :type customer_id: float
        :param number_of_cheque_books: The number_of_cheque_books of this ChequeBookRequest.  # noqa: E501
        :type number_of_cheque_books: float
        :param number_of_leaves: The number_of_leaves of this ChequeBookRequest.  # noqa: E501
        :type number_of_leaves: float
        :param account_number: The account_number of this ChequeBookRequest.  # noqa: E501
        :type account_number: str
        """
        self.swagger_types = {
            'customer_id': float,
            'number_of_cheque_books': float,
            'number_of_leaves': float,
            'account_number': str
        }

        self.attribute_map = {
            'customer_id': 'customerId',
            'number_of_cheque_books': 'numberOfChequeBooks',
            'number_of_leaves': 'numberOfLeaves',
            'account_number': 'accountNumber'
        }
        self._customer_id = customer_id
        self._number_of_cheque_books = number_of_cheque_books
        self._number_of_leaves = number_of_leaves
        self._account_number = account_number

    @classmethod
    def from_dict(cls, dikt) -> 'ChequeBookRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The chequeBookRequest of this ChequeBookRequest.  # noqa: E501
        :rtype: ChequeBookRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_id(self) -> float:
        """Gets the customer_id of this ChequeBookRequest.


        :return: The customer_id of this ChequeBookRequest.
        :rtype: float
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id: float):
        """Sets the customer_id of this ChequeBookRequest.


        :param customer_id: The customer_id of this ChequeBookRequest.
        :type customer_id: float
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")  # noqa: E501

        self._customer_id = customer_id

    @property
    def number_of_cheque_books(self) -> float:
        """Gets the number_of_cheque_books of this ChequeBookRequest.


        :return: The number_of_cheque_books of this ChequeBookRequest.
        :rtype: float
        """
        return self._number_of_cheque_books

    @number_of_cheque_books.setter
    def number_of_cheque_books(self, number_of_cheque_books: float):
        """Sets the number_of_cheque_books of this ChequeBookRequest.


        :param number_of_cheque_books: The number_of_cheque_books of this ChequeBookRequest.
        :type number_of_cheque_books: float
        """
        if number_of_cheque_books is None:
            raise ValueError("Invalid value for `number_of_cheque_books`, must not be `None`")  # noqa: E501

        self._number_of_cheque_books = number_of_cheque_books

    @property
    def number_of_leaves(self) -> float:
        """Gets the number_of_leaves of this ChequeBookRequest.

        per cheque book  # noqa: E501

        :return: The number_of_leaves of this ChequeBookRequest.
        :rtype: float
        """
        return self._number_of_leaves

    @number_of_leaves.setter
    def number_of_leaves(self, number_of_leaves: float):
        """Sets the number_of_leaves of this ChequeBookRequest.

        per cheque book  # noqa: E501

        :param number_of_leaves: The number_of_leaves of this ChequeBookRequest.
        :type number_of_leaves: float
        """

        self._number_of_leaves = number_of_leaves

    @property
    def account_number(self) -> str:
        """Gets the account_number of this ChequeBookRequest.


        :return: The account_number of this ChequeBookRequest.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number: str):
        """Sets the account_number of this ChequeBookRequest.


        :param account_number: The account_number of this ChequeBookRequest.
        :type account_number: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")  # noqa: E501

        self._account_number = account_number
