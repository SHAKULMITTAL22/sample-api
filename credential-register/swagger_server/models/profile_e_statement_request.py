# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ProfileEStatementRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, customer_id: float=None, email: str=None, secondary_email: str=None, subscribe: bool=None, meta: object=None):  # noqa: E501
        """ProfileEStatementRequest - a model defined in Swagger

        :param customer_id: The customer_id of this ProfileEStatementRequest.  # noqa: E501
        :type customer_id: float
        :param email: The email of this ProfileEStatementRequest.  # noqa: E501
        :type email: str
        :param secondary_email: The secondary_email of this ProfileEStatementRequest.  # noqa: E501
        :type secondary_email: str
        :param subscribe: The subscribe of this ProfileEStatementRequest.  # noqa: E501
        :type subscribe: bool
        :param meta: The meta of this ProfileEStatementRequest.  # noqa: E501
        :type meta: object
        """
        self.swagger_types = {
            'customer_id': float,
            'email': str,
            'secondary_email': str,
            'subscribe': bool,
            'meta': object
        }

        self.attribute_map = {
            'customer_id': 'customerId',
            'email': 'email',
            'secondary_email': 'secondaryEmail',
            'subscribe': 'subscribe',
            'meta': 'meta'
        }
        self._customer_id = customer_id
        self._email = email
        self._secondary_email = secondary_email
        self._subscribe = subscribe
        self._meta = meta

    @classmethod
    def from_dict(cls, dikt) -> 'ProfileEStatementRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The profileEStatementRequest of this ProfileEStatementRequest.  # noqa: E501
        :rtype: ProfileEStatementRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_id(self) -> float:
        """Gets the customer_id of this ProfileEStatementRequest.


        :return: The customer_id of this ProfileEStatementRequest.
        :rtype: float
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id: float):
        """Sets the customer_id of this ProfileEStatementRequest.


        :param customer_id: The customer_id of this ProfileEStatementRequest.
        :type customer_id: float
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")  # noqa: E501

        self._customer_id = customer_id

    @property
    def email(self) -> str:
        """Gets the email of this ProfileEStatementRequest.


        :return: The email of this ProfileEStatementRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this ProfileEStatementRequest.


        :param email: The email of this ProfileEStatementRequest.
        :type email: str
        """

        self._email = email

    @property
    def secondary_email(self) -> str:
        """Gets the secondary_email of this ProfileEStatementRequest.


        :return: The secondary_email of this ProfileEStatementRequest.
        :rtype: str
        """
        return self._secondary_email

    @secondary_email.setter
    def secondary_email(self, secondary_email: str):
        """Sets the secondary_email of this ProfileEStatementRequest.


        :param secondary_email: The secondary_email of this ProfileEStatementRequest.
        :type secondary_email: str
        """

        self._secondary_email = secondary_email

    @property
    def subscribe(self) -> bool:
        """Gets the subscribe of this ProfileEStatementRequest.

        false for unsubscribe estatement  # noqa: E501

        :return: The subscribe of this ProfileEStatementRequest.
        :rtype: bool
        """
        return self._subscribe

    @subscribe.setter
    def subscribe(self, subscribe: bool):
        """Sets the subscribe of this ProfileEStatementRequest.

        false for unsubscribe estatement  # noqa: E501

        :param subscribe: The subscribe of this ProfileEStatementRequest.
        :type subscribe: bool
        """

        self._subscribe = subscribe

    @property
    def meta(self) -> object:
        """Gets the meta of this ProfileEStatementRequest.


        :return: The meta of this ProfileEStatementRequest.
        :rtype: object
        """
        return self._meta

    @meta.setter
    def meta(self, meta: object):
        """Sets the meta of this ProfileEStatementRequest.


        :param meta: The meta of this ProfileEStatementRequest.
        :type meta: object
        """

        self._meta = meta
