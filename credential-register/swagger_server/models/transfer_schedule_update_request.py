# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class TransferScheduleUpdateRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, payment_id: str=None, customer_id: float=None, amount: float=None, scheduled_date: float=None, source_account_id: str=None, target_account_id: str=None):  # noqa: E501
        """TransferScheduleUpdateRequest - a model defined in Swagger

        :param payment_id: The payment_id of this TransferScheduleUpdateRequest.  # noqa: E501
        :type payment_id: str
        :param customer_id: The customer_id of this TransferScheduleUpdateRequest.  # noqa: E501
        :type customer_id: float
        :param amount: The amount of this TransferScheduleUpdateRequest.  # noqa: E501
        :type amount: float
        :param scheduled_date: The scheduled_date of this TransferScheduleUpdateRequest.  # noqa: E501
        :type scheduled_date: float
        :param source_account_id: The source_account_id of this TransferScheduleUpdateRequest.  # noqa: E501
        :type source_account_id: str
        :param target_account_id: The target_account_id of this TransferScheduleUpdateRequest.  # noqa: E501
        :type target_account_id: str
        """
        self.swagger_types = {
            'payment_id': str,
            'customer_id': float,
            'amount': float,
            'scheduled_date': float,
            'source_account_id': str,
            'target_account_id': str
        }

        self.attribute_map = {
            'payment_id': 'paymentId',
            'customer_id': 'customerId',
            'amount': 'amount',
            'scheduled_date': 'scheduledDate',
            'source_account_id': 'sourceAccountId',
            'target_account_id': 'targetAccountId'
        }
        self._payment_id = payment_id
        self._customer_id = customer_id
        self._amount = amount
        self._scheduled_date = scheduled_date
        self._source_account_id = source_account_id
        self._target_account_id = target_account_id

    @classmethod
    def from_dict(cls, dikt) -> 'TransferScheduleUpdateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The transferScheduleUpdateRequest of this TransferScheduleUpdateRequest.  # noqa: E501
        :rtype: TransferScheduleUpdateRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def payment_id(self) -> str:
        """Gets the payment_id of this TransferScheduleUpdateRequest.


        :return: The payment_id of this TransferScheduleUpdateRequest.
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id: str):
        """Sets the payment_id of this TransferScheduleUpdateRequest.


        :param payment_id: The payment_id of this TransferScheduleUpdateRequest.
        :type payment_id: str
        """
        if payment_id is None:
            raise ValueError("Invalid value for `payment_id`, must not be `None`")  # noqa: E501

        self._payment_id = payment_id

    @property
    def customer_id(self) -> float:
        """Gets the customer_id of this TransferScheduleUpdateRequest.


        :return: The customer_id of this TransferScheduleUpdateRequest.
        :rtype: float
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id: float):
        """Sets the customer_id of this TransferScheduleUpdateRequest.


        :param customer_id: The customer_id of this TransferScheduleUpdateRequest.
        :type customer_id: float
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")  # noqa: E501

        self._customer_id = customer_id

    @property
    def amount(self) -> float:
        """Gets the amount of this TransferScheduleUpdateRequest.


        :return: The amount of this TransferScheduleUpdateRequest.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount: float):
        """Sets the amount of this TransferScheduleUpdateRequest.


        :param amount: The amount of this TransferScheduleUpdateRequest.
        :type amount: float
        """

        self._amount = amount

    @property
    def scheduled_date(self) -> float:
        """Gets the scheduled_date of this TransferScheduleUpdateRequest.

        in terms of timestamp  # noqa: E501

        :return: The scheduled_date of this TransferScheduleUpdateRequest.
        :rtype: float
        """
        return self._scheduled_date

    @scheduled_date.setter
    def scheduled_date(self, scheduled_date: float):
        """Sets the scheduled_date of this TransferScheduleUpdateRequest.

        in terms of timestamp  # noqa: E501

        :param scheduled_date: The scheduled_date of this TransferScheduleUpdateRequest.
        :type scheduled_date: float
        """

        self._scheduled_date = scheduled_date

    @property
    def source_account_id(self) -> str:
        """Gets the source_account_id of this TransferScheduleUpdateRequest.


        :return: The source_account_id of this TransferScheduleUpdateRequest.
        :rtype: str
        """
        return self._source_account_id

    @source_account_id.setter
    def source_account_id(self, source_account_id: str):
        """Sets the source_account_id of this TransferScheduleUpdateRequest.


        :param source_account_id: The source_account_id of this TransferScheduleUpdateRequest.
        :type source_account_id: str
        """
        if source_account_id is None:
            raise ValueError("Invalid value for `source_account_id`, must not be `None`")  # noqa: E501

        self._source_account_id = source_account_id

    @property
    def target_account_id(self) -> str:
        """Gets the target_account_id of this TransferScheduleUpdateRequest.


        :return: The target_account_id of this TransferScheduleUpdateRequest.
        :rtype: str
        """
        return self._target_account_id

    @target_account_id.setter
    def target_account_id(self, target_account_id: str):
        """Sets the target_account_id of this TransferScheduleUpdateRequest.


        :param target_account_id: The target_account_id of this TransferScheduleUpdateRequest.
        :type target_account_id: str
        """

        self._target_account_id = target_account_id
