# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class GetAccountDataAccountsCardChannelInfoATM(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, enable: bool=None, limit: float=None):  # noqa: E501
        """GetAccountDataAccountsCardChannelInfoATM - a model defined in Swagger

        :param enable: The enable of this GetAccountDataAccountsCardChannelInfoATM.  # noqa: E501
        :type enable: bool
        :param limit: The limit of this GetAccountDataAccountsCardChannelInfoATM.  # noqa: E501
        :type limit: float
        """
        self.swagger_types = {
            'enable': bool,
            'limit': float
        }

        self.attribute_map = {
            'enable': 'enable',
            'limit': 'limit'
        }
        self._enable = enable
        self._limit = limit

    @classmethod
    def from_dict(cls, dikt) -> 'GetAccountDataAccountsCardChannelInfoATM':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The getAccountData_accounts_cardChannelInfo_ATM of this GetAccountDataAccountsCardChannelInfoATM.  # noqa: E501
        :rtype: GetAccountDataAccountsCardChannelInfoATM
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enable(self) -> bool:
        """Gets the enable of this GetAccountDataAccountsCardChannelInfoATM.


        :return: The enable of this GetAccountDataAccountsCardChannelInfoATM.
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable: bool):
        """Sets the enable of this GetAccountDataAccountsCardChannelInfoATM.


        :param enable: The enable of this GetAccountDataAccountsCardChannelInfoATM.
        :type enable: bool
        """

        self._enable = enable

    @property
    def limit(self) -> float:
        """Gets the limit of this GetAccountDataAccountsCardChannelInfoATM.


        :return: The limit of this GetAccountDataAccountsCardChannelInfoATM.
        :rtype: float
        """
        return self._limit

    @limit.setter
    def limit(self, limit: float):
        """Sets the limit of this GetAccountDataAccountsCardChannelInfoATM.


        :param limit: The limit of this GetAccountDataAccountsCardChannelInfoATM.
        :type limit: float
        """

        self._limit = limit
