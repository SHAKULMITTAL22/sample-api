# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class DeleteScheduleTransferRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, payment_id: str=None, update_transfer_type: str=None, customer_id: float=None, source_account_id: str=None):  # noqa: E501
        """DeleteScheduleTransferRequest - a model defined in Swagger

        :param payment_id: The payment_id of this DeleteScheduleTransferRequest.  # noqa: E501
        :type payment_id: str
        :param update_transfer_type: The update_transfer_type of this DeleteScheduleTransferRequest.  # noqa: E501
        :type update_transfer_type: str
        :param customer_id: The customer_id of this DeleteScheduleTransferRequest.  # noqa: E501
        :type customer_id: float
        :param source_account_id: The source_account_id of this DeleteScheduleTransferRequest.  # noqa: E501
        :type source_account_id: str
        """
        self.swagger_types = {
            'payment_id': str,
            'update_transfer_type': str,
            'customer_id': float,
            'source_account_id': str
        }

        self.attribute_map = {
            'payment_id': 'paymentId',
            'update_transfer_type': 'updateTransferType',
            'customer_id': 'customerId',
            'source_account_id': 'sourceAccountId'
        }
        self._payment_id = payment_id
        self._update_transfer_type = update_transfer_type
        self._customer_id = customer_id
        self._source_account_id = source_account_id

    @classmethod
    def from_dict(cls, dikt) -> 'DeleteScheduleTransferRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The deleteScheduleTransferRequest of this DeleteScheduleTransferRequest.  # noqa: E501
        :rtype: DeleteScheduleTransferRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def payment_id(self) -> str:
        """Gets the payment_id of this DeleteScheduleTransferRequest.


        :return: The payment_id of this DeleteScheduleTransferRequest.
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id: str):
        """Sets the payment_id of this DeleteScheduleTransferRequest.


        :param payment_id: The payment_id of this DeleteScheduleTransferRequest.
        :type payment_id: str
        """
        if payment_id is None:
            raise ValueError("Invalid value for `payment_id`, must not be `None`")  # noqa: E501

        self._payment_id = payment_id

    @property
    def update_transfer_type(self) -> str:
        """Gets the update_transfer_type of this DeleteScheduleTransferRequest.


        :return: The update_transfer_type of this DeleteScheduleTransferRequest.
        :rtype: str
        """
        return self._update_transfer_type

    @update_transfer_type.setter
    def update_transfer_type(self, update_transfer_type: str):
        """Sets the update_transfer_type of this DeleteScheduleTransferRequest.


        :param update_transfer_type: The update_transfer_type of this DeleteScheduleTransferRequest.
        :type update_transfer_type: str
        """

        self._update_transfer_type = update_transfer_type

    @property
    def customer_id(self) -> float:
        """Gets the customer_id of this DeleteScheduleTransferRequest.


        :return: The customer_id of this DeleteScheduleTransferRequest.
        :rtype: float
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id: float):
        """Sets the customer_id of this DeleteScheduleTransferRequest.


        :param customer_id: The customer_id of this DeleteScheduleTransferRequest.
        :type customer_id: float
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")  # noqa: E501

        self._customer_id = customer_id

    @property
    def source_account_id(self) -> str:
        """Gets the source_account_id of this DeleteScheduleTransferRequest.


        :return: The source_account_id of this DeleteScheduleTransferRequest.
        :rtype: str
        """
        return self._source_account_id

    @source_account_id.setter
    def source_account_id(self, source_account_id: str):
        """Sets the source_account_id of this DeleteScheduleTransferRequest.


        :param source_account_id: The source_account_id of this DeleteScheduleTransferRequest.
        :type source_account_id: str
        """

        self._source_account_id = source_account_id
