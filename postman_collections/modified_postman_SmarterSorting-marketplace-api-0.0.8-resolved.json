{
  "item": [
    {
      "name": "Search for product details and classification outputs for a product.",
      "request": {
        "name": "Search for product details and classification outputs for a product.",
        "description": {},
        "url": {
          "path": [
            "products:search"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [
            {
              "disabled": false,
              "key": "brand_name",
              "value": "{{brand_name}}",
              "description": "(Required) The name of the brand"
            },
            {
              "disabled": false,
              "key": "product_name",
              "value": "{{product_name}}",
              "description": "(Required) The name of the product"
            },
            {
              "disabled": false,
              "key": "upc",
              "value": "{{upc}}",
              "description": "(Required) Universal Product Code"
            },
            {
              "disabled": false,
              "key": "model_number",
              "value": "{{model_number}}"
            },
            {
              "disabled": false,
              "key": "confidence_model",
              "value": "{{confidence_model}}",
              "description": "(Required) "
            },
            {
              "disabled": false,
              "key": "product_description",
              "value": "{{product_description}}",
              "description": "Long form description of the product"
            }
          ],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "GET",
        "auth": {
          "type": "apikey",
          "apikey": [
            {
              "key": "key",
              "value": "Authorization"
            },
            {
              "key": "value",
              "value": "{{apiKey}}"
            },
            {
              "key": "in",
              "value": "header"
            }
          ]
        }
      },
      "response": [
        {
          "name": "Product found as a result of search criteria.",
          "originalRequest": {
            "url": {
              "path": [
                "products:search"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "brand_name",
                  "value": "{{brand_name}}"
                },
                {
                  "key": "product_name",
                  "value": "{{product_name}}"
                },
                {
                  "key": "upc",
                  "value": "{{upc}}"
                },
                {
                  "key": "model_number",
                  "value": "{{model_number}}"
                },
                {
                  "key": "confidence_model",
                  "value": "{{confidence_model}}"
                },
                {
                  "key": "product_description",
                  "value": "{{product_description}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"source_integrity\": {\n    \"score\": \"HIGH\",\n    \"source\": \"laboris\",\n    \"reason\": \"amet sunt reprehenderit do\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-swagger using AI Type Azure Open AI and AI Model Inference\n\n\nTest generated for products{search}?brand_name={{brand_name}}&product_name={{product_name}}&upc={{upc}}&model_number={{model_number}}&confidence_model={{confidence_model}}&product_description={{product_description}} for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"Product found as a result of search criteria.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test(\"Response has Content-Type header\", function () {\n            pm.response.to.have.header(\"Content-Type\");\n        });\n        pm.test(\"Content-Type is application/json\", function () {\n            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n        });\n        pm.test('Response has the `source_integrity` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source_integrity`)){\n                if(pm.expect(ld.get(pm.response.json(), `source_integrity`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source_integrity`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source_integrity.score` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source_integrity.score`)){\n                if(pm.expect(ld.get(pm.response.json(), `source_integrity.score`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source_integrity.score`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test(`source_integrity.score length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `source_integrity.score`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`source_integrity.score length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `source_integrity.score`, \"\").length).to.be.at.least(0);\n        })\n\n        pm.test('Response has the `source_integrity.source` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source_integrity.source`)){\n                if(pm.expect(ld.get(pm.response.json(), `source_integrity.source`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source_integrity.source`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test(`source_integrity.source length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `source_integrity.source`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`source_integrity.source length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `source_integrity.source`, \"\").length).to.be.at.least(0);\n        })\n\n        pm.test('Response has the `source_integrity.reason` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source_integrity.reason`)){\n                if(pm.expect(ld.get(pm.response.json(), `source_integrity.reason`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source_integrity.reason`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test(`source_integrity.reason length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `source_integrity.reason`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`source_integrity.reason length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `source_integrity.reason`, \"\").length).to.be.at.least(0);\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    }
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "https://api-staging.smartersorting.com/v1/marketplace",
      "key": "baseUrl"
    },
    {
      "type": "number",
      "value": 200,
      "key": "statusCode"
    }
  ],
  "info": {
    "_postman_id": "c778625a-2a17-44cc-8d8f-930ecceddd9c",
    "name": "Marketplace API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "This API is designed to enable the generation and retrieval of probabalistic classification outputs for a product by providing only basic identifying information, such as product name and brand name.",
      "type": "text/plain"
    }
  }
}