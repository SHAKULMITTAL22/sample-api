{
  "openapi": "3.0.3",
  "info": {
    "title": "Auth0 Management API",
    "description": "Auth0 Management API v2.",
    "termsOfService": "https://auth0.com/web-terms/",
    "version": "2.0"
  },
  "servers": [
    {
      "url": "https://{tenantDomain}/api/v2",
      "variables": {
        "tenantDomain": {
          "default": "{TENANT}.auth0.com",
          "description": "Auth0 Tenant Domain"
        }
      }
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "externalDocs": {
    "description": "Auth0 Management API Documentation",
    "url": "https://auth0.com/docs/api/management/v2/"
  },
  "paths": {
    "/actions/actions": {
      "get": {
        "summary": "Get actions",
        "description": "Retrieve all actions.\n",
        "tags": [
          "actions"
        ],
        "parameters": [
          {
            "name": "triggerId",
            "in": "query",
            "description": "An actions extensibility point.",
            "schema": {
              "$ref": "#/components/schemas/ActionTriggerTypeEnum"
            }
          },
          {
            "name": "actionName",
            "in": "query",
            "description": "The name of the action to retrieve.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deployed",
            "in": "query",
            "description": "Optional filter to only retrieve actions that are deployed.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Use this field to request a specific page of the list results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "The maximum number of results to be returned by the server in single response. 20 by default",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "installed",
            "in": "query",
            "description": "Optional. When true, return only installed actions. When false, return only custom actions. Returns all actions by default.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The actions were retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListActionsPaginatedResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope, expected: read:actions."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_actions",
        "x-operation-name": "list",
        "x-operation-group": "actions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:actions"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create an action",
        "description": "Create an action. Once an action is created, it must be deployed, and then bound to a trigger before it will be executed as part of a flow.\n",
        "tags": [
          "actions"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateActionRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateActionRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Action successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateActionResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Request Body."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope, expected: create:actions."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_action",
        "x-operation-name": "create",
        "x-operation-group": "actions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:actions"
            ]
          }
        ]
      }
    },
    "/actions/actions/{actionId}/versions": {
      "get": {
        "summary": "Get an action's versions",
        "description": "Retrieve all of an action's versions. An action version is created whenever an action is deployed. An action version is immutable, once created.\n",
        "tags": [
          "actions"
        ],
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "The ID of the action.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Use this field to request a specific page of the list results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "This field specify the maximum number of results to be returned by the server. 20 by default",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The action versions were retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListActionVersionsPaginatedResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope, expected: read:actions."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_action_versions",
        "x-operation-name": "list",
        "x-operation-group": [
          "actions",
          "versions"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:actions"
            ]
          }
        ]
      }
    },
    "/actions/actions/{actionId}/versions/{id}": {
      "get": {
        "summary": "Get a specific version of an action",
        "description": "Retrieve a specific version of an action. An action version is created whenever an action is deployed. An action version is immutable, once created.\n",
        "tags": [
          "actions"
        ],
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "The ID of the action.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the action version.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The action version was retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetActionVersionResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope, expected: read:actions."
          },
          "404": {
            "description": "The action version does not exist."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_action_version",
        "x-operation-name": "get",
        "x-operation-group": [
          "actions",
          "versions"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:actions"
            ]
          }
        ]
      }
    },
    "/actions/actions/{actionId}/versions/{id}/deploy": {
      "post": {
        "summary": "Roll back to a previous action version",
        "description": "Performs the equivalent of a roll-back of an action to an earlier, specified version. Creates a new, deployed action version that is identical to the specified version. If this action is currently bound to a trigger, the system will begin executing the newly-created version immediately.\n",
        "tags": [
          "actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of an action version.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "actionId",
            "in": "path",
            "description": "The ID of an action.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeployActionVersionRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DeployActionVersionRequestBody"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Request to create action version was accepted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeployActionVersionResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Request Body."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope, expected: create:actions."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_deploy_draft_version",
        "x-operation-name": "deploy",
        "x-operation-group": [
          "actions",
          "versions"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:actions"
            ]
          }
        ]
      }
    },
    "/actions/actions/{id}": {
      "get": {
        "summary": "Get an action",
        "description": "Retrieve an action by its ID.\n",
        "tags": [
          "actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the action to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The action was retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetActionResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope, expected: read:actions."
          },
          "404": {
            "description": "The action does not exist."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_action",
        "x-operation-name": "get",
        "x-operation-group": "actions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:actions"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete an action",
        "description": "Deletes an action and all of its associated versions. An action must be unbound from all triggers before it can be deleted.\n",
        "tags": [
          "actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the action to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Force action deletion detaching bindings",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Action successfully deleted."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope, expected: delete:actions."
          },
          "404": {
            "description": "The action version does not exist."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_action",
        "x-operation-name": "delete",
        "x-operation-group": "actions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:actions"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update an action",
        "description": "Update an existing action. If this action is currently bound to a trigger, updating it will <strong>not</strong> affect any user flows until the action is deployed.\n",
        "tags": [
          "actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the action to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateActionRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateActionRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Action successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateActionResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Request Body."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope, expected: update:actions."
          },
          "404": {
            "description": "Action not found and cannot be updated."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_action",
        "x-operation-name": "update",
        "x-operation-group": "actions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:actions"
            ]
          }
        ]
      }
    },
    "/actions/actions/{id}/deploy": {
      "post": {
        "summary": "Deploy an action",
        "description": "Deploy an action. Deploying an action will create a new immutable version of the action. If the action is currently bound to a trigger, then the system will begin executing the newly deployed version of the action immediately. Otherwise, the action will only be executed as a part of a flow once it is bound to that flow.\n",
        "tags": [
          "actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of an action.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Request to create action version was accepted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeployActionResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Request Body."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope, expected: create:actions."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_deploy_action",
        "x-operation-name": "deploy",
        "x-operation-group": "actions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:actions"
            ]
          }
        ]
      }
    },
    "/actions/actions/{id}/test": {
      "post": {
        "summary": "Test an Action",
        "description": "Test an action. After updating an action, it can be tested prior to being deployed to ensure it behaves as expected.\n",
        "tags": [
          "actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the action to test.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestActionRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TestActionRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Test action version successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestActionResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Request Body."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope, expected: create:actions."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_test_action",
        "x-operation-name": "test",
        "x-operation-group": "actions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:actions"
            ]
          }
        ]
      }
    },
    "/actions/executions/{id}": {
      "get": {
        "summary": "Get an execution",
        "description": "Retrieve information about a specific execution of a trigger. Relevant execution IDs will be included in tenant logs generated as part of that authentication flow. Executions will only be stored for 10 days after their creation.\n",
        "tags": [
          "actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the execution to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The execution was retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetActionExecutionResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope, expected: read:actions."
          },
          "404": {
            "description": "The execution does not exist."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_execution",
        "x-operation-name": "getExecution",
        "x-operation-group": "actions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:actions"
            ]
          }
        ]
      }
    },
    "/actions/triggers": {
      "get": {
        "summary": "Get triggers",
        "description": "Retrieve the set of triggers currently available within actions. A trigger is an extensibility point to which actions can be bound.\n",
        "tags": [
          "actions"
        ],
        "responses": {
          "200": {
            "description": "The triggers were retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListActionTriggersResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope, expected: read:actions."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_triggers",
        "x-operation-name": "list",
        "x-operation-group": [
          "actions",
          "triggers"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:actions"
            ]
          }
        ]
      }
    },
    "/actions/triggers/{triggerId}/bindings": {
      "get": {
        "summary": "Get trigger bindings",
        "description": "Retrieve the actions that are bound to a trigger. Once an action is created and deployed, it must be attached (i.e. bound) to a trigger so that it will be executed as part of a flow. The list of actions returned reflects the order in which they will be executed during the appropriate flow.\n",
        "tags": [
          "actions"
        ],
        "parameters": [
          {
            "name": "triggerId",
            "in": "path",
            "description": "An actions extensibility point.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ActionTriggerTypeEnum"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Use this field to request a specific page of the list results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "The maximum number of results to be returned in a single request. 20 by default",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The bindings were retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListActionBindingsPaginatedResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope, expected: read:actions."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_bindings",
        "x-operation-name": "list",
        "x-operation-group": [
          "actions",
          "triggers",
          "bindings"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:actions"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update trigger bindings",
        "description": "Update the actions that are bound (i.e. attached) to a trigger. Once an action is created and deployed, it must be attached (i.e. bound) to a trigger so that it will be executed as part of a flow. The order in which the actions are provided will determine the order in which they are executed.",
        "tags": [
          "actions"
        ],
        "parameters": [
          {
            "name": "triggerId",
            "in": "path",
            "description": "An actions extensibility point.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ActionTriggerTypeEnum"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateActionBindingsRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateActionBindingsRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The bindings were updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateActionBindingsResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Request Body.",
            "x-description-1": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope, expected: update:actions."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_bindings",
        "x-operation-name": "updateMany",
        "x-operation-group": [
          "actions",
          "triggers",
          "bindings"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:actions"
            ]
          }
        ]
      }
    },
    "/anomaly/blocks/ips/{id}": {
      "get": {
        "summary": "Check if an IP address is blocked",
        "description": "Check if the given IP address is blocked via the <a href=\"https://auth0.com/docs/configure/attack-protection/suspicious-ip-throttling\">Suspicious IP Throttling</a> due to multiple suspicious attempts.",
        "tags": [
          "anomaly"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "IP address to check.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AnomalyIPFormat"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "IP address specified is currently blocked."
          },
          "400": {
            "description": "Connection does not exist.",
            "x-description-1": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: get:anomaly_block."
          },
          "404": {
            "description": "IP address specified is not currently blocked."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_ips_by_id",
        "x-operation-name": "checkIfIpIsBlocked",
        "x-operation-group": "anomaly",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:anomaly_blocks"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Remove the blocked IP address",
        "description": "Remove a block imposed by <a href=\"https://auth0.com/docs/configure/attack-protection/suspicious-ip-throttling\">Suspicious IP Throttling</a> for the given IP address.",
        "tags": [
          "anomaly"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "IP address to unblock.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AnomalyIPFormat"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "IP address specified successfully unblocked."
          },
          "400": {
            "description": "Connection does not exist.",
            "x-description-1": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: delete:anomaly_block."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_ips_by_id",
        "x-operation-name": "deleteBlockedIp",
        "x-operation-group": "anomaly",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:anomaly_blocks"
            ]
          }
        ]
      }
    },
    "/attack-protection/breached-password-detection": {
      "get": {
        "summary": "Get Breached Password Detection settings",
        "description": "Retrieve details of the Breached Password Detection configuration of your tenant.",
        "tags": [
          "attack-protection"
        ],
        "responses": {
          "200": {
            "description": "Breached password detection settings successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "description": "Whether or not breached password detection is active.",
                      "default": true
                    },
                    "shields": {
                      "type": "array",
                      "description": "Action to take when a breached password is detected during a login.\n      Possible values: <code>block</code>, <code>user_notification</code>, <code>admin_notification</code>.",
                      "items": {
                        "type": "string",
                        "enum": [
                          "block",
                          "user_notification",
                          "admin_notification"
                        ]
                      }
                    },
                    "admin_notification_frequency": {
                      "type": "array",
                      "description": "When \"admin_notification\" is enabled, determines how often email notifications are sent.\n        Possible values: <code>immediately</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>.",
                      "items": {
                        "type": "string",
                        "enum": [
                          "immediately",
                          "daily",
                          "weekly",
                          "monthly"
                        ]
                      }
                    },
                    "method": {
                      "type": "string",
                      "description": "The subscription level for breached password detection methods. Use \"enhanced\" to enable Credential Guard.\n        Possible values: <code>standard</code>, <code>enhanced</code>.",
                      "default": "standard",
                      "enum": [
                        "standard",
                        "enhanced"
                      ]
                    },
                    "stage": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "pre-user-registration": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "shields": {
                              "type": "array",
                              "description": "Action to take when a breached password is detected during a signup.\n              Possible values: <code>block</code>, <code>admin_notification</code>.",
                              "items": {
                                "type": "string",
                                "enum": [
                                  "block",
                                  "admin_notification"
                                ]
                              }
                            }
                          }
                        },
                        "pre-change-password": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "shields": {
                              "type": "array",
                              "description": "Action to take when a breached password is detected during a password reset.\n              Possible values: <code>block</code>, <code>admin_notification</code>.",
                              "items": {
                                "type": "string",
                                "enum": [
                                  "block",
                                  "admin_notification"
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:attack_protection."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_breached-password-detection",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:attack_protection"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update Breached Password Detection settings",
        "description": "Update details of the Breached Password Detection configuration of your tenant.",
        "tags": [
          "attack-protection"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Whether or not breached password detection is active.",
                    "default": true
                  },
                  "shields": {
                    "type": "array",
                    "description": "Action to take when a breached password is detected during a login.\n      Possible values: <code>block</code>, <code>user_notification</code>, <code>admin_notification</code>.",
                    "items": {
                      "type": "string",
                      "enum": [
                        "block",
                        "user_notification",
                        "admin_notification"
                      ]
                    }
                  },
                  "admin_notification_frequency": {
                    "type": "array",
                    "description": "When \"admin_notification\" is enabled, determines how often email notifications are sent.\n        Possible values: <code>immediately</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>.",
                    "items": {
                      "type": "string",
                      "enum": [
                        "immediately",
                        "daily",
                        "weekly",
                        "monthly"
                      ]
                    }
                  },
                  "method": {
                    "type": "string",
                    "description": "The subscription level for breached password detection methods. Use \"enhanced\" to enable Credential Guard.\n        Possible values: <code>standard</code>, <code>enhanced</code>.",
                    "default": "standard",
                    "enum": [
                      "standard",
                      "enhanced"
                    ]
                  },
                  "stage": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "pre-user-registration": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "shields": {
                            "type": "array",
                            "description": "Action to take when a breached password is detected during a signup.\n              Possible values: <code>block</code>, <code>admin_notification</code>.",
                            "items": {
                              "type": "string",
                              "enum": [
                                "block",
                                "admin_notification"
                              ]
                            }
                          }
                        }
                      },
                      "pre-change-password": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "shields": {
                            "type": "array",
                            "description": "Action to take when a breached password is detected during a password reset.\n              Possible values: <code>block</code>, <code>admin_notification</code>.",
                            "items": {
                              "type": "string",
                              "enum": [
                                "block",
                                "admin_notification"
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Whether or not breached password detection is active.",
                    "default": true
                  },
                  "shields": {
                    "type": "array",
                    "description": "Action to take when a breached password is detected during a login.\n      Possible values: <code>block</code>, <code>user_notification</code>, <code>admin_notification</code>.",
                    "items": {
                      "type": "string",
                      "enum": [
                        "block",
                        "user_notification",
                        "admin_notification"
                      ]
                    }
                  },
                  "admin_notification_frequency": {
                    "type": "array",
                    "description": "When \"admin_notification\" is enabled, determines how often email notifications are sent.\n        Possible values: <code>immediately</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>.",
                    "items": {
                      "type": "string",
                      "enum": [
                        "immediately",
                        "daily",
                        "weekly",
                        "monthly"
                      ]
                    }
                  },
                  "method": {
                    "type": "string",
                    "description": "The subscription level for breached password detection methods. Use \"enhanced\" to enable Credential Guard.\n        Possible values: <code>standard</code>, <code>enhanced</code>.",
                    "default": "standard",
                    "enum": [
                      "standard",
                      "enhanced"
                    ]
                  },
                  "stage": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "pre-user-registration": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "shields": {
                            "type": "array",
                            "description": "Action to take when a breached password is detected during a signup.\n              Possible values: <code>block</code>, <code>admin_notification</code>.",
                            "items": {
                              "type": "string",
                              "enum": [
                                "block",
                                "admin_notification"
                              ]
                            }
                          }
                        }
                      },
                      "pre-change-password": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "shields": {
                            "type": "array",
                            "description": "Action to take when a breached password is detected during a password reset.\n              Possible values: <code>block</code>, <code>admin_notification</code>.",
                            "items": {
                              "type": "string",
                              "enum": [
                                "block",
                                "admin_notification"
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Breached password detection settings successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "description": "Whether or not breached password detection is active.",
                      "default": true
                    },
                    "shields": {
                      "type": "array",
                      "description": "Action to take when a breached password is detected during a login.\n      Possible values: <code>block</code>, <code>user_notification</code>, <code>admin_notification</code>.",
                      "items": {
                        "type": "string",
                        "enum": [
                          "block",
                          "user_notification",
                          "admin_notification"
                        ]
                      }
                    },
                    "admin_notification_frequency": {
                      "type": "array",
                      "description": "When \"admin_notification\" is enabled, determines how often email notifications are sent.\n        Possible values: <code>immediately</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>.",
                      "items": {
                        "type": "string",
                        "enum": [
                          "immediately",
                          "daily",
                          "weekly",
                          "monthly"
                        ]
                      }
                    },
                    "method": {
                      "type": "string",
                      "description": "The subscription level for breached password detection methods. Use \"enhanced\" to enable Credential Guard.\n        Possible values: <code>standard</code>, <code>enhanced</code>.",
                      "default": "standard",
                      "enum": [
                        "standard",
                        "enhanced"
                      ]
                    },
                    "stage": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "pre-user-registration": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "shields": {
                              "type": "array",
                              "description": "Action to take when a breached password is detected during a signup.\n              Possible values: <code>block</code>, <code>admin_notification</code>.",
                              "items": {
                                "type": "string",
                                "enum": [
                                  "block",
                                  "admin_notification"
                                ]
                              }
                            }
                          }
                        },
                        "pre-change-password": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "shields": {
                              "type": "array",
                              "description": "Action to take when a breached password is detected during a password reset.\n              Possible values: <code>block</code>, <code>admin_notification</code>.",
                              "items": {
                                "type": "string",
                                "enum": [
                                  "block",
                                  "admin_notification"
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:attack_protection."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_breached-password-detection",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:attack_protection"
            ]
          }
        ]
      }
    },
    "/attack-protection/brute-force-protection": {
      "get": {
        "summary": "Get Brute-force settings",
        "description": "Retrieve details of the Brute-force Protection configuration of your tenant.",
        "tags": [
          "attack-protection"
        ],
        "responses": {
          "200": {
            "description": "Brute force configuration successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "description": "Whether or not brute force attack protections are active."
                    },
                    "shields": {
                      "type": "array",
                      "description": "Action to take when a brute force protection threshold is violated.\n        Possible values: <code>block</code>, <code>user_notification</code>.",
                      "items": {
                        "type": "string",
                        "enum": [
                          "block",
                          "user_notification"
                        ]
                      }
                    },
                    "allowlist": {
                      "type": "array",
                      "description": "List of trusted IP addresses that will not have attack protection enforced against them.",
                      "items": {
                        "type": "string",
                        "anyOf": [
                          {
                            "type": "string",
                            "format": "ipv4"
                          },
                          {
                            "type": "string",
                            "format": "cidr"
                          },
                          {
                            "type": "string",
                            "format": "ipv6"
                          },
                          {
                            "type": "string",
                            "format": "ipv6_cidr"
                          }
                        ]
                      }
                    },
                    "mode": {
                      "type": "string",
                      "description": "Account Lockout: Determines whether or not IP address is used when counting failed attempts.\n          Possible values: <code>count_per_identifier_and_ip</code>, <code>count_per_identifier</code>.",
                      "default": "count_per_identifier_and_ip",
                      "enum": [
                        "count_per_identifier_and_ip",
                        "count_per_identifier"
                      ]
                    },
                    "max_attempts": {
                      "type": "integer",
                      "description": "Maximum number of unsuccessful attempts.",
                      "default": 10
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:attack_protection."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_brute-force-protection",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:attack_protection"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update Brute-force settings",
        "description": "Update the Brute-force Protection configuration of your tenant.",
        "tags": [
          "attack-protection"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Whether or not brute force attack protections are active."
                  },
                  "shields": {
                    "type": "array",
                    "description": "Action to take when a brute force protection threshold is violated.\n        Possible values: <code>block</code>, <code>user_notification</code>.",
                    "items": {
                      "type": "string",
                      "enum": [
                        "block",
                        "user_notification"
                      ]
                    }
                  },
                  "allowlist": {
                    "type": "array",
                    "description": "List of trusted IP addresses that will not have attack protection enforced against them.",
                    "items": {
                      "type": "string",
                      "anyOf": [
                        {
                          "type": "string",
                          "format": "ipv4"
                        },
                        {
                          "type": "string",
                          "format": "cidr"
                        },
                        {
                          "type": "string",
                          "format": "ipv6"
                        },
                        {
                          "type": "string",
                          "format": "ipv6_cidr"
                        }
                      ]
                    }
                  },
                  "mode": {
                    "type": "string",
                    "description": "Account Lockout: Determines whether or not IP address is used when counting failed attempts.\n          Possible values: <code>count_per_identifier_and_ip</code>, <code>count_per_identifier</code>.",
                    "default": "count_per_identifier_and_ip",
                    "enum": [
                      "count_per_identifier_and_ip",
                      "count_per_identifier"
                    ]
                  },
                  "max_attempts": {
                    "type": "integer",
                    "description": "Maximum number of unsuccessful attempts.",
                    "default": 10
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Whether or not brute force attack protections are active."
                  },
                  "shields": {
                    "type": "array",
                    "description": "Action to take when a brute force protection threshold is violated.\n        Possible values: <code>block</code>, <code>user_notification</code>.",
                    "items": {
                      "type": "string",
                      "enum": [
                        "block",
                        "user_notification"
                      ]
                    }
                  },
                  "allowlist": {
                    "type": "array",
                    "description": "List of trusted IP addresses that will not have attack protection enforced against them.",
                    "items": {
                      "type": "string",
                      "anyOf": [
                        {
                          "type": "string",
                          "format": "ipv4"
                        },
                        {
                          "type": "string",
                          "format": "cidr"
                        },
                        {
                          "type": "string",
                          "format": "ipv6"
                        },
                        {
                          "type": "string",
                          "format": "ipv6_cidr"
                        }
                      ]
                    }
                  },
                  "mode": {
                    "type": "string",
                    "description": "Account Lockout: Determines whether or not IP address is used when counting failed attempts.\n          Possible values: <code>count_per_identifier_and_ip</code>, <code>count_per_identifier</code>.",
                    "default": "count_per_identifier_and_ip",
                    "enum": [
                      "count_per_identifier_and_ip",
                      "count_per_identifier"
                    ]
                  },
                  "max_attempts": {
                    "type": "integer",
                    "description": "Maximum number of unsuccessful attempts.",
                    "default": 10
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Brute force configuration successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "description": "Whether or not brute force attack protections are active."
                    },
                    "shields": {
                      "type": "array",
                      "description": "Action to take when a brute force protection threshold is violated.\n        Possible values: <code>block</code>, <code>user_notification</code>.",
                      "items": {
                        "type": "string",
                        "enum": [
                          "block",
                          "user_notification"
                        ]
                      }
                    },
                    "allowlist": {
                      "type": "array",
                      "description": "List of trusted IP addresses that will not have attack protection enforced against them.",
                      "items": {
                        "type": "string",
                        "anyOf": [
                          {
                            "type": "string",
                            "format": "ipv4"
                          },
                          {
                            "type": "string",
                            "format": "cidr"
                          },
                          {
                            "type": "string",
                            "format": "ipv6"
                          },
                          {
                            "type": "string",
                            "format": "ipv6_cidr"
                          }
                        ]
                      }
                    },
                    "mode": {
                      "type": "string",
                      "description": "Account Lockout: Determines whether or not IP address is used when counting failed attempts.\n          Possible values: <code>count_per_identifier_and_ip</code>, <code>count_per_identifier</code>.",
                      "default": "count_per_identifier_and_ip",
                      "enum": [
                        "count_per_identifier_and_ip",
                        "count_per_identifier"
                      ]
                    },
                    "max_attempts": {
                      "type": "integer",
                      "description": "Maximum number of unsuccessful attempts.",
                      "default": 10
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:attack_protection."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_brute-force-protection",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:attack_protection"
            ]
          }
        ]
      }
    },
    "/attack-protection/suspicious-ip-throttling": {
      "get": {
        "summary": "Get Suspicious IP Throttling settings",
        "description": "Retrieve details of the Suspicious IP Throttling configuration of your tenant.",
        "tags": [
          "attack-protection"
        ],
        "responses": {
          "200": {
            "description": "Suspicious IP throttling configuration successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "description": "Whether or not suspicious IP throttling attack protections are active."
                    },
                    "shields": {
                      "type": "array",
                      "description": "Action to take when a suspicious IP throttling threshold is violated.\n          Possible values: <code>block</code>, <code>admin_notification</code>.",
                      "items": {
                        "type": "string",
                        "enum": [
                          "block",
                          "admin_notification"
                        ]
                      }
                    },
                    "allowlist": {
                      "type": "array",
                      "description": "List of trusted IP addresses that will not have attack protection enforced against them.",
                      "items": {
                        "type": "string",
                        "anyOf": [
                          {
                            "type": "string",
                            "format": "ipv4"
                          },
                          {
                            "type": "string",
                            "format": "cidr"
                          },
                          {
                            "type": "string",
                            "format": "ipv6"
                          },
                          {
                            "type": "string",
                            "format": "ipv6_cidr"
                          }
                        ]
                      }
                    },
                    "stage": {
                      "type": "object",
                      "description": "Holds per-stage configuration options (max_attempts and rate).",
                      "additionalProperties": false,
                      "properties": {
                        "pre-login": {
                          "type": "object",
                          "description": "Configuration options that apply before every login attempt.",
                          "additionalProperties": false,
                          "properties": {
                            "max_attempts": {
                              "type": "integer",
                              "description": "Total number of attempts allowed per day.",
                              "default": 100
                            },
                            "rate": {
                              "type": "integer",
                              "description": "Interval of time, given in milliseconds, at which new attempts are granted.",
                              "default": 864000
                            }
                          }
                        },
                        "pre-user-registration": {
                          "type": "object",
                          "description": "Configuration options that apply before every user registration attempt.",
                          "additionalProperties": false,
                          "properties": {
                            "max_attempts": {
                              "type": "integer",
                              "description": "Total number of attempts allowed.",
                              "default": 50
                            },
                            "rate": {
                              "type": "integer",
                              "description": "Interval of time, given in milliseconds, at which new attempts are granted.",
                              "default": 1728000
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:attack_protection."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_suspicious-ip-throttling",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:attack_protection"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update Suspicious IP Throttling settings",
        "description": "Update the details of the Suspicious IP Throttling configuration of your tenant.",
        "tags": [
          "attack-protection"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Whether or not suspicious IP throttling attack protections are active."
                  },
                  "shields": {
                    "type": "array",
                    "description": "Action to take when a suspicious IP throttling threshold is violated.\n          Possible values: <code>block</code>, <code>admin_notification</code>.",
                    "items": {
                      "type": "string",
                      "enum": [
                        "block",
                        "admin_notification"
                      ]
                    }
                  },
                  "allowlist": {
                    "type": "array",
                    "description": "List of trusted IP addresses that will not have attack protection enforced against them.",
                    "items": {
                      "type": "string",
                      "anyOf": [
                        {
                          "type": "string",
                          "format": "ipv4"
                        },
                        {
                          "type": "string",
                          "format": "cidr"
                        },
                        {
                          "type": "string",
                          "format": "ipv6"
                        },
                        {
                          "type": "string",
                          "format": "ipv6_cidr"
                        }
                      ]
                    }
                  },
                  "stage": {
                    "type": "object",
                    "description": "Holds per-stage configuration options (max_attempts and rate).",
                    "additionalProperties": false,
                    "properties": {
                      "pre-login": {
                        "type": "object",
                        "description": "Configuration options that apply before every login attempt.",
                        "additionalProperties": false,
                        "properties": {
                          "max_attempts": {
                            "type": "integer",
                            "description": "Total number of attempts allowed per day.",
                            "default": 100
                          },
                          "rate": {
                            "type": "integer",
                            "description": "Interval of time, given in milliseconds, at which new attempts are granted.",
                            "default": 864000
                          }
                        }
                      },
                      "pre-user-registration": {
                        "type": "object",
                        "description": "Configuration options that apply before every user registration attempt.",
                        "additionalProperties": false,
                        "properties": {
                          "max_attempts": {
                            "type": "integer",
                            "description": "Total number of attempts allowed.",
                            "default": 50
                          },
                          "rate": {
                            "type": "integer",
                            "description": "Interval of time, given in milliseconds, at which new attempts are granted.",
                            "default": 1728000
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Whether or not suspicious IP throttling attack protections are active."
                  },
                  "shields": {
                    "type": "array",
                    "description": "Action to take when a suspicious IP throttling threshold is violated.\n          Possible values: <code>block</code>, <code>admin_notification</code>.",
                    "items": {
                      "type": "string",
                      "enum": [
                        "block",
                        "admin_notification"
                      ]
                    }
                  },
                  "allowlist": {
                    "type": "array",
                    "description": "List of trusted IP addresses that will not have attack protection enforced against them.",
                    "items": {
                      "type": "string",
                      "anyOf": [
                        {
                          "type": "string",
                          "format": "ipv4"
                        },
                        {
                          "type": "string",
                          "format": "cidr"
                        },
                        {
                          "type": "string",
                          "format": "ipv6"
                        },
                        {
                          "type": "string",
                          "format": "ipv6_cidr"
                        }
                      ]
                    }
                  },
                  "stage": {
                    "type": "object",
                    "description": "Holds per-stage configuration options (max_attempts and rate).",
                    "additionalProperties": false,
                    "properties": {
                      "pre-login": {
                        "type": "object",
                        "description": "Configuration options that apply before every login attempt.",
                        "additionalProperties": false,
                        "properties": {
                          "max_attempts": {
                            "type": "integer",
                            "description": "Total number of attempts allowed per day.",
                            "default": 100
                          },
                          "rate": {
                            "type": "integer",
                            "description": "Interval of time, given in milliseconds, at which new attempts are granted.",
                            "default": 864000
                          }
                        }
                      },
                      "pre-user-registration": {
                        "type": "object",
                        "description": "Configuration options that apply before every user registration attempt.",
                        "additionalProperties": false,
                        "properties": {
                          "max_attempts": {
                            "type": "integer",
                            "description": "Total number of attempts allowed.",
                            "default": 50
                          },
                          "rate": {
                            "type": "integer",
                            "description": "Interval of time, given in milliseconds, at which new attempts are granted.",
                            "default": 1728000
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Suspicious IP throttling configuration successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "description": "Whether or not suspicious IP throttling attack protections are active."
                    },
                    "shields": {
                      "type": "array",
                      "description": "Action to take when a suspicious IP throttling threshold is violated.\n          Possible values: <code>block</code>, <code>admin_notification</code>.",
                      "items": {
                        "type": "string",
                        "enum": [
                          "block",
                          "admin_notification"
                        ]
                      }
                    },
                    "allowlist": {
                      "type": "array",
                      "description": "List of trusted IP addresses that will not have attack protection enforced against them.",
                      "items": {
                        "type": "string",
                        "anyOf": [
                          {
                            "type": "string",
                            "format": "ipv4"
                          },
                          {
                            "type": "string",
                            "format": "cidr"
                          },
                          {
                            "type": "string",
                            "format": "ipv6"
                          },
                          {
                            "type": "string",
                            "format": "ipv6_cidr"
                          }
                        ]
                      }
                    },
                    "stage": {
                      "type": "object",
                      "description": "Holds per-stage configuration options (max_attempts and rate).",
                      "additionalProperties": false,
                      "properties": {
                        "pre-login": {
                          "type": "object",
                          "description": "Configuration options that apply before every login attempt.",
                          "additionalProperties": false,
                          "properties": {
                            "max_attempts": {
                              "type": "integer",
                              "description": "Total number of attempts allowed per day.",
                              "default": 100
                            },
                            "rate": {
                              "type": "integer",
                              "description": "Interval of time, given in milliseconds, at which new attempts are granted.",
                              "default": 864000
                            }
                          }
                        },
                        "pre-user-registration": {
                          "type": "object",
                          "description": "Configuration options that apply before every user registration attempt.",
                          "additionalProperties": false,
                          "properties": {
                            "max_attempts": {
                              "type": "integer",
                              "description": "Total number of attempts allowed.",
                              "default": 50
                            },
                            "rate": {
                              "type": "integer",
                              "description": "Interval of time, given in milliseconds, at which new attempts are granted.",
                              "default": 1728000
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:attack_protection."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_suspicious-ip-throttling",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:attack_protection"
            ]
          }
        ]
      }
    },
    "/branding": {
      "get": {
        "summary": "Get branding settings",
        "description": "Retrieve branding settings.",
        "tags": [
          "branding"
        ],
        "responses": {
          "200": {
            "description": "Branding settings successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "colors": {
                      "type": "object",
                      "description": "Custom color settings.",
                      "additionalProperties": false,
                      "properties": {
                        "primary": {
                          "type": "string",
                          "description": "Accent color.",
                          "format": "html-color"
                        },
                        "page_background": {
                          "description": "Page Background Color or Gradient.\nProperty contains either <code>null</code> to unset, a solid color as a string value <code>#FFFFFF</code>, or a gradient as an object.\n\n<pre><code>\n{\n  type: 'linear-gradient',\n  start: '#FFFFFF',\n  end: '#000000',\n  angle_deg: 35\n}\n</code></pre>\n",
                          "oneOf": [
                            {
                              "type": "string",
                              "nullable": true
                            },
                            {
                              "type": "object",
                              "nullable": true,
                              "additionalProperties": true
                            }
                          ]
                        }
                      }
                    },
                    "favicon_url": {
                      "type": "string",
                      "description": "URL for the favicon. Must use HTTPS.",
                      "format": "strict-https-uri"
                    },
                    "logo_url": {
                      "type": "string",
                      "description": "URL for the logo. Must use HTTPS.",
                      "format": "strict-https-uri"
                    },
                    "font": {
                      "type": "object",
                      "description": "Custom font settings.",
                      "additionalProperties": false,
                      "properties": {
                        "url": {
                          "type": "string",
                          "description": "URL for the custom font. The URL must point to a font file and not a stylesheet. Must use HTTPS.",
                          "format": "strict-https-uri"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "The specified client cannot perform the requested operation.",
            "x-description-1": "Insufficient scope; expected any of: read:branding."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_branding",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:branding"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update branding settings",
        "description": "Update branding settings.",
        "tags": [
          "branding"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Branding settings",
                "additionalProperties": false,
                "properties": {
                  "colors": {
                    "type": "object",
                    "nullable": true,
                    "description": "Custom color settings.",
                    "additionalProperties": false,
                    "properties": {
                      "primary": {
                        "type": "string",
                        "nullable": true,
                        "description": "Accent color.",
                        "format": "html-color-or-null"
                      },
                      "page_background": {
                        "description": "Page Background Color or Gradient.\nProperty contains either <code>null</code> to unset, a solid color as a string value <code>#FFFFFF</code>, or a gradient as an object.\n\n<pre><code>\n{\n  type: 'linear-gradient',\n  start: '#FFFFFF',\n  end: '#000000',\n  angle_deg: 35\n}\n</code></pre>\n",
                        "oneOf": [
                          {
                            "type": "string",
                            "nullable": true
                          },
                          {
                            "type": "object",
                            "nullable": true,
                            "additionalProperties": true
                          }
                        ]
                      }
                    }
                  },
                  "favicon_url": {
                    "type": "string",
                    "nullable": true,
                    "description": "URL for the favicon. Must use HTTPS.",
                    "format": "strict-https-uri-or-null"
                  },
                  "logo_url": {
                    "type": "string",
                    "nullable": true,
                    "description": "URL for the logo. Must use HTTPS.",
                    "format": "strict-https-uri-or-null"
                  },
                  "font": {
                    "type": "object",
                    "nullable": true,
                    "description": "Custom font settings.",
                    "additionalProperties": false,
                    "properties": {
                      "url": {
                        "type": "string",
                        "nullable": true,
                        "description": "URL for the custom font. The URL must point to a font file and not a stylesheet. Must use HTTPS.",
                        "format": "strict-https-uri-or-null"
                      }
                    }
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "description": "Branding settings",
                "additionalProperties": false,
                "properties": {
                  "colors": {
                    "type": "object",
                    "nullable": true,
                    "description": "Custom color settings.",
                    "additionalProperties": false,
                    "properties": {
                      "primary": {
                        "type": "string",
                        "nullable": true,
                        "description": "Accent color.",
                        "format": "html-color-or-null"
                      },
                      "page_background": {
                        "description": "Page Background Color or Gradient.\nProperty contains either <code>null</code> to unset, a solid color as a string value <code>#FFFFFF</code>, or a gradient as an object.\n\n<pre><code>\n{\n  type: 'linear-gradient',\n  start: '#FFFFFF',\n  end: '#000000',\n  angle_deg: 35\n}\n</code></pre>\n",
                        "oneOf": [
                          {
                            "type": "string",
                            "nullable": true
                          },
                          {
                            "type": "object",
                            "nullable": true,
                            "additionalProperties": true
                          }
                        ]
                      }
                    }
                  },
                  "favicon_url": {
                    "type": "string",
                    "nullable": true,
                    "description": "URL for the favicon. Must use HTTPS.",
                    "format": "strict-https-uri-or-null"
                  },
                  "logo_url": {
                    "type": "string",
                    "nullable": true,
                    "description": "URL for the logo. Must use HTTPS.",
                    "format": "strict-https-uri-or-null"
                  },
                  "font": {
                    "type": "object",
                    "nullable": true,
                    "description": "Custom font settings.",
                    "additionalProperties": false,
                    "properties": {
                      "url": {
                        "type": "string",
                        "nullable": true,
                        "description": "URL for the custom font. The URL must point to a font file and not a stylesheet. Must use HTTPS.",
                        "format": "strict-https-uri-or-null"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Branding settings successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "colors": {
                      "type": "object",
                      "description": "Custom color settings.",
                      "additionalProperties": false,
                      "properties": {
                        "primary": {
                          "type": "string",
                          "description": "Accent color.",
                          "format": "html-color"
                        },
                        "page_background": {
                          "description": "Page Background Color or Gradient.\nProperty contains either <code>null</code> to unset, a solid color as a string value <code>#FFFFFF</code>, or a gradient as an object.\n\n<pre><code>\n{\n  type: 'linear-gradient',\n  start: '#FFFFFF',\n  end: '#000000',\n  angle_deg: 35\n}\n</code></pre>\n",
                          "oneOf": [
                            {
                              "type": "string",
                              "nullable": true
                            },
                            {
                              "type": "object",
                              "nullable": true,
                              "additionalProperties": true
                            }
                          ]
                        }
                      }
                    },
                    "favicon_url": {
                      "type": "string",
                      "description": "URL for the favicon. Must use HTTPS.",
                      "format": "strict-https-uri"
                    },
                    "logo_url": {
                      "type": "string",
                      "description": "URL for the logo. Must use HTTPS.",
                      "format": "strict-https-uri"
                    },
                    "font": {
                      "type": "object",
                      "description": "Custom font settings.",
                      "additionalProperties": false,
                      "properties": {
                        "url": {
                          "type": "string",
                          "description": "URL for the custom font. The URL must point to a font file and not a stylesheet. Must use HTTPS.",
                          "format": "strict-https-uri"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:branding."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_branding",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:branding"
            ]
          }
        ]
      }
    },
    "/branding/phone/providers": {
      "get": {
        "summary": "Get a list of phone providers",
        "description": "Retrieve a list of <a href=\"https://auth0.com/docs/customize/phone-messages/configure-phone-messaging-providers\">phone providers</a> details set for a Tenant. A list of fields to include or exclude may also be specified.\n",
        "tags": [
          "branding"
        ],
        "parameters": [
          {
            "name": "disabled",
            "in": "query",
            "description": "Whether the provider is enabled (false) or disabled (true).",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Phone providers have been successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "providers": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Phone provider configuration schema",
                        "additionalProperties": false,
                        "required": [
                          "name",
                          "credentials"
                        ],
                        "properties": {
                          "id": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 255
                          },
                          "tenant": {
                            "type": "string",
                            "description": "The name of the tenant",
                            "minLength": 1,
                            "maxLength": 255
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of the phone notification provider",
                            "minLength": 1,
                            "maxLength": 100,
                            "enum": [
                              "twilio",
                              "custom"
                            ]
                          },
                          "channel": {
                            "type": "string",
                            "description": "This depicts the type of notifications this provider can receive.",
                            "maxLength": 100,
                            "enum": [
                              "phone"
                            ]
                          },
                          "disabled": {
                            "type": "boolean",
                            "description": "Whether the provider is enabled (false) or disabled (true)."
                          },
                          "configuration": {
                            "type": "object",
                            "anyOf": [
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "required": [
                                  "sid",
                                  "delivery_methods"
                                ],
                                "properties": {
                                  "default_from": {
                                    "type": "string"
                                  },
                                  "mssid": {
                                    "type": "string"
                                  },
                                  "sid": {
                                    "type": "string"
                                  },
                                  "delivery_methods": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "enum": [
                                        "text",
                                        "voice"
                                      ]
                                    }
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "required": [
                                  "delivery_methods"
                                ],
                                "properties": {
                                  "delivery_methods": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "enum": [
                                        "text",
                                        "voice"
                                      ]
                                    }
                                  }
                                }
                              }
                            ]
                          },
                          "created_at": {
                            "type": "string",
                            "description": "The provider's creation date and time in ISO 8601 format",
                            "maxLength": 27,
                            "format": "date-time"
                          },
                          "updated_at": {
                            "type": "string",
                            "description": "The date and time of the last update to the provider in ISO 8601 format",
                            "maxLength": 27,
                            "format": "date-time"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:phone_provider."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_branding_phone_providers",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:phone_providers"
            ]
          }
        ]
      },
      "post": {
        "summary": "Configure the phone provider",
        "description": "Create a <a href=\"https://auth0.com/docs/customize/phone-messages/configure-phone-messaging-providers\">phone provider</a>.\nThe <code>credentials</code> object requires different properties depending on the phone provider (which is specified using the <code>name</code> property).\n",
        "tags": [
          "branding"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Phone provider configuration schema",
                "additionalProperties": true,
                "required": [
                  "name",
                  "credentials"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the phone notification provider",
                    "maxLength": 100,
                    "enum": [
                      "twilio",
                      "custom"
                    ]
                  },
                  "disabled": {
                    "type": "boolean",
                    "description": "Whether the provider is enabled (false) or disabled (true)."
                  },
                  "configuration": {
                    "type": "object",
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "sid",
                          "delivery_methods"
                        ],
                        "properties": {
                          "default_from": {
                            "type": "string"
                          },
                          "mssid": {
                            "type": "string"
                          },
                          "sid": {
                            "type": "string"
                          },
                          "delivery_methods": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "enum": [
                                "text",
                                "voice"
                              ]
                            }
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "delivery_methods"
                        ],
                        "properties": {
                          "delivery_methods": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "enum": [
                                "text",
                                "voice"
                              ]
                            }
                          }
                        }
                      }
                    ]
                  },
                  "credentials": {
                    "description": "Provider credentials required to use authenticate to the provider.",
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "auth_token"
                        ],
                        "properties": {
                          "auth_token": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 255
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {}
                      }
                    ]
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "description": "Phone provider configuration schema",
                "additionalProperties": true,
                "required": [
                  "name",
                  "credentials"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the phone notification provider",
                    "maxLength": 100,
                    "enum": [
                      "twilio",
                      "custom"
                    ]
                  },
                  "disabled": {
                    "type": "boolean",
                    "description": "Whether the provider is enabled (false) or disabled (true)."
                  },
                  "configuration": {
                    "type": "object",
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "sid",
                          "delivery_methods"
                        ],
                        "properties": {
                          "default_from": {
                            "type": "string"
                          },
                          "mssid": {
                            "type": "string"
                          },
                          "sid": {
                            "type": "string"
                          },
                          "delivery_methods": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "enum": [
                                "text",
                                "voice"
                              ]
                            }
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "delivery_methods"
                        ],
                        "properties": {
                          "delivery_methods": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "enum": [
                                "text",
                                "voice"
                              ]
                            }
                          }
                        }
                      }
                    ]
                  },
                  "credentials": {
                    "description": "Provider credentials required to use authenticate to the provider.",
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "auth_token"
                        ],
                        "properties": {
                          "auth_token": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 255
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {}
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Phone notification provider successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Phone provider configuration schema",
                  "additionalProperties": false,
                  "required": [
                    "name",
                    "credentials"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    },
                    "tenant": {
                      "type": "string",
                      "description": "The name of the tenant",
                      "minLength": 1,
                      "maxLength": 255
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the phone notification provider",
                      "minLength": 1,
                      "maxLength": 100,
                      "enum": [
                        "twilio",
                        "custom"
                      ]
                    },
                    "channel": {
                      "type": "string",
                      "description": "This depicts the type of notifications this provider can receive.",
                      "maxLength": 100,
                      "enum": [
                        "phone"
                      ]
                    },
                    "disabled": {
                      "type": "boolean",
                      "description": "Whether the provider is enabled (false) or disabled (true)."
                    },
                    "configuration": {
                      "type": "object",
                      "anyOf": [
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "sid",
                            "delivery_methods"
                          ],
                          "properties": {
                            "default_from": {
                              "type": "string"
                            },
                            "mssid": {
                              "type": "string"
                            },
                            "sid": {
                              "type": "string"
                            },
                            "delivery_methods": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "enum": [
                                  "text",
                                  "voice"
                                ]
                              }
                            }
                          }
                        },
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "delivery_methods"
                          ],
                          "properties": {
                            "delivery_methods": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "enum": [
                                  "text",
                                  "voice"
                                ]
                              }
                            }
                          }
                        }
                      ]
                    },
                    "created_at": {
                      "type": "string",
                      "description": "The provider's creation date and time in ISO 8601 format",
                      "maxLength": 27,
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "The date and time of the last update to the provider in ISO 8601 format",
                      "maxLength": 27,
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: create:phone_provider."
          },
          "409": {
            "description": "Custom phone provider conflict."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "create_phone_provider",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:phone_providers"
            ]
          }
        ]
      }
    },
    "/branding/phone/providers/{id}": {
      "get": {
        "summary": "Get a phone provider",
        "description": "Retrieve <a href=\"https://auth0.com/docs/customize/phone-messages/configure-phone-messaging-providers\">phone provider</a> details. A list of fields to include or exclude may also be specified.\n",
        "tags": [
          "branding"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Phone provider successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Phone provider configuration schema",
                  "additionalProperties": false,
                  "required": [
                    "name",
                    "credentials"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    },
                    "tenant": {
                      "type": "string",
                      "description": "The name of the tenant",
                      "minLength": 1,
                      "maxLength": 255
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the phone notification provider",
                      "minLength": 1,
                      "maxLength": 100,
                      "enum": [
                        "twilio",
                        "custom"
                      ]
                    },
                    "channel": {
                      "type": "string",
                      "description": "This depicts the type of notifications this provider can receive.",
                      "maxLength": 100,
                      "enum": [
                        "phone"
                      ]
                    },
                    "disabled": {
                      "type": "boolean",
                      "description": "Whether the provider is enabled (false) or disabled (true)."
                    },
                    "configuration": {
                      "type": "object",
                      "anyOf": [
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "sid",
                            "delivery_methods"
                          ],
                          "properties": {
                            "default_from": {
                              "type": "string"
                            },
                            "mssid": {
                              "type": "string"
                            },
                            "sid": {
                              "type": "string"
                            },
                            "delivery_methods": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "enum": [
                                  "text",
                                  "voice"
                                ]
                              }
                            }
                          }
                        },
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "delivery_methods"
                          ],
                          "properties": {
                            "delivery_methods": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "enum": [
                                  "text",
                                  "voice"
                                ]
                              }
                            }
                          }
                        }
                      ]
                    },
                    "created_at": {
                      "type": "string",
                      "description": "The provider's creation date and time in ISO 8601 format",
                      "maxLength": 27,
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "The date and time of the last update to the provider in ISO 8601 format",
                      "maxLength": 27,
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid id for provider."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:phone_provider."
          },
          "404": {
            "description": "Phone provider has not been configured."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_phone_provider",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:phone_providers"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Deletes a Phone Provider",
        "description": "Delete the configured phone provider.\n",
        "tags": [
          "branding"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Phone provider successfully deleted."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: delete:phone_provider."
          },
          "404": {
            "description": "Phone provider has not been configured."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_phone_provider",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:phone_providers"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update the phone provider",
        "description": "Update a <a href=\"https://auth0.com/docs/customize/phone-messages/configure-phone-messaging-providers\">phone provider</a>.\nThe <code>credentials</code> object requires different properties depending on the phone provider (which is specified using the <code>name</code> property).\n",
        "tags": [
          "branding"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the phone notification provider",
                    "maxLength": 100,
                    "enum": [
                      "twilio",
                      "custom"
                    ]
                  },
                  "disabled": {
                    "type": "boolean",
                    "description": "Whether the provider is enabled (false) or disabled (true)."
                  },
                  "credentials": {
                    "description": "Provider credentials required to use authenticate to the provider.",
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "auth_token"
                        ],
                        "properties": {
                          "auth_token": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 255
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {}
                      }
                    ]
                  },
                  "configuration": {
                    "type": "object",
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "sid",
                          "delivery_methods"
                        ],
                        "properties": {
                          "default_from": {
                            "type": "string"
                          },
                          "mssid": {
                            "type": "string"
                          },
                          "sid": {
                            "type": "string"
                          },
                          "delivery_methods": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "enum": [
                                "text",
                                "voice"
                              ]
                            }
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "delivery_methods"
                        ],
                        "properties": {
                          "delivery_methods": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "enum": [
                                "text",
                                "voice"
                              ]
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the phone notification provider",
                    "maxLength": 100,
                    "enum": [
                      "twilio",
                      "custom"
                    ]
                  },
                  "disabled": {
                    "type": "boolean",
                    "description": "Whether the provider is enabled (false) or disabled (true)."
                  },
                  "credentials": {
                    "description": "Provider credentials required to use authenticate to the provider.",
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "auth_token"
                        ],
                        "properties": {
                          "auth_token": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 255
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {}
                      }
                    ]
                  },
                  "configuration": {
                    "type": "object",
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "sid",
                          "delivery_methods"
                        ],
                        "properties": {
                          "default_from": {
                            "type": "string"
                          },
                          "mssid": {
                            "type": "string"
                          },
                          "sid": {
                            "type": "string"
                          },
                          "delivery_methods": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "enum": [
                                "text",
                                "voice"
                              ]
                            }
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "delivery_methods"
                        ],
                        "properties": {
                          "delivery_methods": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "enum": [
                                "text",
                                "voice"
                              ]
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Phone provider successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Phone provider configuration schema",
                  "additionalProperties": false,
                  "required": [
                    "name",
                    "credentials"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    },
                    "tenant": {
                      "type": "string",
                      "description": "The name of the tenant",
                      "minLength": 1,
                      "maxLength": 255
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the phone notification provider",
                      "minLength": 1,
                      "maxLength": 100,
                      "enum": [
                        "twilio",
                        "custom"
                      ]
                    },
                    "channel": {
                      "type": "string",
                      "description": "This depicts the type of notifications this provider can receive.",
                      "maxLength": 100,
                      "enum": [
                        "phone"
                      ]
                    },
                    "disabled": {
                      "type": "boolean",
                      "description": "Whether the provider is enabled (false) or disabled (true)."
                    },
                    "configuration": {
                      "type": "object",
                      "anyOf": [
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "sid",
                            "delivery_methods"
                          ],
                          "properties": {
                            "default_from": {
                              "type": "string"
                            },
                            "mssid": {
                              "type": "string"
                            },
                            "sid": {
                              "type": "string"
                            },
                            "delivery_methods": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "enum": [
                                  "text",
                                  "voice"
                                ]
                              }
                            }
                          }
                        },
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "delivery_methods"
                          ],
                          "properties": {
                            "delivery_methods": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "enum": [
                                  "text",
                                  "voice"
                                ]
                              }
                            }
                          }
                        }
                      ]
                    },
                    "created_at": {
                      "type": "string",
                      "description": "The provider's creation date and time in ISO 8601 format",
                      "maxLength": 27,
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "The date and time of the last update to the provider in ISO 8601 format",
                      "maxLength": 27,
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:phone_provider."
          },
          "404": {
            "description": "Phone provider has not been configured."
          },
          "409": {
            "description": "Custom phone provider conflict."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "update_phone_provider",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:phone_providers"
            ]
          }
        ]
      }
    },
    "/branding/phone/providers/{id}/try": {
      "post": {
        "summary": "Send a test phone notification for the configured provider",
        "tags": [
          "branding"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "to"
                ],
                "properties": {
                  "to": {
                    "type": "string",
                    "description": "The recipient phone number to receive a given notification.",
                    "minLength": 1,
                    "maxLength": 16
                  },
                  "delivery_method": {
                    "type": "string",
                    "description": "The delivery method for the notification",
                    "minLength": 1,
                    "maxLength": 10,
                    "enum": [
                      "text",
                      "voice"
                    ]
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "to"
                ],
                "properties": {
                  "to": {
                    "type": "string",
                    "description": "The recipient phone number to receive a given notification.",
                    "minLength": 1,
                    "maxLength": 16
                  },
                  "delivery_method": {
                    "type": "string",
                    "description": "The delivery method for the notification",
                    "minLength": 1,
                    "maxLength": 10,
                    "enum": [
                      "text",
                      "voice"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Phone notification sent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "The status code of the operation."
                    },
                    "message": {
                      "type": "string",
                      "description": "The description of the operation status."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope, expected: create:phone_provider."
          },
          "404": {
            "description": "Phone provider has not been configured."
          },
          "409": {
            "description": "Custom phone provider conflict."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "try_phone_provider",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:phone_providers"
            ]
          }
        ]
      }
    },
    "/branding/phone/templates": {
      "get": {
        "summary": "Get a list of phone notification templates",
        "tags": [
          "branding"
        ],
        "parameters": [
          {
            "name": "disabled",
            "in": "query",
            "description": "Whether the template is enabled (false) or disabled (true).",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The phone notification templates were retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "templates": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "content",
                          "disabled",
                          "id",
                          "type"
                        ],
                        "properties": {
                          "id": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 255
                          },
                          "channel": {
                            "type": "string"
                          },
                          "customizable": {
                            "type": "boolean"
                          },
                          "tenant": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 255
                          },
                          "content": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "syntax": {
                                "type": "string"
                              },
                              "from": {
                                "type": "string",
                                "description": "Default phone number to be used as 'from' when sending a phone notification",
                                "minLength": 1,
                                "maxLength": 16
                              },
                              "body": {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "text": {
                                    "type": "string",
                                    "description": "Content of the phone template for text notifications",
                                    "minLength": 1,
                                    "maxLength": 20000
                                  },
                                  "voice": {
                                    "type": "string",
                                    "description": "Content of the phone template for voice notifications",
                                    "minLength": 1,
                                    "maxLength": 20000
                                  }
                                }
                              }
                            }
                          },
                          "type": {
                            "type": "string",
                            "maxLength": 255,
                            "enum": [
                              "otp_verify",
                              "otp_enroll",
                              "change_password",
                              "blocked_account",
                              "password_breach"
                            ]
                          },
                          "disabled": {
                            "type": "boolean",
                            "description": "Whether the template is enabled (false) or disabled (true).",
                            "default": false
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation"
          },
          "403": {
            "description": "Insufficient scope, expected any of: read:phone_templates"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_phone_templates",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:phone_templates"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create a phone notification template",
        "tags": [
          "branding"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "type": {
                    "type": "string",
                    "maxLength": 255,
                    "enum": [
                      "otp_verify",
                      "otp_enroll",
                      "change_password",
                      "blocked_account",
                      "password_breach"
                    ]
                  },
                  "disabled": {
                    "type": "boolean",
                    "description": "Whether the template is enabled (false) or disabled (true).",
                    "default": false
                  },
                  "content": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "syntax": {
                        "type": "string"
                      },
                      "from": {
                        "type": "string",
                        "description": "Default phone number to be used as 'from' when sending a phone notification",
                        "minLength": 1,
                        "maxLength": 16
                      },
                      "body": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "text": {
                            "type": "string",
                            "description": "Content of the phone template for text notifications",
                            "minLength": 1,
                            "maxLength": 20000
                          },
                          "voice": {
                            "type": "string",
                            "description": "Content of the phone template for voice notifications",
                            "minLength": 1,
                            "maxLength": 20000
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "type": {
                    "type": "string",
                    "maxLength": 255,
                    "enum": [
                      "otp_verify",
                      "otp_enroll",
                      "change_password",
                      "blocked_account",
                      "password_breach"
                    ]
                  },
                  "disabled": {
                    "type": "boolean",
                    "description": "Whether the template is enabled (false) or disabled (true).",
                    "default": false
                  },
                  "content": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "syntax": {
                        "type": "string"
                      },
                      "from": {
                        "type": "string",
                        "description": "Default phone number to be used as 'from' when sending a phone notification",
                        "minLength": 1,
                        "maxLength": 16
                      },
                      "body": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "text": {
                            "type": "string",
                            "description": "Content of the phone template for text notifications",
                            "minLength": 1,
                            "maxLength": 20000
                          },
                          "voice": {
                            "type": "string",
                            "description": "Content of the phone template for voice notifications",
                            "minLength": 1,
                            "maxLength": 20000
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The phone notification template was created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "content",
                    "disabled",
                    "id",
                    "type"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    },
                    "channel": {
                      "type": "string"
                    },
                    "customizable": {
                      "type": "boolean"
                    },
                    "tenant": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    },
                    "content": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "syntax": {
                          "type": "string"
                        },
                        "from": {
                          "type": "string",
                          "description": "Default phone number to be used as 'from' when sending a phone notification",
                          "minLength": 1,
                          "maxLength": 16
                        },
                        "body": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "text": {
                              "type": "string",
                              "description": "Content of the phone template for text notifications",
                              "minLength": 1,
                              "maxLength": 20000
                            },
                            "voice": {
                              "type": "string",
                              "description": "Content of the phone template for voice notifications",
                              "minLength": 1,
                              "maxLength": 20000
                            }
                          }
                        }
                      }
                    },
                    "type": {
                      "type": "string",
                      "maxLength": 255,
                      "enum": [
                        "otp_verify",
                        "otp_enroll",
                        "change_password",
                        "blocked_account",
                        "password_breach"
                      ]
                    },
                    "disabled": {
                      "type": "boolean",
                      "description": "Whether the template is enabled (false) or disabled (true).",
                      "default": false
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation"
          },
          "403": {
            "description": "Insufficient scope, expected any of: create:phone_templates"
          },
          "409": {
            "description": "Phone template already configured for tenant"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "create_phone_template",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:phone_templates"
            ]
          }
        ]
      }
    },
    "/branding/phone/templates/{id}": {
      "get": {
        "summary": "Get a phone notification template",
        "tags": [
          "branding"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The phone notification template were retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "content",
                    "disabled",
                    "id",
                    "type"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    },
                    "channel": {
                      "type": "string"
                    },
                    "customizable": {
                      "type": "boolean"
                    },
                    "tenant": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    },
                    "content": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "syntax": {
                          "type": "string"
                        },
                        "from": {
                          "type": "string",
                          "description": "Default phone number to be used as 'from' when sending a phone notification",
                          "minLength": 1,
                          "maxLength": 16
                        },
                        "body": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "text": {
                              "type": "string",
                              "description": "Content of the phone template for text notifications",
                              "minLength": 1,
                              "maxLength": 20000
                            },
                            "voice": {
                              "type": "string",
                              "description": "Content of the phone template for voice notifications",
                              "minLength": 1,
                              "maxLength": 20000
                            }
                          }
                        }
                      }
                    },
                    "type": {
                      "type": "string",
                      "maxLength": 255,
                      "enum": [
                        "otp_verify",
                        "otp_enroll",
                        "change_password",
                        "blocked_account",
                        "password_breach"
                      ]
                    },
                    "disabled": {
                      "type": "boolean",
                      "description": "Whether the template is enabled (false) or disabled (true).",
                      "default": false
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation"
          },
          "403": {
            "description": "Insufficient scope, expected any of: read:phone_templates"
          },
          "404": {
            "description": "Phone template does not exist"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_phone_template",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:phone_templates"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a phone notification template",
        "tags": [
          "branding"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The phone notification template was deleted."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation"
          },
          "403": {
            "description": "Insufficient scope, expected any of: delete:phone_templates"
          },
          "404": {
            "description": "Phone template does not exist"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_phone_template",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:phone_templates"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update a phone notification template",
        "tags": [
          "branding"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "content": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "from": {
                        "type": "string",
                        "description": "Default phone number to be used as 'from' when sending a phone notification",
                        "minLength": 1,
                        "maxLength": 16
                      },
                      "body": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "text": {
                            "type": "string",
                            "description": "Content of the phone template for text notifications",
                            "minLength": 1,
                            "maxLength": 20000
                          },
                          "voice": {
                            "type": "string",
                            "description": "Content of the phone template for voice notifications",
                            "minLength": 1,
                            "maxLength": 20000
                          }
                        }
                      }
                    }
                  },
                  "disabled": {
                    "type": "boolean",
                    "description": "Whether the template is enabled (false) or disabled (true).",
                    "default": false
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "content": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "from": {
                        "type": "string",
                        "description": "Default phone number to be used as 'from' when sending a phone notification",
                        "minLength": 1,
                        "maxLength": 16
                      },
                      "body": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "text": {
                            "type": "string",
                            "description": "Content of the phone template for text notifications",
                            "minLength": 1,
                            "maxLength": 20000
                          },
                          "voice": {
                            "type": "string",
                            "description": "Content of the phone template for voice notifications",
                            "minLength": 1,
                            "maxLength": 20000
                          }
                        }
                      }
                    }
                  },
                  "disabled": {
                    "type": "boolean",
                    "description": "Whether the template is enabled (false) or disabled (true).",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The phone notification template was updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "content",
                    "disabled",
                    "id",
                    "type"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    },
                    "channel": {
                      "type": "string"
                    },
                    "customizable": {
                      "type": "boolean"
                    },
                    "tenant": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    },
                    "content": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "syntax": {
                          "type": "string"
                        },
                        "from": {
                          "type": "string",
                          "description": "Default phone number to be used as 'from' when sending a phone notification",
                          "minLength": 1,
                          "maxLength": 16
                        },
                        "body": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "text": {
                              "type": "string",
                              "description": "Content of the phone template for text notifications",
                              "minLength": 1,
                              "maxLength": 20000
                            },
                            "voice": {
                              "type": "string",
                              "description": "Content of the phone template for voice notifications",
                              "minLength": 1,
                              "maxLength": 20000
                            }
                          }
                        }
                      }
                    },
                    "type": {
                      "type": "string",
                      "maxLength": 255,
                      "enum": [
                        "otp_verify",
                        "otp_enroll",
                        "change_password",
                        "blocked_account",
                        "password_breach"
                      ]
                    },
                    "disabled": {
                      "type": "boolean",
                      "description": "Whether the template is enabled (false) or disabled (true).",
                      "default": false
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation"
          },
          "403": {
            "description": "Insufficient scope, expected any of: update:phone_templates"
          },
          "404": {
            "description": "Phone template does not exist"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "update_phone_template",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:phone_templates"
            ]
          }
        ]
      }
    },
    "/branding/phone/templates/{id}/reset": {
      "patch": {
        "summary": "Resets a phone notification template values",
        "tags": [
          "branding"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {}
            },
            "application/x-www-form-urlencoded": {
              "schema": {}
            }
          }
        },
        "responses": {
          "200": {
            "description": "The phone notification template was reset.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "content",
                    "disabled",
                    "id",
                    "type"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    },
                    "channel": {
                      "type": "string"
                    },
                    "customizable": {
                      "type": "boolean"
                    },
                    "tenant": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    },
                    "content": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "syntax": {
                          "type": "string"
                        },
                        "from": {
                          "type": "string",
                          "description": "Default phone number to be used as 'from' when sending a phone notification",
                          "minLength": 1,
                          "maxLength": 16
                        },
                        "body": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "text": {
                              "type": "string",
                              "description": "Content of the phone template for text notifications",
                              "minLength": 1,
                              "maxLength": 20000
                            },
                            "voice": {
                              "type": "string",
                              "description": "Content of the phone template for voice notifications",
                              "minLength": 1,
                              "maxLength": 20000
                            }
                          }
                        }
                      }
                    },
                    "type": {
                      "type": "string",
                      "maxLength": 255,
                      "enum": [
                        "otp_verify",
                        "otp_enroll",
                        "change_password",
                        "blocked_account",
                        "password_breach"
                      ]
                    },
                    "disabled": {
                      "type": "boolean",
                      "description": "Whether the template is enabled (false) or disabled (true).",
                      "default": false
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation"
          },
          "403": {
            "description": "Insufficient scope, expected any of: create:phone_templates"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "reset_phone_template",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:phone_templates"
            ]
          }
        ]
      }
    },
    "/branding/phone/templates/{id}/try": {
      "post": {
        "summary": "Send a test phone notification for the configured template",
        "tags": [
          "branding"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "required": [
                  "to"
                ],
                "properties": {
                  "to": {
                    "type": "string",
                    "description": "Destination of the testing phone notification",
                    "minLength": 1,
                    "maxLength": 16
                  },
                  "delivery_method": {
                    "type": "string",
                    "description": "Medium to use to send the notification",
                    "minLength": 1,
                    "maxLength": 20,
                    "enum": [
                      "text",
                      "voice"
                    ]
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "required": [
                  "to"
                ],
                "properties": {
                  "to": {
                    "type": "string",
                    "description": "Destination of the testing phone notification",
                    "minLength": 1,
                    "maxLength": 16
                  },
                  "delivery_method": {
                    "type": "string",
                    "description": "Medium to use to send the notification",
                    "minLength": 1,
                    "maxLength": 20,
                    "enum": [
                      "text",
                      "voice"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "The phone testing notification for the template was sent",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation"
          },
          "403": {
            "description": "Insufficient scope, expected any of: create:phone_templates"
          },
          "404": {
            "description": "Phone template does not exist"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "try_phone_template",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:phone_templates"
            ]
          }
        ]
      }
    },
    "/branding/templates/universal-login": {
      "get": {
        "summary": "Get template for New Universal Login Experience",
        "tags": [
          "branding"
        ],
        "responses": {
          "200": {
            "description": "Template successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "body": {
                          "type": "string",
                          "description": "The custom page template for the New Universal Login Experience"
                        }
                      }
                    },
                    {
                      "type": "string",
                      "description": "The custom page template for the New Universal Login Experience"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "402": {
            "description": "A paid subscription is required for this feature."
          },
          "403": {
            "description": "Insufficient scope; expected: read:branding"
          },
          "404": {
            "description": "Template does not exist."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_universal-login",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:branding"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete template for New Universal Login Experience",
        "tags": [
          "branding"
        ],
        "responses": {
          "204": {
            "description": "Template successfully deleted."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "402": {
            "description": "A paid subscription is required for this feature."
          },
          "403": {
            "description": "Insufficient scope; expected: delete:branding."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_universal-login",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:branding"
            ]
          }
        ]
      },
      "put": {
        "summary": "Set template for New Universal Login Experience",
        "description": "Update the Universal Login branding template.\n\n<p>When <code>content-type</code> header is set to <code>application/json</code>, the expected body must be JSON:</p>\n<pre>\n{\n  \"template\": \"&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;{%- auth0:head -%}&lt;/head&gt;&lt;body&gt;{%- auth0:widget -%}&lt;/body&gt;&lt;/html&gt;\"\n}\n</pre>\n\n<p>\n  When <code>content-type</code> header is set to <code>text/html</code>, the expected body must be the HTML template:\n</p>\n<pre>\n&lt!DOCTYPE html&gt;\n&lt;code&gt;\n  &lt;html&gt;\n    &lt;head&gt;\n     {%- auth0:head -%}\n    &lt;/head&gt;\n    &lt;body&gt;\n      {%- auth0:widget -%}\n    &lt;/body&gt;\n  &lt;/html&gt;\n&lt;/code&gt;\n</pre>\n",
        "tags": [
          "branding"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "string",
                    "maxLength": 102400
                  },
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "template"
                    ],
                    "properties": {
                      "template": {
                        "type": "string",
                        "maxLength": 102400
                      }
                    }
                  }
                ]
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "oneOf": [
                  {
                    "type": "string",
                    "maxLength": 102400
                  },
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "template"
                    ],
                    "properties": {
                      "template": {
                        "type": "string",
                        "maxLength": 102400
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Template successfully created."
          },
          "204": {
            "description": "Template successfully updated."
          },
          "400": {
            "description": "Payload content length greater than maximum allowed: 102400.",
            "x-description-1": "Payload content missing required Liquid tags (auth0:head and auth0:widget)."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "402": {
            "description": "A paid subscription is required for this feature."
          },
          "403": {
            "description": "Insufficient scope; expected: update:branding."
          },
          "409": {
            "description": "Template update conflict."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "put_universal-login",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:branding"
            ]
          }
        ]
      }
    },
    "/branding/themes": {
      "post": {
        "summary": "Create branding theme",
        "description": "Create branding theme.",
        "tags": [
          "branding"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Branding theme",
                "additionalProperties": false,
                "required": [
                  "borders",
                  "colors",
                  "fonts",
                  "page_background",
                  "widget"
                ],
                "properties": {
                  "borders": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "button_border_radius",
                      "button_border_weight",
                      "buttons_style",
                      "input_border_radius",
                      "input_border_weight",
                      "inputs_style",
                      "show_widget_shadow",
                      "widget_border_weight",
                      "widget_corner_radius"
                    ],
                    "properties": {
                      "button_border_radius": {
                        "type": "number",
                        "description": "Button border radius"
                      },
                      "button_border_weight": {
                        "type": "number",
                        "description": "Button border weight"
                      },
                      "buttons_style": {
                        "type": "string",
                        "description": "Buttons style",
                        "enum": [
                          "pill",
                          "rounded",
                          "sharp"
                        ]
                      },
                      "input_border_radius": {
                        "type": "number",
                        "description": "Input border radius"
                      },
                      "input_border_weight": {
                        "type": "number",
                        "description": "Input border weight"
                      },
                      "inputs_style": {
                        "type": "string",
                        "description": "Inputs style",
                        "enum": [
                          "pill",
                          "rounded",
                          "sharp"
                        ]
                      },
                      "show_widget_shadow": {
                        "type": "boolean",
                        "description": "Show widget shadow"
                      },
                      "widget_border_weight": {
                        "type": "number",
                        "description": "Widget border weight"
                      },
                      "widget_corner_radius": {
                        "type": "number",
                        "description": "Widget corner radius"
                      }
                    }
                  },
                  "colors": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "body_text",
                      "error",
                      "header",
                      "icons",
                      "input_background",
                      "input_border",
                      "input_filled_text",
                      "input_labels_placeholders",
                      "links_focused_components",
                      "primary_button",
                      "primary_button_label",
                      "secondary_button_border",
                      "secondary_button_label",
                      "success",
                      "widget_background",
                      "widget_border"
                    ],
                    "properties": {
                      "base_focus_color": {
                        "type": "string",
                        "description": "Base Focus Color"
                      },
                      "base_hover_color": {
                        "type": "string",
                        "description": "Base Hover Color"
                      },
                      "body_text": {
                        "type": "string",
                        "description": "Body text"
                      },
                      "captcha_widget_theme": {
                        "type": "string",
                        "description": "Captcha Widget Theme",
                        "enum": [
                          "auto",
                          "dark",
                          "light"
                        ]
                      },
                      "error": {
                        "type": "string",
                        "description": "Error"
                      },
                      "header": {
                        "type": "string",
                        "description": "Header"
                      },
                      "icons": {
                        "type": "string",
                        "description": "Icons"
                      },
                      "input_background": {
                        "type": "string",
                        "description": "Input background"
                      },
                      "input_border": {
                        "type": "string",
                        "description": "Input border"
                      },
                      "input_filled_text": {
                        "type": "string",
                        "description": "Input filled text"
                      },
                      "input_labels_placeholders": {
                        "type": "string",
                        "description": "Input labels & placeholders"
                      },
                      "links_focused_components": {
                        "type": "string",
                        "description": "Links & focused components"
                      },
                      "primary_button": {
                        "type": "string",
                        "description": "Primary button"
                      },
                      "primary_button_label": {
                        "type": "string",
                        "description": "Primary button label"
                      },
                      "secondary_button_border": {
                        "type": "string",
                        "description": "Secondary button border"
                      },
                      "secondary_button_label": {
                        "type": "string",
                        "description": "Secondary button label"
                      },
                      "success": {
                        "type": "string",
                        "description": "Success"
                      },
                      "widget_background": {
                        "type": "string",
                        "description": "Widget background"
                      },
                      "widget_border": {
                        "type": "string",
                        "description": "Widget border"
                      }
                    }
                  },
                  "displayName": {
                    "type": "string",
                    "description": "Display Name",
                    "maxLength": 2048
                  },
                  "fonts": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "body_text",
                      "buttons_text",
                      "font_url",
                      "input_labels",
                      "links",
                      "links_style",
                      "reference_text_size",
                      "subtitle",
                      "title"
                    ],
                    "properties": {
                      "body_text": {
                        "type": "object",
                        "description": "Body text",
                        "additionalProperties": false,
                        "required": [
                          "bold",
                          "size"
                        ],
                        "properties": {
                          "bold": {
                            "type": "boolean",
                            "description": "Body text bold"
                          },
                          "size": {
                            "type": "number",
                            "description": "Body text size"
                          }
                        }
                      },
                      "buttons_text": {
                        "type": "object",
                        "description": "Buttons text",
                        "additionalProperties": false,
                        "required": [
                          "bold",
                          "size"
                        ],
                        "properties": {
                          "bold": {
                            "type": "boolean",
                            "description": "Buttons text bold"
                          },
                          "size": {
                            "type": "number",
                            "description": "Buttons text size"
                          }
                        }
                      },
                      "font_url": {
                        "type": "string",
                        "description": "Font URL"
                      },
                      "input_labels": {
                        "type": "object",
                        "description": "Input Labels",
                        "additionalProperties": false,
                        "required": [
                          "bold",
                          "size"
                        ],
                        "properties": {
                          "bold": {
                            "type": "boolean",
                            "description": "Input Labels bold"
                          },
                          "size": {
                            "type": "number",
                            "description": "Input Labels size"
                          }
                        }
                      },
                      "links": {
                        "type": "object",
                        "description": "Links",
                        "additionalProperties": false,
                        "required": [
                          "bold",
                          "size"
                        ],
                        "properties": {
                          "bold": {
                            "type": "boolean",
                            "description": "Links bold"
                          },
                          "size": {
                            "type": "number",
                            "description": "Links size"
                          }
                        }
                      },
                      "links_style": {
                        "type": "string",
                        "description": "Links style",
                        "enum": [
                          "normal",
                          "underlined"
                        ]
                      },
                      "reference_text_size": {
                        "type": "number",
                        "description": "Reference text size"
                      },
                      "subtitle": {
                        "type": "object",
                        "description": "Subtitle",
                        "additionalProperties": false,
                        "required": [
                          "bold",
                          "size"
                        ],
                        "properties": {
                          "bold": {
                            "type": "boolean",
                            "description": "Subtitle bold"
                          },
                          "size": {
                            "type": "number",
                            "description": "Subtitle size"
                          }
                        }
                      },
                      "title": {
                        "type": "object",
                        "description": "Title",
                        "additionalProperties": false,
                        "required": [
                          "bold",
                          "size"
                        ],
                        "properties": {
                          "bold": {
                            "type": "boolean",
                            "description": "Title bold"
                          },
                          "size": {
                            "type": "number",
                            "description": "Title size"
                          }
                        }
                      }
                    }
                  },
                  "page_background": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "background_color",
                      "background_image_url",
                      "page_layout"
                    ],
                    "properties": {
                      "background_color": {
                        "type": "string",
                        "description": "Background color"
                      },
                      "background_image_url": {
                        "type": "string",
                        "description": "Background image url"
                      },
                      "page_layout": {
                        "type": "string",
                        "description": "Page Layout",
                        "enum": [
                          "center",
                          "left",
                          "right"
                        ]
                      }
                    }
                  },
                  "widget": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "header_text_alignment",
                      "logo_height",
                      "logo_position",
                      "logo_url",
                      "social_buttons_layout"
                    ],
                    "properties": {
                      "header_text_alignment": {
                        "type": "string",
                        "description": "Header text alignment",
                        "enum": [
                          "center",
                          "left",
                          "right"
                        ]
                      },
                      "logo_height": {
                        "type": "number",
                        "description": "Logo height"
                      },
                      "logo_position": {
                        "type": "string",
                        "description": "Logo position",
                        "enum": [
                          "center",
                          "left",
                          "none",
                          "right"
                        ]
                      },
                      "logo_url": {
                        "type": "string",
                        "description": "Logo url"
                      },
                      "social_buttons_layout": {
                        "type": "string",
                        "description": "Social buttons layout",
                        "enum": [
                          "bottom",
                          "top"
                        ]
                      }
                    }
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "description": "Branding theme",
                "additionalProperties": false,
                "required": [
                  "borders",
                  "colors",
                  "fonts",
                  "page_background",
                  "widget"
                ],
                "properties": {
                  "borders": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "button_border_radius",
                      "button_border_weight",
                      "buttons_style",
                      "input_border_radius",
                      "input_border_weight",
                      "inputs_style",
                      "show_widget_shadow",
                      "widget_border_weight",
                      "widget_corner_radius"
                    ],
                    "properties": {
                      "button_border_radius": {
                        "type": "number",
                        "description": "Button border radius"
                      },
                      "button_border_weight": {
                        "type": "number",
                        "description": "Button border weight"
                      },
                      "buttons_style": {
                        "type": "string",
                        "description": "Buttons style",
                        "enum": [
                          "pill",
                          "rounded",
                          "sharp"
                        ]
                      },
                      "input_border_radius": {
                        "type": "number",
                        "description": "Input border radius"
                      },
                      "input_border_weight": {
                        "type": "number",
                        "description": "Input border weight"
                      },
                      "inputs_style": {
                        "type": "string",
                        "description": "Inputs style",
                        "enum": [
                          "pill",
                          "rounded",
                          "sharp"
                        ]
                      },
                      "show_widget_shadow": {
                        "type": "boolean",
                        "description": "Show widget shadow"
                      },
                      "widget_border_weight": {
                        "type": "number",
                        "description": "Widget border weight"
                      },
                      "widget_corner_radius": {
                        "type": "number",
                        "description": "Widget corner radius"
                      }
                    }
                  },
                  "colors": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "body_text",
                      "error",
                      "header",
                      "icons",
                      "input_background",
                      "input_border",
                      "input_filled_text",
                      "input_labels_placeholders",
                      "links_focused_components",
                      "primary_button",
                      "primary_button_label",
                      "secondary_button_border",
                      "secondary_button_label",
                      "success",
                      "widget_background",
                      "widget_border"
                    ],
                    "properties": {
                      "base_focus_color": {
                        "type": "string",
                        "description": "Base Focus Color"
                      },
                      "base_hover_color": {
                        "type": "string",
                        "description": "Base Hover Color"
                      },
                      "body_text": {
                        "type": "string",
                        "description": "Body text"
                      },
                      "captcha_widget_theme": {
                        "type": "string",
                        "description": "Captcha Widget Theme",
                        "enum": [
                          "auto",
                          "dark",
                          "light"
                        ]
                      },
                      "error": {
                        "type": "string",
                        "description": "Error"
                      },
                      "header": {
                        "type": "string",
                        "description": "Header"
                      },
                      "icons": {
                        "type": "string",
                        "description": "Icons"
                      },
                      "input_background": {
                        "type": "string",
                        "description": "Input background"
                      },
                      "input_border": {
                        "type": "string",
                        "description": "Input border"
                      },
                      "input_filled_text": {
                        "type": "string",
                        "description": "Input filled text"
                      },
                      "input_labels_placeholders": {
                        "type": "string",
                        "description": "Input labels & placeholders"
                      },
                      "links_focused_components": {
                        "type": "string",
                        "description": "Links & focused components"
                      },
                      "primary_button": {
                        "type": "string",
                        "description": "Primary button"
                      },
                      "primary_button_label": {
                        "type": "string",
                        "description": "Primary button label"
                      },
                      "secondary_button_border": {
                        "type": "string",
                        "description": "Secondary button border"
                      },
                      "secondary_button_label": {
                        "type": "string",
                        "description": "Secondary button label"
                      },
                      "success": {
                        "type": "string",
                        "description": "Success"
                      },
                      "widget_background": {
                        "type": "string",
                        "description": "Widget background"
                      },
                      "widget_border": {
                        "type": "string",
                        "description": "Widget border"
                      }
                    }
                  },
                  "displayName": {
                    "type": "string",
                    "description": "Display Name",
                    "maxLength": 2048
                  },
                  "fonts": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "body_text",
                      "buttons_text",
                      "font_url",
                      "input_labels",
                      "links",
                      "links_style",
                      "reference_text_size",
                      "subtitle",
                      "title"
                    ],
                    "properties": {
                      "body_text": {
                        "type": "object",
                        "description": "Body text",
                        "additionalProperties": false,
                        "required": [
                          "bold",
                          "size"
                        ],
                        "properties": {
                          "bold": {
                            "type": "boolean",
                            "description": "Body text bold"
                          },
                          "size": {
                            "type": "number",
                            "description": "Body text size"
                          }
                        }
                      },
                      "buttons_text": {
                        "type": "object",
                        "description": "Buttons text",
                        "additionalProperties": false,
                        "required": [
                          "bold",
                          "size"
                        ],
                        "properties": {
                          "bold": {
                            "type": "boolean",
                            "description": "Buttons text bold"
                          },
                          "size": {
                            "type": "number",
                            "description": "Buttons text size"
                          }
                        }
                      },
                      "font_url": {
                        "type": "string",
                        "description": "Font URL"
                      },
                      "input_labels": {
                        "type": "object",
                        "description": "Input Labels",
                        "additionalProperties": false,
                        "required": [
                          "bold",
                          "size"
                        ],
                        "properties": {
                          "bold": {
                            "type": "boolean",
                            "description": "Input Labels bold"
                          },
                          "size": {
                            "type": "number",
                            "description": "Input Labels size"
                          }
                        }
                      },
                      "links": {
                        "type": "object",
                        "description": "Links",
                        "additionalProperties": false,
                        "required": [
                          "bold",
                          "size"
                        ],
                        "properties": {
                          "bold": {
                            "type": "boolean",
                            "description": "Links bold"
                          },
                          "size": {
                            "type": "number",
                            "description": "Links size"
                          }
                        }
                      },
                      "links_style": {
                        "type": "string",
                        "description": "Links style",
                        "enum": [
                          "normal",
                          "underlined"
                        ]
                      },
                      "reference_text_size": {
                        "type": "number",
                        "description": "Reference text size"
                      },
                      "subtitle": {
                        "type": "object",
                        "description": "Subtitle",
                        "additionalProperties": false,
                        "required": [
                          "bold",
                          "size"
                        ],
                        "properties": {
                          "bold": {
                            "type": "boolean",
                            "description": "Subtitle bold"
                          },
                          "size": {
                            "type": "number",
                            "description": "Subtitle size"
                          }
                        }
                      },
                      "title": {
                        "type": "object",
                        "description": "Title",
                        "additionalProperties": false,
                        "required": [
                          "bold",
                          "size"
                        ],
                        "properties": {
                          "bold": {
                            "type": "boolean",
                            "description": "Title bold"
                          },
                          "size": {
                            "type": "number",
                            "description": "Title size"
                          }
                        }
                      }
                    }
                  },
                  "page_background": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "background_color",
                      "background_image_url",
                      "page_layout"
                    ],
                    "properties": {
                      "background_color": {
                        "type": "string",
                        "description": "Background color"
                      },
                      "background_image_url": {
                        "type": "string",
                        "description": "Background image url"
                      },
                      "page_layout": {
                        "type": "string",
                        "description": "Page Layout",
                        "enum": [
                          "center",
                          "left",
                          "right"
                        ]
                      }
                    }
                  },
                  "widget": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "header_text_alignment",
                      "logo_height",
                      "logo_position",
                      "logo_url",
                      "social_buttons_layout"
                    ],
                    "properties": {
                      "header_text_alignment": {
                        "type": "string",
                        "description": "Header text alignment",
                        "enum": [
                          "center",
                          "left",
                          "right"
                        ]
                      },
                      "logo_height": {
                        "type": "number",
                        "description": "Logo height"
                      },
                      "logo_position": {
                        "type": "string",
                        "description": "Logo position",
                        "enum": [
                          "center",
                          "left",
                          "none",
                          "right"
                        ]
                      },
                      "logo_url": {
                        "type": "string",
                        "description": "Logo url"
                      },
                      "social_buttons_layout": {
                        "type": "string",
                        "description": "Social buttons layout",
                        "enum": [
                          "bottom",
                          "top"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Branding settings successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "borders",
                    "colors",
                    "displayName",
                    "fonts",
                    "page_background",
                    "themeId",
                    "widget"
                  ],
                  "properties": {
                    "borders": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "button_border_radius",
                        "button_border_weight",
                        "buttons_style",
                        "input_border_radius",
                        "input_border_weight",
                        "inputs_style",
                        "show_widget_shadow",
                        "widget_border_weight",
                        "widget_corner_radius"
                      ],
                      "properties": {
                        "button_border_radius": {
                          "type": "number",
                          "description": "Button border radius"
                        },
                        "button_border_weight": {
                          "type": "number",
                          "description": "Button border weight"
                        },
                        "buttons_style": {
                          "type": "string",
                          "description": "Buttons style",
                          "enum": [
                            "pill",
                            "rounded",
                            "sharp"
                          ]
                        },
                        "input_border_radius": {
                          "type": "number",
                          "description": "Input border radius"
                        },
                        "input_border_weight": {
                          "type": "number",
                          "description": "Input border weight"
                        },
                        "inputs_style": {
                          "type": "string",
                          "description": "Inputs style",
                          "enum": [
                            "pill",
                            "rounded",
                            "sharp"
                          ]
                        },
                        "show_widget_shadow": {
                          "type": "boolean",
                          "description": "Show widget shadow"
                        },
                        "widget_border_weight": {
                          "type": "number",
                          "description": "Widget border weight"
                        },
                        "widget_corner_radius": {
                          "type": "number",
                          "description": "Widget corner radius"
                        }
                      }
                    },
                    "colors": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "body_text",
                        "error",
                        "header",
                        "icons",
                        "input_background",
                        "input_border",
                        "input_filled_text",
                        "input_labels_placeholders",
                        "links_focused_components",
                        "primary_button",
                        "primary_button_label",
                        "secondary_button_border",
                        "secondary_button_label",
                        "success",
                        "widget_background",
                        "widget_border"
                      ],
                      "properties": {
                        "base_focus_color": {
                          "type": "string",
                          "description": "Base Focus Color"
                        },
                        "base_hover_color": {
                          "type": "string",
                          "description": "Base Hover Color"
                        },
                        "body_text": {
                          "type": "string",
                          "description": "Body text"
                        },
                        "captcha_widget_theme": {
                          "type": "string",
                          "description": "Captcha Widget Theme",
                          "enum": [
                            "auto",
                            "dark",
                            "light"
                          ]
                        },
                        "error": {
                          "type": "string",
                          "description": "Error"
                        },
                        "header": {
                          "type": "string",
                          "description": "Header"
                        },
                        "icons": {
                          "type": "string",
                          "description": "Icons"
                        },
                        "input_background": {
                          "type": "string",
                          "description": "Input background"
                        },
                        "input_border": {
                          "type": "string",
                          "description": "Input border"
                        },
                        "input_filled_text": {
                          "type": "string",
                          "description": "Input filled text"
                        },
                        "input_labels_placeholders": {
                          "type": "string",
                          "description": "Input labels & placeholders"
                        },
                        "links_focused_components": {
                          "type": "string",
                          "description": "Links & focused components"
                        },
                        "primary_button": {
                          "type": "string",
                          "description": "Primary button"
                        },
                        "primary_button_label": {
                          "type": "string",
                          "description": "Primary button label"
                        },
                        "secondary_button_border": {
                          "type": "string",
                          "description": "Secondary button border"
                        },
                        "secondary_button_label": {
                          "type": "string",
                          "description": "Secondary button label"
                        },
                        "success": {
                          "type": "string",
                          "description": "Success"
                        },
                        "widget_background": {
                          "type": "string",
                          "description": "Widget background"
                        },
                        "widget_border": {
                          "type": "string",
                          "description": "Widget border"
                        }
                      }
                    },
                    "displayName": {
                      "type": "string",
                      "description": "Display Name",
                      "maxLength": 2048
                    },
                    "fonts": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "body_text",
                        "buttons_text",
                        "font_url",
                        "input_labels",
                        "links",
                        "links_style",
                        "reference_text_size",
                        "subtitle",
                        "title"
                      ],
                      "properties": {
                        "body_text": {
                          "type": "object",
                          "description": "Body text",
                          "additionalProperties": false,
                          "required": [
                            "bold",
                            "size"
                          ],
                          "properties": {
                            "bold": {
                              "type": "boolean",
                              "description": "Body text bold"
                            },
                            "size": {
                              "type": "number",
                              "description": "Body text size"
                            }
                          }
                        },
                        "buttons_text": {
                          "type": "object",
                          "description": "Buttons text",
                          "additionalProperties": false,
                          "required": [
                            "bold",
                            "size"
                          ],
                          "properties": {
                            "bold": {
                              "type": "boolean",
                              "description": "Buttons text bold"
                            },
                            "size": {
                              "type": "number",
                              "description": "Buttons text size"
                            }
                          }
                        },
                        "font_url": {
                          "type": "string",
                          "description": "Font URL"
                        },
                        "input_labels": {
                          "type": "object",
                          "description": "Input Labels",
                          "additionalProperties": false,
                          "required": [
                            "bold",
                            "size"
                          ],
                          "properties": {
                            "bold": {
                              "type": "boolean",
                              "description": "Input Labels bold"
                            },
                            "size": {
                              "type": "number",
                              "description": "Input Labels size"
                            }
                          }
                        },
                        "links": {
                          "type": "object",
                          "description": "Links",
                          "additionalProperties": false,
                          "required": [
                            "bold",
                            "size"
                          ],
                          "properties": {
                            "bold": {
                              "type": "boolean",
                              "description": "Links bold"
                            },
                            "size": {
                              "type": "number",
                              "description": "Links size"
                            }
                          }
                        },
                        "links_style": {
                          "type": "string",
                          "description": "Links style",
                          "enum": [
                            "normal",
                            "underlined"
                          ]
                        },
                        "reference_text_size": {
                          "type": "number",
                          "description": "Reference text size"
                        },
                        "subtitle": {
                          "type": "object",
                          "description": "Subtitle",
                          "additionalProperties": false,
                          "required": [
                            "bold",
                            "size"
                          ],
                          "properties": {
                            "bold": {
                              "type": "boolean",
                              "description": "Subtitle bold"
                            },
                            "size": {
                              "type": "number",
                              "description": "Subtitle size"
                            }
                          }
                        },
                        "title": {
                          "type": "object",
                          "description": "Title",
                          "additionalProperties": false,
                          "required": [
                            "bold",
                            "size"
                          ],
                          "properties": {
                            "bold": {
                              "type": "boolean",
                              "description": "Title bold"
                            },
                            "size": {
                              "type": "number",
                              "description": "Title size"
                            }
                          }
                        }
                      }
                    },
                    "page_background": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "background_color",
                        "background_image_url",
                        "page_layout"
                      ],
                      "properties": {
                        "background_color": {
                          "type": "string",
                          "description": "Background color"
                        },
                        "background_image_url": {
                          "type": "string",
                          "description": "Background image url"
                        },
                        "page_layout": {
                          "type": "string",
                          "description": "Page Layout",
                          "enum": [
                            "center",
                            "left",
                            "right"
                          ]
                        }
                      }
                    },
                    "themeId": {
                      "type": "string",
                      "description": "Theme Id",
                      "maxLength": 32
                    },
                    "widget": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "header_text_alignment",
                        "logo_height",
                        "logo_position",
                        "logo_url",
                        "social_buttons_layout"
                      ],
                      "properties": {
                        "header_text_alignment": {
                          "type": "string",
                          "description": "Header text alignment",
                          "enum": [
                            "center",
                            "left",
                            "right"
                          ]
                        },
                        "logo_height": {
                          "type": "number",
                          "description": "Logo height"
                        },
                        "logo_position": {
                          "type": "string",
                          "description": "Logo position",
                          "enum": [
                            "center",
                            "left",
                            "none",
                            "right"
                          ]
                        },
                        "logo_url": {
                          "type": "string",
                          "description": "Logo url"
                        },
                        "social_buttons_layout": {
                          "type": "string",
                          "description": "Social buttons layout",
                          "enum": [
                            "bottom",
                            "top"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:branding."
          },
          "409": {
            "description": "There was an error updating branding settings: The theme already exists"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_branding_theme",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:branding"
            ]
          }
        ]
      }
    },
    "/branding/themes/default": {
      "get": {
        "summary": "Get default branding theme",
        "description": "Retrieve default branding theme.",
        "tags": [
          "branding"
        ],
        "responses": {
          "200": {
            "description": "Branding theme successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "borders",
                    "colors",
                    "displayName",
                    "fonts",
                    "page_background",
                    "themeId",
                    "widget"
                  ],
                  "properties": {
                    "borders": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "button_border_radius",
                        "button_border_weight",
                        "buttons_style",
                        "input_border_radius",
                        "input_border_weight",
                        "inputs_style",
                        "show_widget_shadow",
                        "widget_border_weight",
                        "widget_corner_radius"
                      ],
                      "properties": {
                        "button_border_radius": {
                          "type": "number",
                          "description": "Button border radius"
                        },
                        "button_border_weight": {
                          "type": "number",
                          "description": "Button border weight"
                        },
                        "buttons_style": {
                          "type": "string",
                          "description": "Buttons style",
                          "enum": [
                            "pill",
                            "rounded",
                            "sharp"
                          ]
                        },
                        "input_border_radius": {
                          "type": "number",
                          "description": "Input border radius"
                        },
                        "input_border_weight": {
                          "type": "number",
                          "description": "Input border weight"
                        },
                        "inputs_style": {
                          "type": "string",
                          "description": "Inputs style",
                          "enum": [
                            "pill",
                            "rounded",
                            "sharp"
                          ]
                        },
                        "show_widget_shadow": {
                          "type": "boolean",
                          "description": "Show widget shadow"
                        },
                        "widget_border_weight": {
                          "type": "number",
                          "description": "Widget border weight"
                        },
                        "widget_corner_radius": {
                          "type": "number",
                          "description": "Widget corner radius"
                        }
                      }
                    },
                    "colors": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "body_text",
                        "error",
                        "header",
                        "icons",
                        "input_background",
                        "input_border",
                        "input_filled_text",
                        "input_labels_placeholders",
                        "links_focused_components",
                        "primary_button",
                        "primary_button_label",
                        "secondary_button_border",
                        "secondary_button_label",
                        "success",
                        "widget_background",
                        "widget_border"
                      ],
                      "properties": {
                        "base_focus_color": {
                          "type": "string",
                          "description": "Base Focus Color"
                        },
                        "base_hover_color": {
                          "type": "string",
                          "description": "Base Hover Color"
                        },
                        "body_text": {
                          "type": "string",
                          "description": "Body text"
                        },
                        "captcha_widget_theme": {
                          "type": "string",
                          "description": "Captcha Widget Theme",
                          "enum": [
                            "auto",
                            "dark",
                            "light"
                          ]
                        },
                        "error": {
                          "type": "string",
                          "description": "Error"
                        },
                        "header": {
                          "type": "string",
                          "description": "Header"
                        },
                        "icons": {
                          "type": "string",
                          "description": "Icons"
                        },
                        "input_background": {
                          "type": "string",
                          "description": "Input background"
                        },
                        "input_border": {
                          "type": "string",
                          "description": "Input border"
                        },
                        "input_filled_text": {
                          "type": "string",
                          "description": "Input filled text"
                        },
                        "input_labels_placeholders": {
                          "type": "string",
                          "description": "Input labels & placeholders"
                        },
                        "links_focused_components": {
                          "type": "string",
                          "description": "Links & focused components"
                        },
                        "primary_button": {
                          "type": "string",
                          "description": "Primary button"
                        },
                        "primary_button_label": {
                          "type": "string",
                          "description": "Primary button label"
                        },
                        "secondary_button_border": {
                          "type": "string",
                          "description": "Secondary button border"
                        },
                        "secondary_button_label": {
                          "type": "string",
                          "description": "Secondary button label"
                        },
                        "success": {
                          "type": "string",
                          "description": "Success"
                        },
                        "widget_background": {
                          "type": "string",
                          "description": "Widget background"
                        },
                        "widget_border": {
                          "type": "string",
                          "description": "Widget border"
                        }
                      }
                    },
                    "displayName": {
                      "type": "string",
                      "description": "Display Name",
                      "maxLength": 2048
                    },
                    "fonts": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "body_text",
                        "buttons_text",
                        "font_url",
                        "input_labels",
                        "links",
                        "links_style",
                        "reference_text_size",
                        "subtitle",
                        "title"
                      ],
                      "properties": {
                        "body_text": {
                          "type": "object",
                          "description": "Body text",
                          "additionalProperties": false,
                          "required": [
                            "bold",
                            "size"
                          ],
                          "properties": {
                            "bold": {
                              "type": "boolean",
                              "description": "Body text bold"
                            },
                            "size": {
                              "type": "number",
                              "description": "Body text size"
                            }
                          }
                        },
                        "buttons_text": {
                          "type": "object",
                          "description": "Buttons text",
                          "additionalProperties": false,
                          "required": [
                            "bold",
                            "size"
                          ],
                          "properties": {
                            "bold": {
                              "type": "boolean",
                              "description": "Buttons text bold"
                            },
                            "size": {
                              "type": "number",
                              "description": "Buttons text size"
                            }
                          }
                        },
                        "font_url": {
                          "type": "string",
                          "description": "Font URL"
                        },
                        "input_labels": {
                          "type": "object",
                          "description": "Input Labels",
                          "additionalProperties": false,
                          "required": [
                            "bold",
                            "size"
                          ],
                          "properties": {
                            "bold": {
                              "type": "boolean",
                              "description": "Input Labels bold"
                            },
                            "size": {
                              "type": "number",
                              "description": "Input Labels size"
                            }
                          }
                        },
                        "links": {
                          "type": "object",
                          "description": "Links",
                          "additionalProperties": false,
                          "required": [
                            "bold",
                            "size"
                          ],
                          "properties": {
                            "bold": {
                              "type": "boolean",
                              "description": "Links bold"
                            },
                            "size": {
                              "type": "number",
                              "description": "Links size"
                            }
                          }
                        },
                        "links_style": {
                          "type": "string",
                          "description": "Links style",
                          "enum": [
                            "normal",
                            "underlined"
                          ]
                        },
                        "reference_text_size": {
                          "type": "number",
                          "description": "Reference text size"
                        },
                        "subtitle": {
                          "type": "object",
                          "description": "Subtitle",
                          "additionalProperties": false,
                          "required": [
                            "bold",
                            "size"
                          ],
                          "properties": {
                            "bold": {
                              "type": "boolean",
                              "description": "Subtitle bold"
                            },
                            "size": {
                              "type": "number",
                              "description": "Subtitle size"
                            }
                          }
                        },
                        "title": {
                          "type": "object",
                          "description": "Title",
                          "additionalProperties": false,
                          "required": [
                            "bold",
                            "size"
                          ],
                          "properties": {
                            "bold": {
                              "type": "boolean",
                              "description": "Title bold"
                            },
                            "size": {
                              "type": "number",
                              "description": "Title size"
                            }
                          }
                        }
                      }
                    },
                    "page_background": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "background_color",
                        "background_image_url",
                        "page_layout"
                      ],
                      "properties": {
                        "background_color": {
                          "type": "string",
                          "description": "Background color"
                        },
                        "background_image_url": {
                          "type": "string",
                          "description": "Background image url"
                        },
                        "page_layout": {
                          "type": "string",
                          "description": "Page Layout",
                          "enum": [
                            "center",
                            "left",
                            "right"
                          ]
                        }
                      }
                    },
                    "themeId": {
                      "type": "string",
                      "description": "Theme Id",
                      "maxLength": 32
                    },
                    "widget": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "header_text_alignment",
                        "logo_height",
                        "logo_position",
                        "logo_url",
                        "social_buttons_layout"
                      ],
                      "properties": {
                        "header_text_alignment": {
                          "type": "string",
                          "description": "Header text alignment",
                          "enum": [
                            "center",
                            "left",
                            "right"
                          ]
                        },
                        "logo_height": {
                          "type": "number",
                          "description": "Logo height"
                        },
                        "logo_position": {
                          "type": "string",
                          "description": "Logo position",
                          "enum": [
                            "center",
                            "left",
                            "none",
                            "right"
                          ]
                        },
                        "logo_url": {
                          "type": "string",
                          "description": "Logo url"
                        },
                        "social_buttons_layout": {
                          "type": "string",
                          "description": "Social buttons layout",
                          "enum": [
                            "bottom",
                            "top"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "The specified client cannot perform the requested operation.",
            "x-description-1": "Insufficient scope; expected any of: read:branding."
          },
          "404": {
            "description": "There was an error retrieving branding settings: invalid theme ID"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_default_branding_theme",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:branding"
            ]
          }
        ]
      }
    },
    "/branding/themes/{themeId}": {
      "get": {
        "summary": "Get branding theme",
        "description": "Retrieve branding theme.",
        "tags": [
          "branding"
        ],
        "parameters": [
          {
            "name": "themeId",
            "in": "path",
            "description": "The ID of the theme",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Branding theme successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "borders",
                    "colors",
                    "displayName",
                    "fonts",
                    "page_background",
                    "themeId",
                    "widget"
                  ],
                  "properties": {
                    "borders": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "button_border_radius",
                        "button_border_weight",
                        "buttons_style",
                        "input_border_radius",
                        "input_border_weight",
                        "inputs_style",
                        "show_widget_shadow",
                        "widget_border_weight",
                        "widget_corner_radius"
                      ],
                      "properties": {
                        "button_border_radius": {
                          "type": "number",
                          "description": "Button border radius"
                        },
                        "button_border_weight": {
                          "type": "number",
                          "description": "Button border weight"
                        },
                        "buttons_style": {
                          "type": "string",
                          "description": "Buttons style",
                          "enum": [
                            "pill",
                            "rounded",
                            "sharp"
                          ]
                        },
                        "input_border_radius": {
                          "type": "number",
                          "description": "Input border radius"
                        },
                        "input_border_weight": {
                          "type": "number",
                          "description": "Input border weight"
                        },
                        "inputs_style": {
                          "type": "string",
                          "description": "Inputs style",
                          "enum": [
                            "pill",
                            "rounded",
                            "sharp"
                          ]
                        },
                        "show_widget_shadow": {
                          "type": "boolean",
                          "description": "Show widget shadow"
                        },
                        "widget_border_weight": {
                          "type": "number",
                          "description": "Widget border weight"
                        },
                        "widget_corner_radius": {
                          "type": "number",
                          "description": "Widget corner radius"
                        }
                      }
                    },
                    "colors": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "body_text",
                        "error",
                        "header",
                        "icons",
                        "input_background",
                        "input_border",
                        "input_filled_text",
                        "input_labels_placeholders",
                        "links_focused_components",
                        "primary_button",
                        "primary_button_label",
                        "secondary_button_border",
                        "secondary_button_label",
                        "success",
                        "widget_background",
                        "widget_border"
                      ],
                      "properties": {
                        "base_focus_color": {
                          "type": "string",
                          "description": "Base Focus Color"
                        },
                        "base_hover_color": {
                          "type": "string",
                          "description": "Base Hover Color"
                        },
                        "body_text": {
                          "type": "string",
                          "description": "Body text"
                        },
                        "captcha_widget_theme": {
                          "type": "string",
                          "description": "Captcha Widget Theme",
                          "enum": [
                            "auto",
                            "dark",
                            "light"
                          ]
                        },
                        "error": {
                          "type": "string",
                          "description": "Error"
                        },
                        "header": {
                          "type": "string",
                          "description": "Header"
                        },
                        "icons": {
                          "type": "string",
                          "description": "Icons"
                        },
                        "input_background": {
                          "type": "string",
                          "description": "Input background"
                        },
                        "input_border": {
                          "type": "string",
                          "description": "Input border"
                        },
                        "input_filled_text": {
                          "type": "string",
                          "description": "Input filled text"
                        },
                        "input_labels_placeholders": {
                          "type": "string",
                          "description": "Input labels & placeholders"
                        },
                        "links_focused_components": {
                          "type": "string",
                          "description": "Links & focused components"
                        },
                        "primary_button": {
                          "type": "string",
                          "description": "Primary button"
                        },
                        "primary_button_label": {
                          "type": "string",
                          "description": "Primary button label"
                        },
                        "secondary_button_border": {
                          "type": "string",
                          "description": "Secondary button border"
                        },
                        "secondary_button_label": {
                          "type": "string",
                          "description": "Secondary button label"
                        },
                        "success": {
                          "type": "string",
                          "description": "Success"
                        },
                        "widget_background": {
                          "type": "string",
                          "description": "Widget background"
                        },
                        "widget_border": {
                          "type": "string",
                          "description": "Widget border"
                        }
                      }
                    },
                    "displayName": {
                      "type": "string",
                      "description": "Display Name",
                      "maxLength": 2048
                    },
                    "fonts": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "body_text",
                        "buttons_text",
                        "font_url",
                        "input_labels",
                        "links",
                        "links_style",
                        "reference_text_size",
                        "subtitle",
                        "title"
                      ],
                      "properties": {
                        "body_text": {
                          "type": "object",
                          "description": "Body text",
                          "additionalProperties": false,
                          "required": [
                            "bold",
                            "size"
                          ],
                          "properties": {
                            "bold": {
                              "type": "boolean",
                              "description": "Body text bold"
                            },
                            "size": {
                              "type": "number",
                              "description": "Body text size"
                            }
                          }
                        },
                        "buttons_text": {
                          "type": "object",
                          "description": "Buttons text",
                          "additionalProperties": false,
                          "required": [
                            "bold",
                            "size"
                          ],
                          "properties": {
                            "bold": {
                              "type": "boolean",
                              "description": "Buttons text bold"
                            },
                            "size": {
                              "type": "number",
                              "description": "Buttons text size"
                            }
                          }
                        },
                        "font_url": {
                          "type": "string",
                          "description": "Font URL"
                        },
                        "input_labels": {
                          "type": "object",
                          "description": "Input Labels",
                          "additionalProperties": false,
                          "required": [
                            "bold",
                            "size"
                          ],
                          "properties": {
                            "bold": {
                              "type": "boolean",
                              "description": "Input Labels bold"
                            },
                            "size": {
                              "type": "number",
                              "description": "Input Labels size"
                            }
                          }
                        },
                        "links": {
                          "type": "object",
                          "description": "Links",
                          "additionalProperties": false,
                          "required": [
                            "bold",
                            "size"
                          ],
                          "properties": {
                            "bold": {
                              "type": "boolean",
                              "description": "Links bold"
                            },
                            "size": {
                              "type": "number",
                              "description": "Links size"
                            }
                          }
                        },
                        "links_style": {
                          "type": "string",
                          "description": "Links style",
                          "enum": [
                            "normal",
                            "underlined"
                          ]
                        },
                        "reference_text_size": {
                          "type": "number",
                          "description": "Reference text size"
                        },
                        "subtitle": {
                          "type": "object",
                          "description": "Subtitle",
                          "additionalProperties": false,
                          "required": [
                            "bold",
                            "size"
                          ],
                          "properties": {
                            "bold": {
                              "type": "boolean",
                              "description": "Subtitle bold"
                            },
                            "size": {
                              "type": "number",
                              "description": "Subtitle size"
                            }
                          }
                        },
                        "title": {
                          "type": "object",
                          "description": "Title",
                          "additionalProperties": false,
                          "required": [
                            "bold",
                            "size"
                          ],
                          "properties": {
                            "bold": {
                              "type": "boolean",
                              "description": "Title bold"
                            },
                            "size": {
                              "type": "number",
                              "description": "Title size"
                            }
                          }
                        }
                      }
                    },
                    "page_background": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "background_color",
                        "background_image_url",
                        "page_layout"
                      ],
                      "properties": {
                        "background_color": {
                          "type": "string",
                          "description": "Background color"
                        },
                        "background_image_url": {
                          "type": "string",
                          "description": "Background image url"
                        },
                        "page_layout": {
                          "type": "string",
                          "description": "Page Layout",
                          "enum": [
                            "center",
                            "left",
                            "right"
                          ]
                        }
                      }
                    },
                    "themeId": {
                      "type": "string",
                      "description": "Theme Id",
                      "maxLength": 32
                    },
                    "widget": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "header_text_alignment",
                        "logo_height",
                        "logo_position",
                        "logo_url",
                        "social_buttons_layout"
                      ],
                      "properties": {
                        "header_text_alignment": {
                          "type": "string",
                          "description": "Header text alignment",
                          "enum": [
                            "center",
                            "left",
                            "right"
                          ]
                        },
                        "logo_height": {
                          "type": "number",
                          "description": "Logo height"
                        },
                        "logo_position": {
                          "type": "string",
                          "description": "Logo position",
                          "enum": [
                            "center",
                            "left",
                            "none",
                            "right"
                          ]
                        },
                        "logo_url": {
                          "type": "string",
                          "description": "Logo url"
                        },
                        "social_buttons_layout": {
                          "type": "string",
                          "description": "Social buttons layout",
                          "enum": [
                            "bottom",
                            "top"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "The specified client cannot perform the requested operation.",
            "x-description-1": "Insufficient scope; expected any of: read:branding."
          },
          "404": {
            "description": "There was an error retrieving branding settings: invalid theme ID"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_branding_theme",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:branding"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete branding theme",
        "description": "Delete branding theme.",
        "tags": [
          "branding"
        ],
        "parameters": [
          {
            "name": "themeId",
            "in": "path",
            "description": "The ID of the theme",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Branding theme successfully deleted."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "The specified client cannot perform the requested operation.",
            "x-description-1": "Insufficient scope; expected any of: delete:branding."
          },
          "404": {
            "description": "There was an error deleting branding settings: invalid theme ID"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_branding_theme",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:branding"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update branding theme",
        "description": "Update branding theme.",
        "tags": [
          "branding"
        ],
        "parameters": [
          {
            "name": "themeId",
            "in": "path",
            "description": "The ID of the theme",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Branding theme",
                "additionalProperties": false,
                "required": [
                  "borders",
                  "colors",
                  "fonts",
                  "page_background",
                  "widget"
                ],
                "properties": {
                  "borders": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "button_border_radius",
                      "button_border_weight",
                      "buttons_style",
                      "input_border_radius",
                      "input_border_weight",
                      "inputs_style",
                      "show_widget_shadow",
                      "widget_border_weight",
                      "widget_corner_radius"
                    ],
                    "properties": {
                      "button_border_radius": {
                        "type": "number",
                        "description": "Button border radius"
                      },
                      "button_border_weight": {
                        "type": "number",
                        "description": "Button border weight"
                      },
                      "buttons_style": {
                        "type": "string",
                        "description": "Buttons style",
                        "enum": [
                          "pill",
                          "rounded",
                          "sharp"
                        ]
                      },
                      "input_border_radius": {
                        "type": "number",
                        "description": "Input border radius"
                      },
                      "input_border_weight": {
                        "type": "number",
                        "description": "Input border weight"
                      },
                      "inputs_style": {
                        "type": "string",
                        "description": "Inputs style",
                        "enum": [
                          "pill",
                          "rounded",
                          "sharp"
                        ]
                      },
                      "show_widget_shadow": {
                        "type": "boolean",
                        "description": "Show widget shadow"
                      },
                      "widget_border_weight": {
                        "type": "number",
                        "description": "Widget border weight"
                      },
                      "widget_corner_radius": {
                        "type": "number",
                        "description": "Widget corner radius"
                      }
                    }
                  },
                  "colors": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "body_text",
                      "error",
                      "header",
                      "icons",
                      "input_background",
                      "input_border",
                      "input_filled_text",
                      "input_labels_placeholders",
                      "links_focused_components",
                      "primary_button",
                      "primary_button_label",
                      "secondary_button_border",
                      "secondary_button_label",
                      "success",
                      "widget_background",
                      "widget_border"
                    ],
                    "properties": {
                      "base_focus_color": {
                        "type": "string",
                        "description": "Base Focus Color"
                      },
                      "base_hover_color": {
                        "type": "string",
                        "description": "Base Hover Color"
                      },
                      "body_text": {
                        "type": "string",
                        "description": "Body text"
                      },
                      "captcha_widget_theme": {
                        "type": "string",
                        "description": "Captcha Widget Theme",
                        "enum": [
                          "auto",
                          "dark",
                          "light"
                        ]
                      },
                      "error": {
                        "type": "string",
                        "description": "Error"
                      },
                      "header": {
                        "type": "string",
                        "description": "Header"
                      },
                      "icons": {
                        "type": "string",
                        "description": "Icons"
                      },
                      "input_background": {
                        "type": "string",
                        "description": "Input background"
                      },
                      "input_border": {
                        "type": "string",
                        "description": "Input border"
                      },
                      "input_filled_text": {
                        "type": "string",
                        "description": "Input filled text"
                      },
                      "input_labels_placeholders": {
                        "type": "string",
                        "description": "Input labels & placeholders"
                      },
                      "links_focused_components": {
                        "type": "string",
                        "description": "Links & focused components"
                      },
                      "primary_button": {
                        "type": "string",
                        "description": "Primary button"
                      },
                      "primary_button_label": {
                        "type": "string",
                        "description": "Primary button label"
                      },
                      "secondary_button_border": {
                        "type": "string",
                        "description": "Secondary button border"
                      },
                      "secondary_button_label": {
                        "type": "string",
                        "description": "Secondary button label"
                      },
                      "success": {
                        "type": "string",
                        "description": "Success"
                      },
                      "widget_background": {
                        "type": "string",
                        "description": "Widget background"
                      },
                      "widget_border": {
                        "type": "string",
                        "description": "Widget border"
                      }
                    }
                  },
                  "displayName": {
                    "type": "string",
                    "description": "Display Name",
                    "maxLength": 2048
                  },
                  "fonts": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "body_text",
                      "buttons_text",
                      "font_url",
                      "input_labels",
                      "links",
                      "links_style",
                      "reference_text_size",
                      "subtitle",
                      "title"
                    ],
                    "properties": {
                      "body_text": {
                        "type": "object",
                        "description": "Body text",
                        "additionalProperties": false,
                        "required": [
                          "bold",
                          "size"
                        ],
                        "properties": {
                          "bold": {
                            "type": "boolean",
                            "description": "Body text bold"
                          },
                          "size": {
                            "type": "number",
                            "description": "Body text size"
                          }
                        }
                      },
                      "buttons_text": {
                        "type": "object",
                        "description": "Buttons text",
                        "additionalProperties": false,
                        "required": [
                          "bold",
                          "size"
                        ],
                        "properties": {
                          "bold": {
                            "type": "boolean",
                            "description": "Buttons text bold"
                          },
                          "size": {
                            "type": "number",
                            "description": "Buttons text size"
                          }
                        }
                      },
                      "font_url": {
                        "type": "string",
                        "description": "Font URL"
                      },
                      "input_labels": {
                        "type": "object",
                        "description": "Input Labels",
                        "additionalProperties": false,
                        "required": [
                          "bold",
                          "size"
                        ],
                        "properties": {
                          "bold": {
                            "type": "boolean",
                            "description": "Input Labels bold"
                          },
                          "size": {
                            "type": "number",
                            "description": "Input Labels size"
                          }
                        }
                      },
                      "links": {
                        "type": "object",
                        "description": "Links",
                        "additionalProperties": false,
                        "required": [
                          "bold",
                          "size"
                        ],
                        "properties": {
                          "bold": {
                            "type": "boolean",
                            "description": "Links bold"
                          },
                          "size": {
                            "type": "number",
                            "description": "Links size"
                          }
                        }
                      },
                      "links_style": {
                        "type": "string",
                        "description": "Links style",
                        "enum": [
                          "normal",
                          "underlined"
                        ]
                      },
                      "reference_text_size": {
                        "type": "number",
                        "description": "Reference text size"
                      },
                      "subtitle": {
                        "type": "object",
                        "description": "Subtitle",
                        "additionalProperties": false,
                        "required": [
                          "bold",
                          "size"
                        ],
                        "properties": {
                          "bold": {
                            "type": "boolean",
                            "description": "Subtitle bold"
                          },
                          "size": {
                            "type": "number",
                            "description": "Subtitle size"
                          }
                        }
                      },
                      "title": {
                        "type": "object",
                        "description": "Title",
                        "additionalProperties": false,
                        "required": [
                          "bold",
                          "size"
                        ],
                        "properties": {
                          "bold": {
                            "type": "boolean",
                            "description": "Title bold"
                          },
                          "size": {
                            "type": "number",
                            "description": "Title size"
                          }
                        }
                      }
                    }
                  },
                  "page_background": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "background_color",
                      "background_image_url",
                      "page_layout"
                    ],
                    "properties": {
                      "background_color": {
                        "type": "string",
                        "description": "Background color"
                      },
                      "background_image_url": {
                        "type": "string",
                        "description": "Background image url"
                      },
                      "page_layout": {
                        "type": "string",
                        "description": "Page Layout",
                        "enum": [
                          "center",
                          "left",
                          "right"
                        ]
                      }
                    }
                  },
                  "widget": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "header_text_alignment",
                      "logo_height",
                      "logo_position",
                      "logo_url",
                      "social_buttons_layout"
                    ],
                    "properties": {
                      "header_text_alignment": {
                        "type": "string",
                        "description": "Header text alignment",
                        "enum": [
                          "center",
                          "left",
                          "right"
                        ]
                      },
                      "logo_height": {
                        "type": "number",
                        "description": "Logo height"
                      },
                      "logo_position": {
                        "type": "string",
                        "description": "Logo position",
                        "enum": [
                          "center",
                          "left",
                          "none",
                          "right"
                        ]
                      },
                      "logo_url": {
                        "type": "string",
                        "description": "Logo url"
                      },
                      "social_buttons_layout": {
                        "type": "string",
                        "description": "Social buttons layout",
                        "enum": [
                          "bottom",
                          "top"
                        ]
                      }
                    }
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "description": "Branding theme",
                "additionalProperties": false,
                "required": [
                  "borders",
                  "colors",
                  "fonts",
                  "page_background",
                  "widget"
                ],
                "properties": {
                  "borders": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "button_border_radius",
                      "button_border_weight",
                      "buttons_style",
                      "input_border_radius",
                      "input_border_weight",
                      "inputs_style",
                      "show_widget_shadow",
                      "widget_border_weight",
                      "widget_corner_radius"
                    ],
                    "properties": {
                      "button_border_radius": {
                        "type": "number",
                        "description": "Button border radius"
                      },
                      "button_border_weight": {
                        "type": "number",
                        "description": "Button border weight"
                      },
                      "buttons_style": {
                        "type": "string",
                        "description": "Buttons style",
                        "enum": [
                          "pill",
                          "rounded",
                          "sharp"
                        ]
                      },
                      "input_border_radius": {
                        "type": "number",
                        "description": "Input border radius"
                      },
                      "input_border_weight": {
                        "type": "number",
                        "description": "Input border weight"
                      },
                      "inputs_style": {
                        "type": "string",
                        "description": "Inputs style",
                        "enum": [
                          "pill",
                          "rounded",
                          "sharp"
                        ]
                      },
                      "show_widget_shadow": {
                        "type": "boolean",
                        "description": "Show widget shadow"
                      },
                      "widget_border_weight": {
                        "type": "number",
                        "description": "Widget border weight"
                      },
                      "widget_corner_radius": {
                        "type": "number",
                        "description": "Widget corner radius"
                      }
                    }
                  },
                  "colors": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "body_text",
                      "error",
                      "header",
                      "icons",
                      "input_background",
                      "input_border",
                      "input_filled_text",
                      "input_labels_placeholders",
                      "links_focused_components",
                      "primary_button",
                      "primary_button_label",
                      "secondary_button_border",
                      "secondary_button_label",
                      "success",
                      "widget_background",
                      "widget_border"
                    ],
                    "properties": {
                      "base_focus_color": {
                        "type": "string",
                        "description": "Base Focus Color"
                      },
                      "base_hover_color": {
                        "type": "string",
                        "description": "Base Hover Color"
                      },
                      "body_text": {
                        "type": "string",
                        "description": "Body text"
                      },
                      "captcha_widget_theme": {
                        "type": "string",
                        "description": "Captcha Widget Theme",
                        "enum": [
                          "auto",
                          "dark",
                          "light"
                        ]
                      },
                      "error": {
                        "type": "string",
                        "description": "Error"
                      },
                      "header": {
                        "type": "string",
                        "description": "Header"
                      },
                      "icons": {
                        "type": "string",
                        "description": "Icons"
                      },
                      "input_background": {
                        "type": "string",
                        "description": "Input background"
                      },
                      "input_border": {
                        "type": "string",
                        "description": "Input border"
                      },
                      "input_filled_text": {
                        "type": "string",
                        "description": "Input filled text"
                      },
                      "input_labels_placeholders": {
                        "type": "string",
                        "description": "Input labels & placeholders"
                      },
                      "links_focused_components": {
                        "type": "string",
                        "description": "Links & focused components"
                      },
                      "primary_button": {
                        "type": "string",
                        "description": "Primary button"
                      },
                      "primary_button_label": {
                        "type": "string",
                        "description": "Primary button label"
                      },
                      "secondary_button_border": {
                        "type": "string",
                        "description": "Secondary button border"
                      },
                      "secondary_button_label": {
                        "type": "string",
                        "description": "Secondary button label"
                      },
                      "success": {
                        "type": "string",
                        "description": "Success"
                      },
                      "widget_background": {
                        "type": "string",
                        "description": "Widget background"
                      },
                      "widget_border": {
                        "type": "string",
                        "description": "Widget border"
                      }
                    }
                  },
                  "displayName": {
                    "type": "string",
                    "description": "Display Name",
                    "maxLength": 2048
                  },
                  "fonts": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "body_text",
                      "buttons_text",
                      "font_url",
                      "input_labels",
                      "links",
                      "links_style",
                      "reference_text_size",
                      "subtitle",
                      "title"
                    ],
                    "properties": {
                      "body_text": {
                        "type": "object",
                        "description": "Body text",
                        "additionalProperties": false,
                        "required": [
                          "bold",
                          "size"
                        ],
                        "properties": {
                          "bold": {
                            "type": "boolean",
                            "description": "Body text bold"
                          },
                          "size": {
                            "type": "number",
                            "description": "Body text size"
                          }
                        }
                      },
                      "buttons_text": {
                        "type": "object",
                        "description": "Buttons text",
                        "additionalProperties": false,
                        "required": [
                          "bold",
                          "size"
                        ],
                        "properties": {
                          "bold": {
                            "type": "boolean",
                            "description": "Buttons text bold"
                          },
                          "size": {
                            "type": "number",
                            "description": "Buttons text size"
                          }
                        }
                      },
                      "font_url": {
                        "type": "string",
                        "description": "Font URL"
                      },
                      "input_labels": {
                        "type": "object",
                        "description": "Input Labels",
                        "additionalProperties": false,
                        "required": [
                          "bold",
                          "size"
                        ],
                        "properties": {
                          "bold": {
                            "type": "boolean",
                            "description": "Input Labels bold"
                          },
                          "size": {
                            "type": "number",
                            "description": "Input Labels size"
                          }
                        }
                      },
                      "links": {
                        "type": "object",
                        "description": "Links",
                        "additionalProperties": false,
                        "required": [
                          "bold",
                          "size"
                        ],
                        "properties": {
                          "bold": {
                            "type": "boolean",
                            "description": "Links bold"
                          },
                          "size": {
                            "type": "number",
                            "description": "Links size"
                          }
                        }
                      },
                      "links_style": {
                        "type": "string",
                        "description": "Links style",
                        "enum": [
                          "normal",
                          "underlined"
                        ]
                      },
                      "reference_text_size": {
                        "type": "number",
                        "description": "Reference text size"
                      },
                      "subtitle": {
                        "type": "object",
                        "description": "Subtitle",
                        "additionalProperties": false,
                        "required": [
                          "bold",
                          "size"
                        ],
                        "properties": {
                          "bold": {
                            "type": "boolean",
                            "description": "Subtitle bold"
                          },
                          "size": {
                            "type": "number",
                            "description": "Subtitle size"
                          }
                        }
                      },
                      "title": {
                        "type": "object",
                        "description": "Title",
                        "additionalProperties": false,
                        "required": [
                          "bold",
                          "size"
                        ],
                        "properties": {
                          "bold": {
                            "type": "boolean",
                            "description": "Title bold"
                          },
                          "size": {
                            "type": "number",
                            "description": "Title size"
                          }
                        }
                      }
                    }
                  },
                  "page_background": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "background_color",
                      "background_image_url",
                      "page_layout"
                    ],
                    "properties": {
                      "background_color": {
                        "type": "string",
                        "description": "Background color"
                      },
                      "background_image_url": {
                        "type": "string",
                        "description": "Background image url"
                      },
                      "page_layout": {
                        "type": "string",
                        "description": "Page Layout",
                        "enum": [
                          "center",
                          "left",
                          "right"
                        ]
                      }
                    }
                  },
                  "widget": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "header_text_alignment",
                      "logo_height",
                      "logo_position",
                      "logo_url",
                      "social_buttons_layout"
                    ],
                    "properties": {
                      "header_text_alignment": {
                        "type": "string",
                        "description": "Header text alignment",
                        "enum": [
                          "center",
                          "left",
                          "right"
                        ]
                      },
                      "logo_height": {
                        "type": "number",
                        "description": "Logo height"
                      },
                      "logo_position": {
                        "type": "string",
                        "description": "Logo position",
                        "enum": [
                          "center",
                          "left",
                          "none",
                          "right"
                        ]
                      },
                      "logo_url": {
                        "type": "string",
                        "description": "Logo url"
                      },
                      "social_buttons_layout": {
                        "type": "string",
                        "description": "Social buttons layout",
                        "enum": [
                          "bottom",
                          "top"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Branding settings successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "borders",
                    "colors",
                    "displayName",
                    "fonts",
                    "page_background",
                    "themeId",
                    "widget"
                  ],
                  "properties": {
                    "borders": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "button_border_radius",
                        "button_border_weight",
                        "buttons_style",
                        "input_border_radius",
                        "input_border_weight",
                        "inputs_style",
                        "show_widget_shadow",
                        "widget_border_weight",
                        "widget_corner_radius"
                      ],
                      "properties": {
                        "button_border_radius": {
                          "type": "number",
                          "description": "Button border radius"
                        },
                        "button_border_weight": {
                          "type": "number",
                          "description": "Button border weight"
                        },
                        "buttons_style": {
                          "type": "string",
                          "description": "Buttons style",
                          "enum": [
                            "pill",
                            "rounded",
                            "sharp"
                          ]
                        },
                        "input_border_radius": {
                          "type": "number",
                          "description": "Input border radius"
                        },
                        "input_border_weight": {
                          "type": "number",
                          "description": "Input border weight"
                        },
                        "inputs_style": {
                          "type": "string",
                          "description": "Inputs style",
                          "enum": [
                            "pill",
                            "rounded",
                            "sharp"
                          ]
                        },
                        "show_widget_shadow": {
                          "type": "boolean",
                          "description": "Show widget shadow"
                        },
                        "widget_border_weight": {
                          "type": "number",
                          "description": "Widget border weight"
                        },
                        "widget_corner_radius": {
                          "type": "number",
                          "description": "Widget corner radius"
                        }
                      }
                    },
                    "colors": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "body_text",
                        "error",
                        "header",
                        "icons",
                        "input_background",
                        "input_border",
                        "input_filled_text",
                        "input_labels_placeholders",
                        "links_focused_components",
                        "primary_button",
                        "primary_button_label",
                        "secondary_button_border",
                        "secondary_button_label",
                        "success",
                        "widget_background",
                        "widget_border"
                      ],
                      "properties": {
                        "base_focus_color": {
                          "type": "string",
                          "description": "Base Focus Color"
                        },
                        "base_hover_color": {
                          "type": "string",
                          "description": "Base Hover Color"
                        },
                        "body_text": {
                          "type": "string",
                          "description": "Body text"
                        },
                        "captcha_widget_theme": {
                          "type": "string",
                          "description": "Captcha Widget Theme",
                          "enum": [
                            "auto",
                            "dark",
                            "light"
                          ]
                        },
                        "error": {
                          "type": "string",
                          "description": "Error"
                        },
                        "header": {
                          "type": "string",
                          "description": "Header"
                        },
                        "icons": {
                          "type": "string",
                          "description": "Icons"
                        },
                        "input_background": {
                          "type": "string",
                          "description": "Input background"
                        },
                        "input_border": {
                          "type": "string",
                          "description": "Input border"
                        },
                        "input_filled_text": {
                          "type": "string",
                          "description": "Input filled text"
                        },
                        "input_labels_placeholders": {
                          "type": "string",
                          "description": "Input labels & placeholders"
                        },
                        "links_focused_components": {
                          "type": "string",
                          "description": "Links & focused components"
                        },
                        "primary_button": {
                          "type": "string",
                          "description": "Primary button"
                        },
                        "primary_button_label": {
                          "type": "string",
                          "description": "Primary button label"
                        },
                        "secondary_button_border": {
                          "type": "string",
                          "description": "Secondary button border"
                        },
                        "secondary_button_label": {
                          "type": "string",
                          "description": "Secondary button label"
                        },
                        "success": {
                          "type": "string",
                          "description": "Success"
                        },
                        "widget_background": {
                          "type": "string",
                          "description": "Widget background"
                        },
                        "widget_border": {
                          "type": "string",
                          "description": "Widget border"
                        }
                      }
                    },
                    "displayName": {
                      "type": "string",
                      "description": "Display Name",
                      "maxLength": 2048
                    },
                    "fonts": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "body_text",
                        "buttons_text",
                        "font_url",
                        "input_labels",
                        "links",
                        "links_style",
                        "reference_text_size",
                        "subtitle",
                        "title"
                      ],
                      "properties": {
                        "body_text": {
                          "type": "object",
                          "description": "Body text",
                          "additionalProperties": false,
                          "required": [
                            "bold",
                            "size"
                          ],
                          "properties": {
                            "bold": {
                              "type": "boolean",
                              "description": "Body text bold"
                            },
                            "size": {
                              "type": "number",
                              "description": "Body text size"
                            }
                          }
                        },
                        "buttons_text": {
                          "type": "object",
                          "description": "Buttons text",
                          "additionalProperties": false,
                          "required": [
                            "bold",
                            "size"
                          ],
                          "properties": {
                            "bold": {
                              "type": "boolean",
                              "description": "Buttons text bold"
                            },
                            "size": {
                              "type": "number",
                              "description": "Buttons text size"
                            }
                          }
                        },
                        "font_url": {
                          "type": "string",
                          "description": "Font URL"
                        },
                        "input_labels": {
                          "type": "object",
                          "description": "Input Labels",
                          "additionalProperties": false,
                          "required": [
                            "bold",
                            "size"
                          ],
                          "properties": {
                            "bold": {
                              "type": "boolean",
                              "description": "Input Labels bold"
                            },
                            "size": {
                              "type": "number",
                              "description": "Input Labels size"
                            }
                          }
                        },
                        "links": {
                          "type": "object",
                          "description": "Links",
                          "additionalProperties": false,
                          "required": [
                            "bold",
                            "size"
                          ],
                          "properties": {
                            "bold": {
                              "type": "boolean",
                              "description": "Links bold"
                            },
                            "size": {
                              "type": "number",
                              "description": "Links size"
                            }
                          }
                        },
                        "links_style": {
                          "type": "string",
                          "description": "Links style",
                          "enum": [
                            "normal",
                            "underlined"
                          ]
                        },
                        "reference_text_size": {
                          "type": "number",
                          "description": "Reference text size"
                        },
                        "subtitle": {
                          "type": "object",
                          "description": "Subtitle",
                          "additionalProperties": false,
                          "required": [
                            "bold",
                            "size"
                          ],
                          "properties": {
                            "bold": {
                              "type": "boolean",
                              "description": "Subtitle bold"
                            },
                            "size": {
                              "type": "number",
                              "description": "Subtitle size"
                            }
                          }
                        },
                        "title": {
                          "type": "object",
                          "description": "Title",
                          "additionalProperties": false,
                          "required": [
                            "bold",
                            "size"
                          ],
                          "properties": {
                            "bold": {
                              "type": "boolean",
                              "description": "Title bold"
                            },
                            "size": {
                              "type": "number",
                              "description": "Title size"
                            }
                          }
                        }
                      }
                    },
                    "page_background": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "background_color",
                        "background_image_url",
                        "page_layout"
                      ],
                      "properties": {
                        "background_color": {
                          "type": "string",
                          "description": "Background color"
                        },
                        "background_image_url": {
                          "type": "string",
                          "description": "Background image url"
                        },
                        "page_layout": {
                          "type": "string",
                          "description": "Page Layout",
                          "enum": [
                            "center",
                            "left",
                            "right"
                          ]
                        }
                      }
                    },
                    "themeId": {
                      "type": "string",
                      "description": "Theme Id",
                      "maxLength": 32
                    },
                    "widget": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "header_text_alignment",
                        "logo_height",
                        "logo_position",
                        "logo_url",
                        "social_buttons_layout"
                      ],
                      "properties": {
                        "header_text_alignment": {
                          "type": "string",
                          "description": "Header text alignment",
                          "enum": [
                            "center",
                            "left",
                            "right"
                          ]
                        },
                        "logo_height": {
                          "type": "number",
                          "description": "Logo height"
                        },
                        "logo_position": {
                          "type": "string",
                          "description": "Logo position",
                          "enum": [
                            "center",
                            "left",
                            "none",
                            "right"
                          ]
                        },
                        "logo_url": {
                          "type": "string",
                          "description": "Logo url"
                        },
                        "social_buttons_layout": {
                          "type": "string",
                          "description": "Social buttons layout",
                          "enum": [
                            "bottom",
                            "top"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:branding."
          },
          "404": {
            "description": "There was an error updating branding settings: invalid theme ID"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_branding_theme",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:branding"
            ]
          }
        ]
      }
    },
    "/client-grants": {
      "get": {
        "summary": "Get client grants",
        "description": "Retrieve a list of <a href=\"https://auth0.com/docs/api-auth/grant/client-credentials\">client grants</a>, including the scopes associated with the application/API pair.\n",
        "tags": [
          "client-grants"
        ],
        "parameters": [
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page index of the results to return. First page is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Optional Id from which to start selection.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "audience",
            "in": "query",
            "description": "Optional filter on audience.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "query",
            "description": "Optional filter on client_id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "allow_any_organization",
            "in": "query",
            "description": "Optional filter on allow_any_organization.",
            "schema": {
              "$ref": "#/components/schemas/ClientGrantAllowAnyOrganizationEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Client grants successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListClientGrantResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:client_grants."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_client-grants",
        "x-operation-name": "list",
        "x-operation-group": "clientGrants",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:client_grants"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create client grant",
        "description": "Create a client grant for a machine-to-machine login flow. To learn more, read <a href=\"https://www.auth0.com/docs/get-started/authentication-and-authorization-flow/client-credentials-flow\">Client Credential Flow</a>.",
        "tags": [
          "client-grants"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClientGrantRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateClientGrantRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Client grant successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateClientGrantResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: create:client_grants."
          },
          "404": {
            "description": "Resource server not found",
            "x-description-1": "Client not found"
          },
          "409": {
            "description": "A resource server with the same identifier already exists."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_client-grants",
        "x-operation-name": "create",
        "x-operation-group": "clientGrants",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:client_grants"
            ]
          }
        ]
      }
    },
    "/client-grants/{id}": {
      "delete": {
        "summary": "Delete client grant",
        "description": "Delete the <a href=\"https://www.auth0.com/docs/get-started/authentication-and-authorization-flow/client-credentials-flow\">Client Credential Flow</a> from your machine-to-machine application.\n",
        "tags": [
          "client-grants"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the client grant to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Client grant successfully deleted."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: delete:client_grants."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_client-grants_by_id",
        "x-operation-name": "delete",
        "x-operation-group": "clientGrants",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:client_grants"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update client grant",
        "description": "Update a client grant.",
        "tags": [
          "client-grants"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the client grant to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClientGrantRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClientGrantRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Client grant successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateClientGrantResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:client_grants."
          },
          "404": {
            "description": "The client grant does not exist."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_client-grants_by_id",
        "x-operation-name": "update",
        "x-operation-group": "clientGrants",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:client_grants"
            ]
          }
        ]
      }
    },
    "/client-grants/{id}/organizations": {
      "get": {
        "summary": "Get the organizations associated to a client grant",
        "tags": [
          "client-grants"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the client grant",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page index of the results to return. First page is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Optional Id from which to start selection.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organizations successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListClientGrantOrganizationsResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause.",
            "x-description-1": "Invalid query string paging options. The message will vary depending on the cause"
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:organization_client_grants."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_client-grant-organizations",
        "x-operation-name": "listOrganizations",
        "x-operation-group": "clientGrants",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:organization_client_grants"
            ]
          }
        ]
      }
    },
    "/clients": {
      "get": {
        "summary": "Get clients",
        "description": "Retrieve clients (applications and SSO integrations) matching provided filters. A list of fields to include or exclude may also be specified.\nFor more information, read <a href=\"https://www.auth0.com/docs/get-started/applications\"> Applications in Auth0</a> and <a href=\"https://www.auth0.com/docs/authenticate/single-sign-on\"> Single Sign-On</a>.\n\n<ul>\n  <li>\n    The following can be retrieved with any scope:\n    <code>client_id</code>, <code>app_type</code>, <code>name</code>, and <code>description</code>.\n  </li>\n  <li>\n    The following properties can only be retrieved with the <code>read:clients</code> or\n    <code>read:client_keys</code> scope:\n    <code>callbacks</code>, <code>oidc_logout</code>, <code>allowed_origins</code>,\n    <code>web_origins</code>, <code>tenant</code>, <code>global</code>, <code>config_route</code>,\n    <code>callback_url_template</code>, <code>jwt_configuration</code>,\n    <code>jwt_configuration.lifetime_in_seconds</code>, <code>jwt_configuration.secret_encoded</code>,\n    <code>jwt_configuration.scopes</code>, <code>jwt_configuration.alg</code>, <code>api_type</code>,\n    <code>logo_uri</code>, <code>allowed_clients</code>, <code>owners</code>, <code>custom_login_page</code>,\n    <code>custom_login_page_off</code>, <code>sso</code>, <code>addons</code>, <code>form_template</code>,\n    <code>custom_login_page_codeview</code>, <code>resource_servers</code>, <code>client_metadata</code>,\n    <code>mobile</code>, <code>mobile.android</code>, <code>mobile.ios</code>, <code>allowed_logout_urls</code>,\n    <code>token_endpoint_auth_method</code>, <code>is_first_party</code>, <code>oidc_conformant</code>,\n    <code>is_token_endpoint_ip_header_trusted</code>, <code>initiate_login_uri</code>, <code>grant_types</code>,\n    <code>refresh_token</code>, <code>refresh_token.rotation_type</code>, <code>refresh_token.expiration_type</code>,\n    <code>refresh_token.leeway</code>, <code>refresh_token.token_lifetime</code>, <code>refresh_token.policies</code>, <code>organization_usage</code>,\n    <code>organization_require_behavior</code>.\n  </li>\n  <li>\n    The following properties can only be retrieved with the\n    <code>read:client_keys</code> or <code>read:client_credentials</code> scope:\n    <code>encryption_key</code>, <code>encryption_key.pub</code>, <code>encryption_key.cert</code>,\n    <code>client_secret</code>, <code>client_authentication_methods</code> and <code>signing_key</code>.\n  </li>\n</ul>\n",
        "tags": [
          "clients"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated list of fields to include or exclude (based on value provided for include_fields) in the result. Leave empty to retrieve all fields.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_fields",
            "in": "query",
            "description": "Whether specified fields are to be included (true) or excluded (false).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page index of the results to return. First page is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results per page. Default value is 50, maximum value is 100",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Optional Id from which to start selection.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "is_global",
            "in": "query",
            "description": "Optional filter on the global client parameter.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "is_first_party",
            "in": "query",
            "description": "Optional filter on whether or not a client is a first-party client.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "app_type",
            "in": "query",
            "description": "Optional filter by a comma-separated list of application types.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Advanced Query in <a href=\"http://www.lucenetutorial.com/lucene-query-syntax.html\">Lucene</a> syntax.<br /><b>Permitted Queries</b>:<br /><ul><li><i>client_grant.organization_id:{organization_id}</i></li><li><i>client_grant.allow_any_organization:true</i></li></ul><b>Additional Restrictions</b>:<br /><ul><li>Cannot be used in combination with other filters</li><li>Requires use of the <i>from</i> and <i>take</i> paging parameters (checkpoint paginatinon)</li><li>Reduced rate limits apply. See <a href=\"https://auth0.com/docs/troubleshoot/customer-support/operational-policies/rate-limit-policy/rate-limit-configurations/enterprise-public\">Rate Limit Configurations</a></li></ul><i><b>Note</b>: Recent updates may not be immediately reflected in query results</i>",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Clients successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Client"
                      }
                    },
                    {
                      "$ref": "#/components/schemas/ListClientsOffsetPaginatedResponseContent"
                    },
                    {
                      "$ref": "#/components/schemas/ListClientsPaginatedResponseContent"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:clients, read:client_keys, read:client_summary",
            "x-description-1": "Some fields cannot be read with the permissions granted by the bearer token scopes. The message will vary depending on the fields and the scopes."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_clients",
        "x-operation-name": "list",
        "x-operation-group": "clients",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:clients",
              "read:client_keys",
              "read:client_credentials",
              "read:client_summary"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create a client",
        "description": "Create a new client (application or SSO integration). For more information, read <a href=\"https://www.auth0.com/docs/get-started/auth0-overview/create-applications\">Create Applications</a>\n<a href=\"https://www.auth0.com/docs/authenticate/single-sign-on/api-endpoints-for-single-sign-on>\">API Endpoints for Single Sign-On</a>. \n\nNotes: \n- We recommend leaving the `client_secret` parameter unspecified to allow the generation of a safe secret.\n- The <code>client_authentication_methods</code> and <code>token_endpoint_auth_method</code> properties are mutually exclusive. Use \n<code>client_authentication_methods</code> to configure the client with Private Key JWT authentication method. Otherwise, use <code>token_endpoint_auth_method</code>\nto configure the client with client secret (basic or post) or with no authentication method (none).\n- When using <code>client_authentication_methods</code> to configure the client with Private Key JWT authentication method, specify fully defined credentials. \nThese credentials will be automatically enabled for Private Key JWT authentication on the client. \n- To configure <code>client_authentication_methods</code>, the <code>create:client_credentials</code> scope is required.\n- To configure <code>client_authentication_methods</code>, the property <code>jwt_configuration.alg</code> must be set to RS256.\n\n<div class=\"alert alert-warning\">SSO Integrations created via this endpoint will accept login requests and share user profile information.</div>\n",
        "tags": [
          "clients"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClientRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateClientRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Client successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateClientResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: create:clients.",
            "x-description-1": "The account is not allowed to perform this operation.",
            "x-description-2": "You reached the limit of entities of this type for this tenant.",
            "x-description-3": "Organizations are only available to first party clients on user-based flows. Properties organization_usage and organization_require_behavior must be unset for third party clients."
          },
          "409": {
            "description": "Another client exists with the same alias."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_clients",
        "x-operation-name": "create",
        "x-operation-group": "clients",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:clients"
            ]
          }
        ]
      }
    },
    "/clients/{client_id}/credentials": {
      "get": {
        "summary": "Get client credentials",
        "description": "Get the details of a client credential.\n\n<b>Important</b>: To enable credentials to be used for a client authentication method, set the <code>client_authentication_methods</code> property on the client. To enable credentials to be used for JWT-Secured Authorization requests set the <code>signed_request_object</code> property on the client.\n",
        "tags": [
          "clients"
        ],
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "description": "ID of the client.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Credentials successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClientCredential"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:client_credentials."
          },
          "404": {
            "description": "Client not found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_credentials",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:client_credentials"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create a client credential",
        "description": "Create a client credential associated to your application. Credentials can be used to configure Private Key JWT and mTLS authentication methods, as well as for JWT-secured Authorization requests.\n\n<h5>Public Key</h5>Public Key credentials can be used to set up Private Key JWT client authentication and JWT-secured Authorization requests.\n\nSample: <pre><code>{\n  \"credential_type\": \"public_key\",\n  \"name\": \"string\",\n  \"pem\": \"string\",\n  \"alg\": \"RS256\",\n  \"parse_expiry_from_cert\": false,\n  \"expires_at\": \"2022-12-31T23:59:59Z\"\n}</code></pre>\n<h5>Certificate (CA-signed & self-signed)</h5>Certificate credentials can be used to set up mTLS client authentication. CA-signed certificates can be configured either with a signed certificate or with just the certificate Subject DN.\n\nCA-signed Certificate Sample (pem): <pre><code>{\n  \"credential_type\": \"x509_cert\",\n  \"name\": \"string\",\n  \"pem\": \"string\"\n}</code></pre>CA-signed Certificate Sample (subject_dn): <pre><code>{\n  \"credential_type\": \"cert_subject_dn\",\n  \"name\": \"string\",\n  \"subject_dn\": \"string\"\n}</code></pre>Self-signed Certificate Sample: <pre><code>{\n  \"credential_type\": \"cert_subject_dn\",\n  \"name\": \"string\",\n  \"pem\": \"string\"\n}</code></pre>\n\nThe credential will be created but not yet enabled for use until you set the corresponding properties in the client:\n<ul>\n  <li>To enable the credential for Private Key JWT or mTLS authentication methods, set the <code>client_authentication_methods</code> property on the client. For more information, read <a href=\"https://auth0.com/docs/get-started/applications/configure-private-key-jwt\">Configure Private Key JWT Authentication</a> and <a href=\"https://auth0.com/docs/get-started/applications/configure-mtls\">Configure mTLS Authentication</a></li>\n  <li>To enable the credential for JWT-secured Authorization requests, set the <code>signed_request_object</code>property on the client. For more information, read <a href=\"https://auth0.com/docs/get-started/applications/configure-jar\">Configure JWT-secured Authorization Requests (JAR)</a></li>\n</ul>\n",
        "tags": [
          "clients"
        ],
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "description": "ID of the client.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostClientCredentialRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PostClientCredentialRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Credential successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostClientCredentialResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: create:client_credentials."
          },
          "404": {
            "description": "Client not found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_credentials",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:client_credentials"
            ]
          }
        ]
      }
    },
    "/clients/{client_id}/credentials/{credential_id}": {
      "get": {
        "summary": "Get client credential details",
        "description": "Get the details of a client credential.\n\n<b>Important</b>: To enable credentials to be used for a client authentication method, set the <code>client_authentication_methods</code> property on the client. To enable credentials to be used for JWT-Secured Authorization requests set the <code>signed_request_object</code> property on the client.\n",
        "tags": [
          "clients"
        ],
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "description": "ID of the client.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "credential_id",
            "in": "path",
            "description": "ID of the credential.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Credential successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetClientCredentialResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:client_credentials."
          },
          "404": {
            "description": "Client not found.",
            "x-description-1": "Credential does not exist"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_credentials_by_credential_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:client_credentials"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a client credential",
        "description": "Delete a client credential you previously created. May be enabled or disabled. For more information, read <a href=\"https://www.auth0.com/docs/get-started/authentication-and-authorization-flow/client-credentials-flow\">Client Credential Flow</a>.",
        "tags": [
          "clients"
        ],
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "description": "ID of the client.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "credential_id",
            "in": "path",
            "description": "ID of the credential to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Credential successfully deleted."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: delete:client_credentials."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_credentials_by_credential_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:client_credentials"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update a client credential",
        "description": "Change a client credential you previously created. May be enabled or disabled. For more information, read <a href=\"https://www.auth0.com/docs/get-started/authentication-and-authorization-flow/client-credentials-flow\">Client Credential Flow</a>.",
        "tags": [
          "clients"
        ],
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "description": "ID of the client.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "credential_id",
            "in": "path",
            "description": "ID of the credential.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchClientCredentialRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchClientCredentialRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Credential successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchClientCredentialResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:client_credentials."
          },
          "404": {
            "description": "Client not found.",
            "x-description-1": "Credential does not exist"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_credentials_by_credential_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:client_credentials"
            ]
          }
        ]
      }
    },
    "/clients/{id}": {
      "get": {
        "summary": "Get client by ID",
        "description": "Retrieve client details by ID. Clients are SSO connections or Applications linked with your Auth0 tenant. A list of fields to include or exclude may also be specified. \nFor more information, read <a href=\"https://www.auth0.com/docs/get-started/applications\"> Applications in Auth0</a> and <a href=\"https://www.auth0.com/docs/authenticate/single-sign-on\"> Single Sign-On</a>.\n<ul>\n  <li>\n    The following properties can be retrieved with any of the scopes:\n    <code>client_id</code>, <code>app_type</code>, <code>name</code>, and <code>description</code>.\n  </li>\n  <li>\n    The following properties can only be retrieved with the <code>read:clients</code> or\n    <code>read:client_keys</code> scopes:\n    <code>callbacks</code>, <code>oidc_logout</code>, <code>allowed_origins</code>,\n    <code>web_origins</code>, <code>tenant</code>, <code>global</code>, <code>config_route</code>,\n    <code>callback_url_template</code>, <code>jwt_configuration</code>,\n    <code>jwt_configuration.lifetime_in_seconds</code>, <code>jwt_configuration.secret_encoded</code>,\n    <code>jwt_configuration.scopes</code>, <code>jwt_configuration.alg</code>, <code>api_type</code>,\n    <code>logo_uri</code>, <code>allowed_clients</code>, <code>owners</code>, <code>custom_login_page</code>,\n    <code>custom_login_page_off</code>, <code>sso</code>, <code>addons</code>, <code>form_template</code>,\n    <code>custom_login_page_codeview</code>, <code>resource_servers</code>, <code>client_metadata</code>,\n    <code>mobile</code>, <code>mobile.android</code>, <code>mobile.ios</code>, <code>allowed_logout_urls</code>,\n    <code>token_endpoint_auth_method</code>, <code>is_first_party</code>, <code>oidc_conformant</code>,\n    <code>is_token_endpoint_ip_header_trusted</code>, <code>initiate_login_uri</code>, <code>grant_types</code>,\n    <code>refresh_token</code>, <code>refresh_token.rotation_type</code>, <code>refresh_token.expiration_type</code>,\n    <code>refresh_token.leeway</code>, <code>refresh_token.token_lifetime</code>, <code>refresh_token.policies</code>, <code>organization_usage</code>,\n    <code>organization_require_behavior</code>.\n  </li>\n  <li>\n    The following properties can only be retrieved with the <code>read:client_keys</code> or <code>read:client_credentials</code> scopes:\n    <code>encryption_key</code>, <code>encryption_key.pub</code>, <code>encryption_key.cert</code>,\n    <code>client_secret</code>, <code>client_authentication_methods</code> and <code>signing_key</code>.\n  </li>\n</ul>\n",
        "tags": [
          "clients"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the client to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated list of fields to include or exclude (based on value provided for include_fields) in the result. Leave empty to retrieve all fields.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_fields",
            "in": "query",
            "description": "Whether specified fields are to be included (true) or excluded (false).",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Client successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetClientResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:clients, read:client_keys, read:client_credentials, read:client_summary.",
            "x-description-1": "Some fields cannot be read with the permissions granted by the bearer token scopes. The message will vary depending on the fields and the scopes."
          },
          "404": {
            "description": "Client not found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_clients_by_id",
        "x-operation-name": "get",
        "x-operation-group": "clients",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:clients",
              "read:client_keys",
              "read:client_credentials",
              "read:client_summary"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a client",
        "description": "Delete a client and related configuration (rules, connections, etc).",
        "tags": [
          "clients"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the client to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Client successfully deleted."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Global client cannot be deleted."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: delete:clients."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_clients_by_id",
        "x-operation-name": "delete",
        "x-operation-group": "clients",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:clients"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update a client",
        "description": "Updates a client's settings. For more information, read <a href=\"https://www.auth0.com/docs/get-started/applications\"> Applications in Auth0</a> and <a href=\"https://www.auth0.com/docs/authenticate/single-sign-on\"> Single Sign-On</a>.\n\nNotes:\n- The `client_secret` and `signing_key` attributes can only be updated with the `update:client_keys` scope.\n- The <code>client_authentication_methods</code> and <code>token_endpoint_auth_method</code> properties are mutually exclusive. Use <code>client_authentication_methods</code> to configure the client with Private Key JWT authentication method. Otherwise, use <code>token_endpoint_auth_method</code> to configure the client with client secret (basic or post) or with no authentication method (none).\n- When using <code>client_authentication_methods</code> to configure the client with Private Key JWT authentication method, only specify the credential IDs that were generated when creating the credentials on the client.\n- To configure <code>client_authentication_methods</code>, the <code>update:client_credentials</code> scope is required.\n- To configure <code>client_authentication_methods</code>, the property <code>jwt_configuration.alg</code> must be set to RS256.\n- To change a client's <code>is_first_party</code> property to <code>false</code>, the <code>organization_usage</code> and <code>organization_require_behavior</code> properties must be unset.\n",
        "tags": [
          "clients"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the client to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClientRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClientRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Client successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateClientResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:clients, update:client_keys.",
            "x-description-1": "Some fields cannot be updated with the permissions granted by the bearer token scopes. The message will vary depending on the fields and the scopes.",
            "x-description-2": "The account is not allowed to perform this operation.",
            "x-description-3": "Organizations are only available to first party clients on user-based flows. Properties organization_usage and organization_require_behavior must be unset for third party clients."
          },
          "404": {
            "description": "Client not found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_clients_by_id",
        "x-operation-name": "update",
        "x-operation-group": "clients",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:clients",
              "update:client_keys",
              "update:client_credentials"
            ]
          }
        ]
      }
    },
    "/clients/{id}/connections": {
      "get": {
        "summary": "Get enabled connections for a client",
        "description": "Retrieve all connections that are enabled for the specified <a href=\"https://www.auth0.com/docs/get-started/applications\"> Application</a>, using checkpoint pagination. A list of fields to include or exclude for each connection may also be specified.\n<ul>\n  <li>\n    This endpoint requires the <code>read:connections</code> scope and any one of <code>read:clients</code> or <code>read:client_summary</code>.\n  </li>\n  <li>\n    <b>Note</b>: The first time you call this endpoint, omit the <code>from</code> parameter. If there are more results, a <code>next</code> value is included in the response. You can use this for subsequent API calls. When <code>next</code> is no longer included in the response, no further results are remaining.\n  </li>\n</ul>\n",
        "tags": [
          "clients"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the client for which to retrieve enabled connections.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "strategy",
            "in": "query",
            "description": "Provide strategies to only retrieve connections with such strategies",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ConnectionStrategyEnum"
              }
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Optional Id from which to start selection.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A comma separated list of fields to include or exclude (depending on include_fields) from the result, empty to retrieve all fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_fields",
            "in": "query",
            "description": "<code>true</code> if the fields specified are to be included in the result, <code>false</code> otherwise (defaults to <code>true</code>)",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListClientConnectionsResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected: read:connections and any of: read:clients or read:client_summary."
          },
          "404": {
            "description": "Client does not exist."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_client_connections",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:connections",
              "read:clients",
              "read:client_summary"
            ]
          }
        ]
      }
    },
    "/clients/{id}/rotate-secret": {
      "post": {
        "summary": "Rotate a client secret",
        "description": "Rotate a client secret.\n\nThis endpoint cannot be used with clients configured with Private Key JWT authentication method (client_authentication_methods configured with private_key_jwt). The generated secret is NOT base64 encoded.\n\nFor more information, read <a href=\"https://www.auth0.com/docs/get-started/applications/rotate-client-secret\">Rotate Client Secrets</a>.",
        "tags": [
          "clients"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the client that will rotate secrets.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret successfully rotated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RotateClientSecretResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:client_keys.",
            "x-description-1": "Some fields cannot be updated with the permissions granted by the bearer token scopes. The message will vary depending on the fields and the scopes."
          },
          "404": {
            "description": "Client not found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_rotate-secret",
        "x-operation-name": "rotateSecret",
        "x-operation-group": "clients",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:client_keys"
            ]
          }
        ]
      }
    },
    "/connections": {
      "get": {
        "summary": "Get all connections",
        "description": "Retrieves detailed list of all <a href=\"https://auth0.com/docs/authenticate/identity-providers\">connections</a> that match the specified strategy. If no strategy is provided, all connections within your tenant are retrieved. This action can accept a list of fields to include or exclude from the resulting list of connections. \n\nThis endpoint supports two types of pagination:\n<ul>\n<li>Offset pagination</li>\n<li>Checkpoint pagination</li>\n</ul>\n\nCheckpoint pagination must be used if you need to retrieve more than 1000 connections.\n\n<h2>Checkpoint Pagination</h2>\n\nTo search by checkpoint, use the following parameters:\n<ul>\n<li><code>from</code>: Optional id from which to start selection.</li>\n<li><code>take</code>: The total amount of entries to retrieve when using the from parameter. Defaults to 50.</li>\n</ul>\n\n<b>Note</b>: The first time you call this endpoint using checkpoint pagination, omit the <code>from</code> parameter. If there are more results, a <code>next</code> value is included in the response. You can use this for subsequent API calls. When <code>next</code> is no longer included in the response, no pages are remaining.\n",
        "tags": [
          "connections"
        ],
        "parameters": [
          {
            "name": "per_page",
            "in": "query",
            "description": "The amount of entries per page. Defaults to 100 if not provided",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number. Zero based",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "true if a query summary must be included in the result, false otherwise. Not returned when using checkpoint pagination. Default <code>false</code>.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Optional Id from which to start selection.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "strategy",
            "in": "query",
            "description": "Provide strategies to only retrieve connections with such strategies",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ConnectionStrategyEnum"
              }
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Provide the name of the connection to retrieve",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A comma separated list of fields to include or exclude (depending on include_fields) from the result, empty to retrieve all fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_fields",
            "in": "query",
            "description": "<code>true</code> if the fields specified are to be included in the result, <code>false</code> otherwise (defaults to <code>true</code>)",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The conections were retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ConnectionForList"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "start": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "total": {
                          "type": "number"
                        },
                        "connections": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ConnectionForList"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation"
          },
          "403": {
            "description": "Insufficient scope, expected any of: read:connections"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_connections",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:connections"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create a connection",
        "description": "Creates a new connection according to the JSON object received in <code>body</code>.<br/>",
        "tags": [
          "connections"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/connectionCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/connectionCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The connection was created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connection"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause.",
            "x-description-1": "Your account is not allowed to set options.set_user_root_attributes",
            "x-description-2": "options.set_user_root_attributes can be set only for enterprise connections, social connections or custom database connections (using external users store)",
            "x-description-3": "No phone provider configured for the tenant",
            "x-description-4": "Passwordless connection cannot be made as delivery method (sms/text) is not supported by the configured Tenant phone provider"
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation"
          },
          "403": {
            "description": "Insufficient scope, expected any of: create:connections",
            "x-description-1": "You reached the limit of entities of this type for this tenant."
          },
          "409": {
            "description": "A connection with the same name already exists",
            "x-description-1": "A connection with the same name is being deleted, try again later",
            "x-description-2": "There is already another connection with some realms from \"realms\" parameter",
            "x-description-3": "There is already a domain connection enabled for strategy"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_connections",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:connections"
            ]
          }
        ]
      }
    },
    "/connections/{id}": {
      "get": {
        "summary": "Get a connection",
        "description": "Retrieve details for a specified <a href=\"https://auth0.com/docs/authenticate/identity-providers\">connection</a> along with options that can be used for identity provider configuration.",
        "tags": [
          "connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the connection to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A comma separated list of fields to include or exclude (depending on include_fields) from the result, empty to retrieve all fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_fields",
            "in": "query",
            "description": "<code>true</code> if the fields specified are to be included in the result, <code>false</code> otherwise (defaults to <code>true</code>)",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The connection was retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connection"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation"
          },
          "403": {
            "description": "Insufficient scope, expected any of: read:connections"
          },
          "404": {
            "description": "The connection does not exist."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_connections_by_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:connections"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a connection",
        "description": "Removes a specific <a href=\"https://auth0.com/docs/authenticate/identity-providers\">connection</a> from your tenant. This action cannot be undone. Once removed, users can no longer use this connection to authenticate.\n",
        "tags": [
          "connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the connection to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The connection is being deleted."
          },
          "204": {
            "description": "The connection no longer exists."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation"
          },
          "403": {
            "description": "Insufficient scope, expected any of: delete:connections"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_connections_by_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:connections"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update a connection",
        "description": "Update details for a specific <a href=\"https://auth0.com/docs/authenticate/identity-providers\">connection</a>, including option properties for identity provider configuration.\n\n<b>Note</b>: If you use the <code>options</code> parameter, the entire <code>options</code> object is overriden. To avoid partial data or other issues, ensure all parameters are present when using this option.",
        "tags": [
          "connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the connection to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/connectionUpdate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/connectionUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The connection was updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connection"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request body. The message will vary depending on the cause.",
            "x-description-2": "This database contains users. You cannot change \"options.enabledDatabaseCustomization\" setting.",
            "x-description-3": "Your account is not allowed to set options.set_user_root_attributes",
            "x-description-4": "The Azure AD common endpoint cannot be enabled for this connection when SCIM is enabled.",
            "x-description-5": "options.set_user_root_attributes can be set only for enterprise connections, social connections or custom database connections (using external users store)"
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation"
          },
          "403": {
            "description": "Insufficient scope, expected any of: update:connections"
          },
          "404": {
            "description": "The connection does not exist"
          },
          "409": {
            "description": "The name/client_id tuple has already been used for another connection"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_connections_by_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:connections"
            ]
          }
        ]
      }
    },
    "/connections/{id}/clients": {
      "get": {
        "summary": "Get enabled clients for a connection",
        "description": "Retrieve all clients that have the specified <a href=\"https://auth0.com/docs/authenticate/identity-providers\">connection</a> enabled.\n\n<b>Note</b>: The first time you call this endpoint, omit the <code>from</code> parameter. If there are more results, a <code>next</code> value is included in the response. You can use this for subsequent API calls. When <code>next</code> is no longer included in the response, no further results are remaining.\n",
        "tags": [
          "connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the connection for which enabled clients are to be retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Optional Id from which to start selection.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "required": [
                    "clients"
                  ],
                  "properties": {
                    "clients": {
                      "type": "array",
                      "description": "Clients for which the connection is enabled",
                      "items": {
                        "type": "object",
                        "additionalProperties": true,
                        "required": [
                          "client_id"
                        ],
                        "properties": {
                          "client_id": {
                            "type": "string",
                            "description": "The client id"
                          }
                        }
                      }
                    },
                    "next": {
                      "type": "string",
                      "description": "Encoded next token"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation"
          },
          "403": {
            "description": "Insufficient scope, expected any of: read:connections"
          },
          "404": {
            "description": "The connection does not exist"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_connection_clients",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:connections"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update enabled clients for a connection",
        "tags": [
          "connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the connection to modify",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "client_id",
                    "status"
                  ],
                  "properties": {
                    "client_id": {
                      "type": "string",
                      "description": "The client_id of the client to be the subject to change status",
                      "format": "client-id"
                    },
                    "status": {
                      "type": "boolean",
                      "description": "Whether the connection is enabled or not for this client_id"
                    }
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "client_id",
                    "status"
                  ],
                  "properties": {
                    "client_id": {
                      "type": "string",
                      "description": "The client_id of the client to be the subject to change status",
                      "format": "client-id"
                    },
                    "status": {
                      "type": "boolean",
                      "description": "Whether the connection is enabled or not for this client_id"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request body. The message will vary depending on the cause.",
            "x-description-2": "Tenant Phone Provider not set. Connection can not be enable on a client.",
            "x-description-3": "Passwordless cannot be enabled for a client, as delivery method (sms/text) is not supported by the configured Tenant phone provider"
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation"
          },
          "403": {
            "description": "Insufficient scope, expected any of: update:connections"
          },
          "404": {
            "description": "The connection does not exist",
            "x-description-1": "The client does not exist"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_clients",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:connections"
            ]
          }
        ]
      }
    },
    "/connections/{id}/scim-configuration": {
      "get": {
        "summary": "Get a connection's SCIM configuration",
        "description": "Retrieves a scim configuration by its <code>connectionId</code>.\n",
        "tags": [
          "connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the connection to retrieve its SCIM configuration",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The connection's SCIM configuration was retrieved. See <strong>Response Schemas</strong> for schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "connection_id": {
                      "type": "string",
                      "description": "The connection's identifier"
                    },
                    "connection_name": {
                      "type": "string",
                      "description": "The connection's identifier"
                    },
                    "strategy": {
                      "type": "string",
                      "description": "The connection's strategy"
                    },
                    "tenant_name": {
                      "type": "string",
                      "description": "The tenant's name"
                    },
                    "user_id_attribute": {
                      "type": "string",
                      "description": "User ID attribute for generating unique user ids"
                    },
                    "mapping": {
                      "type": "array",
                      "description": "The mapping between auth0 and SCIM",
                      "items": {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "auth0": {
                            "type": "string",
                            "description": "The field location in the auth0 schema"
                          },
                          "scim": {
                            "type": "string",
                            "description": "The field location in the SCIM schema"
                          }
                        }
                      }
                    },
                    "created_at": {
                      "type": "string",
                      "description": "The Date Time Scim Configuration was created"
                    },
                    "updated_on": {
                      "type": "string",
                      "description": "The Date Time Scim Configuration was last updated"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Path validation error"
          },
          "404": {
            "description": "The connection does not exist",
            "x-description-1": "Not Found"
          }
        },
        "operationId": "get_scim-configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:scim_config"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a connection's SCIM configuration",
        "description": "Deletes a scim configuration by its <code>connectionId</code>.\n",
        "tags": [
          "connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the connection to delete its SCIM configuration",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The connection's SCIM configuration has been deleted."
          },
          "400": {
            "description": "Path validation error"
          },
          "404": {
            "description": "The connection does not exist"
          }
        },
        "operationId": "delete_scim-configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:scim_config"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Patch a connection's SCIM configuration",
        "description": "Update a scim configuration by its <code>connectionId</code>.\n",
        "tags": [
          "connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the connection to update its SCIM configuration",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "user_id_attribute",
                  "mapping"
                ],
                "properties": {
                  "user_id_attribute": {
                    "type": "string",
                    "description": "User ID attribute for generating unique user ids"
                  },
                  "mapping": {
                    "type": "array",
                    "description": "The mapping between auth0 and SCIM",
                    "items": {
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {
                        "auth0": {
                          "type": "string",
                          "description": "The field location in the auth0 schema"
                        },
                        "scim": {
                          "type": "string",
                          "description": "The field location in the SCIM schema"
                        }
                      }
                    }
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "user_id_attribute",
                  "mapping"
                ],
                "properties": {
                  "user_id_attribute": {
                    "type": "string",
                    "description": "User ID attribute for generating unique user ids"
                  },
                  "mapping": {
                    "type": "array",
                    "description": "The mapping between auth0 and SCIM",
                    "items": {
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {
                        "auth0": {
                          "type": "string",
                          "description": "The field location in the auth0 schema"
                        },
                        "scim": {
                          "type": "string",
                          "description": "The field location in the SCIM schema"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The connection's SCIM configuration was updated. See <strong>Response Schemas</strong> for schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "connection_id": {
                      "type": "string",
                      "description": "The connection's identifier"
                    },
                    "connection_name": {
                      "type": "string",
                      "description": "The connection's identifier"
                    },
                    "strategy": {
                      "type": "string",
                      "description": "The connection's strategy"
                    },
                    "tenant_name": {
                      "type": "string",
                      "description": "The tenant's name"
                    },
                    "user_id_attribute": {
                      "type": "string",
                      "description": "User ID attribute for generating unique user ids"
                    },
                    "mapping": {
                      "type": "array",
                      "description": "The mapping between auth0 and SCIM",
                      "items": {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "auth0": {
                            "type": "string",
                            "description": "The field location in the auth0 schema"
                          },
                          "scim": {
                            "type": "string",
                            "description": "The field location in the SCIM schema"
                          }
                        }
                      }
                    },
                    "created_at": {
                      "type": "string",
                      "description": "The Date Time Scim Configuration was created"
                    },
                    "updated_on": {
                      "type": "string",
                      "description": "The Date Time Scim Configuration was last updated"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid mapping provided",
            "x-description-1": "Invalid payload",
            "x-description-2": "Path validation error"
          },
          "404": {
            "description": "The connection does not exist"
          }
        },
        "operationId": "patch_scim-configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:scim_config"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create a SCIM configuration",
        "description": "Create a scim configuration for a connection.\n",
        "tags": [
          "connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the connection to create its SCIM configuration",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "nullable": true,
                "additionalProperties": false,
                "properties": {
                  "user_id_attribute": {
                    "type": "string",
                    "description": "User ID attribute for generating unique user ids"
                  },
                  "mapping": {
                    "type": "array",
                    "description": "The mapping between auth0 and SCIM",
                    "items": {
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {
                        "auth0": {
                          "type": "string",
                          "description": "The field location in the auth0 schema"
                        },
                        "scim": {
                          "type": "string",
                          "description": "The field location in the SCIM schema"
                        }
                      }
                    }
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "nullable": true,
                "additionalProperties": false,
                "properties": {
                  "user_id_attribute": {
                    "type": "string",
                    "description": "User ID attribute for generating unique user ids"
                  },
                  "mapping": {
                    "type": "array",
                    "description": "The mapping between auth0 and SCIM",
                    "items": {
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {
                        "auth0": {
                          "type": "string",
                          "description": "The field location in the auth0 schema"
                        },
                        "scim": {
                          "type": "string",
                          "description": "The field location in the SCIM schema"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The connection's SCIM configuration was created. See <strong>Response Schemas</strong> for schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "connection_id": {
                      "type": "string",
                      "description": "The connection's identifier"
                    },
                    "connection_name": {
                      "type": "string",
                      "description": "The connection's identifier"
                    },
                    "strategy": {
                      "type": "string",
                      "description": "The connection's strategy"
                    },
                    "tenant_name": {
                      "type": "string",
                      "description": "The tenant's name"
                    },
                    "user_id_attribute": {
                      "type": "string",
                      "description": "User ID attribute for generating unique user ids"
                    },
                    "mapping": {
                      "type": "array",
                      "description": "The mapping between auth0 and SCIM",
                      "items": {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "auth0": {
                            "type": "string",
                            "description": "The field location in the auth0 schema"
                          },
                          "scim": {
                            "type": "string",
                            "description": "The field location in the SCIM schema"
                          }
                        }
                      }
                    },
                    "created_at": {
                      "type": "string",
                      "description": "The Date Time Scim Configuration was created"
                    },
                    "updated_on": {
                      "type": "string",
                      "description": "The Date Time Scim Configuration was last updated"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Path validation error",
            "x-description-1": "SCIM configuration alreay exists for connection",
            "x-description-2": "Invalid mapping provided",
            "x-description-3": "Invalid payload",
            "x-description-4": "SCIM cannot be enabled for this connection when the Azure AD common endpoint is used."
          },
          "404": {
            "description": "The connection does not exist"
          }
        },
        "operationId": "post_scim-configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:scim_config"
            ]
          }
        ]
      }
    },
    "/connections/{id}/scim-configuration/default-mapping": {
      "get": {
        "summary": "Get a connection's default SCIM mapping",
        "description": "Retrieves a scim configuration's default mapping by its <code>connectionId</code>.\n",
        "tags": [
          "connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the connection to retrieve its default SCIM mapping",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The connection's default SCIM mapping was retrieved. See <strong>Response Schemas</strong> for schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "mapping": {
                      "type": "array",
                      "description": "The mapping between auth0 and SCIM",
                      "items": {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "auth0": {
                            "type": "string",
                            "description": "The field location in the auth0 schema"
                          },
                          "scim": {
                            "type": "string",
                            "description": "The field location in the SCIM schema"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Path validation error"
          },
          "404": {
            "description": "Not Found",
            "x-description-1": "The connection does not exist"
          }
        },
        "operationId": "get_default-mapping",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:scim_config"
            ]
          }
        ]
      }
    },
    "/connections/{id}/scim-configuration/tokens": {
      "get": {
        "summary": "Get a connection's SCIM tokens",
        "description": "Retrieves all scim tokens by its connection <code>id</code>.\n",
        "tags": [
          "connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the connection to retrieve its SCIM configuration",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The connection's SCIM tokens were retrieved. See <strong>Response Schemas</strong> for schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "The list of scim tokens for scim clients",
                  "items": {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "token_id": {
                        "type": "string",
                        "description": "The token's identifier"
                      },
                      "scopes": {
                        "type": "array",
                        "description": "The scopes of the scim token",
                        "items": {
                          "type": "string",
                          "description": "The token's scope"
                        }
                      },
                      "created_at": {
                        "type": "string",
                        "description": "The token's created at timestamp"
                      },
                      "valid_until": {
                        "type": "string",
                        "description": "The token's valid until timestamp"
                      },
                      "last_used_at": {
                        "type": "string",
                        "description": "The token's last used at timestamp"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Path validation error"
          },
          "404": {
            "description": "The connection does not exist"
          }
        },
        "operationId": "get_scim_tokens",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:scim_token"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create a SCIM Token",
        "description": "Create a scim token for a scim client.\n",
        "tags": [
          "connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the connection to create its SCIM token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "SCIM Token",
                "additionalProperties": false,
                "properties": {
                  "scopes": {
                    "type": "array",
                    "description": "The scopes of the scim token",
                    "items": {
                      "type": "string",
                      "description": "The token's scope"
                    }
                  },
                  "token_lifetime": {
                    "type": "integer",
                    "nullable": true,
                    "description": "Lifetime of the token in seconds. Must be greater than 900"
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "description": "SCIM Token",
                "additionalProperties": false,
                "properties": {
                  "scopes": {
                    "type": "array",
                    "description": "The scopes of the scim token",
                    "items": {
                      "type": "string",
                      "description": "The token's scope"
                    }
                  },
                  "token_lifetime": {
                    "type": "integer",
                    "nullable": true,
                    "description": "Lifetime of the token in seconds. Must be greater than 900"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The connection's SCIM token was created. See <strong>Response Schemas</strong> for schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "token_id": {
                      "type": "string",
                      "description": "The token's identifier"
                    },
                    "token": {
                      "type": "string",
                      "description": "The scim client's token"
                    },
                    "scopes": {
                      "type": "array",
                      "description": "The scopes of the scim token",
                      "items": {
                        "type": "string",
                        "description": "The token's scope"
                      }
                    },
                    "created_at": {
                      "type": "string",
                      "description": "The token's created at timestamp"
                    },
                    "valid_until": {
                      "type": "string",
                      "description": "The token's valid until at timestamp"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Path validation error"
          },
          "404": {
            "description": "The connection does not exist"
          },
          "409": {
            "description": "Maximum of 2 tokens already issued for this connection"
          }
        },
        "operationId": "post_scim_token",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:scim_token"
            ]
          }
        ]
      }
    },
    "/connections/{id}/scim-configuration/tokens/{tokenId}": {
      "delete": {
        "summary": "Delete a connection's SCIM token",
        "description": "Deletes a scim token by its connection <code>id</code> and <code>tokenId</code>.\n",
        "tags": [
          "connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The connection id that owns the SCIM token to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokenId",
            "in": "path",
            "description": "The id of the scim token to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The SCIM token has been deleted."
          },
          "400": {
            "description": "Path validation error"
          },
          "404": {
            "description": "The connection does not exist"
          }
        },
        "operationId": "delete_tokens_by_tokenId",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:scim_token"
            ]
          }
        ]
      }
    },
    "/connections/{id}/status": {
      "get": {
        "summary": "Check connection status",
        "description": "Retrieves the status of an ad/ldap connection referenced by its <code>ID</code>. <code>200 OK</code> http status code response is returned  when the connection is online, otherwise a <code>404</code> status code is returned along with an error message",
        "tags": [
          "connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the connection to check",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Connection status successfully retrieved."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:connections."
          },
          "404": {
            "description": "Connection not found.",
            "x-description-1": "not connected to any node"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_status",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:connections"
            ]
          }
        ]
      }
    },
    "/connections/{id}/users": {
      "delete": {
        "summary": "Delete a connection user",
        "description": "Deletes a specified connection user by its email (you cannot delete all users from specific connection). Currently, only Database Connections are supported.\n",
        "tags": [
          "connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the connection (currently only database connections are supported)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "The email of the user to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The user no longer exists."
          },
          "400": {
            "description": "The connection does not exist",
            "x-description-1": "Connection must be a database connection",
            "x-description-2": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation"
          },
          "403": {
            "description": "Insufficient scope, expected any of: delete:users"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_users_by_email",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:users"
            ]
          }
        ]
      }
    },
    "/custom-domains": {
      "get": {
        "summary": "Get custom domains configurations",
        "description": "Retrieve details on <a href=\"https://auth0.com/docs/custom-domains\">custom domains</a>.",
        "tags": [
          "custom-domains"
        ],
        "responses": {
          "200": {
            "description": "Custom domains successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListCustomDomainsResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:custom_domains.",
            "x-description-1": "Some fields cannot be read with the permissions granted by the bearer token scopes. The message will vary depending on the fields and the scopes.",
            "x-description-2": "The account is not allowed to perform this operation.",
            "x-description-3": "There must be a verified credit card on file to perform this operation"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_custom-domains",
        "x-operation-name": "list",
        "x-operation-group": "customDomains",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:custom_domains"
            ]
          }
        ]
      },
      "post": {
        "summary": "Configure a new custom domain",
        "description": "Create a new custom domain.\n\nNote: The custom domain will need to be verified before it will accept\nrequests.\n\nOptional attributes that can be updated:\n\n- custom_client_ip_header\n- tls_policy\n\n\nTLS Policies:\n\n- recommended - for modern usage this includes TLS 1.2 only\n- compatible - compatible with older browsers this policy includes TLS 1.0, 1.1, 1.2\n\n\nSome considerations:\n\n- The TLS ciphers and protocols available in each TLS policy follow industry recommendations, and may be updated occasionally.\n- Do not use the <code>compatible</code> TLS policy unless you have clients that require TLS 1.0.\n",
        "tags": [
          "custom-domains"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCustomDomainRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateCustomDomainRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Custom domain successfully created (verification is pending).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCustomDomainResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause.",
            "x-description-1": "The 'tls_policy' cannot be set on self_managed domains",
            "x-description-2": "The 'custom_client_ip_header' cannot be set on auth0_managed domains"
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: create:custom_domains.",
            "x-description-1": "The account is not allowed to perform this operation.",
            "x-description-2": "There must be a verified credit card on file to perform this operation"
          },
          "409": {
            "description": "Custom domain already exists.",
            "x-description-1": "You reached the maximum number of custom domains for your account."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_custom-domains",
        "x-operation-name": "create",
        "x-operation-group": "customDomains",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:custom_domains"
            ]
          }
        ]
      }
    },
    "/custom-domains/{id}": {
      "get": {
        "summary": "Get custom domain configuration",
        "description": "Retrieve a custom domain configuration and status.",
        "tags": [
          "custom-domains"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the custom domain to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Custom domain successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCustomDomainResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:custom_domains.",
            "x-description-1": "Some fields cannot be read with the permissions granted by the bearer token scopes. The message will vary depending on the fields and the scopes.",
            "x-description-2": "The account is not allowed to perform this operation.",
            "x-description-3": "There must be a verified credit card on file to perform this operation"
          },
          "404": {
            "description": "Custom domain not found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_custom-domains_by_id",
        "x-operation-name": "get",
        "x-operation-group": "customDomains",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:custom_domains"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete custom domain configuration",
        "description": "Delete a custom domain and stop serving requests for it.",
        "tags": [
          "custom-domains"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the custom domain to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Custom domain successfully deleted."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: delete:custom_domains.",
            "x-description-1": "The account is not allowed to perform this operation.",
            "x-description-2": "There must be a verified credit card on file to perform this operation."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_custom-domains_by_id",
        "x-operation-name": "delete",
        "x-operation-group": "customDomains",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:custom_domains"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update custom domain configuration",
        "description": "Update a custom domain.\n\nThese are the attributes that can be updated:\n\n- custom_client_ip_header\n- tls_policy\n\n<h5>Updating CUSTOM_CLIENT_IP_HEADER for a custom domain</h5>To update the <code>custom_client_ip_header</code> for a domain, the body to\nsend should be:\n<pre><code>{ \"custom_client_ip_header\": \"cf-connecting-ip\" }</code></pre>\n\n<h5>Updating TLS_POLICY for a custom domain</h5>To update the <code>tls_policy</code> for a domain, the body to send should be:\n<pre><code>{ \"tls_policy\": \"recommended\" }</code></pre>\n\n\nTLS Policies:\n\n- recommended - for modern usage this includes TLS 1.2 only\n\n\nSome considerations:\n\n- The TLS ciphers and protocols available in each TLS policy follow industry recommendations, and may be updated occasionally.\n- The <code>compatible</code> TLS policy is no longer supported.\n",
        "tags": [
          "custom-domains"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the custom domain to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomDomainRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomDomainRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Custom domain updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateCustomDomainResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause.",
            "x-description-1": "The 'tls_policy' cannot be set on self_managed domains",
            "x-description-2": "The 'custom_client_ip_header' cannot be set on auth0_managed domains"
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected: update:custom_domains.",
            "x-description-1": "Your account is not allowed to perform this operation.",
            "x-description-2": "There must be a verified credit card on file to perform this operation"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_custom-domains_by_id",
        "x-operation-name": "update",
        "x-operation-group": "customDomains",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:custom_domains"
            ]
          }
        ]
      }
    },
    "/custom-domains/{id}/test": {
      "post": {
        "summary": "Test a custom domain",
        "description": "Run the test process on a custom domain.",
        "tags": [
          "custom-domains"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the custom domain to test.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Custom domain test successfully completed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCustomDomainResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:custom_domains.",
            "x-description-1": "The account is not allowed to perform this operation.",
            "x-description-2": "There must be a verified credit card on file to perform this operation"
          },
          "404": {
            "description": "Custom domain not found."
          },
          "409": {
            "description": "The custom domain is not ready."
          }
        },
        "operationId": "post_test_domain",
        "x-operation-name": "test",
        "x-operation-group": "customDomains",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:custom_domains"
            ]
          }
        ]
      }
    },
    "/custom-domains/{id}/verify": {
      "post": {
        "summary": "Verify a custom domain",
        "description": "Run the verification process on a custom domain.\n\nNote: Check the <code>status</code> field to see its verification status. Once verification is complete, it may take up to 10 minutes before the custom domain can start accepting requests.\n\nFor <code>self_managed_certs</code>, when the custom domain is verified for the first time, the response will also include the <code>cname_api_key</code> which you will need to configure your proxy. This key must be kept secret, and is used to validate the proxy requests.\n\n<a href=\"https://auth0.com/docs/custom-domains#step-2-verify-ownership\">Learn more</a> about verifying custom domains that use Auth0 Managed certificates.\n<a href=\"https://auth0.com/docs/custom-domains/self-managed-certificates#step-2-verify-ownership\">Learn more</a> about verifying custom domains that use Self Managed certificates.\n",
        "tags": [
          "custom-domains"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the custom domain to verify.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Custom domain successfully verified.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyCustomDomainResponseContent"
                }
              }
            },
            "x-description-1": "Custom domain failed verification."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Custom domain already verified."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: create:custom_domains.",
            "x-description-1": "The account is not allowed to perform this operation.",
            "x-description-2": "There must be a verified credit card on file to perform this operation"
          },
          "404": {
            "description": "Custom domain not found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_verify",
        "x-operation-name": "verify",
        "x-operation-group": "customDomains",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:custom_domains"
            ]
          }
        ]
      }
    },
    "/device-credentials": {
      "get": {
        "summary": "Retrieve device credentials",
        "description": "Retrieve device credential information (<code>public_key</code>, <code>refresh_token</code>, or <code>rotating_refresh_token</code>) associated with a specific user.\n",
        "tags": [
          "device-credentials"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page index of the results to return. First page is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results per page.  There is a maximum of 1000 results allowed from this endpoint.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated list of fields to include or exclude (based on value provided for include_fields) in the result. Leave empty to retrieve all fields.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_fields",
            "in": "query",
            "description": "Whether specified fields are to be included (true) or excluded (false).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "user_id of the devices to retrieve.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "query",
            "description": "client_id of the devices to retrieve.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of credentials to retrieve. Must be `public_key`, `refresh_token` or `rotating_refresh_token`. The property will default to `refresh_token` when paging is requested",
            "schema": {
              "type": "string",
              "enum": [
                "public_key",
                "refresh_token",
                "rotating_refresh_token"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Device credentials successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/deviceCredential"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "start": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "total": {
                          "type": "number"
                        },
                        "device_credentials": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/deviceCredential"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation.",
            "x-description-3": "Username is malformed, try with '{connection}\\{email_or_username}'",
            "x-description-4": "Bad username or password."
          },
          "403": {
            "description": "User to be acted on does not match subject in bearer token.",
            "x-description-1": "Insufficient scope, expected any of: read:device_credentials",
            "x-description-2": "Cannot retrieve device credentials for that user.",
            "x-description-3": "Cannot retrieve device credentials for that client.",
            "x-description-4": "Must provide client_id parameter."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_device-credentials",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:device_credentials"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create a device public key credential",
        "description": "Create a device credential public key to manage refresh token rotation for a given <code>user_id</code>. Device Credentials APIs are designed for ad-hoc administrative use only and paging is by default enabled for GET requests.\n\nWhen refresh token rotation is enabled, the endpoint becomes consistent. For more information, read <a href=\"https://auth0.com/docs/get-started/tenant-settings/signing-keys\"> Signing Keys</a>.\n",
        "tags": [
          "device-credentials"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/deviceCredentialCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/deviceCredentialCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Device credentials successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The credential's identifier",
                      "default": "dcr_0000000000000001"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Username is malformed, try with \"{connection}\\{email_or_username}\".",
            "x-description-3": "Bad username or password."
          },
          "403": {
            "description": "Cannot create device credentials for that user.",
            "x-description-1": "Cannot create device credentials for that client.",
            "x-description-2": "Insufficient scope; expected any of: create:current_user_device_credentials."
          },
          "409": {
            "description": "A public key already exists for the device."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_device-credentials",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:current_user_device_credentials"
            ]
          }
        ]
      }
    },
    "/device-credentials/{id}": {
      "delete": {
        "summary": "Delete a device credential",
        "description": "Permanently delete a device credential (such as a refresh token or public key) with the given ID.",
        "tags": [
          "device-credentials"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the credential to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Device credentials successfully deleted."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation.",
            "x-description-3": "Username is malformed, try with \"{connection}\\{email_or_username}\".",
            "x-description-4": "Bad username or password."
          },
          "403": {
            "description": "Insufficient scope; expected any of: delete:device_credentials, update:current_user, delete:current_user_device_credentials."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_device-credentials_by_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:device_credentials",
              "delete:current_user_device_credentials"
            ]
          }
        ]
      }
    },
    "/email-templates": {
      "post": {
        "summary": "Create an email template",
        "description": "Create an email template.",
        "tags": [
          "email-templates"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmailTemplateRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmailTemplateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Template successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateEmailTemplateResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected: create:email_templates."
          },
          "409": {
            "description": "Template (templateName) already exists."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_email-templates",
        "x-operation-name": "create",
        "x-operation-group": "emailTemplates",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:email_templates"
            ]
          }
        ]
      }
    },
    "/email-templates/{templateName}": {
      "get": {
        "summary": "Get an email template",
        "description": "Retrieve an email template by pre-defined name. These names are `verify_email`, `verify_email_by_code`, `reset_email`, `reset_email_by_code`, `welcome_email`, `blocked_account`, `stolen_credentials`, `enrollment_email`, `mfa_oob_code`, and `user_invitation`. The names `change_password`, and `password_reset` are also supported for legacy scenarios.",
        "tags": [
          "email-templates"
        ],
        "parameters": [
          {
            "name": "templateName",
            "in": "path",
            "description": "Template name. Can be `verify_email`, `verify_email_by_code`, `reset_email`, `reset_email_by_code`, `welcome_email`, `blocked_account`, `stolen_credentials`, `enrollment_email`, `mfa_oob_code`, `user_invitation`, `change_password` (legacy), or `password_reset` (legacy).",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EmailTemplateNameEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Template successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEmailTemplateResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected: read:email_templates."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_email-templates_by_templateName",
        "x-operation-name": "get",
        "x-operation-group": "emailTemplates",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:email_templates"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Patch an email template",
        "description": "Modify an email template.",
        "tags": [
          "email-templates"
        ],
        "parameters": [
          {
            "name": "templateName",
            "in": "path",
            "description": "Template name. Can be `verify_email`, `verify_email_by_code`, `reset_email`, `reset_email_by_code`, `welcome_email`, `blocked_account`, `stolen_credentials`, `enrollment_email`, `mfa_oob_code`, `user_invitation`, `change_password` (legacy), or `password_reset` (legacy).",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EmailTemplateNameEnum"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEmailTemplateRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEmailTemplateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Template successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateEmailTemplateResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected: update:email_templates."
          },
          "404": {
            "description": "Template not found and cannot be updated."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_email-templates_by_templateName",
        "x-operation-name": "update",
        "x-operation-group": "emailTemplates",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:email_templates"
            ]
          }
        ]
      },
      "put": {
        "summary": "Update an email template",
        "description": "Update an email template.",
        "tags": [
          "email-templates"
        ],
        "parameters": [
          {
            "name": "templateName",
            "in": "path",
            "description": "Template name. Can be `verify_email`, `verify_email_by_code`, `reset_email`, `reset_email_by_code`, `welcome_email`, `blocked_account`, `stolen_credentials`, `enrollment_email`, `mfa_oob_code`, `user_invitation`, `change_password` (legacy), or `password_reset` (legacy).",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EmailTemplateNameEnum"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetEmailTemplateRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SetEmailTemplateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Template successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetEmailTemplateResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected: update:email_templates."
          },
          "404": {
            "description": "Template not found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "put_email-templates_by_templateName",
        "x-operation-name": "set",
        "x-operation-group": "emailTemplates",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:email_templates"
            ]
          }
        ]
      }
    },
    "/emails/provider": {
      "get": {
        "summary": "Get email provider",
        "description": "Retrieve details of the <a href=\"https://auth0.com/docs/customize/email/smtp-email-providers\">email provider configuration</a> in your tenant. A list of fields to include or exclude may also be specified.\n",
        "tags": [
          "emails"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated list of fields to include or exclude (dependent upon include_fields) from the result. Leave empty to retrieve `name` and `enabled`. Additional fields available include `credentials`, `default_from_address`, and `settings`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_fields",
            "in": "query",
            "description": "Whether specified fields are to be included (true) or excluded (false).",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email provider successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEmailProviderResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:email_provider."
          },
          "404": {
            "description": "Email provider has not been configured."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_provider",
        "x-operation-name": "getProvider",
        "x-operation-group": "emails",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:email_provider"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete email provider",
        "description": "Delete the email provider.\n",
        "tags": [
          "emails"
        ],
        "responses": {
          "204": {
            "description": "The email provider has been deleted."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation"
          },
          "403": {
            "description": "Insufficient scope, expected any of: delete:email_provider"
          },
          "404": {
            "description": "Email provider does not exist."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_provider",
        "x-operation-name": "deleteProvider",
        "x-operation-group": "emails",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:email_provider"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update email provider",
        "description": "Update an <a href=\"https://auth0.com/docs/email/providers\">email provider</a>. The <code>credentials</code> object\nrequires different properties depending on the email provider (which is specified using the <code>name</code> property):\n<ul>\n  <li><code>mandrill</code> requires <code>api_key</code></li>\n  <li><code>sendgrid</code> requires <code>api_key</code></li>\n  <li>\n    <code>sparkpost</code> requires <code>api_key</code>. Optionally, set <code>region</code> to <code>eu</code> to use\n    the SparkPost service hosted in Western Europe; set to <code>null</code> to use the SparkPost service hosted in\n    North America. <code>eu</code> or <code>null</code> are the only valid values for <code>region</code>.\n  </li>\n  <li>\n    <code>mailgun</code> requires <code>api_key</code> and <code>domain</code>. Optionally, set <code>region</code> to\n    <code>eu</code> to use the Mailgun service hosted in Europe; set to <code>null</code> otherwise. <code>eu</code> or\n    <code>null</code> are the only valid values for <code>region</code>.\n  </li>\n  <li><code>ses</code> requires <code>accessKeyId</code>, <code>secretAccessKey</code>, and <code>region</code></li>\n  <li>\n    <code>smtp</code> requires <code>smtp_host</code>, <code>smtp_port</code>, <code>smtp_user</code>, and\n    <code>smtp_pass</code>\n  </li>\n</ul>\nDepending on the type of provider it is possible to specify <code>settings</code> object with different configuration\noptions, which will be used when sending an email:\n<ul>\n  <li>\n    <code>smtp</code> provider, <code>settings</code> may contain <code>headers</code> object.\n    <ul>\n      <li>\n        When using AWS SES SMTP host, you may provide a name of configuration set in\n        <code>X-SES-Configuration-Set</code> header. Value must be a string.\n      </li>\n      <li>\n        When using Sparkpost host, you may provide value for\n        <code>X-MSYS_API</code> header. Value must be an object.\n      </li>\n    </ul>\n    for <code>ses</code> provider, <code>settings</code> may contain <code>message</code> object, where you can provide\n    a name of configuration set in <code>configuration_set_name</code> property. Value must be a string.\n  </li>\n</ul>\n",
        "tags": [
          "emails"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEmailProviderRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEmailProviderRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email provider successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateEmailProviderResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:email_provider."
          },
          "404": {
            "description": "Email provider has not been configured."
          },
          "409": {
            "description": "No deployed action was found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_provider",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:email_provider"
            ]
          }
        ]
      },
      "post": {
        "summary": "Configure email provider",
        "description": "Create an <a href=\"https://auth0.com/docs/email/providers\">email provider</a>. The <code>credentials</code> object\nrequires different properties depending on the email provider (which is specified using the <code>name</code> property):\n<ul>\n  <li><code>mandrill</code> requires <code>api_key</code></li>\n  <li><code>sendgrid</code> requires <code>api_key</code></li>\n  <li>\n    <code>sparkpost</code> requires <code>api_key</code>. Optionally, set <code>region</code> to <code>eu</code> to use\n    the SparkPost service hosted in Western Europe; set to <code>null</code> to use the SparkPost service hosted in\n    North America. <code>eu</code> or <code>null</code> are the only valid values for <code>region</code>.\n  </li>\n  <li>\n    <code>mailgun</code> requires <code>api_key</code> and <code>domain</code>. Optionally, set <code>region</code> to\n    <code>eu</code> to use the Mailgun service hosted in Europe; set to <code>null</code> otherwise. <code>eu</code> or\n    <code>null</code> are the only valid values for <code>region</code>.\n  </li>\n  <li><code>ses</code> requires <code>accessKeyId</code>, <code>secretAccessKey</code>, and <code>region</code></li>\n  <li>\n    <code>smtp</code> requires <code>smtp_host</code>, <code>smtp_port</code>, <code>smtp_user</code>, and\n    <code>smtp_pass</code>\n  </li>\n</ul>\nDepending on the type of provider it is possible to specify <code>settings</code> object with different configuration\noptions, which will be used when sending an email:\n<ul>\n  <li>\n    <code>smtp</code> provider, <code>settings</code> may contain <code>headers</code> object.\n    <ul>\n      <li>\n        When using AWS SES SMTP host, you may provide a name of configuration set in\n        <code>X-SES-Configuration-Set</code> header. Value must be a string.\n      </li>\n      <li>\n        When using Sparkpost host, you may provide value for\n        <code>X-MSYS_API</code> header. Value must be an object.\n      </li>\n    </ul>\n  </li>\n  <li>\n    for <code>ses</code> provider, <code>settings</code> may contain <code>message</code> object, where you can provide\n    a name of configuration set in <code>configuration_set_name</code> property. Value must be a string.\n  </li>\n</ul>\n",
        "tags": [
          "emails"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmailProviderRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmailProviderRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Email provider successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateEmailProviderResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: create:email_provider."
          },
          "409": {
            "description": "Email provider is already configured.",
            "x-description-1": "No deployed action was found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_provider",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:email_provider"
            ]
          }
        ]
      }
    },
    "/event-streams": {
      "get": {
        "summary": "Get event streams",
        "tags": [
          "event-streams"
        ],
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Optional Id from which to start selection.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event streams successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventStreamResponseContent"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid query string paging options. The message will vary depending on the cause"
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:event_streams."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_event-streams",
        "x-operation-name": "list",
        "x-operation-group": "eventStreams",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:event_streams"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create an event stream",
        "tags": [
          "event-streams"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CreateEventStreamWebHookRequestBody"
                  },
                  {
                    "$ref": "#/components/schemas/CreateEventStreamEventBridgeRequestBody"
                  }
                ]
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CreateEventStreamWebHookRequestBody"
                  },
                  {
                    "$ref": "#/components/schemas/CreateEventStreamEventBridgeRequestBody"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Event Stream stream created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateEventStreamResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: create:event_streams."
          },
          "409": {
            "description": "You have reached the maximum number of event streams for your account OR Event stream name already in use."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_event-streams",
        "x-operation-name": "create",
        "x-operation-group": "eventStreams",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:event_streams"
            ]
          }
        ]
      }
    },
    "/event-streams/{id}": {
      "get": {
        "summary": "Get an event stream by ID",
        "tags": [
          "event-streams"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the event stream.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event stream successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEventStreamResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:event_streams."
          },
          "404": {
            "description": "The event stream does not exist."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_event-streams_by_id",
        "x-operation-name": "get",
        "x-operation-group": "eventStreams",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:event_streams"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete an event stream",
        "tags": [
          "event-streams"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the event stream.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The event stream was deleted."
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: delete:event_streams."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_event-streams_by_id",
        "x-operation-name": "delete",
        "x-operation-group": "eventStreams",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:event_streams"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update an event stream",
        "tags": [
          "event-streams"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the event stream.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEventStreamRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEventStreamRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Event stream successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateEventStreamResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:event_streams."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_event-streams_by_id",
        "x-operation-name": "update",
        "x-operation-group": "eventStreams",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:event_streams"
            ]
          }
        ]
      }
    },
    "/event-streams/{id}/deliveries": {
      "get": {
        "summary": "Get this event stream's delivery history",
        "tags": [
          "event-streams"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the event stream.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Comma-separated list of statuses by which to filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "event_types",
            "in": "query",
            "description": "Comma-separated list of event types by which to filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date_from",
            "in": "query",
            "description": "An RFC-3339 date-time for redelivery start, inclusive. Does not allow sub-second precision.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "description": "An RFC-3339 date-time for redelivery end, exclusive. Does not allow sub-second precision.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Optional Id from which to start selection.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event stream deliveries successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventStreamDelivery"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid query string paging options. The message will vary depending on the cause"
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:event_streams, read:event_deliveries."
          },
          "404": {
            "description": "The event stream does not exist."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_event_deliveries",
        "x-operation-name": "list",
        "x-operation-group": [
          "eventStreams",
          "deliveries"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:event_streams",
              "read:event_deliveries"
            ]
          }
        ]
      }
    },
    "/event-streams/{id}/deliveries/{event_id}": {
      "get": {
        "summary": "Get a specific event's delivery history",
        "tags": [
          "event-streams"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the event stream.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "event_id",
            "in": "path",
            "description": "Unique identifier for the event",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delivery history for event successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEventStreamDeliveryHistoryResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:event_deliveries."
          },
          "404": {
            "description": "The event stream does not exist.",
            "x-description-1": "The event does not exist."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_deliveries_by_event_id",
        "x-operation-name": "getHistory",
        "x-operation-group": [
          "eventStreams",
          "deliveries"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:event_deliveries"
            ]
          }
        ]
      }
    },
    "/event-streams/{id}/redeliver": {
      "post": {
        "summary": "Redeliver failed events",
        "tags": [
          "event-streams"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the event stream.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEventStreamRedeliveryRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateEventStreamRedeliveryRequestBody"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Redelivery request accepted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateEventStreamRedeliveryResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:event_deliveries."
          },
          "404": {
            "description": "The event stream does not exist."
          },
          "409": {
            "description": "One or more events is not in a state that allows redelivery."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_redeliver",
        "x-operation-name": "create",
        "x-operation-group": [
          "eventStreams",
          "redeliveries"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:event_deliveries"
            ]
          }
        ]
      }
    },
    "/event-streams/{id}/redeliver/{event_id}": {
      "post": {
        "summary": "Redeliver a single failed event by ID",
        "tags": [
          "event-streams"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the event stream.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "event_id",
            "in": "path",
            "description": "Unique identifier for the event",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Redelivery request accepted."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:event_deliveries."
          },
          "404": {
            "description": "The event stream does not exist.",
            "x-description-1": "The event does not exist."
          },
          "409": {
            "description": "The event is not in a state that allows redelivery."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_redeliver_by_event_id",
        "x-operation-name": "createById",
        "x-operation-group": [
          "eventStreams",
          "redeliveries"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:event_deliveries"
            ]
          }
        ]
      }
    },
    "/event-streams/{id}/test": {
      "post": {
        "summary": "Send a test event to an event stream",
        "tags": [
          "event-streams"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the event stream.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestEventRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TestEventRequestBody"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Test event successfully submitted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestEventResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:event_streams."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_test_event",
        "x-operation-name": "createTestEvent",
        "x-operation-group": "eventStreams",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:event_streams"
            ]
          }
        ]
      }
    },
    "/flows": {
      "get": {
        "summary": "Get flows",
        "tags": [
          "flows"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page index of the results to return. First page is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "hydrate",
            "in": "query",
            "description": "hydration param",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "maxLength": 50,
                "enum": [
                  "form_count"
                ]
              }
            }
          },
          {
            "name": "synchronous",
            "in": "query",
            "description": "flag to filter by sync/async flows",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Flows successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "id",
                          "name",
                          "created_at",
                          "updated_at"
                        ],
                        "properties": {
                          "id": {
                            "type": "string",
                            "maxLength": 30,
                            "format": "flow-id"
                          },
                          "name": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 150
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "updated_at": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "executed_at": {
                            "type": "string",
                            "format": "date"
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "start": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "total": {
                          "type": "number"
                        },
                        "flows": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "id",
                              "name",
                              "created_at",
                              "updated_at"
                            ],
                            "properties": {
                              "id": {
                                "type": "string",
                                "maxLength": 30,
                                "format": "flow-id"
                              },
                              "name": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 150
                              },
                              "created_at": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "updated_at": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "executed_at": {
                                "type": "string",
                                "format": "date"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause.",
            "x-description-1": "Invalid query string paging options. The message will vary depending on the cause"
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:flows."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_flows",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:flows"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create a flow",
        "tags": [
          "flows"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 150
                  },
                  "actions": {
                    "type": "array",
                    "items": {}
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 150
                  },
                  "actions": {
                    "type": "array",
                    "items": {}
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Flow successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "name",
                    "created_at",
                    "updated_at"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "maxLength": 30,
                      "format": "flow-id"
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 150
                    },
                    "actions": {
                      "type": "array",
                      "items": {}
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "executed_at": {
                      "type": "string",
                      "format": "date"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: create:flows."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_flows",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:flows"
            ]
          }
        ]
      }
    },
    "/flows/vault/connections": {
      "get": {
        "summary": "Get Flows Vault connection list",
        "tags": [
          "flows"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page index of the results to return. First page is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Vault connections successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "id",
                          "app_id",
                          "name",
                          "ready",
                          "created_at",
                          "updated_at",
                          "fingerprint"
                        ],
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Flows Vault Connection identifier.",
                            "maxLength": 30,
                            "format": "flows-vault-connections-id"
                          },
                          "app_id": {
                            "type": "string",
                            "description": "Flows Vault Connection app identifier.",
                            "minLength": 1,
                            "maxLength": 55
                          },
                          "name": {
                            "type": "string",
                            "description": "Flows Vault Connection name.",
                            "minLength": 1,
                            "maxLength": 150
                          },
                          "account_name": {
                            "type": "string",
                            "description": "Flows Vault Connection custom account name.",
                            "minLength": 1,
                            "maxLength": 150
                          },
                          "ready": {
                            "type": "boolean",
                            "description": "Whether the Flows Vault Connection is configured."
                          },
                          "created_at": {
                            "type": "string",
                            "description": "The ISO 8601 formatted date when this Flows Vault Connection was created.",
                            "format": "date-time"
                          },
                          "updated_at": {
                            "type": "string",
                            "description": "The ISO 8601 formatted date when this Flows Vault Connection was updated.",
                            "format": "date-time"
                          },
                          "refreshed_at": {
                            "type": "string",
                            "description": "The ISO 8601 formatted date when this Flows Vault Connection was refreshed.",
                            "format": "date-time"
                          },
                          "fingerprint": {
                            "type": "string",
                            "minLength": 1
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "start": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "total": {
                          "type": "number"
                        },
                        "connections": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "id",
                              "app_id",
                              "name",
                              "ready",
                              "created_at",
                              "updated_at",
                              "fingerprint"
                            ],
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "Flows Vault Connection identifier.",
                                "maxLength": 30,
                                "format": "flows-vault-connections-id"
                              },
                              "app_id": {
                                "type": "string",
                                "description": "Flows Vault Connection app identifier.",
                                "minLength": 1,
                                "maxLength": 55
                              },
                              "name": {
                                "type": "string",
                                "description": "Flows Vault Connection name.",
                                "minLength": 1,
                                "maxLength": 150
                              },
                              "account_name": {
                                "type": "string",
                                "description": "Flows Vault Connection custom account name.",
                                "minLength": 1,
                                "maxLength": 150
                              },
                              "ready": {
                                "type": "boolean",
                                "description": "Whether the Flows Vault Connection is configured."
                              },
                              "created_at": {
                                "type": "string",
                                "description": "The ISO 8601 formatted date when this Flows Vault Connection was created.",
                                "format": "date-time"
                              },
                              "updated_at": {
                                "type": "string",
                                "description": "The ISO 8601 formatted date when this Flows Vault Connection was updated.",
                                "format": "date-time"
                              },
                              "refreshed_at": {
                                "type": "string",
                                "description": "The ISO 8601 formatted date when this Flows Vault Connection was refreshed.",
                                "format": "date-time"
                              },
                              "fingerprint": {
                                "type": "string",
                                "minLength": 1
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause.",
            "x-description-1": "Invalid query string paging options. The message will vary depending on the cause"
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:flows_vault_connections."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_flows_vault_connections",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:flows_vault_connections"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create a Flows Vault connection",
        "tags": [
          "flows"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "anyOf": [
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "ACTIVECAMPAIGN"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "api_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "api_key": {
                            "type": "string"
                          },
                          "base_url": {
                            "type": "string",
                            "format": "forms-url-https"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "AIRTABLE"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "api_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "api_key": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "AUTH0"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "client_id",
                          "client_secret",
                          "domain"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_APP"
                            ]
                          },
                          "client_id": {
                            "type": "string"
                          },
                          "client_secret": {
                            "type": "string"
                          },
                          "domain": {
                            "type": "string",
                            "format": "hostname-rfc2181"
                          },
                          "audience": {
                            "type": "string",
                            "minLength": 1,
                            "format": "forms-url-https"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "BIGQUERY"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_JWT"
                            ]
                          },
                          "project_id": {
                            "type": "string"
                          },
                          "private_key": {
                            "type": "string"
                          },
                          "client_email": {
                            "type": "string",
                            "format": "email"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "CLEARBIT"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "secret_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "secret_key": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "DOCUSIGN"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_CODE"
                            ]
                          },
                          "code": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "GOOGLE_SHEETS"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_CODE"
                            ]
                          },
                          "code": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "HTTP"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "token"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "BEARER"
                            ]
                          },
                          "token": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "HUBSPOT"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "anyOf": [
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "type",
                              "api_key"
                            ],
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "API_KEY"
                                ]
                              },
                              "api_key": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "additionalProperties": true,
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "OAUTH_CODE"
                                ]
                              },
                              "code": {
                                "type": "string"
                              }
                            }
                          }
                        ]
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "JWT"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": true,
                        "required": [
                          "type",
                          "algorithm"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "JWT"
                            ]
                          },
                          "algorithm": {
                            "type": "string",
                            "enum": [
                              "HS256",
                              "HS384",
                              "HS512",
                              "RS256",
                              "RS384",
                              "RS512",
                              "ES256",
                              "ES384",
                              "ES512",
                              "PS256",
                              "PS384",
                              "PS512"
                            ]
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "MAILCHIMP"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "anyOf": [
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "type",
                              "secret_key"
                            ],
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "API_KEY"
                                ]
                              },
                              "secret_key": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "additionalProperties": true,
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "OAUTH_CODE"
                                ]
                              },
                              "code": {
                                "type": "string"
                              }
                            }
                          }
                        ]
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "MAILJET"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "api_key",
                          "secret_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "api_key": {
                            "type": "string"
                          },
                          "secret_key": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "PIPEDRIVE"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "anyOf": [
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "type",
                              "token"
                            ],
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "TOKEN"
                                ]
                              },
                              "token": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "additionalProperties": true,
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "OAUTH_CODE"
                                ]
                              },
                              "code": {
                                "type": "string"
                              }
                            }
                          }
                        ]
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "SALESFORCE"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_CODE"
                            ]
                          },
                          "code": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "SENDGRID"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "api_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "api_key": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "SLACK"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "anyOf": [
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "type",
                              "url"
                            ],
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "WEBHOOK"
                                ]
                              },
                              "url": {
                                "type": "string",
                                "format": "forms-url-https"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "additionalProperties": true,
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "OAUTH_CODE"
                                ]
                              },
                              "code": {
                                "type": "string"
                              }
                            }
                          }
                        ]
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "STRIPE"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "anyOf": [
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "type",
                              "private_key",
                              "public_key"
                            ],
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "KEY_PAIR"
                                ]
                              },
                              "private_key": {
                                "type": "string"
                              },
                              "public_key": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "additionalProperties": true,
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "OAUTH_CODE"
                                ]
                              },
                              "code": {
                                "type": "string"
                              },
                              "environment": {
                                "type": "string",
                                "enum": [
                                  "live",
                                  "test"
                                ]
                              }
                            }
                          }
                        ]
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "TELEGRAM"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "token"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "TOKEN"
                            ]
                          },
                          "token": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "TWILIO"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "account_id",
                          "api_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "account_id": {
                            "type": "string"
                          },
                          "api_key": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "WHATSAPP"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "token"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "TOKEN"
                            ]
                          },
                          "token": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "ZAPIER"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "url"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "WEBHOOK"
                            ]
                          },
                          "url": {
                            "type": "string",
                            "format": "forms-url-https"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "anyOf": [
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "ACTIVECAMPAIGN"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "api_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "api_key": {
                            "type": "string"
                          },
                          "base_url": {
                            "type": "string",
                            "format": "forms-url-https"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "AIRTABLE"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "api_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "api_key": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "AUTH0"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "client_id",
                          "client_secret",
                          "domain"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_APP"
                            ]
                          },
                          "client_id": {
                            "type": "string"
                          },
                          "client_secret": {
                            "type": "string"
                          },
                          "domain": {
                            "type": "string",
                            "format": "hostname-rfc2181"
                          },
                          "audience": {
                            "type": "string",
                            "minLength": 1,
                            "format": "forms-url-https"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "BIGQUERY"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_JWT"
                            ]
                          },
                          "project_id": {
                            "type": "string"
                          },
                          "private_key": {
                            "type": "string"
                          },
                          "client_email": {
                            "type": "string",
                            "format": "email"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "CLEARBIT"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "secret_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "secret_key": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "DOCUSIGN"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_CODE"
                            ]
                          },
                          "code": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "GOOGLE_SHEETS"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_CODE"
                            ]
                          },
                          "code": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "HTTP"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "token"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "BEARER"
                            ]
                          },
                          "token": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "HUBSPOT"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "anyOf": [
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "type",
                              "api_key"
                            ],
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "API_KEY"
                                ]
                              },
                              "api_key": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "additionalProperties": true,
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "OAUTH_CODE"
                                ]
                              },
                              "code": {
                                "type": "string"
                              }
                            }
                          }
                        ]
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "JWT"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": true,
                        "required": [
                          "type",
                          "algorithm"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "JWT"
                            ]
                          },
                          "algorithm": {
                            "type": "string",
                            "enum": [
                              "HS256",
                              "HS384",
                              "HS512",
                              "RS256",
                              "RS384",
                              "RS512",
                              "ES256",
                              "ES384",
                              "ES512",
                              "PS256",
                              "PS384",
                              "PS512"
                            ]
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "MAILCHIMP"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "anyOf": [
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "type",
                              "secret_key"
                            ],
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "API_KEY"
                                ]
                              },
                              "secret_key": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "additionalProperties": true,
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "OAUTH_CODE"
                                ]
                              },
                              "code": {
                                "type": "string"
                              }
                            }
                          }
                        ]
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "MAILJET"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "api_key",
                          "secret_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "api_key": {
                            "type": "string"
                          },
                          "secret_key": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "PIPEDRIVE"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "anyOf": [
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "type",
                              "token"
                            ],
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "TOKEN"
                                ]
                              },
                              "token": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "additionalProperties": true,
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "OAUTH_CODE"
                                ]
                              },
                              "code": {
                                "type": "string"
                              }
                            }
                          }
                        ]
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "SALESFORCE"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_CODE"
                            ]
                          },
                          "code": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "SENDGRID"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "api_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "api_key": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "SLACK"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "anyOf": [
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "type",
                              "url"
                            ],
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "WEBHOOK"
                                ]
                              },
                              "url": {
                                "type": "string",
                                "format": "forms-url-https"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "additionalProperties": true,
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "OAUTH_CODE"
                                ]
                              },
                              "code": {
                                "type": "string"
                              }
                            }
                          }
                        ]
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "STRIPE"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "anyOf": [
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "type",
                              "private_key",
                              "public_key"
                            ],
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "KEY_PAIR"
                                ]
                              },
                              "private_key": {
                                "type": "string"
                              },
                              "public_key": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "additionalProperties": true,
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "OAUTH_CODE"
                                ]
                              },
                              "code": {
                                "type": "string"
                              },
                              "environment": {
                                "type": "string",
                                "enum": [
                                  "live",
                                  "test"
                                ]
                              }
                            }
                          }
                        ]
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "TELEGRAM"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "token"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "TOKEN"
                            ]
                          },
                          "token": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "TWILIO"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "account_id",
                          "api_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "account_id": {
                            "type": "string"
                          },
                          "api_key": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "WHATSAPP"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "token"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "TOKEN"
                            ]
                          },
                          "token": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "ZAPIER"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "url"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "WEBHOOK"
                            ]
                          },
                          "url": {
                            "type": "string",
                            "format": "forms-url-https"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Connection successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "app_id",
                    "name",
                    "ready",
                    "created_at",
                    "updated_at",
                    "fingerprint"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Flows Vault Connection identifier.",
                      "maxLength": 30,
                      "format": "flows-vault-connections-id"
                    },
                    "app_id": {
                      "type": "string",
                      "description": "Flows Vault Connection app identifier.",
                      "minLength": 1,
                      "maxLength": 55
                    },
                    "environment": {
                      "type": "string",
                      "description": "Flows Vault Connection environment.",
                      "minLength": 1,
                      "maxLength": 55
                    },
                    "name": {
                      "type": "string",
                      "description": "Flows Vault Connection name.",
                      "minLength": 1,
                      "maxLength": 150
                    },
                    "account_name": {
                      "type": "string",
                      "description": "Flows Vault Connection custom account name.",
                      "minLength": 1,
                      "maxLength": 150
                    },
                    "ready": {
                      "type": "boolean",
                      "description": "Whether the Flows Vault Connection is configured."
                    },
                    "created_at": {
                      "type": "string",
                      "description": "The ISO 8601 formatted date when this Flows Vault Connection was created.",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "The ISO 8601 formatted date when this Flows Vault Connection was updated.",
                      "format": "date-time"
                    },
                    "refreshed_at": {
                      "type": "string",
                      "description": "The ISO 8601 formatted date when this Flows Vault Connection was refreshed.",
                      "format": "date-time"
                    },
                    "fingerprint": {
                      "type": "string",
                      "minLength": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: create:flows_vault_connections."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_flows_vault_connections",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:flows_vault_connections"
            ]
          }
        ]
      }
    },
    "/flows/vault/connections/{id}": {
      "get": {
        "summary": "Get a Flows Vault connection",
        "tags": [
          "flows"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Flows Vault connection ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Flow vault connection successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "app_id",
                    "name",
                    "ready",
                    "created_at",
                    "updated_at",
                    "fingerprint"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Flows Vault Connection identifier.",
                      "maxLength": 30,
                      "format": "flows-vault-connections-id"
                    },
                    "app_id": {
                      "type": "string",
                      "description": "Flows Vault Connection app identifier.",
                      "minLength": 1,
                      "maxLength": 55
                    },
                    "environment": {
                      "type": "string",
                      "description": "Flows Vault Connection environment.",
                      "minLength": 1,
                      "maxLength": 55
                    },
                    "name": {
                      "type": "string",
                      "description": "Flows Vault Connection name.",
                      "minLength": 1,
                      "maxLength": 150
                    },
                    "account_name": {
                      "type": "string",
                      "description": "Flows Vault Connection custom account name.",
                      "minLength": 1,
                      "maxLength": 150
                    },
                    "ready": {
                      "type": "boolean",
                      "description": "Whether the Flows Vault Connection is configured."
                    },
                    "created_at": {
                      "type": "string",
                      "description": "The ISO 8601 formatted date when this Flows Vault Connection was created.",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "The ISO 8601 formatted date when this Flows Vault Connection was updated.",
                      "format": "date-time"
                    },
                    "refreshed_at": {
                      "type": "string",
                      "description": "The ISO 8601 formatted date when this Flows Vault Connection was refreshed.",
                      "format": "date-time"
                    },
                    "fingerprint": {
                      "type": "string",
                      "minLength": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:flows_vault_connections."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_flows_vault_connections_by_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:flows_vault_connections"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a Flows Vault connection",
        "tags": [
          "flows"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Vault connection id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Connection successfully deleted."
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause.",
            "x-description-1": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: delete:flows_vault_connections."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_flows_vault_connections_by_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:flows_vault_connections"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update a Flows Vault connection",
        "tags": [
          "flows"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Flows Vault connection ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Flows Vault Connection name.",
                    "minLength": 1,
                    "maxLength": 150
                  },
                  "setup": {
                    "type": "object",
                    "description": "Flows Vault Connection configuration.",
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "api_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "api_key": {
                            "type": "string"
                          },
                          "base_url": {
                            "type": "string",
                            "format": "forms-url-https"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "api_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "api_key": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "client_id",
                          "client_secret",
                          "domain"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_APP"
                            ]
                          },
                          "client_id": {
                            "type": "string"
                          },
                          "client_secret": {
                            "type": "string"
                          },
                          "domain": {
                            "type": "string",
                            "format": "hostname-rfc2181"
                          },
                          "audience": {
                            "type": "string",
                            "minLength": 1,
                            "format": "forms-url-https"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_JWT"
                            ]
                          },
                          "project_id": {
                            "type": "string"
                          },
                          "private_key": {
                            "type": "string"
                          },
                          "client_email": {
                            "type": "string",
                            "format": "email"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "secret_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "secret_key": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_CODE"
                            ]
                          },
                          "code": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_CODE"
                            ]
                          },
                          "code": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "token"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "BEARER"
                            ]
                          },
                          "token": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "api_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "api_key": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_CODE"
                            ]
                          },
                          "code": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": true,
                        "required": [
                          "type",
                          "algorithm"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "JWT"
                            ]
                          },
                          "algorithm": {
                            "type": "string",
                            "enum": [
                              "HS256",
                              "HS384",
                              "HS512",
                              "RS256",
                              "RS384",
                              "RS512",
                              "ES256",
                              "ES384",
                              "ES512",
                              "PS256",
                              "PS384",
                              "PS512"
                            ]
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "secret_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "secret_key": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_CODE"
                            ]
                          },
                          "code": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "api_key",
                          "secret_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "api_key": {
                            "type": "string"
                          },
                          "secret_key": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "token"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "TOKEN"
                            ]
                          },
                          "token": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_CODE"
                            ]
                          },
                          "code": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_CODE"
                            ]
                          },
                          "code": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "api_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "api_key": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "url"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "WEBHOOK"
                            ]
                          },
                          "url": {
                            "type": "string",
                            "format": "forms-url-https"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_CODE"
                            ]
                          },
                          "code": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "private_key",
                          "public_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "KEY_PAIR"
                            ]
                          },
                          "private_key": {
                            "type": "string"
                          },
                          "public_key": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_CODE"
                            ]
                          },
                          "code": {
                            "type": "string"
                          },
                          "environment": {
                            "type": "string",
                            "enum": [
                              "live",
                              "test"
                            ]
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "token"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "TOKEN"
                            ]
                          },
                          "token": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "account_id",
                          "api_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "account_id": {
                            "type": "string"
                          },
                          "api_key": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "token"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "TOKEN"
                            ]
                          },
                          "token": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "url"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "WEBHOOK"
                            ]
                          },
                          "url": {
                            "type": "string",
                            "format": "forms-url-https"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Flows Vault Connection name.",
                    "minLength": 1,
                    "maxLength": 150
                  },
                  "setup": {
                    "type": "object",
                    "description": "Flows Vault Connection configuration.",
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "api_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "api_key": {
                            "type": "string"
                          },
                          "base_url": {
                            "type": "string",
                            "format": "forms-url-https"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "api_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "api_key": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "client_id",
                          "client_secret",
                          "domain"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_APP"
                            ]
                          },
                          "client_id": {
                            "type": "string"
                          },
                          "client_secret": {
                            "type": "string"
                          },
                          "domain": {
                            "type": "string",
                            "format": "hostname-rfc2181"
                          },
                          "audience": {
                            "type": "string",
                            "minLength": 1,
                            "format": "forms-url-https"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_JWT"
                            ]
                          },
                          "project_id": {
                            "type": "string"
                          },
                          "private_key": {
                            "type": "string"
                          },
                          "client_email": {
                            "type": "string",
                            "format": "email"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "secret_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "secret_key": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_CODE"
                            ]
                          },
                          "code": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_CODE"
                            ]
                          },
                          "code": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "token"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "BEARER"
                            ]
                          },
                          "token": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "api_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "api_key": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_CODE"
                            ]
                          },
                          "code": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": true,
                        "required": [
                          "type",
                          "algorithm"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "JWT"
                            ]
                          },
                          "algorithm": {
                            "type": "string",
                            "enum": [
                              "HS256",
                              "HS384",
                              "HS512",
                              "RS256",
                              "RS384",
                              "RS512",
                              "ES256",
                              "ES384",
                              "ES512",
                              "PS256",
                              "PS384",
                              "PS512"
                            ]
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "secret_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "secret_key": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_CODE"
                            ]
                          },
                          "code": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "api_key",
                          "secret_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "api_key": {
                            "type": "string"
                          },
                          "secret_key": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "token"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "TOKEN"
                            ]
                          },
                          "token": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_CODE"
                            ]
                          },
                          "code": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_CODE"
                            ]
                          },
                          "code": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "api_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "api_key": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "url"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "WEBHOOK"
                            ]
                          },
                          "url": {
                            "type": "string",
                            "format": "forms-url-https"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_CODE"
                            ]
                          },
                          "code": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "private_key",
                          "public_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "KEY_PAIR"
                            ]
                          },
                          "private_key": {
                            "type": "string"
                          },
                          "public_key": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_CODE"
                            ]
                          },
                          "code": {
                            "type": "string"
                          },
                          "environment": {
                            "type": "string",
                            "enum": [
                              "live",
                              "test"
                            ]
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "token"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "TOKEN"
                            ]
                          },
                          "token": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "account_id",
                          "api_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "account_id": {
                            "type": "string"
                          },
                          "api_key": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "token"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "TOKEN"
                            ]
                          },
                          "token": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "url"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "WEBHOOK"
                            ]
                          },
                          "url": {
                            "type": "string",
                            "format": "forms-url-https"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Flow vault connection successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "app_id",
                    "name",
                    "ready",
                    "created_at",
                    "updated_at",
                    "fingerprint"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Flows Vault Connection identifier.",
                      "maxLength": 30,
                      "format": "flows-vault-connections-id"
                    },
                    "app_id": {
                      "type": "string",
                      "description": "Flows Vault Connection app identifier.",
                      "minLength": 1,
                      "maxLength": 55
                    },
                    "environment": {
                      "type": "string",
                      "description": "Flows Vault Connection environment.",
                      "minLength": 1,
                      "maxLength": 55
                    },
                    "name": {
                      "type": "string",
                      "description": "Flows Vault Connection name.",
                      "minLength": 1,
                      "maxLength": 150
                    },
                    "account_name": {
                      "type": "string",
                      "description": "Flows Vault Connection custom account name.",
                      "minLength": 1,
                      "maxLength": 150
                    },
                    "ready": {
                      "type": "boolean",
                      "description": "Whether the Flows Vault Connection is configured."
                    },
                    "created_at": {
                      "type": "string",
                      "description": "The ISO 8601 formatted date when this Flows Vault Connection was created.",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "The ISO 8601 formatted date when this Flows Vault Connection was updated.",
                      "format": "date-time"
                    },
                    "refreshed_at": {
                      "type": "string",
                      "description": "The ISO 8601 formatted date when this Flows Vault Connection was refreshed.",
                      "format": "date-time"
                    },
                    "fingerprint": {
                      "type": "string",
                      "minLength": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:flows_vault_connections."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_flows_vault_connections_by_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:flows_vault_connections"
            ]
          }
        ]
      }
    },
    "/flows/{flow_id}/executions": {
      "get": {
        "summary": "Get flow executions",
        "tags": [
          "flows"
        ],
        "parameters": [
          {
            "name": "flow_id",
            "in": "path",
            "description": "Flow id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page index of the results to return. First page is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Optional Id from which to start selection.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Flow executions successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "id",
                          "trace_id",
                          "status",
                          "created_at",
                          "updated_at"
                        ],
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Flow execution identifier",
                            "maxLength": 30,
                            "format": "flow-execution-id"
                          },
                          "trace_id": {
                            "type": "string",
                            "description": "Trace id",
                            "minLength": 1,
                            "maxLength": 50
                          },
                          "journey_id": {
                            "type": "string",
                            "description": "Journey id",
                            "minLength": 1,
                            "maxLength": 50
                          },
                          "status": {
                            "type": "string",
                            "description": "Execution status",
                            "minLength": 1,
                            "maxLength": 50
                          },
                          "created_at": {
                            "type": "string",
                            "description": "The ISO 8601 formatted date when this flow execution was created.",
                            "format": "date-time"
                          },
                          "updated_at": {
                            "type": "string",
                            "description": "The ISO 8601 formatted date when this flow execution was updated.",
                            "format": "date-time"
                          },
                          "started_at": {
                            "type": "string",
                            "description": "The ISO 8601 formatted date when this flow execution started.",
                            "format": "date-time"
                          },
                          "ended_at": {
                            "type": "string",
                            "description": "The ISO 8601 formatted date when this flow execution ended.",
                            "format": "date-time"
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "start": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "total": {
                          "type": "number"
                        },
                        "executions": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "id",
                              "trace_id",
                              "status",
                              "created_at",
                              "updated_at"
                            ],
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "Flow execution identifier",
                                "maxLength": 30,
                                "format": "flow-execution-id"
                              },
                              "trace_id": {
                                "type": "string",
                                "description": "Trace id",
                                "minLength": 1,
                                "maxLength": 50
                              },
                              "journey_id": {
                                "type": "string",
                                "description": "Journey id",
                                "minLength": 1,
                                "maxLength": 50
                              },
                              "status": {
                                "type": "string",
                                "description": "Execution status",
                                "minLength": 1,
                                "maxLength": 50
                              },
                              "created_at": {
                                "type": "string",
                                "description": "The ISO 8601 formatted date when this flow execution was created.",
                                "format": "date-time"
                              },
                              "updated_at": {
                                "type": "string",
                                "description": "The ISO 8601 formatted date when this flow execution was updated.",
                                "format": "date-time"
                              },
                              "started_at": {
                                "type": "string",
                                "description": "The ISO 8601 formatted date when this flow execution started.",
                                "format": "date-time"
                              },
                              "ended_at": {
                                "type": "string",
                                "description": "The ISO 8601 formatted date when this flow execution ended.",
                                "format": "date-time"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause.",
            "x-description-1": "Invalid query string paging options. The message will vary depending on the cause"
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:flows_executions."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_flows_executions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:flows_executions"
            ]
          }
        ]
      }
    },
    "/flows/{flow_id}/executions/{execution_id}": {
      "get": {
        "summary": "Get a flow execution",
        "tags": [
          "flows"
        ],
        "parameters": [
          {
            "name": "flow_id",
            "in": "path",
            "description": "Flow id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "execution_id",
            "in": "path",
            "description": "Flow execution id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hydrate",
            "in": "query",
            "description": "Hydration param",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "maxLength": 5,
                "enum": [
                  "debug"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Flow execution successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "trace_id",
                    "status",
                    "created_at",
                    "updated_at"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Flow execution identifier",
                      "maxLength": 30,
                      "format": "flow-execution-id"
                    },
                    "trace_id": {
                      "type": "string",
                      "description": "Trace id",
                      "minLength": 1,
                      "maxLength": 50
                    },
                    "journey_id": {
                      "type": "string",
                      "description": "Journey id",
                      "minLength": 1,
                      "maxLength": 50
                    },
                    "status": {
                      "type": "string",
                      "description": "Execution status",
                      "minLength": 1,
                      "maxLength": 50
                    },
                    "debug": {
                      "type": "object",
                      "description": "Flow execution debug.",
                      "additionalProperties": true
                    },
                    "created_at": {
                      "type": "string",
                      "description": "The ISO 8601 formatted date when this flow execution was created.",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "The ISO 8601 formatted date when this flow execution was updated.",
                      "format": "date-time"
                    },
                    "started_at": {
                      "type": "string",
                      "description": "The ISO 8601 formatted date when this flow execution started.",
                      "format": "date-time"
                    },
                    "ended_at": {
                      "type": "string",
                      "description": "The ISO 8601 formatted date when this flow execution ended.",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:flows_executions."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_flows_executions_by_execution_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:flows_executions"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a flow execution",
        "tags": [
          "flows"
        ],
        "parameters": [
          {
            "name": "flow_id",
            "in": "path",
            "description": "Flows id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "execution_id",
            "in": "path",
            "description": "Flow execution identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Flow execution successfully deleted."
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause.",
            "x-description-1": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: delete:flows_executions."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_flows_executions_by_execution_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:flows_executions"
            ]
          }
        ]
      }
    },
    "/flows/{id}": {
      "get": {
        "summary": "Get a flow",
        "tags": [
          "flows"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Flow identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hydrate",
            "in": "query",
            "description": "hydration param",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "maxLength": 50,
                "enum": [
                  "form_count",
                  "forms"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Flow successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "name",
                    "created_at",
                    "updated_at"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "maxLength": 30,
                      "format": "flow-id"
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 150
                    },
                    "actions": {
                      "type": "array",
                      "items": {}
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "executed_at": {
                      "type": "string",
                      "format": "date"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:flows."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_flows_by_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:flows"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a flow",
        "tags": [
          "flows"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Flow id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Flow successfully deleted."
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause.",
            "x-description-1": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: delete:flows."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_flows_by_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:flows"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update a flow",
        "tags": [
          "flows"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Flow identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 150
                  },
                  "actions": {
                    "type": "array",
                    "items": {}
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 150
                  },
                  "actions": {
                    "type": "array",
                    "items": {}
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Flow successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "name",
                    "created_at",
                    "updated_at"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "maxLength": 30,
                      "format": "flow-id"
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 150
                    },
                    "actions": {
                      "type": "array",
                      "items": {}
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "executed_at": {
                      "type": "string",
                      "format": "date"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:flows."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_flows_by_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:flows"
            ]
          }
        ]
      }
    },
    "/forms": {
      "get": {
        "summary": "Get forms",
        "tags": [
          "forms"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page index of the results to return. First page is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "hydrate",
            "in": "query",
            "description": "hydration param",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "maxLength": 50,
                "enum": [
                  "flow_count",
                  "links"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Forms successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "id",
                          "name",
                          "created_at",
                          "updated_at"
                        ],
                        "properties": {
                          "id": {
                            "type": "string",
                            "maxLength": 30,
                            "format": "form-id"
                          },
                          "name": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 150
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "updated_at": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "embedded_at": {
                            "type": "string",
                            "format": "date"
                          },
                          "submitted_at": {
                            "type": "string",
                            "format": "date"
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "start": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "total": {
                          "type": "number"
                        },
                        "forms": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "id",
                              "name",
                              "created_at",
                              "updated_at"
                            ],
                            "properties": {
                              "id": {
                                "type": "string",
                                "maxLength": 30,
                                "format": "form-id"
                              },
                              "name": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 150
                              },
                              "created_at": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "updated_at": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "embedded_at": {
                                "type": "string",
                                "format": "date"
                              },
                              "submitted_at": {
                                "type": "string",
                                "format": "date"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause.",
            "x-description-1": "Invalid query string paging options. The message will vary depending on the cause"
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:forms."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_forms",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:forms"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create a form",
        "tags": [
          "forms"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 150
                  },
                  "messages": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "errors": {
                        "type": "object",
                        "additionalProperties": true
                      },
                      "custom": {
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  },
                  "languages": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "primary": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 55
                      },
                      "default": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 55
                      }
                    }
                  },
                  "translations": {
                    "type": "object",
                    "additionalProperties": true
                  },
                  "nodes": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "anyOf": [
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "id",
                            "type",
                            "config"
                          ],
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "forms-custom-identifier"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "FLOW"
                              ]
                            },
                            "coordinates": {
                              "type": "object",
                              "additionalProperties": false,
                              "required": [
                                "x",
                                "y"
                              ],
                              "properties": {
                                "x": {
                                  "type": "integer"
                                },
                                "y": {
                                  "type": "integer"
                                }
                              }
                            },
                            "alias": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 150
                            },
                            "config": {
                              "type": "object",
                              "additionalProperties": false,
                              "required": [
                                "flow_id"
                              ],
                              "properties": {
                                "flow_id": {
                                  "type": "string",
                                  "maxLength": 30,
                                  "format": "flow-id"
                                },
                                "next_node": {
                                  "anyOf": [
                                    {
                                      "type": "string",
                                      "format": "forms-custom-identifier"
                                    },
                                    {
                                      "type": "string",
                                      "enum": [
                                        "$ending"
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        },
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "id",
                            "type"
                          ],
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "forms-custom-identifier"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "ROUTER"
                              ]
                            },
                            "coordinates": {
                              "type": "object",
                              "additionalProperties": false,
                              "required": [
                                "x",
                                "y"
                              ],
                              "properties": {
                                "x": {
                                  "type": "integer"
                                },
                                "y": {
                                  "type": "integer"
                                }
                              }
                            },
                            "alias": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 150
                            },
                            "config": {
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "rules": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "condition"
                                    ],
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "format": "forms-custom-identifier"
                                      },
                                      "alias": {
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 150
                                      },
                                      "condition": {},
                                      "next_node": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "format": "forms-custom-identifier"
                                          },
                                          {
                                            "type": "string",
                                            "enum": [
                                              "$ending"
                                            ]
                                          }
                                        ]
                                      }
                                    }
                                  }
                                },
                                "fallback": {
                                  "anyOf": [
                                    {
                                      "type": "string",
                                      "format": "forms-custom-identifier"
                                    },
                                    {
                                      "type": "string",
                                      "enum": [
                                        "$ending"
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        },
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "id",
                            "type"
                          ],
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "forms-custom-identifier"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "STEP"
                              ]
                            },
                            "coordinates": {
                              "type": "object",
                              "additionalProperties": false,
                              "required": [
                                "x",
                                "y"
                              ],
                              "properties": {
                                "x": {
                                  "type": "integer"
                                },
                                "y": {
                                  "type": "integer"
                                }
                              }
                            },
                            "alias": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 150
                            },
                            "config": {
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "components": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "anyOf": [
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "DIVIDER"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "text": {
                                                    "type": "string",
                                                    "maxLength": 50
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "HTML"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "content": {
                                                    "type": "string",
                                                    "maxLength": 10000
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "IMAGE"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "src"
                                                ],
                                                "properties": {
                                                  "src": {
                                                    "type": "string",
                                                    "maxLength": 500
                                                  },
                                                  "position": {
                                                    "type": "string",
                                                    "enum": [
                                                      "LEFT",
                                                      "CENTER",
                                                      "RIGHT"
                                                    ]
                                                  },
                                                  "height": {
                                                    "type": "number"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "JUMP_BUTTON"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "text",
                                                  "next_node"
                                                ],
                                                "properties": {
                                                  "text": {
                                                    "type": "string",
                                                    "maxLength": 150
                                                  },
                                                  "next_node": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "format": "forms-custom-identifier"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "enum": [
                                                          "$ending"
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  "style": {
                                                    "type": "object",
                                                    "additionalProperties": false,
                                                    "properties": {
                                                      "background_color": {
                                                        "type": "string",
                                                        "format": "forms-hex-color"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "RESEND_BUTTON"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "active_text",
                                                  "button_text",
                                                  "waiting_text",
                                                  "flow_id"
                                                ],
                                                "properties": {
                                                  "active_text": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 255
                                                  },
                                                  "button_text": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 255
                                                  },
                                                  "waiting_text": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 255
                                                  },
                                                  "text_alignment": {
                                                    "type": "string",
                                                    "enum": [
                                                      "LEFT",
                                                      "CENTER",
                                                      "RIGHT"
                                                    ]
                                                  },
                                                  "flow_id": {
                                                    "type": "string",
                                                    "maxLength": 30,
                                                    "format": "flow-id"
                                                  },
                                                  "max_attempts": {
                                                    "type": "number"
                                                  },
                                                  "waiting_time": {
                                                    "type": "number"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "NEXT_BUTTON"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "text"
                                                ],
                                                "properties": {
                                                  "text": {
                                                    "type": "string",
                                                    "maxLength": 150
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "PREVIOUS_BUTTON"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "text"
                                                ],
                                                "properties": {
                                                  "text": {
                                                    "type": "string",
                                                    "maxLength": 150
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "RICH_TEXT"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "content": {
                                                    "type": "string",
                                                    "maxLength": 10000
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "type": "object",
                                        "anyOf": [
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "AUTH0_VERIFIABLE_CREDENTIALS"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "url",
                                                  "alternate_text",
                                                  "access_token",
                                                  "verification_id"
                                                ],
                                                "properties": {
                                                  "url": {
                                                    "type": "string",
                                                    "maxLength": 2000
                                                  },
                                                  "size": {
                                                    "type": "number"
                                                  },
                                                  "alternate_text": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 255
                                                  },
                                                  "access_token": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 5000
                                                  },
                                                  "verification_id": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 255
                                                  },
                                                  "max_wait": {
                                                    "type": "number"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "GMAPS_ADDRESS"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "api_key"
                                                ],
                                                "properties": {
                                                  "api_key": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "RECAPTCHA"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "site_key",
                                                  "secret_key"
                                                ],
                                                "properties": {
                                                  "site_key": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "secret_key": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "type": "object",
                                        "anyOf": [
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "BOOLEAN"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "default_value": {
                                                    "type": "boolean"
                                                  },
                                                  "options": {
                                                    "type": "object",
                                                    "additionalProperties": false,
                                                    "properties": {
                                                      "true": {
                                                        "type": "string",
                                                        "minLength": 1,
                                                        "maxLength": 50
                                                      },
                                                      "false": {
                                                        "type": "string",
                                                        "minLength": 1,
                                                        "maxLength": 50
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "CARDS"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": true
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "CHOICE"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": true
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "CUSTOM"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "schema",
                                                  "code"
                                                ],
                                                "properties": {
                                                  "schema": {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  "code": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "css": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "params": {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "DATE"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": true
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "DROPDOWN"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": true
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "EMAIL"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "default_value": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "placeholder": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 500
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "FILE"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "multiple": {
                                                    "type": "boolean"
                                                  },
                                                  "storage": {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  "categories": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string",
                                                      "enum": [
                                                        "AUDIO",
                                                        "VIDEO",
                                                        "IMAGE",
                                                        "DOCUMENT",
                                                        "ARCHIVE"
                                                      ]
                                                    }
                                                  },
                                                  "extensions": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string",
                                                      "maxLength": 50,
                                                      "format": "forms-file-extension"
                                                    }
                                                  },
                                                  "maxSize": {
                                                    "type": "integer"
                                                  },
                                                  "maxFiles": {
                                                    "type": "integer"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "LEGAL"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "text": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 10000
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "NUMBER"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "default_value": {
                                                    "type": "number"
                                                  },
                                                  "placeholder": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 500
                                                  },
                                                  "min_value": {
                                                    "type": "number"
                                                  },
                                                  "max_value": {
                                                    "type": "number"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "PASSWORD"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "hash": {
                                                    "type": "string",
                                                    "enum": [
                                                      "NONE",
                                                      "MD5",
                                                      "SHA1",
                                                      "SHA256",
                                                      "SHA512"
                                                    ]
                                                  },
                                                  "placeholder": {
                                                    "type": "string",
                                                    "maxLength": 500
                                                  },
                                                  "min_length": {
                                                    "type": "integer"
                                                  },
                                                  "max_length": {
                                                    "type": "integer"
                                                  },
                                                  "complexity": {
                                                    "type": "boolean"
                                                  },
                                                  "nist": {
                                                    "type": "boolean"
                                                  },
                                                  "strength_meter": {
                                                    "type": "boolean"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "PAYMENT"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "charge",
                                                  "credentials"
                                                ],
                                                "properties": {
                                                  "provider": {
                                                    "type": "string",
                                                    "enum": [
                                                      "STRIPE"
                                                    ]
                                                  },
                                                  "charge": {
                                                    "type": "object",
                                                    "anyOf": [
                                                      {
                                                        "type": "object",
                                                        "additionalProperties": false,
                                                        "required": [
                                                          "type",
                                                          "one_off"
                                                        ],
                                                        "properties": {
                                                          "type": {
                                                            "type": "string",
                                                            "enum": [
                                                              "ONE_OFF"
                                                            ]
                                                          },
                                                          "one_off": {
                                                            "type": "object",
                                                            "additionalProperties": true,
                                                            "required": [
                                                              "amount",
                                                              "currency"
                                                            ],
                                                            "properties": {
                                                              "amount": {
                                                                "anyOf": [
                                                                  {
                                                                    "type": "string",
                                                                    "minLength": 1
                                                                  },
                                                                  {
                                                                    "type": "number"
                                                                  }
                                                                ]
                                                              },
                                                              "currency": {
                                                                "type": "string",
                                                                "enum": [
                                                                  "AUD",
                                                                  "CAD",
                                                                  "CHF",
                                                                  "EUR",
                                                                  "GBP",
                                                                  "INR",
                                                                  "MXN",
                                                                  "SEK",
                                                                  "USD"
                                                                ]
                                                              }
                                                            }
                                                          }
                                                        }
                                                      },
                                                      {
                                                        "type": "object",
                                                        "additionalProperties": false,
                                                        "required": [
                                                          "type",
                                                          "subscription"
                                                        ],
                                                        "properties": {
                                                          "type": {
                                                            "type": "string",
                                                            "enum": [
                                                              "SUBSCRIPTION"
                                                            ]
                                                          },
                                                          "subscription": {
                                                            "type": "object",
                                                            "additionalProperties": true
                                                          }
                                                        }
                                                      }
                                                    ]
                                                  },
                                                  "credentials": {
                                                    "type": "object",
                                                    "additionalProperties": false,
                                                    "required": [
                                                      "public_key",
                                                      "private_key"
                                                    ],
                                                    "properties": {
                                                      "public_key": {
                                                        "type": "string",
                                                        "minLength": 1,
                                                        "maxLength": 250
                                                      },
                                                      "private_key": {
                                                        "type": "string",
                                                        "minLength": 1,
                                                        "maxLength": 250
                                                      }
                                                    }
                                                  },
                                                  "customer": {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  "fields": {
                                                    "type": "object",
                                                    "additionalProperties": false,
                                                    "properties": {
                                                      "card_number": {
                                                        "type": "object",
                                                        "additionalProperties": false,
                                                        "properties": {
                                                          "label": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          },
                                                          "placeholder": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          }
                                                        }
                                                      },
                                                      "expiration_date": {
                                                        "type": "object",
                                                        "additionalProperties": false,
                                                        "properties": {
                                                          "label": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          },
                                                          "placeholder": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          }
                                                        }
                                                      },
                                                      "security_code": {
                                                        "type": "object",
                                                        "additionalProperties": false,
                                                        "properties": {
                                                          "label": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          },
                                                          "placeholder": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          }
                                                        }
                                                      },
                                                      "trustmarks": {
                                                        "type": "boolean"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "SOCIAL"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {}
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "TEL"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "allOf": [
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  }
                                                ]
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "TEXT"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "allOf": [
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  }
                                                ]
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "URL"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "default_value": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "placeholder": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 500
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                },
                                "next_node": {
                                  "anyOf": [
                                    {
                                      "type": "string",
                                      "format": "forms-custom-identifier"
                                    },
                                    {
                                      "type": "string",
                                      "enum": [
                                        "$ending"
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  },
                  "start": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "hidden_fields": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "key"
                          ],
                          "properties": {
                            "key": {
                              "type": "string",
                              "format": "forms-custom-identifier"
                            },
                            "value": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 500
                            }
                          }
                        }
                      },
                      "next_node": {
                        "anyOf": [
                          {
                            "type": "string",
                            "format": "forms-custom-identifier"
                          },
                          {
                            "type": "string",
                            "enum": [
                              "$ending"
                            ]
                          }
                        ]
                      },
                      "coordinates": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "x",
                          "y"
                        ],
                        "properties": {
                          "x": {
                            "type": "integer"
                          },
                          "y": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  },
                  "ending": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "redirection": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "target"
                        ],
                        "properties": {
                          "delay": {
                            "type": "integer"
                          },
                          "target": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1024
                          }
                        }
                      },
                      "after_submit": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "flow_id": {
                            "type": "string",
                            "maxLength": 30,
                            "format": "flow-id"
                          }
                        }
                      },
                      "coordinates": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "x",
                          "y"
                        ],
                        "properties": {
                          "x": {
                            "type": "integer"
                          },
                          "y": {
                            "type": "integer"
                          }
                        }
                      },
                      "resume_flow": {
                        "type": "boolean",
                        "enum": [
                          true
                        ]
                      }
                    }
                  },
                  "style": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "css": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 5000
                      }
                    }
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 150
                  },
                  "messages": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "errors": {
                        "type": "object",
                        "additionalProperties": true
                      },
                      "custom": {
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  },
                  "languages": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "primary": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 55
                      },
                      "default": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 55
                      }
                    }
                  },
                  "translations": {
                    "type": "object",
                    "additionalProperties": true
                  },
                  "nodes": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "anyOf": [
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "id",
                            "type",
                            "config"
                          ],
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "forms-custom-identifier"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "FLOW"
                              ]
                            },
                            "coordinates": {
                              "type": "object",
                              "additionalProperties": false,
                              "required": [
                                "x",
                                "y"
                              ],
                              "properties": {
                                "x": {
                                  "type": "integer"
                                },
                                "y": {
                                  "type": "integer"
                                }
                              }
                            },
                            "alias": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 150
                            },
                            "config": {
                              "type": "object",
                              "additionalProperties": false,
                              "required": [
                                "flow_id"
                              ],
                              "properties": {
                                "flow_id": {
                                  "type": "string",
                                  "maxLength": 30,
                                  "format": "flow-id"
                                },
                                "next_node": {
                                  "anyOf": [
                                    {
                                      "type": "string",
                                      "format": "forms-custom-identifier"
                                    },
                                    {
                                      "type": "string",
                                      "enum": [
                                        "$ending"
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        },
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "id",
                            "type"
                          ],
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "forms-custom-identifier"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "ROUTER"
                              ]
                            },
                            "coordinates": {
                              "type": "object",
                              "additionalProperties": false,
                              "required": [
                                "x",
                                "y"
                              ],
                              "properties": {
                                "x": {
                                  "type": "integer"
                                },
                                "y": {
                                  "type": "integer"
                                }
                              }
                            },
                            "alias": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 150
                            },
                            "config": {
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "rules": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "condition"
                                    ],
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "format": "forms-custom-identifier"
                                      },
                                      "alias": {
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 150
                                      },
                                      "condition": {},
                                      "next_node": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "format": "forms-custom-identifier"
                                          },
                                          {
                                            "type": "string",
                                            "enum": [
                                              "$ending"
                                            ]
                                          }
                                        ]
                                      }
                                    }
                                  }
                                },
                                "fallback": {
                                  "anyOf": [
                                    {
                                      "type": "string",
                                      "format": "forms-custom-identifier"
                                    },
                                    {
                                      "type": "string",
                                      "enum": [
                                        "$ending"
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        },
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "id",
                            "type"
                          ],
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "forms-custom-identifier"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "STEP"
                              ]
                            },
                            "coordinates": {
                              "type": "object",
                              "additionalProperties": false,
                              "required": [
                                "x",
                                "y"
                              ],
                              "properties": {
                                "x": {
                                  "type": "integer"
                                },
                                "y": {
                                  "type": "integer"
                                }
                              }
                            },
                            "alias": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 150
                            },
                            "config": {
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "components": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "anyOf": [
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "DIVIDER"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "text": {
                                                    "type": "string",
                                                    "maxLength": 50
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "HTML"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "content": {
                                                    "type": "string",
                                                    "maxLength": 10000
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "IMAGE"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "src"
                                                ],
                                                "properties": {
                                                  "src": {
                                                    "type": "string",
                                                    "maxLength": 500
                                                  },
                                                  "position": {
                                                    "type": "string",
                                                    "enum": [
                                                      "LEFT",
                                                      "CENTER",
                                                      "RIGHT"
                                                    ]
                                                  },
                                                  "height": {
                                                    "type": "number"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "JUMP_BUTTON"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "text",
                                                  "next_node"
                                                ],
                                                "properties": {
                                                  "text": {
                                                    "type": "string",
                                                    "maxLength": 150
                                                  },
                                                  "next_node": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "format": "forms-custom-identifier"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "enum": [
                                                          "$ending"
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  "style": {
                                                    "type": "object",
                                                    "additionalProperties": false,
                                                    "properties": {
                                                      "background_color": {
                                                        "type": "string",
                                                        "format": "forms-hex-color"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "RESEND_BUTTON"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "active_text",
                                                  "button_text",
                                                  "waiting_text",
                                                  "flow_id"
                                                ],
                                                "properties": {
                                                  "active_text": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 255
                                                  },
                                                  "button_text": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 255
                                                  },
                                                  "waiting_text": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 255
                                                  },
                                                  "text_alignment": {
                                                    "type": "string",
                                                    "enum": [
                                                      "LEFT",
                                                      "CENTER",
                                                      "RIGHT"
                                                    ]
                                                  },
                                                  "flow_id": {
                                                    "type": "string",
                                                    "maxLength": 30,
                                                    "format": "flow-id"
                                                  },
                                                  "max_attempts": {
                                                    "type": "number"
                                                  },
                                                  "waiting_time": {
                                                    "type": "number"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "NEXT_BUTTON"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "text"
                                                ],
                                                "properties": {
                                                  "text": {
                                                    "type": "string",
                                                    "maxLength": 150
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "PREVIOUS_BUTTON"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "text"
                                                ],
                                                "properties": {
                                                  "text": {
                                                    "type": "string",
                                                    "maxLength": 150
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "RICH_TEXT"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "content": {
                                                    "type": "string",
                                                    "maxLength": 10000
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "type": "object",
                                        "anyOf": [
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "AUTH0_VERIFIABLE_CREDENTIALS"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "url",
                                                  "alternate_text",
                                                  "access_token",
                                                  "verification_id"
                                                ],
                                                "properties": {
                                                  "url": {
                                                    "type": "string",
                                                    "maxLength": 2000
                                                  },
                                                  "size": {
                                                    "type": "number"
                                                  },
                                                  "alternate_text": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 255
                                                  },
                                                  "access_token": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 5000
                                                  },
                                                  "verification_id": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 255
                                                  },
                                                  "max_wait": {
                                                    "type": "number"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "GMAPS_ADDRESS"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "api_key"
                                                ],
                                                "properties": {
                                                  "api_key": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "RECAPTCHA"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "site_key",
                                                  "secret_key"
                                                ],
                                                "properties": {
                                                  "site_key": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "secret_key": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "type": "object",
                                        "anyOf": [
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "BOOLEAN"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "default_value": {
                                                    "type": "boolean"
                                                  },
                                                  "options": {
                                                    "type": "object",
                                                    "additionalProperties": false,
                                                    "properties": {
                                                      "true": {
                                                        "type": "string",
                                                        "minLength": 1,
                                                        "maxLength": 50
                                                      },
                                                      "false": {
                                                        "type": "string",
                                                        "minLength": 1,
                                                        "maxLength": 50
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "CARDS"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": true
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "CHOICE"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": true
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "CUSTOM"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "schema",
                                                  "code"
                                                ],
                                                "properties": {
                                                  "schema": {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  "code": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "css": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "params": {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "DATE"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": true
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "DROPDOWN"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": true
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "EMAIL"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "default_value": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "placeholder": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 500
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "FILE"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "multiple": {
                                                    "type": "boolean"
                                                  },
                                                  "storage": {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  "categories": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string",
                                                      "enum": [
                                                        "AUDIO",
                                                        "VIDEO",
                                                        "IMAGE",
                                                        "DOCUMENT",
                                                        "ARCHIVE"
                                                      ]
                                                    }
                                                  },
                                                  "extensions": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string",
                                                      "maxLength": 50,
                                                      "format": "forms-file-extension"
                                                    }
                                                  },
                                                  "maxSize": {
                                                    "type": "integer"
                                                  },
                                                  "maxFiles": {
                                                    "type": "integer"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "LEGAL"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "text": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 10000
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "NUMBER"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "default_value": {
                                                    "type": "number"
                                                  },
                                                  "placeholder": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 500
                                                  },
                                                  "min_value": {
                                                    "type": "number"
                                                  },
                                                  "max_value": {
                                                    "type": "number"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "PASSWORD"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "hash": {
                                                    "type": "string",
                                                    "enum": [
                                                      "NONE",
                                                      "MD5",
                                                      "SHA1",
                                                      "SHA256",
                                                      "SHA512"
                                                    ]
                                                  },
                                                  "placeholder": {
                                                    "type": "string",
                                                    "maxLength": 500
                                                  },
                                                  "min_length": {
                                                    "type": "integer"
                                                  },
                                                  "max_length": {
                                                    "type": "integer"
                                                  },
                                                  "complexity": {
                                                    "type": "boolean"
                                                  },
                                                  "nist": {
                                                    "type": "boolean"
                                                  },
                                                  "strength_meter": {
                                                    "type": "boolean"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "PAYMENT"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "charge",
                                                  "credentials"
                                                ],
                                                "properties": {
                                                  "provider": {
                                                    "type": "string",
                                                    "enum": [
                                                      "STRIPE"
                                                    ]
                                                  },
                                                  "charge": {
                                                    "type": "object",
                                                    "anyOf": [
                                                      {
                                                        "type": "object",
                                                        "additionalProperties": false,
                                                        "required": [
                                                          "type",
                                                          "one_off"
                                                        ],
                                                        "properties": {
                                                          "type": {
                                                            "type": "string",
                                                            "enum": [
                                                              "ONE_OFF"
                                                            ]
                                                          },
                                                          "one_off": {
                                                            "type": "object",
                                                            "additionalProperties": true,
                                                            "required": [
                                                              "amount",
                                                              "currency"
                                                            ],
                                                            "properties": {
                                                              "amount": {
                                                                "anyOf": [
                                                                  {
                                                                    "type": "string",
                                                                    "minLength": 1
                                                                  },
                                                                  {
                                                                    "type": "number"
                                                                  }
                                                                ]
                                                              },
                                                              "currency": {
                                                                "type": "string",
                                                                "enum": [
                                                                  "AUD",
                                                                  "CAD",
                                                                  "CHF",
                                                                  "EUR",
                                                                  "GBP",
                                                                  "INR",
                                                                  "MXN",
                                                                  "SEK",
                                                                  "USD"
                                                                ]
                                                              }
                                                            }
                                                          }
                                                        }
                                                      },
                                                      {
                                                        "type": "object",
                                                        "additionalProperties": false,
                                                        "required": [
                                                          "type",
                                                          "subscription"
                                                        ],
                                                        "properties": {
                                                          "type": {
                                                            "type": "string",
                                                            "enum": [
                                                              "SUBSCRIPTION"
                                                            ]
                                                          },
                                                          "subscription": {
                                                            "type": "object",
                                                            "additionalProperties": true
                                                          }
                                                        }
                                                      }
                                                    ]
                                                  },
                                                  "credentials": {
                                                    "type": "object",
                                                    "additionalProperties": false,
                                                    "required": [
                                                      "public_key",
                                                      "private_key"
                                                    ],
                                                    "properties": {
                                                      "public_key": {
                                                        "type": "string",
                                                        "minLength": 1,
                                                        "maxLength": 250
                                                      },
                                                      "private_key": {
                                                        "type": "string",
                                                        "minLength": 1,
                                                        "maxLength": 250
                                                      }
                                                    }
                                                  },
                                                  "customer": {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  "fields": {
                                                    "type": "object",
                                                    "additionalProperties": false,
                                                    "properties": {
                                                      "card_number": {
                                                        "type": "object",
                                                        "additionalProperties": false,
                                                        "properties": {
                                                          "label": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          },
                                                          "placeholder": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          }
                                                        }
                                                      },
                                                      "expiration_date": {
                                                        "type": "object",
                                                        "additionalProperties": false,
                                                        "properties": {
                                                          "label": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          },
                                                          "placeholder": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          }
                                                        }
                                                      },
                                                      "security_code": {
                                                        "type": "object",
                                                        "additionalProperties": false,
                                                        "properties": {
                                                          "label": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          },
                                                          "placeholder": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          }
                                                        }
                                                      },
                                                      "trustmarks": {
                                                        "type": "boolean"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "SOCIAL"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {}
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "TEL"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "allOf": [
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  }
                                                ]
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "TEXT"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "allOf": [
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  }
                                                ]
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "URL"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "default_value": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "placeholder": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 500
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                },
                                "next_node": {
                                  "anyOf": [
                                    {
                                      "type": "string",
                                      "format": "forms-custom-identifier"
                                    },
                                    {
                                      "type": "string",
                                      "enum": [
                                        "$ending"
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  },
                  "start": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "hidden_fields": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "key"
                          ],
                          "properties": {
                            "key": {
                              "type": "string",
                              "format": "forms-custom-identifier"
                            },
                            "value": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 500
                            }
                          }
                        }
                      },
                      "next_node": {
                        "anyOf": [
                          {
                            "type": "string",
                            "format": "forms-custom-identifier"
                          },
                          {
                            "type": "string",
                            "enum": [
                              "$ending"
                            ]
                          }
                        ]
                      },
                      "coordinates": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "x",
                          "y"
                        ],
                        "properties": {
                          "x": {
                            "type": "integer"
                          },
                          "y": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  },
                  "ending": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "redirection": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "target"
                        ],
                        "properties": {
                          "delay": {
                            "type": "integer"
                          },
                          "target": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1024
                          }
                        }
                      },
                      "after_submit": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "flow_id": {
                            "type": "string",
                            "maxLength": 30,
                            "format": "flow-id"
                          }
                        }
                      },
                      "coordinates": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "x",
                          "y"
                        ],
                        "properties": {
                          "x": {
                            "type": "integer"
                          },
                          "y": {
                            "type": "integer"
                          }
                        }
                      },
                      "resume_flow": {
                        "type": "boolean",
                        "enum": [
                          true
                        ]
                      }
                    }
                  },
                  "style": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "css": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 5000
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Form successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "name",
                    "created_at",
                    "updated_at"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "maxLength": 30,
                      "format": "form-id"
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 150
                    },
                    "messages": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "errors": {
                          "type": "object",
                          "additionalProperties": true
                        },
                        "custom": {
                          "type": "object",
                          "additionalProperties": true
                        }
                      }
                    },
                    "languages": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "primary": {
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 55
                        },
                        "default": {
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 55
                        }
                      }
                    },
                    "translations": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "nodes": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "anyOf": [
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "id",
                              "type",
                              "config"
                            ],
                            "properties": {
                              "id": {
                                "type": "string",
                                "format": "forms-custom-identifier"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "FLOW"
                                ]
                              },
                              "coordinates": {
                                "type": "object",
                                "additionalProperties": false,
                                "required": [
                                  "x",
                                  "y"
                                ],
                                "properties": {
                                  "x": {
                                    "type": "integer"
                                  },
                                  "y": {
                                    "type": "integer"
                                  }
                                }
                              },
                              "alias": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 150
                              },
                              "config": {
                                "type": "object",
                                "additionalProperties": false,
                                "required": [
                                  "flow_id"
                                ],
                                "properties": {
                                  "flow_id": {
                                    "type": "string",
                                    "maxLength": 30,
                                    "format": "flow-id"
                                  },
                                  "next_node": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "format": "forms-custom-identifier"
                                      },
                                      {
                                        "type": "string",
                                        "enum": [
                                          "$ending"
                                        ]
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "id",
                              "type"
                            ],
                            "properties": {
                              "id": {
                                "type": "string",
                                "format": "forms-custom-identifier"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "ROUTER"
                                ]
                              },
                              "coordinates": {
                                "type": "object",
                                "additionalProperties": false,
                                "required": [
                                  "x",
                                  "y"
                                ],
                                "properties": {
                                  "x": {
                                    "type": "integer"
                                  },
                                  "y": {
                                    "type": "integer"
                                  }
                                }
                              },
                              "alias": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 150
                              },
                              "config": {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "rules": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "additionalProperties": false,
                                      "required": [
                                        "id",
                                        "condition"
                                      ],
                                      "properties": {
                                        "id": {
                                          "type": "string",
                                          "format": "forms-custom-identifier"
                                        },
                                        "alias": {
                                          "type": "string",
                                          "minLength": 1,
                                          "maxLength": 150
                                        },
                                        "condition": {},
                                        "next_node": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "format": "forms-custom-identifier"
                                            },
                                            {
                                              "type": "string",
                                              "enum": [
                                                "$ending"
                                              ]
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  },
                                  "fallback": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "format": "forms-custom-identifier"
                                      },
                                      {
                                        "type": "string",
                                        "enum": [
                                          "$ending"
                                        ]
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "id",
                              "type"
                            ],
                            "properties": {
                              "id": {
                                "type": "string",
                                "format": "forms-custom-identifier"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "STEP"
                                ]
                              },
                              "coordinates": {
                                "type": "object",
                                "additionalProperties": false,
                                "required": [
                                  "x",
                                  "y"
                                ],
                                "properties": {
                                  "x": {
                                    "type": "integer"
                                  },
                                  "y": {
                                    "type": "integer"
                                  }
                                }
                              },
                              "alias": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 150
                              },
                              "config": {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "components": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "anyOf": [
                                        {
                                          "type": "object",
                                          "anyOf": [
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "DIVIDER"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "text": {
                                                      "type": "string",
                                                      "maxLength": 50
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "HTML"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "content": {
                                                      "type": "string",
                                                      "maxLength": 10000
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "IMAGE"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "src"
                                                  ],
                                                  "properties": {
                                                    "src": {
                                                      "type": "string",
                                                      "maxLength": 500
                                                    },
                                                    "position": {
                                                      "type": "string",
                                                      "enum": [
                                                        "LEFT",
                                                        "CENTER",
                                                        "RIGHT"
                                                      ]
                                                    },
                                                    "height": {
                                                      "type": "number"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "JUMP_BUTTON"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "text",
                                                    "next_node"
                                                  ],
                                                  "properties": {
                                                    "text": {
                                                      "type": "string",
                                                      "maxLength": 150
                                                    },
                                                    "next_node": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "format": "forms-custom-identifier"
                                                        },
                                                        {
                                                          "type": "string",
                                                          "enum": [
                                                            "$ending"
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    "style": {
                                                      "type": "object",
                                                      "additionalProperties": false,
                                                      "properties": {
                                                        "background_color": {
                                                          "type": "string",
                                                          "format": "forms-hex-color"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "RESEND_BUTTON"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "active_text",
                                                    "button_text",
                                                    "waiting_text",
                                                    "flow_id"
                                                  ],
                                                  "properties": {
                                                    "active_text": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 255
                                                    },
                                                    "button_text": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 255
                                                    },
                                                    "waiting_text": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 255
                                                    },
                                                    "text_alignment": {
                                                      "type": "string",
                                                      "enum": [
                                                        "LEFT",
                                                        "CENTER",
                                                        "RIGHT"
                                                      ]
                                                    },
                                                    "flow_id": {
                                                      "type": "string",
                                                      "maxLength": 30,
                                                      "format": "flow-id"
                                                    },
                                                    "max_attempts": {
                                                      "type": "number"
                                                    },
                                                    "waiting_time": {
                                                      "type": "number"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "NEXT_BUTTON"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "text"
                                                  ],
                                                  "properties": {
                                                    "text": {
                                                      "type": "string",
                                                      "maxLength": 150
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "PREVIOUS_BUTTON"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "text"
                                                  ],
                                                  "properties": {
                                                    "text": {
                                                      "type": "string",
                                                      "maxLength": 150
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "RICH_TEXT"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "content": {
                                                      "type": "string",
                                                      "maxLength": 10000
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "type": "object",
                                          "anyOf": [
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "AUTH0_VERIFIABLE_CREDENTIALS"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "url",
                                                    "alternate_text",
                                                    "access_token",
                                                    "verification_id"
                                                  ],
                                                  "properties": {
                                                    "url": {
                                                      "type": "string",
                                                      "maxLength": 2000
                                                    },
                                                    "size": {
                                                      "type": "number"
                                                    },
                                                    "alternate_text": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 255
                                                    },
                                                    "access_token": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 5000
                                                    },
                                                    "verification_id": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 255
                                                    },
                                                    "max_wait": {
                                                      "type": "number"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "GMAPS_ADDRESS"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "api_key"
                                                  ],
                                                  "properties": {
                                                    "api_key": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "RECAPTCHA"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "site_key",
                                                    "secret_key"
                                                  ],
                                                  "properties": {
                                                    "site_key": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "secret_key": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "type": "object",
                                          "anyOf": [
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "BOOLEAN"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "default_value": {
                                                      "type": "boolean"
                                                    },
                                                    "options": {
                                                      "type": "object",
                                                      "additionalProperties": false,
                                                      "properties": {
                                                        "true": {
                                                          "type": "string",
                                                          "minLength": 1,
                                                          "maxLength": 50
                                                        },
                                                        "false": {
                                                          "type": "string",
                                                          "minLength": 1,
                                                          "maxLength": 50
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "CARDS"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": true
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "CHOICE"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": true
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "CUSTOM"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "schema",
                                                    "code"
                                                  ],
                                                  "properties": {
                                                    "schema": {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    },
                                                    "code": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "css": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "params": {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "DATE"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": true
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "DROPDOWN"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": true
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "EMAIL"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "default_value": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "placeholder": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 500
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "FILE"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "multiple": {
                                                      "type": "boolean"
                                                    },
                                                    "storage": {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    },
                                                    "categories": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string",
                                                        "enum": [
                                                          "AUDIO",
                                                          "VIDEO",
                                                          "IMAGE",
                                                          "DOCUMENT",
                                                          "ARCHIVE"
                                                        ]
                                                      }
                                                    },
                                                    "extensions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string",
                                                        "maxLength": 50,
                                                        "format": "forms-file-extension"
                                                      }
                                                    },
                                                    "maxSize": {
                                                      "type": "integer"
                                                    },
                                                    "maxFiles": {
                                                      "type": "integer"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "LEGAL"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "text": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 10000
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "NUMBER"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "default_value": {
                                                      "type": "number"
                                                    },
                                                    "placeholder": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 500
                                                    },
                                                    "min_value": {
                                                      "type": "number"
                                                    },
                                                    "max_value": {
                                                      "type": "number"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "PASSWORD"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "hash": {
                                                      "type": "string",
                                                      "enum": [
                                                        "NONE",
                                                        "MD5",
                                                        "SHA1",
                                                        "SHA256",
                                                        "SHA512"
                                                      ]
                                                    },
                                                    "placeholder": {
                                                      "type": "string",
                                                      "maxLength": 500
                                                    },
                                                    "min_length": {
                                                      "type": "integer"
                                                    },
                                                    "max_length": {
                                                      "type": "integer"
                                                    },
                                                    "complexity": {
                                                      "type": "boolean"
                                                    },
                                                    "nist": {
                                                      "type": "boolean"
                                                    },
                                                    "strength_meter": {
                                                      "type": "boolean"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "PAYMENT"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "charge",
                                                    "credentials"
                                                  ],
                                                  "properties": {
                                                    "provider": {
                                                      "type": "string",
                                                      "enum": [
                                                        "STRIPE"
                                                      ]
                                                    },
                                                    "charge": {
                                                      "type": "object",
                                                      "anyOf": [
                                                        {
                                                          "type": "object",
                                                          "additionalProperties": false,
                                                          "required": [
                                                            "type",
                                                            "one_off"
                                                          ],
                                                          "properties": {
                                                            "type": {
                                                              "type": "string",
                                                              "enum": [
                                                                "ONE_OFF"
                                                              ]
                                                            },
                                                            "one_off": {
                                                              "type": "object",
                                                              "additionalProperties": true,
                                                              "required": [
                                                                "amount",
                                                                "currency"
                                                              ],
                                                              "properties": {
                                                                "amount": {
                                                                  "anyOf": [
                                                                    {
                                                                      "type": "string",
                                                                      "minLength": 1
                                                                    },
                                                                    {
                                                                      "type": "number"
                                                                    }
                                                                  ]
                                                                },
                                                                "currency": {
                                                                  "type": "string",
                                                                  "enum": [
                                                                    "AUD",
                                                                    "CAD",
                                                                    "CHF",
                                                                    "EUR",
                                                                    "GBP",
                                                                    "INR",
                                                                    "MXN",
                                                                    "SEK",
                                                                    "USD"
                                                                  ]
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "type": "object",
                                                          "additionalProperties": false,
                                                          "required": [
                                                            "type",
                                                            "subscription"
                                                          ],
                                                          "properties": {
                                                            "type": {
                                                              "type": "string",
                                                              "enum": [
                                                                "SUBSCRIPTION"
                                                              ]
                                                            },
                                                            "subscription": {
                                                              "type": "object",
                                                              "additionalProperties": true
                                                            }
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    "credentials": {
                                                      "type": "object",
                                                      "additionalProperties": false,
                                                      "required": [
                                                        "public_key",
                                                        "private_key"
                                                      ],
                                                      "properties": {
                                                        "public_key": {
                                                          "type": "string",
                                                          "minLength": 1,
                                                          "maxLength": 250
                                                        },
                                                        "private_key": {
                                                          "type": "string",
                                                          "minLength": 1,
                                                          "maxLength": 250
                                                        }
                                                      }
                                                    },
                                                    "customer": {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    },
                                                    "fields": {
                                                      "type": "object",
                                                      "additionalProperties": false,
                                                      "properties": {
                                                        "card_number": {
                                                          "type": "object",
                                                          "additionalProperties": false,
                                                          "properties": {
                                                            "label": {
                                                              "type": "string",
                                                              "minLength": 1,
                                                              "maxLength": 250
                                                            },
                                                            "placeholder": {
                                                              "type": "string",
                                                              "minLength": 1,
                                                              "maxLength": 250
                                                            }
                                                          }
                                                        },
                                                        "expiration_date": {
                                                          "type": "object",
                                                          "additionalProperties": false,
                                                          "properties": {
                                                            "label": {
                                                              "type": "string",
                                                              "minLength": 1,
                                                              "maxLength": 250
                                                            },
                                                            "placeholder": {
                                                              "type": "string",
                                                              "minLength": 1,
                                                              "maxLength": 250
                                                            }
                                                          }
                                                        },
                                                        "security_code": {
                                                          "type": "object",
                                                          "additionalProperties": false,
                                                          "properties": {
                                                            "label": {
                                                              "type": "string",
                                                              "minLength": 1,
                                                              "maxLength": 250
                                                            },
                                                            "placeholder": {
                                                              "type": "string",
                                                              "minLength": 1,
                                                              "maxLength": 250
                                                            }
                                                          }
                                                        },
                                                        "trustmarks": {
                                                          "type": "boolean"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "SOCIAL"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {}
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "TEL"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "allOf": [
                                                    {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    },
                                                    {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    },
                                                    {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    }
                                                  ]
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "TEXT"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "allOf": [
                                                    {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    },
                                                    {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    },
                                                    {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    }
                                                  ]
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "URL"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "default_value": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "placeholder": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 500
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  },
                                  "next_node": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "format": "forms-custom-identifier"
                                      },
                                      {
                                        "type": "string",
                                        "enum": [
                                          "$ending"
                                        ]
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    "start": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "hidden_fields": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "key"
                            ],
                            "properties": {
                              "key": {
                                "type": "string",
                                "format": "forms-custom-identifier"
                              },
                              "value": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 500
                              }
                            }
                          }
                        },
                        "next_node": {
                          "anyOf": [
                            {
                              "type": "string",
                              "format": "forms-custom-identifier"
                            },
                            {
                              "type": "string",
                              "enum": [
                                "$ending"
                              ]
                            }
                          ]
                        },
                        "coordinates": {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "x",
                            "y"
                          ],
                          "properties": {
                            "x": {
                              "type": "integer"
                            },
                            "y": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    },
                    "ending": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "redirection": {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "target"
                          ],
                          "properties": {
                            "delay": {
                              "type": "integer"
                            },
                            "target": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 1024
                            }
                          }
                        },
                        "after_submit": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "flow_id": {
                              "type": "string",
                              "maxLength": 30,
                              "format": "flow-id"
                            }
                          }
                        },
                        "coordinates": {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "x",
                            "y"
                          ],
                          "properties": {
                            "x": {
                              "type": "integer"
                            },
                            "y": {
                              "type": "integer"
                            }
                          }
                        },
                        "resume_flow": {
                          "type": "boolean",
                          "enum": [
                            true
                          ]
                        }
                      }
                    },
                    "style": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "css": {
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 5000
                        }
                      }
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "embedded_at": {
                      "type": "string",
                      "format": "date"
                    },
                    "submitted_at": {
                      "type": "string",
                      "format": "date"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: create:forms."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_forms",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:forms"
            ]
          }
        ]
      }
    },
    "/forms/{id}": {
      "get": {
        "summary": "Get a form",
        "tags": [
          "forms"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Form identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hydrate",
            "in": "query",
            "description": "hydration param",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "maxLength": 50,
                "enum": [
                  "flow_count",
                  "links"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Form successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "name",
                    "created_at",
                    "updated_at"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "maxLength": 30,
                      "format": "form-id"
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 150
                    },
                    "messages": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "errors": {
                          "type": "object",
                          "additionalProperties": true
                        },
                        "custom": {
                          "type": "object",
                          "additionalProperties": true
                        }
                      }
                    },
                    "languages": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "primary": {
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 55
                        },
                        "default": {
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 55
                        }
                      }
                    },
                    "translations": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "nodes": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "anyOf": [
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "id",
                              "type",
                              "config"
                            ],
                            "properties": {
                              "id": {
                                "type": "string",
                                "format": "forms-custom-identifier"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "FLOW"
                                ]
                              },
                              "coordinates": {
                                "type": "object",
                                "additionalProperties": false,
                                "required": [
                                  "x",
                                  "y"
                                ],
                                "properties": {
                                  "x": {
                                    "type": "integer"
                                  },
                                  "y": {
                                    "type": "integer"
                                  }
                                }
                              },
                              "alias": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 150
                              },
                              "config": {
                                "type": "object",
                                "additionalProperties": false,
                                "required": [
                                  "flow_id"
                                ],
                                "properties": {
                                  "flow_id": {
                                    "type": "string",
                                    "maxLength": 30,
                                    "format": "flow-id"
                                  },
                                  "next_node": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "format": "forms-custom-identifier"
                                      },
                                      {
                                        "type": "string",
                                        "enum": [
                                          "$ending"
                                        ]
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "id",
                              "type"
                            ],
                            "properties": {
                              "id": {
                                "type": "string",
                                "format": "forms-custom-identifier"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "ROUTER"
                                ]
                              },
                              "coordinates": {
                                "type": "object",
                                "additionalProperties": false,
                                "required": [
                                  "x",
                                  "y"
                                ],
                                "properties": {
                                  "x": {
                                    "type": "integer"
                                  },
                                  "y": {
                                    "type": "integer"
                                  }
                                }
                              },
                              "alias": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 150
                              },
                              "config": {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "rules": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "additionalProperties": false,
                                      "required": [
                                        "id",
                                        "condition"
                                      ],
                                      "properties": {
                                        "id": {
                                          "type": "string",
                                          "format": "forms-custom-identifier"
                                        },
                                        "alias": {
                                          "type": "string",
                                          "minLength": 1,
                                          "maxLength": 150
                                        },
                                        "condition": {},
                                        "next_node": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "format": "forms-custom-identifier"
                                            },
                                            {
                                              "type": "string",
                                              "enum": [
                                                "$ending"
                                              ]
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  },
                                  "fallback": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "format": "forms-custom-identifier"
                                      },
                                      {
                                        "type": "string",
                                        "enum": [
                                          "$ending"
                                        ]
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "id",
                              "type"
                            ],
                            "properties": {
                              "id": {
                                "type": "string",
                                "format": "forms-custom-identifier"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "STEP"
                                ]
                              },
                              "coordinates": {
                                "type": "object",
                                "additionalProperties": false,
                                "required": [
                                  "x",
                                  "y"
                                ],
                                "properties": {
                                  "x": {
                                    "type": "integer"
                                  },
                                  "y": {
                                    "type": "integer"
                                  }
                                }
                              },
                              "alias": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 150
                              },
                              "config": {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "components": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "anyOf": [
                                        {
                                          "type": "object",
                                          "anyOf": [
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "DIVIDER"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "text": {
                                                      "type": "string",
                                                      "maxLength": 50
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "HTML"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "content": {
                                                      "type": "string",
                                                      "maxLength": 10000
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "IMAGE"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "src"
                                                  ],
                                                  "properties": {
                                                    "src": {
                                                      "type": "string",
                                                      "maxLength": 500
                                                    },
                                                    "position": {
                                                      "type": "string",
                                                      "enum": [
                                                        "LEFT",
                                                        "CENTER",
                                                        "RIGHT"
                                                      ]
                                                    },
                                                    "height": {
                                                      "type": "number"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "JUMP_BUTTON"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "text",
                                                    "next_node"
                                                  ],
                                                  "properties": {
                                                    "text": {
                                                      "type": "string",
                                                      "maxLength": 150
                                                    },
                                                    "next_node": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "format": "forms-custom-identifier"
                                                        },
                                                        {
                                                          "type": "string",
                                                          "enum": [
                                                            "$ending"
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    "style": {
                                                      "type": "object",
                                                      "additionalProperties": false,
                                                      "properties": {
                                                        "background_color": {
                                                          "type": "string",
                                                          "format": "forms-hex-color"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "RESEND_BUTTON"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "active_text",
                                                    "button_text",
                                                    "waiting_text",
                                                    "flow_id"
                                                  ],
                                                  "properties": {
                                                    "active_text": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 255
                                                    },
                                                    "button_text": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 255
                                                    },
                                                    "waiting_text": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 255
                                                    },
                                                    "text_alignment": {
                                                      "type": "string",
                                                      "enum": [
                                                        "LEFT",
                                                        "CENTER",
                                                        "RIGHT"
                                                      ]
                                                    },
                                                    "flow_id": {
                                                      "type": "string",
                                                      "maxLength": 30,
                                                      "format": "flow-id"
                                                    },
                                                    "max_attempts": {
                                                      "type": "number"
                                                    },
                                                    "waiting_time": {
                                                      "type": "number"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "NEXT_BUTTON"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "text"
                                                  ],
                                                  "properties": {
                                                    "text": {
                                                      "type": "string",
                                                      "maxLength": 150
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "PREVIOUS_BUTTON"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "text"
                                                  ],
                                                  "properties": {
                                                    "text": {
                                                      "type": "string",
                                                      "maxLength": 150
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "RICH_TEXT"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "content": {
                                                      "type": "string",
                                                      "maxLength": 10000
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "type": "object",
                                          "anyOf": [
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "AUTH0_VERIFIABLE_CREDENTIALS"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "url",
                                                    "alternate_text",
                                                    "access_token",
                                                    "verification_id"
                                                  ],
                                                  "properties": {
                                                    "url": {
                                                      "type": "string",
                                                      "maxLength": 2000
                                                    },
                                                    "size": {
                                                      "type": "number"
                                                    },
                                                    "alternate_text": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 255
                                                    },
                                                    "access_token": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 5000
                                                    },
                                                    "verification_id": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 255
                                                    },
                                                    "max_wait": {
                                                      "type": "number"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "GMAPS_ADDRESS"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "api_key"
                                                  ],
                                                  "properties": {
                                                    "api_key": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "RECAPTCHA"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "site_key",
                                                    "secret_key"
                                                  ],
                                                  "properties": {
                                                    "site_key": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "secret_key": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "type": "object",
                                          "anyOf": [
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "BOOLEAN"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "default_value": {
                                                      "type": "boolean"
                                                    },
                                                    "options": {
                                                      "type": "object",
                                                      "additionalProperties": false,
                                                      "properties": {
                                                        "true": {
                                                          "type": "string",
                                                          "minLength": 1,
                                                          "maxLength": 50
                                                        },
                                                        "false": {
                                                          "type": "string",
                                                          "minLength": 1,
                                                          "maxLength": 50
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "CARDS"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": true
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "CHOICE"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": true
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "CUSTOM"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "schema",
                                                    "code"
                                                  ],
                                                  "properties": {
                                                    "schema": {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    },
                                                    "code": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "css": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "params": {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "DATE"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": true
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "DROPDOWN"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": true
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "EMAIL"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "default_value": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "placeholder": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 500
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "FILE"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "multiple": {
                                                      "type": "boolean"
                                                    },
                                                    "storage": {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    },
                                                    "categories": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string",
                                                        "enum": [
                                                          "AUDIO",
                                                          "VIDEO",
                                                          "IMAGE",
                                                          "DOCUMENT",
                                                          "ARCHIVE"
                                                        ]
                                                      }
                                                    },
                                                    "extensions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string",
                                                        "maxLength": 50,
                                                        "format": "forms-file-extension"
                                                      }
                                                    },
                                                    "maxSize": {
                                                      "type": "integer"
                                                    },
                                                    "maxFiles": {
                                                      "type": "integer"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "LEGAL"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "text": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 10000
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "NUMBER"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "default_value": {
                                                      "type": "number"
                                                    },
                                                    "placeholder": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 500
                                                    },
                                                    "min_value": {
                                                      "type": "number"
                                                    },
                                                    "max_value": {
                                                      "type": "number"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "PASSWORD"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "hash": {
                                                      "type": "string",
                                                      "enum": [
                                                        "NONE",
                                                        "MD5",
                                                        "SHA1",
                                                        "SHA256",
                                                        "SHA512"
                                                      ]
                                                    },
                                                    "placeholder": {
                                                      "type": "string",
                                                      "maxLength": 500
                                                    },
                                                    "min_length": {
                                                      "type": "integer"
                                                    },
                                                    "max_length": {
                                                      "type": "integer"
                                                    },
                                                    "complexity": {
                                                      "type": "boolean"
                                                    },
                                                    "nist": {
                                                      "type": "boolean"
                                                    },
                                                    "strength_meter": {
                                                      "type": "boolean"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "PAYMENT"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "charge",
                                                    "credentials"
                                                  ],
                                                  "properties": {
                                                    "provider": {
                                                      "type": "string",
                                                      "enum": [
                                                        "STRIPE"
                                                      ]
                                                    },
                                                    "charge": {
                                                      "type": "object",
                                                      "anyOf": [
                                                        {
                                                          "type": "object",
                                                          "additionalProperties": false,
                                                          "required": [
                                                            "type",
                                                            "one_off"
                                                          ],
                                                          "properties": {
                                                            "type": {
                                                              "type": "string",
                                                              "enum": [
                                                                "ONE_OFF"
                                                              ]
                                                            },
                                                            "one_off": {
                                                              "type": "object",
                                                              "additionalProperties": true,
                                                              "required": [
                                                                "amount",
                                                                "currency"
                                                              ],
                                                              "properties": {
                                                                "amount": {
                                                                  "anyOf": [
                                                                    {
                                                                      "type": "string",
                                                                      "minLength": 1
                                                                    },
                                                                    {
                                                                      "type": "number"
                                                                    }
                                                                  ]
                                                                },
                                                                "currency": {
                                                                  "type": "string",
                                                                  "enum": [
                                                                    "AUD",
                                                                    "CAD",
                                                                    "CHF",
                                                                    "EUR",
                                                                    "GBP",
                                                                    "INR",
                                                                    "MXN",
                                                                    "SEK",
                                                                    "USD"
                                                                  ]
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "type": "object",
                                                          "additionalProperties": false,
                                                          "required": [
                                                            "type",
                                                            "subscription"
                                                          ],
                                                          "properties": {
                                                            "type": {
                                                              "type": "string",
                                                              "enum": [
                                                                "SUBSCRIPTION"
                                                              ]
                                                            },
                                                            "subscription": {
                                                              "type": "object",
                                                              "additionalProperties": true
                                                            }
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    "credentials": {
                                                      "type": "object",
                                                      "additionalProperties": false,
                                                      "required": [
                                                        "public_key",
                                                        "private_key"
                                                      ],
                                                      "properties": {
                                                        "public_key": {
                                                          "type": "string",
                                                          "minLength": 1,
                                                          "maxLength": 250
                                                        },
                                                        "private_key": {
                                                          "type": "string",
                                                          "minLength": 1,
                                                          "maxLength": 250
                                                        }
                                                      }
                                                    },
                                                    "customer": {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    },
                                                    "fields": {
                                                      "type": "object",
                                                      "additionalProperties": false,
                                                      "properties": {
                                                        "card_number": {
                                                          "type": "object",
                                                          "additionalProperties": false,
                                                          "properties": {
                                                            "label": {
                                                              "type": "string",
                                                              "minLength": 1,
                                                              "maxLength": 250
                                                            },
                                                            "placeholder": {
                                                              "type": "string",
                                                              "minLength": 1,
                                                              "maxLength": 250
                                                            }
                                                          }
                                                        },
                                                        "expiration_date": {
                                                          "type": "object",
                                                          "additionalProperties": false,
                                                          "properties": {
                                                            "label": {
                                                              "type": "string",
                                                              "minLength": 1,
                                                              "maxLength": 250
                                                            },
                                                            "placeholder": {
                                                              "type": "string",
                                                              "minLength": 1,
                                                              "maxLength": 250
                                                            }
                                                          }
                                                        },
                                                        "security_code": {
                                                          "type": "object",
                                                          "additionalProperties": false,
                                                          "properties": {
                                                            "label": {
                                                              "type": "string",
                                                              "minLength": 1,
                                                              "maxLength": 250
                                                            },
                                                            "placeholder": {
                                                              "type": "string",
                                                              "minLength": 1,
                                                              "maxLength": 250
                                                            }
                                                          }
                                                        },
                                                        "trustmarks": {
                                                          "type": "boolean"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "SOCIAL"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {}
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "TEL"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "allOf": [
                                                    {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    },
                                                    {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    },
                                                    {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    }
                                                  ]
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "TEXT"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "allOf": [
                                                    {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    },
                                                    {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    },
                                                    {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    }
                                                  ]
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "URL"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "default_value": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "placeholder": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 500
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  },
                                  "next_node": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "format": "forms-custom-identifier"
                                      },
                                      {
                                        "type": "string",
                                        "enum": [
                                          "$ending"
                                        ]
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    "start": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "hidden_fields": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "key"
                            ],
                            "properties": {
                              "key": {
                                "type": "string",
                                "format": "forms-custom-identifier"
                              },
                              "value": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 500
                              }
                            }
                          }
                        },
                        "next_node": {
                          "anyOf": [
                            {
                              "type": "string",
                              "format": "forms-custom-identifier"
                            },
                            {
                              "type": "string",
                              "enum": [
                                "$ending"
                              ]
                            }
                          ]
                        },
                        "coordinates": {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "x",
                            "y"
                          ],
                          "properties": {
                            "x": {
                              "type": "integer"
                            },
                            "y": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    },
                    "ending": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "redirection": {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "target"
                          ],
                          "properties": {
                            "delay": {
                              "type": "integer"
                            },
                            "target": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 1024
                            }
                          }
                        },
                        "after_submit": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "flow_id": {
                              "type": "string",
                              "maxLength": 30,
                              "format": "flow-id"
                            }
                          }
                        },
                        "coordinates": {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "x",
                            "y"
                          ],
                          "properties": {
                            "x": {
                              "type": "integer"
                            },
                            "y": {
                              "type": "integer"
                            }
                          }
                        },
                        "resume_flow": {
                          "type": "boolean",
                          "enum": [
                            true
                          ]
                        }
                      }
                    },
                    "style": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "css": {
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 5000
                        }
                      }
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "embedded_at": {
                      "type": "string",
                      "format": "date"
                    },
                    "submitted_at": {
                      "type": "string",
                      "format": "date"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:forms."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_forms_by_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:forms"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a form",
        "tags": [
          "forms"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Form id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Form successfully deleted."
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause.",
            "x-description-1": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: delete:forms."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_forms_by_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:forms"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update a form",
        "tags": [
          "forms"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Form identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 150
                  },
                  "messages": {
                    "type": "object",
                    "nullable": true,
                    "additionalProperties": false,
                    "properties": {
                      "errors": {
                        "type": "object",
                        "additionalProperties": true
                      },
                      "custom": {
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  },
                  "languages": {
                    "type": "object",
                    "nullable": true,
                    "additionalProperties": false,
                    "properties": {
                      "primary": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 55
                      },
                      "default": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 55
                      }
                    }
                  },
                  "translations": {
                    "type": "object",
                    "nullable": true,
                    "additionalProperties": true
                  },
                  "nodes": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "anyOf": [
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "id",
                            "type",
                            "config"
                          ],
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "forms-custom-identifier"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "FLOW"
                              ]
                            },
                            "coordinates": {
                              "type": "object",
                              "additionalProperties": false,
                              "required": [
                                "x",
                                "y"
                              ],
                              "properties": {
                                "x": {
                                  "type": "integer"
                                },
                                "y": {
                                  "type": "integer"
                                }
                              }
                            },
                            "alias": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 150
                            },
                            "config": {
                              "type": "object",
                              "additionalProperties": false,
                              "required": [
                                "flow_id"
                              ],
                              "properties": {
                                "flow_id": {
                                  "type": "string",
                                  "maxLength": 30,
                                  "format": "flow-id"
                                },
                                "next_node": {
                                  "anyOf": [
                                    {
                                      "type": "string",
                                      "format": "forms-custom-identifier"
                                    },
                                    {
                                      "type": "string",
                                      "enum": [
                                        "$ending"
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        },
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "id",
                            "type"
                          ],
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "forms-custom-identifier"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "ROUTER"
                              ]
                            },
                            "coordinates": {
                              "type": "object",
                              "additionalProperties": false,
                              "required": [
                                "x",
                                "y"
                              ],
                              "properties": {
                                "x": {
                                  "type": "integer"
                                },
                                "y": {
                                  "type": "integer"
                                }
                              }
                            },
                            "alias": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 150
                            },
                            "config": {
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "rules": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "condition"
                                    ],
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "format": "forms-custom-identifier"
                                      },
                                      "alias": {
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 150
                                      },
                                      "condition": {},
                                      "next_node": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "format": "forms-custom-identifier"
                                          },
                                          {
                                            "type": "string",
                                            "enum": [
                                              "$ending"
                                            ]
                                          }
                                        ]
                                      }
                                    }
                                  }
                                },
                                "fallback": {
                                  "anyOf": [
                                    {
                                      "type": "string",
                                      "format": "forms-custom-identifier"
                                    },
                                    {
                                      "type": "string",
                                      "enum": [
                                        "$ending"
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        },
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "id",
                            "type"
                          ],
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "forms-custom-identifier"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "STEP"
                              ]
                            },
                            "coordinates": {
                              "type": "object",
                              "additionalProperties": false,
                              "required": [
                                "x",
                                "y"
                              ],
                              "properties": {
                                "x": {
                                  "type": "integer"
                                },
                                "y": {
                                  "type": "integer"
                                }
                              }
                            },
                            "alias": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 150
                            },
                            "config": {
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "components": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "anyOf": [
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "DIVIDER"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "text": {
                                                    "type": "string",
                                                    "maxLength": 50
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "HTML"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "content": {
                                                    "type": "string",
                                                    "maxLength": 10000
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "IMAGE"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "src"
                                                ],
                                                "properties": {
                                                  "src": {
                                                    "type": "string",
                                                    "maxLength": 500
                                                  },
                                                  "position": {
                                                    "type": "string",
                                                    "enum": [
                                                      "LEFT",
                                                      "CENTER",
                                                      "RIGHT"
                                                    ]
                                                  },
                                                  "height": {
                                                    "type": "number"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "JUMP_BUTTON"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "text",
                                                  "next_node"
                                                ],
                                                "properties": {
                                                  "text": {
                                                    "type": "string",
                                                    "maxLength": 150
                                                  },
                                                  "next_node": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "format": "forms-custom-identifier"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "enum": [
                                                          "$ending"
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  "style": {
                                                    "type": "object",
                                                    "additionalProperties": false,
                                                    "properties": {
                                                      "background_color": {
                                                        "type": "string",
                                                        "format": "forms-hex-color"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "RESEND_BUTTON"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "active_text",
                                                  "button_text",
                                                  "waiting_text",
                                                  "flow_id"
                                                ],
                                                "properties": {
                                                  "active_text": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 255
                                                  },
                                                  "button_text": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 255
                                                  },
                                                  "waiting_text": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 255
                                                  },
                                                  "text_alignment": {
                                                    "type": "string",
                                                    "enum": [
                                                      "LEFT",
                                                      "CENTER",
                                                      "RIGHT"
                                                    ]
                                                  },
                                                  "flow_id": {
                                                    "type": "string",
                                                    "maxLength": 30,
                                                    "format": "flow-id"
                                                  },
                                                  "max_attempts": {
                                                    "type": "number"
                                                  },
                                                  "waiting_time": {
                                                    "type": "number"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "NEXT_BUTTON"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "text"
                                                ],
                                                "properties": {
                                                  "text": {
                                                    "type": "string",
                                                    "maxLength": 150
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "PREVIOUS_BUTTON"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "text"
                                                ],
                                                "properties": {
                                                  "text": {
                                                    "type": "string",
                                                    "maxLength": 150
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "RICH_TEXT"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "content": {
                                                    "type": "string",
                                                    "maxLength": 10000
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "type": "object",
                                        "anyOf": [
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "AUTH0_VERIFIABLE_CREDENTIALS"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "url",
                                                  "alternate_text",
                                                  "access_token",
                                                  "verification_id"
                                                ],
                                                "properties": {
                                                  "url": {
                                                    "type": "string",
                                                    "maxLength": 2000
                                                  },
                                                  "size": {
                                                    "type": "number"
                                                  },
                                                  "alternate_text": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 255
                                                  },
                                                  "access_token": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 5000
                                                  },
                                                  "verification_id": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 255
                                                  },
                                                  "max_wait": {
                                                    "type": "number"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "GMAPS_ADDRESS"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "api_key"
                                                ],
                                                "properties": {
                                                  "api_key": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "RECAPTCHA"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "site_key",
                                                  "secret_key"
                                                ],
                                                "properties": {
                                                  "site_key": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "secret_key": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "type": "object",
                                        "anyOf": [
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "BOOLEAN"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "default_value": {
                                                    "type": "boolean"
                                                  },
                                                  "options": {
                                                    "type": "object",
                                                    "additionalProperties": false,
                                                    "properties": {
                                                      "true": {
                                                        "type": "string",
                                                        "minLength": 1,
                                                        "maxLength": 50
                                                      },
                                                      "false": {
                                                        "type": "string",
                                                        "minLength": 1,
                                                        "maxLength": 50
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "CARDS"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": true
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "CHOICE"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": true
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "CUSTOM"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "schema",
                                                  "code"
                                                ],
                                                "properties": {
                                                  "schema": {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  "code": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "css": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "params": {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "DATE"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": true
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "DROPDOWN"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": true
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "EMAIL"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "default_value": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "placeholder": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 500
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "FILE"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "multiple": {
                                                    "type": "boolean"
                                                  },
                                                  "storage": {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  "categories": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string",
                                                      "enum": [
                                                        "AUDIO",
                                                        "VIDEO",
                                                        "IMAGE",
                                                        "DOCUMENT",
                                                        "ARCHIVE"
                                                      ]
                                                    }
                                                  },
                                                  "extensions": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string",
                                                      "maxLength": 50,
                                                      "format": "forms-file-extension"
                                                    }
                                                  },
                                                  "maxSize": {
                                                    "type": "integer"
                                                  },
                                                  "maxFiles": {
                                                    "type": "integer"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "LEGAL"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "text": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 10000
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "NUMBER"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "default_value": {
                                                    "type": "number"
                                                  },
                                                  "placeholder": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 500
                                                  },
                                                  "min_value": {
                                                    "type": "number"
                                                  },
                                                  "max_value": {
                                                    "type": "number"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "PASSWORD"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "hash": {
                                                    "type": "string",
                                                    "enum": [
                                                      "NONE",
                                                      "MD5",
                                                      "SHA1",
                                                      "SHA256",
                                                      "SHA512"
                                                    ]
                                                  },
                                                  "placeholder": {
                                                    "type": "string",
                                                    "maxLength": 500
                                                  },
                                                  "min_length": {
                                                    "type": "integer"
                                                  },
                                                  "max_length": {
                                                    "type": "integer"
                                                  },
                                                  "complexity": {
                                                    "type": "boolean"
                                                  },
                                                  "nist": {
                                                    "type": "boolean"
                                                  },
                                                  "strength_meter": {
                                                    "type": "boolean"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "PAYMENT"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "charge",
                                                  "credentials"
                                                ],
                                                "properties": {
                                                  "provider": {
                                                    "type": "string",
                                                    "enum": [
                                                      "STRIPE"
                                                    ]
                                                  },
                                                  "charge": {
                                                    "type": "object",
                                                    "anyOf": [
                                                      {
                                                        "type": "object",
                                                        "additionalProperties": false,
                                                        "required": [
                                                          "type",
                                                          "one_off"
                                                        ],
                                                        "properties": {
                                                          "type": {
                                                            "type": "string",
                                                            "enum": [
                                                              "ONE_OFF"
                                                            ]
                                                          },
                                                          "one_off": {
                                                            "type": "object",
                                                            "additionalProperties": true,
                                                            "required": [
                                                              "amount",
                                                              "currency"
                                                            ],
                                                            "properties": {
                                                              "amount": {
                                                                "anyOf": [
                                                                  {
                                                                    "type": "string",
                                                                    "minLength": 1
                                                                  },
                                                                  {
                                                                    "type": "number"
                                                                  }
                                                                ]
                                                              },
                                                              "currency": {
                                                                "type": "string",
                                                                "enum": [
                                                                  "AUD",
                                                                  "CAD",
                                                                  "CHF",
                                                                  "EUR",
                                                                  "GBP",
                                                                  "INR",
                                                                  "MXN",
                                                                  "SEK",
                                                                  "USD"
                                                                ]
                                                              }
                                                            }
                                                          }
                                                        }
                                                      },
                                                      {
                                                        "type": "object",
                                                        "additionalProperties": false,
                                                        "required": [
                                                          "type",
                                                          "subscription"
                                                        ],
                                                        "properties": {
                                                          "type": {
                                                            "type": "string",
                                                            "enum": [
                                                              "SUBSCRIPTION"
                                                            ]
                                                          },
                                                          "subscription": {
                                                            "type": "object",
                                                            "additionalProperties": true
                                                          }
                                                        }
                                                      }
                                                    ]
                                                  },
                                                  "credentials": {
                                                    "type": "object",
                                                    "additionalProperties": false,
                                                    "required": [
                                                      "public_key",
                                                      "private_key"
                                                    ],
                                                    "properties": {
                                                      "public_key": {
                                                        "type": "string",
                                                        "minLength": 1,
                                                        "maxLength": 250
                                                      },
                                                      "private_key": {
                                                        "type": "string",
                                                        "minLength": 1,
                                                        "maxLength": 250
                                                      }
                                                    }
                                                  },
                                                  "customer": {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  "fields": {
                                                    "type": "object",
                                                    "additionalProperties": false,
                                                    "properties": {
                                                      "card_number": {
                                                        "type": "object",
                                                        "additionalProperties": false,
                                                        "properties": {
                                                          "label": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          },
                                                          "placeholder": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          }
                                                        }
                                                      },
                                                      "expiration_date": {
                                                        "type": "object",
                                                        "additionalProperties": false,
                                                        "properties": {
                                                          "label": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          },
                                                          "placeholder": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          }
                                                        }
                                                      },
                                                      "security_code": {
                                                        "type": "object",
                                                        "additionalProperties": false,
                                                        "properties": {
                                                          "label": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          },
                                                          "placeholder": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          }
                                                        }
                                                      },
                                                      "trustmarks": {
                                                        "type": "boolean"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "SOCIAL"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {}
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "TEL"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "allOf": [
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  }
                                                ]
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "TEXT"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "allOf": [
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  }
                                                ]
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "URL"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "default_value": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "placeholder": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 500
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                },
                                "next_node": {
                                  "anyOf": [
                                    {
                                      "type": "string",
                                      "format": "forms-custom-identifier"
                                    },
                                    {
                                      "type": "string",
                                      "enum": [
                                        "$ending"
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  },
                  "start": {
                    "type": "object",
                    "nullable": true,
                    "additionalProperties": false,
                    "properties": {
                      "hidden_fields": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "key"
                          ],
                          "properties": {
                            "key": {
                              "type": "string",
                              "format": "forms-custom-identifier"
                            },
                            "value": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 500
                            }
                          }
                        }
                      },
                      "next_node": {
                        "anyOf": [
                          {
                            "type": "string",
                            "format": "forms-custom-identifier"
                          },
                          {
                            "type": "string",
                            "enum": [
                              "$ending"
                            ]
                          }
                        ]
                      },
                      "coordinates": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "x",
                          "y"
                        ],
                        "properties": {
                          "x": {
                            "type": "integer"
                          },
                          "y": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  },
                  "ending": {
                    "type": "object",
                    "nullable": true,
                    "additionalProperties": false,
                    "properties": {
                      "redirection": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "target"
                        ],
                        "properties": {
                          "delay": {
                            "type": "integer"
                          },
                          "target": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1024
                          }
                        }
                      },
                      "after_submit": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "flow_id": {
                            "type": "string",
                            "maxLength": 30,
                            "format": "flow-id"
                          }
                        }
                      },
                      "coordinates": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "x",
                          "y"
                        ],
                        "properties": {
                          "x": {
                            "type": "integer"
                          },
                          "y": {
                            "type": "integer"
                          }
                        }
                      },
                      "resume_flow": {
                        "type": "boolean",
                        "enum": [
                          true
                        ]
                      }
                    }
                  },
                  "style": {
                    "type": "object",
                    "nullable": true,
                    "additionalProperties": false,
                    "properties": {
                      "css": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 5000
                      }
                    }
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 150
                  },
                  "messages": {
                    "type": "object",
                    "nullable": true,
                    "additionalProperties": false,
                    "properties": {
                      "errors": {
                        "type": "object",
                        "additionalProperties": true
                      },
                      "custom": {
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  },
                  "languages": {
                    "type": "object",
                    "nullable": true,
                    "additionalProperties": false,
                    "properties": {
                      "primary": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 55
                      },
                      "default": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 55
                      }
                    }
                  },
                  "translations": {
                    "type": "object",
                    "nullable": true,
                    "additionalProperties": true
                  },
                  "nodes": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "anyOf": [
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "id",
                            "type",
                            "config"
                          ],
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "forms-custom-identifier"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "FLOW"
                              ]
                            },
                            "coordinates": {
                              "type": "object",
                              "additionalProperties": false,
                              "required": [
                                "x",
                                "y"
                              ],
                              "properties": {
                                "x": {
                                  "type": "integer"
                                },
                                "y": {
                                  "type": "integer"
                                }
                              }
                            },
                            "alias": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 150
                            },
                            "config": {
                              "type": "object",
                              "additionalProperties": false,
                              "required": [
                                "flow_id"
                              ],
                              "properties": {
                                "flow_id": {
                                  "type": "string",
                                  "maxLength": 30,
                                  "format": "flow-id"
                                },
                                "next_node": {
                                  "anyOf": [
                                    {
                                      "type": "string",
                                      "format": "forms-custom-identifier"
                                    },
                                    {
                                      "type": "string",
                                      "enum": [
                                        "$ending"
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        },
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "id",
                            "type"
                          ],
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "forms-custom-identifier"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "ROUTER"
                              ]
                            },
                            "coordinates": {
                              "type": "object",
                              "additionalProperties": false,
                              "required": [
                                "x",
                                "y"
                              ],
                              "properties": {
                                "x": {
                                  "type": "integer"
                                },
                                "y": {
                                  "type": "integer"
                                }
                              }
                            },
                            "alias": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 150
                            },
                            "config": {
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "rules": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "condition"
                                    ],
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "format": "forms-custom-identifier"
                                      },
                                      "alias": {
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 150
                                      },
                                      "condition": {},
                                      "next_node": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "format": "forms-custom-identifier"
                                          },
                                          {
                                            "type": "string",
                                            "enum": [
                                              "$ending"
                                            ]
                                          }
                                        ]
                                      }
                                    }
                                  }
                                },
                                "fallback": {
                                  "anyOf": [
                                    {
                                      "type": "string",
                                      "format": "forms-custom-identifier"
                                    },
                                    {
                                      "type": "string",
                                      "enum": [
                                        "$ending"
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        },
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "id",
                            "type"
                          ],
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "forms-custom-identifier"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "STEP"
                              ]
                            },
                            "coordinates": {
                              "type": "object",
                              "additionalProperties": false,
                              "required": [
                                "x",
                                "y"
                              ],
                              "properties": {
                                "x": {
                                  "type": "integer"
                                },
                                "y": {
                                  "type": "integer"
                                }
                              }
                            },
                            "alias": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 150
                            },
                            "config": {
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "components": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "anyOf": [
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "DIVIDER"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "text": {
                                                    "type": "string",
                                                    "maxLength": 50
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "HTML"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "content": {
                                                    "type": "string",
                                                    "maxLength": 10000
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "IMAGE"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "src"
                                                ],
                                                "properties": {
                                                  "src": {
                                                    "type": "string",
                                                    "maxLength": 500
                                                  },
                                                  "position": {
                                                    "type": "string",
                                                    "enum": [
                                                      "LEFT",
                                                      "CENTER",
                                                      "RIGHT"
                                                    ]
                                                  },
                                                  "height": {
                                                    "type": "number"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "JUMP_BUTTON"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "text",
                                                  "next_node"
                                                ],
                                                "properties": {
                                                  "text": {
                                                    "type": "string",
                                                    "maxLength": 150
                                                  },
                                                  "next_node": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "format": "forms-custom-identifier"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "enum": [
                                                          "$ending"
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  "style": {
                                                    "type": "object",
                                                    "additionalProperties": false,
                                                    "properties": {
                                                      "background_color": {
                                                        "type": "string",
                                                        "format": "forms-hex-color"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "RESEND_BUTTON"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "active_text",
                                                  "button_text",
                                                  "waiting_text",
                                                  "flow_id"
                                                ],
                                                "properties": {
                                                  "active_text": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 255
                                                  },
                                                  "button_text": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 255
                                                  },
                                                  "waiting_text": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 255
                                                  },
                                                  "text_alignment": {
                                                    "type": "string",
                                                    "enum": [
                                                      "LEFT",
                                                      "CENTER",
                                                      "RIGHT"
                                                    ]
                                                  },
                                                  "flow_id": {
                                                    "type": "string",
                                                    "maxLength": 30,
                                                    "format": "flow-id"
                                                  },
                                                  "max_attempts": {
                                                    "type": "number"
                                                  },
                                                  "waiting_time": {
                                                    "type": "number"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "NEXT_BUTTON"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "text"
                                                ],
                                                "properties": {
                                                  "text": {
                                                    "type": "string",
                                                    "maxLength": 150
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "PREVIOUS_BUTTON"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "text"
                                                ],
                                                "properties": {
                                                  "text": {
                                                    "type": "string",
                                                    "maxLength": 150
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "RICH_TEXT"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "content": {
                                                    "type": "string",
                                                    "maxLength": 10000
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "type": "object",
                                        "anyOf": [
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "AUTH0_VERIFIABLE_CREDENTIALS"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "url",
                                                  "alternate_text",
                                                  "access_token",
                                                  "verification_id"
                                                ],
                                                "properties": {
                                                  "url": {
                                                    "type": "string",
                                                    "maxLength": 2000
                                                  },
                                                  "size": {
                                                    "type": "number"
                                                  },
                                                  "alternate_text": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 255
                                                  },
                                                  "access_token": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 5000
                                                  },
                                                  "verification_id": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 255
                                                  },
                                                  "max_wait": {
                                                    "type": "number"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "GMAPS_ADDRESS"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "api_key"
                                                ],
                                                "properties": {
                                                  "api_key": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "RECAPTCHA"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "site_key",
                                                  "secret_key"
                                                ],
                                                "properties": {
                                                  "site_key": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "secret_key": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "type": "object",
                                        "anyOf": [
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "BOOLEAN"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "default_value": {
                                                    "type": "boolean"
                                                  },
                                                  "options": {
                                                    "type": "object",
                                                    "additionalProperties": false,
                                                    "properties": {
                                                      "true": {
                                                        "type": "string",
                                                        "minLength": 1,
                                                        "maxLength": 50
                                                      },
                                                      "false": {
                                                        "type": "string",
                                                        "minLength": 1,
                                                        "maxLength": 50
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "CARDS"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": true
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "CHOICE"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": true
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "CUSTOM"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "schema",
                                                  "code"
                                                ],
                                                "properties": {
                                                  "schema": {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  "code": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "css": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "params": {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "DATE"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": true
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "DROPDOWN"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": true
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "EMAIL"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "default_value": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "placeholder": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 500
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "FILE"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "multiple": {
                                                    "type": "boolean"
                                                  },
                                                  "storage": {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  "categories": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string",
                                                      "enum": [
                                                        "AUDIO",
                                                        "VIDEO",
                                                        "IMAGE",
                                                        "DOCUMENT",
                                                        "ARCHIVE"
                                                      ]
                                                    }
                                                  },
                                                  "extensions": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string",
                                                      "maxLength": 50,
                                                      "format": "forms-file-extension"
                                                    }
                                                  },
                                                  "maxSize": {
                                                    "type": "integer"
                                                  },
                                                  "maxFiles": {
                                                    "type": "integer"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "LEGAL"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "text": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 10000
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "NUMBER"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "default_value": {
                                                    "type": "number"
                                                  },
                                                  "placeholder": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 500
                                                  },
                                                  "min_value": {
                                                    "type": "number"
                                                  },
                                                  "max_value": {
                                                    "type": "number"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "PASSWORD"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "hash": {
                                                    "type": "string",
                                                    "enum": [
                                                      "NONE",
                                                      "MD5",
                                                      "SHA1",
                                                      "SHA256",
                                                      "SHA512"
                                                    ]
                                                  },
                                                  "placeholder": {
                                                    "type": "string",
                                                    "maxLength": 500
                                                  },
                                                  "min_length": {
                                                    "type": "integer"
                                                  },
                                                  "max_length": {
                                                    "type": "integer"
                                                  },
                                                  "complexity": {
                                                    "type": "boolean"
                                                  },
                                                  "nist": {
                                                    "type": "boolean"
                                                  },
                                                  "strength_meter": {
                                                    "type": "boolean"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "PAYMENT"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "charge",
                                                  "credentials"
                                                ],
                                                "properties": {
                                                  "provider": {
                                                    "type": "string",
                                                    "enum": [
                                                      "STRIPE"
                                                    ]
                                                  },
                                                  "charge": {
                                                    "type": "object",
                                                    "anyOf": [
                                                      {
                                                        "type": "object",
                                                        "additionalProperties": false,
                                                        "required": [
                                                          "type",
                                                          "one_off"
                                                        ],
                                                        "properties": {
                                                          "type": {
                                                            "type": "string",
                                                            "enum": [
                                                              "ONE_OFF"
                                                            ]
                                                          },
                                                          "one_off": {
                                                            "type": "object",
                                                            "additionalProperties": true,
                                                            "required": [
                                                              "amount",
                                                              "currency"
                                                            ],
                                                            "properties": {
                                                              "amount": {
                                                                "anyOf": [
                                                                  {
                                                                    "type": "string",
                                                                    "minLength": 1
                                                                  },
                                                                  {
                                                                    "type": "number"
                                                                  }
                                                                ]
                                                              },
                                                              "currency": {
                                                                "type": "string",
                                                                "enum": [
                                                                  "AUD",
                                                                  "CAD",
                                                                  "CHF",
                                                                  "EUR",
                                                                  "GBP",
                                                                  "INR",
                                                                  "MXN",
                                                                  "SEK",
                                                                  "USD"
                                                                ]
                                                              }
                                                            }
                                                          }
                                                        }
                                                      },
                                                      {
                                                        "type": "object",
                                                        "additionalProperties": false,
                                                        "required": [
                                                          "type",
                                                          "subscription"
                                                        ],
                                                        "properties": {
                                                          "type": {
                                                            "type": "string",
                                                            "enum": [
                                                              "SUBSCRIPTION"
                                                            ]
                                                          },
                                                          "subscription": {
                                                            "type": "object",
                                                            "additionalProperties": true
                                                          }
                                                        }
                                                      }
                                                    ]
                                                  },
                                                  "credentials": {
                                                    "type": "object",
                                                    "additionalProperties": false,
                                                    "required": [
                                                      "public_key",
                                                      "private_key"
                                                    ],
                                                    "properties": {
                                                      "public_key": {
                                                        "type": "string",
                                                        "minLength": 1,
                                                        "maxLength": 250
                                                      },
                                                      "private_key": {
                                                        "type": "string",
                                                        "minLength": 1,
                                                        "maxLength": 250
                                                      }
                                                    }
                                                  },
                                                  "customer": {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  "fields": {
                                                    "type": "object",
                                                    "additionalProperties": false,
                                                    "properties": {
                                                      "card_number": {
                                                        "type": "object",
                                                        "additionalProperties": false,
                                                        "properties": {
                                                          "label": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          },
                                                          "placeholder": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          }
                                                        }
                                                      },
                                                      "expiration_date": {
                                                        "type": "object",
                                                        "additionalProperties": false,
                                                        "properties": {
                                                          "label": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          },
                                                          "placeholder": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          }
                                                        }
                                                      },
                                                      "security_code": {
                                                        "type": "object",
                                                        "additionalProperties": false,
                                                        "properties": {
                                                          "label": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          },
                                                          "placeholder": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          }
                                                        }
                                                      },
                                                      "trustmarks": {
                                                        "type": "boolean"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "SOCIAL"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {}
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "TEL"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "allOf": [
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  }
                                                ]
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "TEXT"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "allOf": [
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  }
                                                ]
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "URL"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "default_value": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "placeholder": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 500
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                },
                                "next_node": {
                                  "anyOf": [
                                    {
                                      "type": "string",
                                      "format": "forms-custom-identifier"
                                    },
                                    {
                                      "type": "string",
                                      "enum": [
                                        "$ending"
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  },
                  "start": {
                    "type": "object",
                    "nullable": true,
                    "additionalProperties": false,
                    "properties": {
                      "hidden_fields": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "key"
                          ],
                          "properties": {
                            "key": {
                              "type": "string",
                              "format": "forms-custom-identifier"
                            },
                            "value": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 500
                            }
                          }
                        }
                      },
                      "next_node": {
                        "anyOf": [
                          {
                            "type": "string",
                            "format": "forms-custom-identifier"
                          },
                          {
                            "type": "string",
                            "enum": [
                              "$ending"
                            ]
                          }
                        ]
                      },
                      "coordinates": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "x",
                          "y"
                        ],
                        "properties": {
                          "x": {
                            "type": "integer"
                          },
                          "y": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  },
                  "ending": {
                    "type": "object",
                    "nullable": true,
                    "additionalProperties": false,
                    "properties": {
                      "redirection": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "target"
                        ],
                        "properties": {
                          "delay": {
                            "type": "integer"
                          },
                          "target": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1024
                          }
                        }
                      },
                      "after_submit": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "flow_id": {
                            "type": "string",
                            "maxLength": 30,
                            "format": "flow-id"
                          }
                        }
                      },
                      "coordinates": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "x",
                          "y"
                        ],
                        "properties": {
                          "x": {
                            "type": "integer"
                          },
                          "y": {
                            "type": "integer"
                          }
                        }
                      },
                      "resume_flow": {
                        "type": "boolean",
                        "enum": [
                          true
                        ]
                      }
                    }
                  },
                  "style": {
                    "type": "object",
                    "nullable": true,
                    "additionalProperties": false,
                    "properties": {
                      "css": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 5000
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Form successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "name",
                    "created_at",
                    "updated_at"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "maxLength": 30,
                      "format": "form-id"
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 150
                    },
                    "messages": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "errors": {
                          "type": "object",
                          "additionalProperties": true
                        },
                        "custom": {
                          "type": "object",
                          "additionalProperties": true
                        }
                      }
                    },
                    "languages": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "primary": {
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 55
                        },
                        "default": {
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 55
                        }
                      }
                    },
                    "translations": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "nodes": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "anyOf": [
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "id",
                              "type",
                              "config"
                            ],
                            "properties": {
                              "id": {
                                "type": "string",
                                "format": "forms-custom-identifier"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "FLOW"
                                ]
                              },
                              "coordinates": {
                                "type": "object",
                                "additionalProperties": false,
                                "required": [
                                  "x",
                                  "y"
                                ],
                                "properties": {
                                  "x": {
                                    "type": "integer"
                                  },
                                  "y": {
                                    "type": "integer"
                                  }
                                }
                              },
                              "alias": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 150
                              },
                              "config": {
                                "type": "object",
                                "additionalProperties": false,
                                "required": [
                                  "flow_id"
                                ],
                                "properties": {
                                  "flow_id": {
                                    "type": "string",
                                    "maxLength": 30,
                                    "format": "flow-id"
                                  },
                                  "next_node": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "format": "forms-custom-identifier"
                                      },
                                      {
                                        "type": "string",
                                        "enum": [
                                          "$ending"
                                        ]
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "id",
                              "type"
                            ],
                            "properties": {
                              "id": {
                                "type": "string",
                                "format": "forms-custom-identifier"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "ROUTER"
                                ]
                              },
                              "coordinates": {
                                "type": "object",
                                "additionalProperties": false,
                                "required": [
                                  "x",
                                  "y"
                                ],
                                "properties": {
                                  "x": {
                                    "type": "integer"
                                  },
                                  "y": {
                                    "type": "integer"
                                  }
                                }
                              },
                              "alias": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 150
                              },
                              "config": {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "rules": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "additionalProperties": false,
                                      "required": [
                                        "id",
                                        "condition"
                                      ],
                                      "properties": {
                                        "id": {
                                          "type": "string",
                                          "format": "forms-custom-identifier"
                                        },
                                        "alias": {
                                          "type": "string",
                                          "minLength": 1,
                                          "maxLength": 150
                                        },
                                        "condition": {},
                                        "next_node": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "format": "forms-custom-identifier"
                                            },
                                            {
                                              "type": "string",
                                              "enum": [
                                                "$ending"
                                              ]
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  },
                                  "fallback": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "format": "forms-custom-identifier"
                                      },
                                      {
                                        "type": "string",
                                        "enum": [
                                          "$ending"
                                        ]
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "id",
                              "type"
                            ],
                            "properties": {
                              "id": {
                                "type": "string",
                                "format": "forms-custom-identifier"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "STEP"
                                ]
                              },
                              "coordinates": {
                                "type": "object",
                                "additionalProperties": false,
                                "required": [
                                  "x",
                                  "y"
                                ],
                                "properties": {
                                  "x": {
                                    "type": "integer"
                                  },
                                  "y": {
                                    "type": "integer"
                                  }
                                }
                              },
                              "alias": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 150
                              },
                              "config": {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "components": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "anyOf": [
                                        {
                                          "type": "object",
                                          "anyOf": [
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "DIVIDER"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "text": {
                                                      "type": "string",
                                                      "maxLength": 50
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "HTML"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "content": {
                                                      "type": "string",
                                                      "maxLength": 10000
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "IMAGE"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "src"
                                                  ],
                                                  "properties": {
                                                    "src": {
                                                      "type": "string",
                                                      "maxLength": 500
                                                    },
                                                    "position": {
                                                      "type": "string",
                                                      "enum": [
                                                        "LEFT",
                                                        "CENTER",
                                                        "RIGHT"
                                                      ]
                                                    },
                                                    "height": {
                                                      "type": "number"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "JUMP_BUTTON"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "text",
                                                    "next_node"
                                                  ],
                                                  "properties": {
                                                    "text": {
                                                      "type": "string",
                                                      "maxLength": 150
                                                    },
                                                    "next_node": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "format": "forms-custom-identifier"
                                                        },
                                                        {
                                                          "type": "string",
                                                          "enum": [
                                                            "$ending"
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    "style": {
                                                      "type": "object",
                                                      "additionalProperties": false,
                                                      "properties": {
                                                        "background_color": {
                                                          "type": "string",
                                                          "format": "forms-hex-color"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "RESEND_BUTTON"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "active_text",
                                                    "button_text",
                                                    "waiting_text",
                                                    "flow_id"
                                                  ],
                                                  "properties": {
                                                    "active_text": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 255
                                                    },
                                                    "button_text": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 255
                                                    },
                                                    "waiting_text": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 255
                                                    },
                                                    "text_alignment": {
                                                      "type": "string",
                                                      "enum": [
                                                        "LEFT",
                                                        "CENTER",
                                                        "RIGHT"
                                                      ]
                                                    },
                                                    "flow_id": {
                                                      "type": "string",
                                                      "maxLength": 30,
                                                      "format": "flow-id"
                                                    },
                                                    "max_attempts": {
                                                      "type": "number"
                                                    },
                                                    "waiting_time": {
                                                      "type": "number"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "NEXT_BUTTON"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "text"
                                                  ],
                                                  "properties": {
                                                    "text": {
                                                      "type": "string",
                                                      "maxLength": 150
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "PREVIOUS_BUTTON"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "text"
                                                  ],
                                                  "properties": {
                                                    "text": {
                                                      "type": "string",
                                                      "maxLength": 150
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "RICH_TEXT"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "content": {
                                                      "type": "string",
                                                      "maxLength": 10000
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "type": "object",
                                          "anyOf": [
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "AUTH0_VERIFIABLE_CREDENTIALS"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "url",
                                                    "alternate_text",
                                                    "access_token",
                                                    "verification_id"
                                                  ],
                                                  "properties": {
                                                    "url": {
                                                      "type": "string",
                                                      "maxLength": 2000
                                                    },
                                                    "size": {
                                                      "type": "number"
                                                    },
                                                    "alternate_text": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 255
                                                    },
                                                    "access_token": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 5000
                                                    },
                                                    "verification_id": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 255
                                                    },
                                                    "max_wait": {
                                                      "type": "number"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "GMAPS_ADDRESS"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "api_key"
                                                  ],
                                                  "properties": {
                                                    "api_key": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "RECAPTCHA"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "site_key",
                                                    "secret_key"
                                                  ],
                                                  "properties": {
                                                    "site_key": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "secret_key": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "type": "object",
                                          "anyOf": [
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "BOOLEAN"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "default_value": {
                                                      "type": "boolean"
                                                    },
                                                    "options": {
                                                      "type": "object",
                                                      "additionalProperties": false,
                                                      "properties": {
                                                        "true": {
                                                          "type": "string",
                                                          "minLength": 1,
                                                          "maxLength": 50
                                                        },
                                                        "false": {
                                                          "type": "string",
                                                          "minLength": 1,
                                                          "maxLength": 50
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "CARDS"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": true
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "CHOICE"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": true
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "CUSTOM"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "schema",
                                                    "code"
                                                  ],
                                                  "properties": {
                                                    "schema": {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    },
                                                    "code": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "css": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "params": {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "DATE"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": true
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "DROPDOWN"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": true
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "EMAIL"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "default_value": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "placeholder": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 500
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "FILE"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "multiple": {
                                                      "type": "boolean"
                                                    },
                                                    "storage": {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    },
                                                    "categories": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string",
                                                        "enum": [
                                                          "AUDIO",
                                                          "VIDEO",
                                                          "IMAGE",
                                                          "DOCUMENT",
                                                          "ARCHIVE"
                                                        ]
                                                      }
                                                    },
                                                    "extensions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string",
                                                        "maxLength": 50,
                                                        "format": "forms-file-extension"
                                                      }
                                                    },
                                                    "maxSize": {
                                                      "type": "integer"
                                                    },
                                                    "maxFiles": {
                                                      "type": "integer"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "LEGAL"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "text": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 10000
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "NUMBER"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "default_value": {
                                                      "type": "number"
                                                    },
                                                    "placeholder": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 500
                                                    },
                                                    "min_value": {
                                                      "type": "number"
                                                    },
                                                    "max_value": {
                                                      "type": "number"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "PASSWORD"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "hash": {
                                                      "type": "string",
                                                      "enum": [
                                                        "NONE",
                                                        "MD5",
                                                        "SHA1",
                                                        "SHA256",
                                                        "SHA512"
                                                      ]
                                                    },
                                                    "placeholder": {
                                                      "type": "string",
                                                      "maxLength": 500
                                                    },
                                                    "min_length": {
                                                      "type": "integer"
                                                    },
                                                    "max_length": {
                                                      "type": "integer"
                                                    },
                                                    "complexity": {
                                                      "type": "boolean"
                                                    },
                                                    "nist": {
                                                      "type": "boolean"
                                                    },
                                                    "strength_meter": {
                                                      "type": "boolean"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "PAYMENT"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "charge",
                                                    "credentials"
                                                  ],
                                                  "properties": {
                                                    "provider": {
                                                      "type": "string",
                                                      "enum": [
                                                        "STRIPE"
                                                      ]
                                                    },
                                                    "charge": {
                                                      "type": "object",
                                                      "anyOf": [
                                                        {
                                                          "type": "object",
                                                          "additionalProperties": false,
                                                          "required": [
                                                            "type",
                                                            "one_off"
                                                          ],
                                                          "properties": {
                                                            "type": {
                                                              "type": "string",
                                                              "enum": [
                                                                "ONE_OFF"
                                                              ]
                                                            },
                                                            "one_off": {
                                                              "type": "object",
                                                              "additionalProperties": true,
                                                              "required": [
                                                                "amount",
                                                                "currency"
                                                              ],
                                                              "properties": {
                                                                "amount": {
                                                                  "anyOf": [
                                                                    {
                                                                      "type": "string",
                                                                      "minLength": 1
                                                                    },
                                                                    {
                                                                      "type": "number"
                                                                    }
                                                                  ]
                                                                },
                                                                "currency": {
                                                                  "type": "string",
                                                                  "enum": [
                                                                    "AUD",
                                                                    "CAD",
                                                                    "CHF",
                                                                    "EUR",
                                                                    "GBP",
                                                                    "INR",
                                                                    "MXN",
                                                                    "SEK",
                                                                    "USD"
                                                                  ]
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "type": "object",
                                                          "additionalProperties": false,
                                                          "required": [
                                                            "type",
                                                            "subscription"
                                                          ],
                                                          "properties": {
                                                            "type": {
                                                              "type": "string",
                                                              "enum": [
                                                                "SUBSCRIPTION"
                                                              ]
                                                            },
                                                            "subscription": {
                                                              "type": "object",
                                                              "additionalProperties": true
                                                            }
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    "credentials": {
                                                      "type": "object",
                                                      "additionalProperties": false,
                                                      "required": [
                                                        "public_key",
                                                        "private_key"
                                                      ],
                                                      "properties": {
                                                        "public_key": {
                                                          "type": "string",
                                                          "minLength": 1,
                                                          "maxLength": 250
                                                        },
                                                        "private_key": {
                                                          "type": "string",
                                                          "minLength": 1,
                                                          "maxLength": 250
                                                        }
                                                      }
                                                    },
                                                    "customer": {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    },
                                                    "fields": {
                                                      "type": "object",
                                                      "additionalProperties": false,
                                                      "properties": {
                                                        "card_number": {
                                                          "type": "object",
                                                          "additionalProperties": false,
                                                          "properties": {
                                                            "label": {
                                                              "type": "string",
                                                              "minLength": 1,
                                                              "maxLength": 250
                                                            },
                                                            "placeholder": {
                                                              "type": "string",
                                                              "minLength": 1,
                                                              "maxLength": 250
                                                            }
                                                          }
                                                        },
                                                        "expiration_date": {
                                                          "type": "object",
                                                          "additionalProperties": false,
                                                          "properties": {
                                                            "label": {
                                                              "type": "string",
                                                              "minLength": 1,
                                                              "maxLength": 250
                                                            },
                                                            "placeholder": {
                                                              "type": "string",
                                                              "minLength": 1,
                                                              "maxLength": 250
                                                            }
                                                          }
                                                        },
                                                        "security_code": {
                                                          "type": "object",
                                                          "additionalProperties": false,
                                                          "properties": {
                                                            "label": {
                                                              "type": "string",
                                                              "minLength": 1,
                                                              "maxLength": 250
                                                            },
                                                            "placeholder": {
                                                              "type": "string",
                                                              "minLength": 1,
                                                              "maxLength": 250
                                                            }
                                                          }
                                                        },
                                                        "trustmarks": {
                                                          "type": "boolean"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "SOCIAL"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {}
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "TEL"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "allOf": [
                                                    {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    },
                                                    {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    },
                                                    {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    }
                                                  ]
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "TEXT"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "allOf": [
                                                    {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    },
                                                    {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    },
                                                    {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    }
                                                  ]
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "URL"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "default_value": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "placeholder": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 500
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  },
                                  "next_node": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "format": "forms-custom-identifier"
                                      },
                                      {
                                        "type": "string",
                                        "enum": [
                                          "$ending"
                                        ]
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    "start": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "hidden_fields": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "key"
                            ],
                            "properties": {
                              "key": {
                                "type": "string",
                                "format": "forms-custom-identifier"
                              },
                              "value": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 500
                              }
                            }
                          }
                        },
                        "next_node": {
                          "anyOf": [
                            {
                              "type": "string",
                              "format": "forms-custom-identifier"
                            },
                            {
                              "type": "string",
                              "enum": [
                                "$ending"
                              ]
                            }
                          ]
                        },
                        "coordinates": {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "x",
                            "y"
                          ],
                          "properties": {
                            "x": {
                              "type": "integer"
                            },
                            "y": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    },
                    "ending": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "redirection": {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "target"
                          ],
                          "properties": {
                            "delay": {
                              "type": "integer"
                            },
                            "target": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 1024
                            }
                          }
                        },
                        "after_submit": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "flow_id": {
                              "type": "string",
                              "maxLength": 30,
                              "format": "flow-id"
                            }
                          }
                        },
                        "coordinates": {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "x",
                            "y"
                          ],
                          "properties": {
                            "x": {
                              "type": "integer"
                            },
                            "y": {
                              "type": "integer"
                            }
                          }
                        },
                        "resume_flow": {
                          "type": "boolean",
                          "enum": [
                            true
                          ]
                        }
                      }
                    },
                    "style": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "css": {
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 5000
                        }
                      }
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "embedded_at": {
                      "type": "string",
                      "format": "date"
                    },
                    "submitted_at": {
                      "type": "string",
                      "format": "date"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:forms."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_forms_by_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:forms"
            ]
          }
        ]
      }
    },
    "/grants": {
      "get": {
        "summary": "Get grants",
        "description": "Retrieve the <a href=\"https://auth0.com/docs/api-auth/which-oauth-flow-to-use\">grants</a> associated with your account. ",
        "tags": [
          "grants"
        ],
        "parameters": [
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page index of the results to return. First page is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "user_id of the grants to retrieve.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "query",
            "description": "client_id of the grants to retrieve.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "audience",
            "in": "query",
            "description": "audience of the grants to retrieve.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Grants successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/userGrant"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "start": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "total": {
                          "type": "number"
                        },
                        "grants": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/userGrant"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:grants."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_grants",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:grants"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a grant by user_id",
        "description": "Delete a grant associated with your account. ",
        "tags": [
          "grants"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "description": "user_id of the grant to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User grant successfully deleted."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: delete:grants."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_grants_by_user_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:grants"
            ]
          }
        ]
      }
    },
    "/grants/{id}": {
      "delete": {
        "summary": "Delete a grant by id",
        "description": "Delete a grant associated with your account. ",
        "tags": [
          "grants"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the grant to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User grant successfully deleted."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: delete:grants."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_grants_by_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:grants"
            ]
          }
        ]
      }
    },
    "/guardian/enrollments/ticket": {
      "post": {
        "summary": "Create a multi-factor authentication enrollment ticket",
        "description": "Create a <a href=\"https://auth0.com/docs/secure/multi-factor-authentication/auth0-guardian/create-custom-enrollment-tickets\">multi-factor authentication (MFA) enrollment ticket</a>, and optionally send an email with the created ticket, to a given user.\n",
        "tags": [
          "guardian"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/enrollmentCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/enrollmentCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Enrollment ticket successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "ticket_id": {
                      "type": "string",
                      "description": "The ticket_id used to identify the enrollment",
                      "default": "u2x2-u2x2-u2x2-u2x2-u2x2-u2x2"
                    },
                    "ticket_url": {
                      "type": "string",
                      "description": "The url you can use to start enrollment",
                      "default": "https://{tenant}.guardian.auth0.com/enrollment?ticket_id={ticket_id}",
                      "format": "url"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope."
          },
          "404": {
            "description": "User not found."
          }
        },
        "operationId": "post_ticket",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:guardian_enrollment_tickets"
            ]
          }
        ]
      }
    },
    "/guardian/enrollments/{id}": {
      "get": {
        "summary": "Get a multi-factor authentication enrollment",
        "description": "Retrieve details, such as status and type, for a specific multi-factor authentication enrollment registered to a user account.",
        "tags": [
          "guardian"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the enrollment to be retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Enrollment successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollment"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope."
          }
        },
        "operationId": "get_enrollments_by_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:guardian_enrollments"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a multi-factor authentication enrollment",
        "description": "Remove a specific multi-factor authentication (MFA) enrollment from a user's account. This allows the user to re-enroll with MFA. For more information, review <a href=\"https://auth0.com/docs/secure/multi-factor-authentication/reset-user-mfa\">Reset User Multi-Factor Authentication and Recovery Codes</a>.",
        "tags": [
          "guardian"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the enrollment to be deleted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Enrollment successfully deleted."
          },
          "400": {
            "description": "Invalid input based on schemas."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope (expected delete:enrollment)."
          }
        },
        "operationId": "delete_enrollments_by_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:guardian_enrollments"
            ]
          }
        ]
      }
    },
    "/guardian/factors": {
      "get": {
        "summary": "Get Factors and multi-factor authentication details",
        "description": "Retrieve details of all <a href=\"https://auth0.com/docs/secure/multi-factor-authentication/multi-factor-authentication-factors\">multi-factor authentication factors</a> associated with your tenant.",
        "tags": [
          "guardian"
        ],
        "responses": {
          "200": {
            "description": "Factors successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/factor"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope."
          }
        },
        "operationId": "get_factors",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:guardian_factors"
            ]
          }
        ]
      }
    },
    "/guardian/factors/duo/settings": {
      "get": {
        "summary": "Get DUO Configuration",
        "description": "Retrieves the DUO account and factor configuration.",
        "tags": [
          "guardian"
        ],
        "responses": {
          "200": {
            "description": "DUO settings successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "ikey": {
                      "type": "string",
                      "maxLength": 10000
                    },
                    "skey": {
                      "type": "string",
                      "maxLength": 10000,
                      "format": "non-empty-string"
                    },
                    "host": {
                      "type": "string",
                      "maxLength": 10000
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope."
          }
        },
        "operationId": "get_factor_duo_settings",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:guardian_factors"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update the DUO Configuration",
        "tags": [
          "guardian"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "ikey": {
                    "type": "string",
                    "maxLength": 10000
                  },
                  "skey": {
                    "type": "string",
                    "maxLength": 10000,
                    "format": "non-empty-string"
                  },
                  "host": {
                    "type": "string",
                    "maxLength": 10000
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "ikey": {
                    "type": "string",
                    "maxLength": 10000
                  },
                  "skey": {
                    "type": "string",
                    "maxLength": 10000,
                    "format": "non-empty-string"
                  },
                  "host": {
                    "type": "string",
                    "maxLength": 10000
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "DUO settings successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "ikey": {
                      "type": "string",
                      "maxLength": 10000
                    },
                    "skey": {
                      "type": "string",
                      "maxLength": 10000,
                      "format": "non-empty-string"
                    },
                    "host": {
                      "type": "string",
                      "maxLength": 10000
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope."
          }
        },
        "operationId": "patch_factor_duo_settings",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:guardian_factors"
            ]
          }
        ]
      },
      "put": {
        "summary": "Update the DUO Configuration",
        "description": "Set the DUO account configuration and other properties specific to this factor.",
        "tags": [
          "guardian"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "ikey": {
                    "type": "string",
                    "maxLength": 10000
                  },
                  "skey": {
                    "type": "string",
                    "maxLength": 10000,
                    "format": "non-empty-string"
                  },
                  "host": {
                    "type": "string",
                    "maxLength": 10000
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "ikey": {
                    "type": "string",
                    "maxLength": 10000
                  },
                  "skey": {
                    "type": "string",
                    "maxLength": 10000,
                    "format": "non-empty-string"
                  },
                  "host": {
                    "type": "string",
                    "maxLength": 10000
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "DUO settings successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "ikey": {
                      "type": "string",
                      "maxLength": 10000
                    },
                    "skey": {
                      "type": "string",
                      "maxLength": 10000,
                      "format": "non-empty-string"
                    },
                    "host": {
                      "type": "string",
                      "maxLength": 10000
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope."
          }
        },
        "operationId": "put_factor_duo_settings",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:guardian_factors"
            ]
          }
        ]
      }
    },
    "/guardian/factors/phone/message-types": {
      "get": {
        "summary": "Get Enabled Phone Factors",
        "description": "Retrieve list of <a href=\"https://auth0.com/docs/secure/multi-factor-authentication/multi-factor-authentication-factors/configure-sms-voice-notifications-mfa\">phone-type MFA factors</a> (i.e., sms and voice) that are enabled for your tenant.",
        "tags": [
          "guardian"
        ],
        "responses": {
          "200": {
            "description": "Returns the enabled phone factors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "message_types": {
                      "type": "array",
                      "description": "The list of phone factors to enable on the tenant. Can include `sms` and `voice`.",
                      "items": {
                        "type": "string",
                        "enum": [
                          "sms",
                          "voice"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas"
          },
          "401": {
            "description": "Token has expired or signature is invalid"
          },
          "403": {
            "description": "Insufficient scope"
          }
        },
        "operationId": "get_message-types",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:guardian_factors"
            ]
          }
        ]
      },
      "put": {
        "summary": "Update the Enabled Phone Factors",
        "description": "Replace the list of <a href=\"https://auth0.com/docs/secure/multi-factor-authentication/multi-factor-authentication-factors/configure-sms-voice-notifications-mfa\">phone-type MFA factors</a> (i.e., sms and voice) that are enabled for your tenant.",
        "tags": [
          "guardian"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "message_types"
                ],
                "properties": {
                  "message_types": {
                    "type": "array",
                    "description": "The list of phone factors to enable on the tenant. Can include `sms` and `voice`.",
                    "items": {
                      "type": "string",
                      "enum": [
                        "sms",
                        "voice"
                      ]
                    }
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "message_types"
                ],
                "properties": {
                  "message_types": {
                    "type": "array",
                    "description": "The list of phone factors to enable on the tenant. Can include `sms` and `voice`.",
                    "items": {
                      "type": "string",
                      "enum": [
                        "sms",
                        "voice"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns selected SMS provider configuration",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "message_types": {
                      "type": "array",
                      "description": "The list of phone factors to enable on the tenant. Can include `sms` and `voice`.",
                      "items": {
                        "type": "string",
                        "enum": [
                          "sms",
                          "voice"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas"
          },
          "401": {
            "description": "Token has expired or signature is invalid"
          },
          "403": {
            "description": "Insufficient scope"
          },
          "404": {
            "description": "The phone factor does not exist."
          }
        },
        "operationId": "put_message-types",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:guardian_factors"
            ]
          }
        ]
      }
    },
    "/guardian/factors/phone/providers/twilio": {
      "get": {
        "summary": "Get Twilio configuration",
        "description": "Retrieve configuration details for a Twilio phone provider that has been set up in your tenant. To learn more, review <a href=\"https://auth0.com/docs/secure/multi-factor-authentication/multi-factor-authentication-factors/configure-sms-voice-notifications-mfa\">Configure SMS and Voice Notifications for MFA</a>. ",
        "tags": [
          "guardian"
        ],
        "responses": {
          "200": {
            "description": "Twilio Phone configuration successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/twilioFactorProvider"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope."
          }
        },
        "operationId": "get_phone_twilio_factor_provider",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:guardian_factors"
            ]
          }
        ]
      },
      "put": {
        "summary": "Update Twilio configuration",
        "description": "Update the configuration of a Twilio phone provider that has been set up in your tenant. To learn more, review <a href=\"https://auth0.com/docs/secure/multi-factor-authentication/multi-factor-authentication-factors/configure-sms-voice-notifications-mfa\">Configure SMS and Voice Notifications for MFA</a>. ",
        "tags": [
          "guardian"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "from": {
                    "type": "string",
                    "nullable": true,
                    "description": "From number",
                    "default": "+1223323",
                    "minLength": 0,
                    "maxLength": 64
                  },
                  "messaging_service_sid": {
                    "type": "string",
                    "nullable": true,
                    "description": "Copilot SID",
                    "default": "5dEkAiHLPCuQ1uJj4qNXcAnERFAL6cpq",
                    "minLength": 1,
                    "maxLength": 1000
                  },
                  "auth_token": {
                    "type": "string",
                    "nullable": true,
                    "description": "Twilio Authentication token",
                    "default": "zw5Ku6z2sxhd0ZVXto5SDHX6KPDByJPU",
                    "minLength": 1,
                    "maxLength": 1000
                  },
                  "sid": {
                    "type": "string",
                    "nullable": true,
                    "description": "Twilio SID",
                    "default": "wywA2BH4VqTpfywiDuyDAYZL3xQjoO40",
                    "minLength": 1,
                    "maxLength": 1000
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "from": {
                    "type": "string",
                    "nullable": true,
                    "description": "From number",
                    "default": "+1223323",
                    "minLength": 0,
                    "maxLength": 64
                  },
                  "messaging_service_sid": {
                    "type": "string",
                    "nullable": true,
                    "description": "Copilot SID",
                    "default": "5dEkAiHLPCuQ1uJj4qNXcAnERFAL6cpq",
                    "minLength": 1,
                    "maxLength": 1000
                  },
                  "auth_token": {
                    "type": "string",
                    "nullable": true,
                    "description": "Twilio Authentication token",
                    "default": "zw5Ku6z2sxhd0ZVXto5SDHX6KPDByJPU",
                    "minLength": 1,
                    "maxLength": 1000
                  },
                  "sid": {
                    "type": "string",
                    "nullable": true,
                    "description": "Twilio SID",
                    "default": "wywA2BH4VqTpfywiDuyDAYZL3xQjoO40",
                    "minLength": 1,
                    "maxLength": 1000
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Twilio Phone configuration successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/twilioFactorProvider"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope."
          }
        },
        "operationId": "put_twilio",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:guardian_factors"
            ]
          }
        ]
      }
    },
    "/guardian/factors/phone/selected-provider": {
      "get": {
        "summary": "Get phone provider configuration",
        "description": "Retrieve details of the multi-factor authentication phone provider configured for your tenant.",
        "tags": [
          "guardian"
        ],
        "responses": {
          "200": {
            "description": "Returns selected Phone provider configuration",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "provider": {
                      "type": "string",
                      "enum": [
                        "auth0",
                        "twilio",
                        "phone-message-hook"
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas"
          },
          "401": {
            "description": "Token has expired or signature is invalid"
          },
          "403": {
            "description": "Insufficient scope"
          }
        },
        "operationId": "get_guardian_phone_providers",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:guardian_factors"
            ]
          }
        ]
      },
      "put": {
        "summary": "Update phone provider configuration",
        "tags": [
          "guardian"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "provider"
                ],
                "properties": {
                  "provider": {
                    "type": "string",
                    "enum": [
                      "auth0",
                      "twilio",
                      "phone-message-hook"
                    ]
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "provider"
                ],
                "properties": {
                  "provider": {
                    "type": "string",
                    "enum": [
                      "auth0",
                      "twilio",
                      "phone-message-hook"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns selected Phone provider configuration",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "provider": {
                      "type": "string",
                      "enum": [
                        "auth0",
                        "twilio",
                        "phone-message-hook"
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas"
          },
          "401": {
            "description": "Token has expired or signature is invalid"
          },
          "403": {
            "description": "Insufficient scope"
          }
        },
        "operationId": "put_phone_providers",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:guardian_factors"
            ]
          }
        ]
      }
    },
    "/guardian/factors/phone/templates": {
      "get": {
        "summary": "Get Enrollment and Verification Phone Templates",
        "description": "Retrieve details of the multi-factor authentication enrollment and verification templates for phone-type factors available in your tenant.",
        "tags": [
          "guardian"
        ],
        "responses": {
          "200": {
            "description": "Phone enrollment and verification templates successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/templateMessages"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope."
          }
        },
        "operationId": "get_factor_phone_templates",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:guardian_factors"
            ]
          }
        ]
      },
      "put": {
        "summary": "Update Enrollment and Verification Phone Templates",
        "description": "Customize the messages sent to complete phone enrollment and verification (subscription required).",
        "tags": [
          "guardian"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/templateMessages"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/templateMessages"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Phone enrollment and verification templates successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/templateMessages"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope."
          }
        },
        "operationId": "put_factor_phone_templates",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:guardian_factors"
            ]
          }
        ]
      }
    },
    "/guardian/factors/push-notification/providers/apns": {
      "get": {
        "summary": "Get APNS push notification configuration",
        "description": "Retrieve configuration details for the multi-factor authentication APNS provider associated with your tenant.",
        "tags": [
          "guardian"
        ],
        "responses": {
          "200": {
            "description": "APNS configuration successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "bundle_id": {
                      "type": "string",
                      "nullable": true,
                      "minLength": 1,
                      "maxLength": 20
                    },
                    "sandbox": {
                      "type": "boolean"
                    },
                    "enabled": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope."
          }
        },
        "operationId": "get_apns",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:guardian_factors"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update APNs provider configuration",
        "description": "Modify configuration details of the multi-factor authentication APNS provider associated with your tenant.",
        "tags": [
          "guardian"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "sandbox": {
                    "type": "boolean"
                  },
                  "bundle_id": {
                    "type": "string",
                    "nullable": true,
                    "minLength": 1,
                    "maxLength": 1000
                  },
                  "p12": {
                    "type": "string",
                    "nullable": true,
                    "minLength": 1,
                    "maxLength": 10000
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "sandbox": {
                    "type": "boolean"
                  },
                  "bundle_id": {
                    "type": "string",
                    "nullable": true,
                    "minLength": 1,
                    "maxLength": 1000
                  },
                  "p12": {
                    "type": "string",
                    "nullable": true,
                    "minLength": 1,
                    "maxLength": 10000
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "APNS configuration successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "sandbox": {
                      "type": "boolean"
                    },
                    "bundle_id": {
                      "type": "string",
                      "nullable": true,
                      "minLength": 1,
                      "maxLength": 1000
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas.",
            "x-description-1": "The PKCS #12 file is invalid. Please ensure the client certificate is not expired, the environment matches, and the key and certificate are not encrypted with a deprecated algorithm."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope."
          }
        },
        "operationId": "patch_apns",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:guardian_factors"
            ]
          }
        ]
      },
      "put": {
        "summary": "Update APNS configuration",
        "description": "Overwrite all configuration details of the multi-factor authentication APNS provider associated with your tenant.",
        "tags": [
          "guardian"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "sandbox": {
                    "type": "boolean"
                  },
                  "bundle_id": {
                    "type": "string",
                    "nullable": true,
                    "minLength": 1,
                    "maxLength": 1000
                  },
                  "p12": {
                    "type": "string",
                    "nullable": true,
                    "minLength": 1,
                    "maxLength": 10000
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "sandbox": {
                    "type": "boolean"
                  },
                  "bundle_id": {
                    "type": "string",
                    "nullable": true,
                    "minLength": 1,
                    "maxLength": 1000
                  },
                  "p12": {
                    "type": "string",
                    "nullable": true,
                    "minLength": 1,
                    "maxLength": 10000
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "APNS configuration successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "sandbox": {
                      "type": "boolean"
                    },
                    "bundle_id": {
                      "type": "string",
                      "nullable": true,
                      "minLength": 1,
                      "maxLength": 1000
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas.",
            "x-description-1": "The PKCS #12 file is invalid. Please ensure the client certificate is not expired, the environment matches, and the key and certificate are not encrypted with a deprecated algorithm."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope."
          }
        },
        "operationId": "put_apns",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:guardian_factors"
            ]
          }
        ]
      }
    },
    "/guardian/factors/push-notification/providers/fcm": {
      "patch": {
        "summary": "Updates FCM configuration",
        "description": "Modify configuration details of the multi-factor authentication FCM provider associated with your tenant.",
        "tags": [
          "guardian"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "server_key": {
                    "type": "string",
                    "nullable": true,
                    "minLength": 1,
                    "maxLength": 152
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "server_key": {
                    "type": "string",
                    "nullable": true,
                    "minLength": 1,
                    "maxLength": 152
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "FCM configuration updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas"
          },
          "401": {
            "description": "Token has expired or signature is invalid"
          },
          "403": {
            "description": "Insufficient scope"
          }
        },
        "operationId": "patch_fcm",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:guardian_factors"
            ]
          }
        ]
      },
      "put": {
        "summary": "Updates FCM configuration",
        "description": "Overwrite all configuration details of the multi-factor authentication FCM provider associated with your tenant.",
        "tags": [
          "guardian"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "server_key": {
                    "type": "string",
                    "nullable": true,
                    "minLength": 1,
                    "maxLength": 152
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "server_key": {
                    "type": "string",
                    "nullable": true,
                    "minLength": 1,
                    "maxLength": 152
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "FCM configuration updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas"
          },
          "401": {
            "description": "Token has expired or signature is invalid"
          },
          "403": {
            "description": "Insufficient scope"
          }
        },
        "operationId": "put_fcm",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:guardian_factors"
            ]
          }
        ]
      }
    },
    "/guardian/factors/push-notification/providers/fcmv1": {
      "patch": {
        "summary": "Updates FCMV1 configuration",
        "description": "Modify configuration details of the multi-factor authentication FCMV1 provider associated with your tenant.",
        "tags": [
          "guardian"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "server_credentials": {
                    "type": "string",
                    "nullable": true,
                    "minLength": 1,
                    "maxLength": 10000
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "server_credentials": {
                    "type": "string",
                    "nullable": true,
                    "minLength": 1,
                    "maxLength": 10000
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "FCMV1 configuration updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas",
            "x-description-1": "Invalid server credentials"
          },
          "401": {
            "description": "Token has expired or signature is invalid"
          },
          "403": {
            "description": "Insufficient scope"
          }
        },
        "operationId": "patch_fcmv1",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:guardian_factors"
            ]
          }
        ]
      },
      "put": {
        "summary": "Updates FCMV1 configuration",
        "description": "Overwrite all configuration details of the multi-factor authentication FCMV1 provider associated with your tenant.",
        "tags": [
          "guardian"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "server_credentials": {
                    "type": "string",
                    "nullable": true,
                    "minLength": 1,
                    "maxLength": 10000
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "server_credentials": {
                    "type": "string",
                    "nullable": true,
                    "minLength": 1,
                    "maxLength": 10000
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "FCMV1 configuration updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas",
            "x-description-1": "Invalid server credentials"
          },
          "401": {
            "description": "Token has expired or signature is invalid"
          },
          "403": {
            "description": "Insufficient scope"
          }
        },
        "operationId": "put_fcmv1",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:guardian_factors"
            ]
          }
        ]
      }
    },
    "/guardian/factors/push-notification/providers/sns": {
      "get": {
        "summary": "Get AWS SNS configuration",
        "description": "Retrieve configuration details for an AWS SNS push notification provider that has been enabled for MFA. To learn more, review <a href=\"https://auth0.com/docs/secure/multi-factor-authentication/multi-factor-authentication-factors/configure-push-notifications-for-mfa\">Configure Push Notifications for MFA</a>. ",
        "tags": [
          "guardian"
        ],
        "responses": {
          "200": {
            "description": "AWS SNS configuration successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/snsFactorProvider"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope."
          }
        },
        "operationId": "get_sns",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:guardian_factors"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update AWS SNS configuration",
        "description": "Configure the <a href=\"https://auth0.com/docs/multifactor-authentication/developer/sns-configuration\">AWS SNS push notification provider configuration</a> (subscription required).",
        "tags": [
          "guardian"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "aws_access_key_id": {
                    "type": "string",
                    "nullable": true,
                    "default": "wywA2BH4VqTpfywiDuyDAYZL3xQjoO40",
                    "minLength": 1,
                    "maxLength": 1000
                  },
                  "aws_secret_access_key": {
                    "type": "string",
                    "nullable": true,
                    "default": "B1ER5JHDGJL3C4sVAKK7SBsq806R3IpL",
                    "minLength": 1,
                    "maxLength": 1000
                  },
                  "aws_region": {
                    "type": "string",
                    "nullable": true,
                    "default": "us-west-1",
                    "minLength": 1,
                    "maxLength": 1000
                  },
                  "sns_apns_platform_application_arn": {
                    "type": "string",
                    "nullable": true,
                    "minLength": 1,
                    "maxLength": 1000
                  },
                  "sns_gcm_platform_application_arn": {
                    "type": "string",
                    "nullable": true,
                    "default": "urn://yRMeBxgcCXh8MeTXPBAxhQnm6gP6f5nP",
                    "minLength": 1,
                    "maxLength": 1000
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "aws_access_key_id": {
                    "type": "string",
                    "nullable": true,
                    "default": "wywA2BH4VqTpfywiDuyDAYZL3xQjoO40",
                    "minLength": 1,
                    "maxLength": 1000
                  },
                  "aws_secret_access_key": {
                    "type": "string",
                    "nullable": true,
                    "default": "B1ER5JHDGJL3C4sVAKK7SBsq806R3IpL",
                    "minLength": 1,
                    "maxLength": 1000
                  },
                  "aws_region": {
                    "type": "string",
                    "nullable": true,
                    "default": "us-west-1",
                    "minLength": 1,
                    "maxLength": 1000
                  },
                  "sns_apns_platform_application_arn": {
                    "type": "string",
                    "nullable": true,
                    "minLength": 1,
                    "maxLength": 1000
                  },
                  "sns_gcm_platform_application_arn": {
                    "type": "string",
                    "nullable": true,
                    "default": "urn://yRMeBxgcCXh8MeTXPBAxhQnm6gP6f5nP",
                    "minLength": 1,
                    "maxLength": 1000
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "AWS SNS configuration successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "aws_access_key_id": {
                      "type": "string",
                      "nullable": true,
                      "default": "wywA2BH4VqTpfywiDuyDAYZL3xQjoO40",
                      "minLength": 1,
                      "maxLength": 1000
                    },
                    "aws_secret_access_key": {
                      "type": "string",
                      "nullable": true,
                      "default": "B1ER5JHDGJL3C4sVAKK7SBsq806R3IpL",
                      "minLength": 1,
                      "maxLength": 1000
                    },
                    "aws_region": {
                      "type": "string",
                      "nullable": true,
                      "default": "us-west-1",
                      "minLength": 1,
                      "maxLength": 1000
                    },
                    "sns_apns_platform_application_arn": {
                      "type": "string",
                      "nullable": true,
                      "minLength": 1,
                      "maxLength": 1000
                    },
                    "sns_gcm_platform_application_arn": {
                      "type": "string",
                      "nullable": true,
                      "default": "urn://yRMeBxgcCXh8MeTXPBAxhQnm6gP6f5nP",
                      "minLength": 1,
                      "maxLength": 1000
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope."
          }
        },
        "operationId": "patch_sns",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:guardian_factors"
            ]
          }
        ]
      },
      "put": {
        "summary": "Update AWS SNS configuration",
        "description": "Configure the <a href=\"https://auth0.com/docs/multifactor-authentication/developer/sns-configuration\">AWS SNS push notification provider configuration</a> (subscription required).",
        "tags": [
          "guardian"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "aws_access_key_id": {
                    "type": "string",
                    "nullable": true,
                    "default": "wywA2BH4VqTpfywiDuyDAYZL3xQjoO40",
                    "minLength": 1,
                    "maxLength": 1000
                  },
                  "aws_secret_access_key": {
                    "type": "string",
                    "nullable": true,
                    "default": "B1ER5JHDGJL3C4sVAKK7SBsq806R3IpL",
                    "minLength": 1,
                    "maxLength": 1000
                  },
                  "aws_region": {
                    "type": "string",
                    "nullable": true,
                    "default": "us-west-1",
                    "minLength": 1,
                    "maxLength": 1000
                  },
                  "sns_apns_platform_application_arn": {
                    "type": "string",
                    "nullable": true,
                    "minLength": 1,
                    "maxLength": 1000
                  },
                  "sns_gcm_platform_application_arn": {
                    "type": "string",
                    "nullable": true,
                    "default": "urn://yRMeBxgcCXh8MeTXPBAxhQnm6gP6f5nP",
                    "minLength": 1,
                    "maxLength": 1000
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "aws_access_key_id": {
                    "type": "string",
                    "nullable": true,
                    "default": "wywA2BH4VqTpfywiDuyDAYZL3xQjoO40",
                    "minLength": 1,
                    "maxLength": 1000
                  },
                  "aws_secret_access_key": {
                    "type": "string",
                    "nullable": true,
                    "default": "B1ER5JHDGJL3C4sVAKK7SBsq806R3IpL",
                    "minLength": 1,
                    "maxLength": 1000
                  },
                  "aws_region": {
                    "type": "string",
                    "nullable": true,
                    "default": "us-west-1",
                    "minLength": 1,
                    "maxLength": 1000
                  },
                  "sns_apns_platform_application_arn": {
                    "type": "string",
                    "nullable": true,
                    "minLength": 1,
                    "maxLength": 1000
                  },
                  "sns_gcm_platform_application_arn": {
                    "type": "string",
                    "nullable": true,
                    "default": "urn://yRMeBxgcCXh8MeTXPBAxhQnm6gP6f5nP",
                    "minLength": 1,
                    "maxLength": 1000
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "AWS SNS configuration successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "aws_access_key_id": {
                      "type": "string",
                      "nullable": true,
                      "default": "wywA2BH4VqTpfywiDuyDAYZL3xQjoO40",
                      "minLength": 1,
                      "maxLength": 1000
                    },
                    "aws_secret_access_key": {
                      "type": "string",
                      "nullable": true,
                      "default": "B1ER5JHDGJL3C4sVAKK7SBsq806R3IpL",
                      "minLength": 1,
                      "maxLength": 1000
                    },
                    "aws_region": {
                      "type": "string",
                      "nullable": true,
                      "default": "us-west-1",
                      "minLength": 1,
                      "maxLength": 1000
                    },
                    "sns_apns_platform_application_arn": {
                      "type": "string",
                      "nullable": true,
                      "minLength": 1,
                      "maxLength": 1000
                    },
                    "sns_gcm_platform_application_arn": {
                      "type": "string",
                      "nullable": true,
                      "default": "urn://yRMeBxgcCXh8MeTXPBAxhQnm6gP6f5nP",
                      "minLength": 1,
                      "maxLength": 1000
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope."
          }
        },
        "operationId": "put_sns",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:guardian_factors"
            ]
          }
        ]
      }
    },
    "/guardian/factors/push-notification/selected-provider": {
      "get": {
        "summary": "Get push notification provider",
        "description": "Modify the push notification provider configured for your tenant. For more information, review <a href=\"https://auth0.com/docs/secure/multi-factor-authentication/multi-factor-authentication-factors/configure-push-notifications-for-mfa\">Configure Push Notifications for MFA</a>. ",
        "tags": [
          "guardian"
        ],
        "responses": {
          "200": {
            "description": "Returns selected push notification provider",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "provider": {
                      "type": "string",
                      "enum": [
                        "guardian",
                        "sns",
                        "direct"
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas"
          },
          "401": {
            "description": "Token has expired or signature is invalid"
          },
          "403": {
            "description": "Insufficient scope"
          }
        },
        "operationId": "get_pn_providers",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:guardian_factors"
            ]
          }
        ]
      },
      "put": {
        "summary": "Update Push Notification configuration",
        "description": "Modify the push notification provider configured for your tenant. For more information, review <a href=\"https://auth0.com/docs/secure/multi-factor-authentication/multi-factor-authentication-factors/configure-push-notifications-for-mfa\">Configure Push Notifications for MFA</a>. ",
        "tags": [
          "guardian"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "provider"
                ],
                "properties": {
                  "provider": {
                    "type": "string",
                    "enum": [
                      "guardian",
                      "sns",
                      "direct"
                    ]
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "provider"
                ],
                "properties": {
                  "provider": {
                    "type": "string",
                    "enum": [
                      "guardian",
                      "sns",
                      "direct"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns selected push notification provider configuration",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "provider": {
                      "type": "string",
                      "enum": [
                        "guardian",
                        "sns",
                        "direct"
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas"
          },
          "401": {
            "description": "Token has expired or signature is invalid"
          },
          "403": {
            "description": "Insufficient scope"
          }
        },
        "operationId": "put_pn_providers",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:guardian_factors"
            ]
          }
        ]
      }
    },
    "/guardian/factors/sms/providers/twilio": {
      "get": {
        "summary": "Get Twilio SMS configuration",
        "description": "Retrieve the <a href=\"https://auth0.com/docs/multifactor-authentication/twilio-configuration\">Twilio SMS provider configuration</a> (subscription required).\n\n    A new endpoint is available to retrieve the Twilio configuration related to phone factors (<a href='https://auth0.com/docs/api/management/v2/#!/Guardian/get_twilio'>phone Twilio configuration</a>). It has the same payload as this one. Please use it instead.",
        "tags": [
          "guardian"
        ],
        "responses": {
          "200": {
            "description": "Twilio SMS configuration successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/smsTwilioFactorProvider"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope."
          }
        },
        "operationId": "get_sms_twilio_factor_provider",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:guardian_factors"
            ]
          }
        ]
      },
      "put": {
        "summary": "Update Twilio SMS configuration",
        "description": "This endpoint has been deprecated. To complete this action, use the <a href=\"https://auth0.com/docs/api/management/v2/guardian/put-twilio\">Update Twilio phone configuration</a> endpoint.\n\n    <b>Previous functionality</b>: Update the Twilio SMS provider configuration.",
        "tags": [
          "guardian"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "from": {
                    "type": "string",
                    "nullable": true,
                    "description": "From number",
                    "default": "+1223323",
                    "minLength": 0,
                    "maxLength": 64
                  },
                  "messaging_service_sid": {
                    "type": "string",
                    "nullable": true,
                    "description": "Copilot SID",
                    "default": "5dEkAiHLPCuQ1uJj4qNXcAnERFAL6cpq",
                    "minLength": 1,
                    "maxLength": 1000
                  },
                  "auth_token": {
                    "type": "string",
                    "nullable": true,
                    "description": "Twilio Authentication token",
                    "default": "zw5Ku6z2sxhd0ZVXto5SDHX6KPDByJPU",
                    "minLength": 1,
                    "maxLength": 1000
                  },
                  "sid": {
                    "type": "string",
                    "nullable": true,
                    "description": "Twilio SID",
                    "default": "wywA2BH4VqTpfywiDuyDAYZL3xQjoO40",
                    "minLength": 1,
                    "maxLength": 1000
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "from": {
                    "type": "string",
                    "nullable": true,
                    "description": "From number",
                    "default": "+1223323",
                    "minLength": 0,
                    "maxLength": 64
                  },
                  "messaging_service_sid": {
                    "type": "string",
                    "nullable": true,
                    "description": "Copilot SID",
                    "default": "5dEkAiHLPCuQ1uJj4qNXcAnERFAL6cpq",
                    "minLength": 1,
                    "maxLength": 1000
                  },
                  "auth_token": {
                    "type": "string",
                    "nullable": true,
                    "description": "Twilio Authentication token",
                    "default": "zw5Ku6z2sxhd0ZVXto5SDHX6KPDByJPU",
                    "minLength": 1,
                    "maxLength": 1000
                  },
                  "sid": {
                    "type": "string",
                    "nullable": true,
                    "description": "Twilio SID",
                    "default": "wywA2BH4VqTpfywiDuyDAYZL3xQjoO40",
                    "minLength": 1,
                    "maxLength": 1000
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Twilio SMS configuration successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/smsTwilioFactorProvider"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope."
          }
        },
        "operationId": "put_sms_twilio_factor_provider",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:guardian_factors"
            ]
          }
        ]
      }
    },
    "/guardian/factors/sms/selected-provider": {
      "get": {
        "summary": "Get SMS configuration",
        "description": "This endpoint has been deprecated. To complete this action, use the <a href=\"https://auth0.com/docs/api/management/v2/guardian/get-phone-providers\">Retrieve phone configuration</a> endpoint instead.\n\n    <b>Previous functionality</b>: Retrieve details for the multi-factor authentication SMS provider configured for your tenant.",
        "tags": [
          "guardian"
        ],
        "responses": {
          "200": {
            "description": "Returns selected SMS provider configuration",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "provider": {
                      "type": "string",
                      "enum": [
                        "auth0",
                        "twilio",
                        "phone-message-hook"
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas"
          },
          "401": {
            "description": "Token has expired or signature is invalid"
          },
          "403": {
            "description": "Insufficient scope"
          }
        },
        "operationId": "get_sms_providers",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:guardian_factors"
            ]
          }
        ]
      },
      "put": {
        "summary": "Update SMS configuration",
        "description": "This endpoint has been deprecated. To complete this action, use the <a href=\"https://auth0.com/docs/api/management/v2/guardian/put-phone-providers\">Update phone configuration</a> endpoint instead.\n\n    <b>Previous functionality</b>: Update the multi-factor authentication SMS provider configuration in your tenant.",
        "tags": [
          "guardian"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "provider"
                ],
                "properties": {
                  "provider": {
                    "type": "string",
                    "enum": [
                      "auth0",
                      "twilio",
                      "phone-message-hook"
                    ]
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "provider"
                ],
                "properties": {
                  "provider": {
                    "type": "string",
                    "enum": [
                      "auth0",
                      "twilio",
                      "phone-message-hook"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns selected SMS provider configuration",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "provider": {
                      "type": "string",
                      "enum": [
                        "auth0",
                        "twilio",
                        "phone-message-hook"
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas"
          },
          "401": {
            "description": "Token has expired or signature is invalid"
          },
          "403": {
            "description": "Insufficient scope"
          }
        },
        "operationId": "put_sms_providers",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:guardian_factors"
            ]
          }
        ]
      }
    },
    "/guardian/factors/sms/templates": {
      "get": {
        "summary": "Get SMS enrollment and verification templates",
        "description": "This endpoint has been deprecated. To complete this action, use the <a href=\"https://auth0.com/docs/api/management/v2/guardian/get-factor-phone-templates\">Retrieve enrollment and verification phone templates</a> endpoint instead.\n\n    <b>Previous function</b>: Retrieve details of SMS enrollment and verification templates configured for your tenant.",
        "tags": [
          "guardian"
        ],
        "responses": {
          "200": {
            "description": "SMS enrollment and verification templates successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/templateMessages"
                }
              }
            }
          },
          "204": {
            "description": "No content.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/templateMessages"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope."
          }
        },
        "operationId": "get_factor_sms_templates",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:guardian_factors"
            ]
          }
        ]
      },
      "put": {
        "summary": "Update SMS enrollment and verification templates",
        "description": "This endpoint has been deprecated. To complete this action, use the <a href=\"https://auth0.com/docs/api/management/v2/guardian/put-factor-phone-templates\">Update enrollment and verification phone templates</a> endpoint instead.\n\n    <b>Previous functionality</b>: Customize the messages sent to complete SMS enrollment and verification.",
        "tags": [
          "guardian"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/templateMessages"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/templateMessages"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SMS enrollment and verification templates successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/templateMessages"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope."
          }
        },
        "operationId": "put_factor_sms_templates",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:guardian_factors"
            ]
          }
        ]
      }
    },
    "/guardian/factors/{name}": {
      "put": {
        "summary": "Update multi-factor authentication type",
        "description": "Update the status (i.e., enabled or disabled) of a specific multi-factor authentication factor.",
        "tags": [
          "guardian"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Factor name. Can be `sms`, `push-notification`, `email`, `duo` `otp` `webauthn-roaming`, `webauthn-platform`, or `recovery-code`.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "push-notification",
                "sms",
                "email",
                "duo",
                "otp",
                "webauthn-roaming",
                "webauthn-platform",
                "recovery-code"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "enabled"
                ],
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Whether this factor is enabled (true) or disabled (false)."
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "enabled"
                ],
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Whether this factor is enabled (true) or disabled (false)."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Factor updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "enabled"
                  ],
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "description": "Whether this factor is enabled (true) or disabled (false).",
                      "default": "true"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope."
          }
        },
        "operationId": "put_factors_by_name",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:guardian_factors"
            ]
          }
        ]
      }
    },
    "/guardian/policies": {
      "get": {
        "summary": "Get multi-factor authentication policies",
        "description": "Retrieve the <a href=\"https://auth0.com/docs/secure/multi-factor-authentication/enable-mfa\">multi-factor authentication (MFA) policies</a> configured for your tenant.\n\nThe following policies are supported:\n<ul>\n<li><code>all-applications</code> policy prompts with MFA for all logins.</li>\n<li><code>confidence-score</code> policy prompts with MFA only for low confidence logins.</li>\n</ul>\n\n<b>Note</b>: The <code>confidence-score</code> policy is part of the <a href=\"https://auth0.com/docs/secure/multi-factor-authentication/adaptive-mfa\">Adaptive MFA feature</a>. Adaptive MFA requires an add-on for the Enterprise plan; review <a href=\"https://auth0.com/pricing\">Auth0 Pricing</a> for more details.\n",
        "tags": [
          "guardian"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "The MFA policy",
                    "enum": [
                      "all-applications",
                      "confidence-score"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas"
          },
          "401": {
            "description": "Token has expired or signature is invalid"
          },
          "403": {
            "description": "Insufficient scope"
          }
        },
        "operationId": "get_policies",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:mfa_policies"
            ]
          }
        ]
      },
      "put": {
        "summary": "Update multi-factor authentication policies",
        "description": "Set <a href=\"https://auth0.com/docs/secure/multi-factor-authentication/enable-mfa\">multi-factor authentication (MFA) policies</a> for your tenant.\n\nThe following policies are supported:\n<ul>\n<li><code>all-applications</code> policy prompts with MFA for all logins.</li>\n<li><code>confidence-score</code> policy prompts with MFA only for low confidence logins.</li>\n</ul>\n\n<b>Note</b>: The <code>confidence-score</code> policy is part of the <a href=\"https://auth0.com/docs/secure/multi-factor-authentication/adaptive-mfa\">Adaptive MFA feature</a>. Adaptive MFA requires an add-on for the Enterprise plan; review <a href=\"https://auth0.com/pricing\">Auth0 Pricing</a> for more details.\n",
        "tags": [
          "guardian"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "The MFA policy",
                  "enum": [
                    "all-applications",
                    "confidence-score"
                  ]
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "The MFA policy",
                  "enum": [
                    "all-applications",
                    "confidence-score"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Policies updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "The MFA policy",
                    "enum": [
                      "all-applications",
                      "confidence-score"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas"
          },
          "401": {
            "description": "Token has expired or signature is invalid"
          },
          "403": {
            "description": "Insufficient scope"
          }
        },
        "operationId": "put_policies",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:mfa_policies"
            ]
          }
        ]
      }
    },
    "/hooks": {
      "get": {
        "summary": "Get hooks",
        "description": "Retrieve all <a href=\"https://auth0.com/docs/hooks\">hooks</a>. Accepts a list of fields to include or exclude in the result.\n",
        "tags": [
          "hooks"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page index of the results to return. First page is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "enabled",
            "in": "query",
            "description": "Optional filter on whether a hook is enabled (true) or disabled (false).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated list of fields to include in the result. Leave empty to retrieve all fields.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "triggerId",
            "in": "query",
            "description": "Retrieves hooks that match the trigger",
            "schema": {
              "type": "string",
              "enum": [
                "credentials-exchange",
                "pre-user-registration",
                "post-user-registration",
                "post-change-password",
                "send-phone-message"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Hooks successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/hook"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "start": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "total": {
                          "type": "number"
                        },
                        "hooks": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/hook"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:hooks."
          },
          "404": {
            "description": "Hook not found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_hooks",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:hooks"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create a hook",
        "description": "Create a new hook.\n",
        "tags": [
          "hooks"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/hookCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/hookCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Hook successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/hook"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: create:hooks.",
            "x-description-1": "This endpoint is disabled for your tenant."
          },
          "409": {
            "description": "Hook with the same name already exists."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_hooks",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:hooks"
            ]
          }
        ]
      }
    },
    "/hooks/{id}": {
      "get": {
        "summary": "Get a hook",
        "description": "Retrieve <a href=\"https://auth0.com/docs/hooks\">a hook</a> by its ID. Accepts a list of fields to include in the result.\n",
        "tags": [
          "hooks"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the hook to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated list of fields to include in the result. Leave empty to retrieve all fields.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Hook successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/hook"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:hooks."
          },
          "404": {
            "description": "Hook not found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_hooks_by_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:hooks"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a hook",
        "description": "Delete a hook.\n",
        "tags": [
          "hooks"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the hook to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Hook successfully deleted."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: delete:hooks."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_hooks_by_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:hooks"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update a hook",
        "description": "Update an existing hook.\n",
        "tags": [
          "hooks"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the hook to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/hookUpdate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/hookUpdate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Hook successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/hook"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: create:hooks.",
            "x-description-1": "This endpoint is disabled for your tenant."
          },
          "404": {
            "description": "The hook does not exist"
          },
          "409": {
            "description": "A hook with the same name already exists."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_hooks_by_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:hooks"
            ]
          }
        ]
      }
    },
    "/hooks/{id}/secrets": {
      "get": {
        "summary": "Get hook secrets",
        "description": "Retrieve a hook's secrets by the ID of the hook. \n",
        "tags": [
          "hooks"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the hook to retrieve secrets from.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Hook secrets successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Hashmap of key-value pairs where the value must be a string.",
                  "additionalProperties": true
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:hooks."
          },
          "404": {
            "description": "Hook not found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_secrets",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:hooks"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete hook secrets",
        "description": "Delete one or more existing secrets for a given hook. Accepts an array of secret names to delete. ",
        "tags": [
          "hooks"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the hook whose secrets to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "Array of secret names to delete.",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "array",
                "description": "Array of secret names to delete.",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Hook secrets successfully deleted."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: delete:hooks."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_secrets",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:hooks"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update hook secrets",
        "description": "Update one or more existing secrets for an existing hook. Accepts an object of key-value pairs, where the key is the name of the existing secret. \n",
        "tags": [
          "hooks"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the hook whose secrets to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Hashmap of key-value pairs where the value must be a string.",
                "additionalProperties": true
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "description": "Hashmap of key-value pairs where the value must be a string.",
                "additionalProperties": true
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Hook secrets successfully updated."
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: create:hooks.",
            "x-description-1": "This endpoint is disabled for your tenant."
          },
          "404": {
            "description": "Hook or secret not found."
          },
          "409": {
            "description": "Secret with the same name already exists."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_secrets",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:hooks"
            ]
          }
        ]
      },
      "post": {
        "summary": "Add hook secrets",
        "description": "Add one or more secrets to an existing hook. Accepts an object of key-value pairs, where the key is the name of the secret. A hook can have a maximum of 20 secrets. \n",
        "tags": [
          "hooks"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the hook to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Hashmap of key-value pairs where the value must be a string.",
                "additionalProperties": true
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "description": "Hashmap of key-value pairs where the value must be a string.",
                "additionalProperties": true
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Hook secrets successfully added."
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: create:hooks.",
            "x-description-1": "This endpoint is disabled for your tenant."
          },
          "409": {
            "description": "Secret with the same name already exists."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_secrets",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:hooks"
            ]
          }
        ]
      }
    },
    "/jobs/users-exports": {
      "post": {
        "summary": "Create export users job",
        "description": "Export all users to a file via a long-running job.",
        "tags": [
          "jobs"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateExportUsersRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateExportUsersRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Job created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateExportUsersResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause.",
            "x-description-1": "The connection does not exist."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:users."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_users-exports",
        "x-operation-name": "createExportUsers",
        "x-operation-group": "jobs",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:users"
            ]
          }
        ]
      }
    },
    "/jobs/users-imports": {
      "post": {
        "summary": "Create import users job",
        "description": "Import users from a <a href=\"https://auth0.com/docs/users/references/bulk-import-database-schema-examples\">formatted file</a> into a connection via a long-running job. When importing users, with or without upsert, the `email_verified` is set to `false` when the email address is added or updated. Users must verify their email address. To avoid this behavior, set `email_verified` to `true` in the imported data.",
        "tags": [
          "jobs"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateImportUsersRequestBody"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Job successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateImportUsersResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause.",
            "x-description-1": "Must provide 'users' file as multipart part.",
            "x-description-2": "Payload validation error: 'Invalid multipart payload format'.",
            "x-description-3": "Users file must not be empty.",
            "x-description-4": "Must provide 'connection_id' as multipart part.",
            "x-description-5": "Connection must be a database connection.",
            "x-description-6": "Connection must be enabled.",
            "x-description-7": "Payload validation error: 'String does not match pattern ^con_[A-Za-z0-9]{16}$' on property connection_id.",
            "x-description-8": "The connection does not exist.",
            "x-description-9": "Custom Database Connections without import mode are not allowed."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: create:users."
          },
          "413": {
            "description": "Payload content length greater than maximum allowed: 512000."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          },
          "500": {
            "description": "Internal error."
          }
        },
        "operationId": "post_users-imports",
        "x-operation-name": "createImportUsers",
        "x-operation-group": "jobs",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:users"
            ]
          }
        ]
      }
    },
    "/jobs/verification-email": {
      "post": {
        "summary": "Send an email address verification email",
        "description": "Send an email to the specified user that asks them to click a link to <a href=\"https://auth0.com/docs/email/custom#verification-email\">verify their email address</a>.\n\nNote: You must have the `Status` toggle enabled for the verification email template for the email to be sent.",
        "tags": [
          "jobs"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVerificationEmailRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateVerificationEmailRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Job successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateVerificationEmailResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters. The message will vary depending on the cause.",
            "x-description-1": "Connection must be a database connection.",
            "x-description-2": "User does not have an email address.",
            "x-description-3": "connection does not exist.",
            "x-description-4": "Connection must be enabled.",
            "x-description-5": "The organization does not exist"
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:users."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_verification-email",
        "x-operation-name": "createVerificationEmail",
        "x-operation-group": "jobs",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:users"
            ]
          }
        ]
      }
    },
    "/jobs/{id}": {
      "get": {
        "summary": "Get a job",
        "description": "Retrieves a job. Useful to check its status.",
        "tags": [
          "jobs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the job.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetJobResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: create:users."
          },
          "404": {
            "description": "Job not found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_jobs_by_id",
        "x-operation-name": "get",
        "x-operation-group": "jobs",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:users",
              "read:users"
            ]
          }
        ]
      }
    },
    "/jobs/{id}/errors": {
      "get": {
        "summary": "Get job error details",
        "description": "Retrieve error details of a failed job.",
        "tags": [
          "jobs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the job.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/GetJobErrorResponseContent"
                      }
                    },
                    {
                      "$ref": "#/components/schemas/GetJobGenericErrorResponseContent"
                    }
                  ]
                }
              }
            }
          },
          "204": {
            "description": "The job was retrieved, but no errors were found.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/GetJobErrorResponseContent"
                      }
                    },
                    {
                      "$ref": "#/components/schemas/GetJobGenericErrorResponseContent"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation"
          },
          "403": {
            "description": "Insufficient scope, expected any of: create:users"
          },
          "404": {
            "description": "The job does not exist"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_errors",
        "x-operation-name": "getJobErrors",
        "x-operation-group": "jobs",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:users",
              "read:users"
            ]
          }
        ]
      }
    },
    "/keys/custom-signing": {
      "get": {
        "summary": "Get custom signing keys",
        "description": "Get entire jwks representation of custom signing keys.",
        "tags": [
          "keys"
        ],
        "responses": {
          "200": {
            "description": "Custom signing keys were successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCustomSigningKeysResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:custom_signing_keys."
          },
          "404": {
            "description": "No custom signing keys found for this tenant. Upload custom signing keys first."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_custom_signing_keys",
        "x-operation-name": "get",
        "x-operation-group": "customSigningKeys",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:custom_signing_keys"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete custom signing keys",
        "description": "Delete entire jwks representation of custom signing keys.",
        "tags": [
          "keys"
        ],
        "responses": {
          "204": {
            "description": "Custom signing keys were successfully deleted."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: delete:custom_signing_keys."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_custom_signing_keys",
        "x-operation-name": "delete",
        "x-operation-group": "customSigningKeys",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:custom_signing_keys"
            ]
          }
        ]
      },
      "put": {
        "summary": "Create or replace custom signing keys",
        "description": "Create or replace entire jwks representation of custom signing keys.",
        "tags": [
          "keys"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetCustomSigningKeysRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SetCustomSigningKeysRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Custom signing keys were successfully created or replaced.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetCustomSigningKeysResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Payload validation error."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope, expected all of: create:custom_signing_keys,update:custom_signing_keys."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "put_custom_signing_keys",
        "x-operation-name": "set",
        "x-operation-group": "customSigningKeys",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:custom_signing_keys",
              "update:custom_signing_keys"
            ]
          }
        ]
      }
    },
    "/keys/encryption": {
      "get": {
        "summary": "Get all encryption keys",
        "description": "Retrieve details of all the encryption keys associated with your tenant.",
        "tags": [
          "keys"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page index of the results to return. First page is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results per page. Default value is 50, maximum value is 100.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The keys were successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "array",
                      "description": "Encryption keys.",
                      "items": {
                        "type": "object",
                        "description": "Encryption key",
                        "additionalProperties": false,
                        "required": [
                          "kid",
                          "type",
                          "state",
                          "created_at",
                          "updated_at",
                          "parent_kid"
                        ],
                        "properties": {
                          "kid": {
                            "type": "string",
                            "description": "Key ID"
                          },
                          "type": {
                            "type": "string",
                            "description": "Key type",
                            "enum": [
                              "customer-provided-root-key",
                              "environment-root-key",
                              "tenant-master-key",
                              "tenant-encryption-key"
                            ]
                          },
                          "state": {
                            "type": "string",
                            "description": "Key state",
                            "enum": [
                              "pre-activation",
                              "active",
                              "deactivated",
                              "destroyed"
                            ]
                          },
                          "created_at": {
                            "type": "string",
                            "description": "Key creation timestamp",
                            "format": "date-time"
                          },
                          "updated_at": {
                            "type": "string",
                            "description": "Key update timestamp",
                            "format": "date-time"
                          },
                          "parent_kid": {
                            "type": "string",
                            "description": "ID of parent wrapping key"
                          },
                          "public_key": {
                            "type": "string",
                            "description": "Public key in PEM format"
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "start": {
                          "type": "integer",
                          "description": "Page index of the results to return. First page is 0."
                        },
                        "limit": {
                          "type": "integer",
                          "description": "Number of results per page."
                        },
                        "total": {
                          "type": "integer",
                          "description": "Total amount of encryption keys."
                        },
                        "keys": {
                          "type": "array",
                          "description": "Encryption keys.",
                          "items": {
                            "type": "object",
                            "description": "Encryption key",
                            "additionalProperties": false,
                            "required": [
                              "kid",
                              "type",
                              "state",
                              "created_at",
                              "updated_at",
                              "parent_kid"
                            ],
                            "properties": {
                              "kid": {
                                "type": "string",
                                "description": "Key ID"
                              },
                              "type": {
                                "type": "string",
                                "description": "Key type",
                                "enum": [
                                  "customer-provided-root-key",
                                  "environment-root-key",
                                  "tenant-master-key",
                                  "tenant-encryption-key"
                                ]
                              },
                              "state": {
                                "type": "string",
                                "description": "Key state",
                                "enum": [
                                  "pre-activation",
                                  "active",
                                  "deactivated",
                                  "destroyed"
                                ]
                              },
                              "created_at": {
                                "type": "string",
                                "description": "Key creation timestamp",
                                "format": "date-time"
                              },
                              "updated_at": {
                                "type": "string",
                                "description": "Key update timestamp",
                                "format": "date-time"
                              },
                              "parent_kid": {
                                "type": "string",
                                "description": "ID of parent wrapping key"
                              },
                              "public_key": {
                                "type": "string",
                                "description": "Public key in PEM format"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:encryption_keys."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_encryption_keys",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:encryption_keys"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create the new encryption key",
        "description": "Create the new, pre-activated encryption key, without the key material.",
        "tags": [
          "keys"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "required": [
                  "type"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "Type of the encryption key to be created.",
                    "enum": [
                      "customer-provided-root-key",
                      "tenant-encryption-key"
                    ]
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "required": [
                  "type"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "Type of the encryption key to be created.",
                    "enum": [
                      "customer-provided-root-key",
                      "tenant-encryption-key"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The key was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Encryption key",
                  "additionalProperties": false,
                  "required": [
                    "kid",
                    "type",
                    "state",
                    "created_at",
                    "updated_at",
                    "parent_kid"
                  ],
                  "properties": {
                    "kid": {
                      "type": "string",
                      "description": "Key ID"
                    },
                    "type": {
                      "type": "string",
                      "description": "Key type",
                      "enum": [
                        "customer-provided-root-key",
                        "environment-root-key",
                        "tenant-master-key",
                        "tenant-encryption-key"
                      ]
                    },
                    "state": {
                      "type": "string",
                      "description": "Key state",
                      "enum": [
                        "pre-activation",
                        "active",
                        "deactivated",
                        "destroyed"
                      ]
                    },
                    "created_at": {
                      "type": "string",
                      "description": "Key creation timestamp",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "Key update timestamp",
                      "format": "date-time"
                    },
                    "parent_kid": {
                      "type": "string",
                      "description": "ID of parent wrapping key"
                    },
                    "public_key": {
                      "type": "string",
                      "description": "Public key in PEM format"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request body is invalid. Unsupported key \"type\" provided."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: create:encryption_keys."
          },
          "409": {
            "description": "Encryption key has already been created."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_encryption",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:encryption_keys"
            ]
          }
        ]
      }
    },
    "/keys/encryption/rekey": {
      "post": {
        "summary": "Rekey the key hierarchy",
        "description": "Perform rekeying operation on the key hierarchy.",
        "tags": [
          "keys"
        ],
        "responses": {
          "204": {
            "description": "The key hierarchy was successfully rekeyed."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected all of: create:encryption_keys update:encryption_keys."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_encryption_rekey",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:encryption_keys",
              "update:encryption_keys"
            ]
          }
        ]
      }
    },
    "/keys/encryption/{kid}": {
      "get": {
        "summary": "Get the encryption key by its key id",
        "description": "Retrieve details of the encryption key with the given ID.",
        "tags": [
          "keys"
        ],
        "parameters": [
          {
            "name": "kid",
            "in": "path",
            "description": "Encryption key ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The key was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Encryption key",
                  "additionalProperties": false,
                  "required": [
                    "kid",
                    "type",
                    "state",
                    "created_at",
                    "updated_at",
                    "parent_kid"
                  ],
                  "properties": {
                    "kid": {
                      "type": "string",
                      "description": "Key ID"
                    },
                    "type": {
                      "type": "string",
                      "description": "Key type",
                      "enum": [
                        "customer-provided-root-key",
                        "environment-root-key",
                        "tenant-master-key",
                        "tenant-encryption-key"
                      ]
                    },
                    "state": {
                      "type": "string",
                      "description": "Key state",
                      "enum": [
                        "pre-activation",
                        "active",
                        "deactivated",
                        "destroyed"
                      ]
                    },
                    "created_at": {
                      "type": "string",
                      "description": "Key creation timestamp",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "Key update timestamp",
                      "format": "date-time"
                    },
                    "parent_kid": {
                      "type": "string",
                      "description": "ID of parent wrapping key"
                    },
                    "public_key": {
                      "type": "string",
                      "description": "Public key in PEM format"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid UUID format in uri.",
            "x-description-1": "Invalid key id or unsupported key type."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:encryption_keys."
          },
          "404": {
            "description": "The key does not exist."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_encryption_key",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:encryption_keys"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete the encryption key by its key id",
        "description": "Delete the custom provided encryption key with the given ID and move back to using native encryption key.",
        "tags": [
          "keys"
        ],
        "parameters": [
          {
            "name": "kid",
            "in": "path",
            "description": "Encryption key ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The key was successfully deleted."
          },
          "400": {
            "description": "Invalid UUID format in uri.",
            "x-description-1": "Invalid key id or unsupported key type."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: delete:encryption_keys."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_encryption_key",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:encryption_keys"
            ]
          }
        ]
      },
      "post": {
        "summary": "Import the encryption key",
        "description": "Import wrapped key material and activate encryption key.",
        "tags": [
          "keys"
        ],
        "parameters": [
          {
            "name": "kid",
            "in": "path",
            "description": "Encryption key ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "required": [
                  "wrapped_key"
                ],
                "properties": {
                  "wrapped_key": {
                    "type": "string",
                    "description": "Base64 encoded ciphertext of key material wrapped by public wrapping key."
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "required": [
                  "wrapped_key"
                ],
                "properties": {
                  "wrapped_key": {
                    "type": "string",
                    "description": "Base64 encoded ciphertext of key material wrapped by public wrapping key."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The key was successfully imported.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Encryption key",
                  "additionalProperties": false,
                  "required": [
                    "kid",
                    "type",
                    "state",
                    "created_at",
                    "updated_at",
                    "parent_kid"
                  ],
                  "properties": {
                    "kid": {
                      "type": "string",
                      "description": "Key ID"
                    },
                    "type": {
                      "type": "string",
                      "description": "Key type",
                      "enum": [
                        "customer-provided-root-key",
                        "environment-root-key",
                        "tenant-master-key",
                        "tenant-encryption-key"
                      ]
                    },
                    "state": {
                      "type": "string",
                      "description": "Key state",
                      "enum": [
                        "pre-activation",
                        "active",
                        "deactivated",
                        "destroyed"
                      ]
                    },
                    "created_at": {
                      "type": "string",
                      "description": "Key creation timestamp",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "Key update timestamp",
                      "format": "date-time"
                    },
                    "parent_kid": {
                      "type": "string",
                      "description": "ID of parent wrapping key"
                    },
                    "public_key": {
                      "type": "string",
                      "description": "Public key in PEM format"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The key ID was not found.",
            "x-description-1": "Invalid UUID format in uri.",
            "x-description-2": "Invalid input. Wrapped key material is invalid or unsupported key type."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:encryption_keys."
          },
          "409": {
            "description": "Failed precondition. Key import not in progress or unable to find the wrapping key. Make sure you have followed all the steps to import a key."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_encryption_key",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:encryption_keys"
            ]
          }
        ]
      }
    },
    "/keys/encryption/{kid}/wrapping-key": {
      "post": {
        "summary": "Create the public wrapping key",
        "description": "Create the public wrapping key to wrap your own encryption key material.",
        "tags": [
          "keys"
        ],
        "parameters": [
          {
            "name": "kid",
            "in": "path",
            "description": "Encryption key ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The public wrapping key was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "required": [
                    "public_key",
                    "algorithm"
                  ],
                  "properties": {
                    "public_key": {
                      "type": "string",
                      "description": "Public wrapping key in PEM format"
                    },
                    "algorithm": {
                      "type": "string",
                      "description": "Encryption algorithm that shall be used to wrap your key material",
                      "enum": [
                        "CKM_RSA_AES_KEY_WRAP"
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid UUID format in uri.",
            "x-description-1": "Invalid key id or unsupported key type."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: create:encryption_keys."
          },
          "409": {
            "description": "Failed precondition. Create new encryption key without the key material first."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_encryption_wrapping_key",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:encryption_keys"
            ]
          }
        ]
      }
    },
    "/keys/signing": {
      "get": {
        "summary": "Get all Application Signing Keys",
        "description": "Retrieve details of all the application signing keys associated with your tenant.",
        "tags": [
          "keys"
        ],
        "responses": {
          "200": {
            "description": "The signing keys were retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "cert",
                      "kid",
                      "fingerprint",
                      "thumbprint"
                    ],
                    "properties": {
                      "kid": {
                        "type": "string",
                        "description": "The key id of the signing key",
                        "default": "21hi274Rp02112mgkUGma"
                      },
                      "cert": {
                        "type": "string",
                        "description": "The public certificate of the signing key",
                        "default": "-----BEGIN CERTIFICATE-----\r\nMIIDDTCCA...YiA0TQhAt8=\r\n-----END CERTIFICATE-----"
                      },
                      "pkcs7": {
                        "type": "string",
                        "description": "The public certificate of the signing key in pkcs7 format",
                        "default": "-----BEGIN PKCS7-----\r\nMIIDPA....t8xAA==\r\n-----END PKCS7-----"
                      },
                      "current": {
                        "type": "boolean",
                        "description": "True if the key is the the current key",
                        "default": true
                      },
                      "next": {
                        "type": "boolean",
                        "description": "True if the key is the the next key"
                      },
                      "previous": {
                        "type": "boolean",
                        "description": "True if the key is the the previous key"
                      },
                      "current_since": {
                        "oneOf": [
                          {
                            "type": "string",
                            "description": "The date and time when the key became the current key"
                          },
                          {
                            "type": "object",
                            "description": "The date and time when the key became the current key",
                            "additionalProperties": true
                          }
                        ]
                      },
                      "current_until": {
                        "oneOf": [
                          {
                            "type": "string",
                            "description": "The date and time when the current key was rotated"
                          },
                          {
                            "type": "object",
                            "description": "The date and time when the current key was rotated",
                            "additionalProperties": true
                          }
                        ]
                      },
                      "fingerprint": {
                        "type": "string",
                        "description": "The cert fingerprint",
                        "default": "CC:FB:DD:D8:9A:B5:DE:1B:F0:CC:36:D2:99:59:21:12:03:DD:A8:25"
                      },
                      "thumbprint": {
                        "type": "string",
                        "description": "The cert thumbprint",
                        "default": "CCFBDDD89AB5DE1BF0CC36D29959211203DDA825"
                      },
                      "revoked": {
                        "type": "boolean",
                        "description": "True if the key is revoked"
                      },
                      "revoked_at": {
                        "oneOf": [
                          {
                            "type": "string",
                            "description": "The date and time when the key was revoked"
                          },
                          {
                            "type": "object",
                            "description": "The date and time when the key was revoked",
                            "additionalProperties": true
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation"
          },
          "403": {
            "description": "Insufficient scope, expected any of: read:signing_keys"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_signing_keys",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:signing_keys"
            ]
          }
        ]
      }
    },
    "/keys/signing/rotate": {
      "post": {
        "summary": "Rotate the Application Signing Key",
        "description": "Rotate the application signing key of your tenant.",
        "tags": [
          "keys"
        ],
        "responses": {
          "201": {
            "description": "Signing key rotated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "required": [
                    "cert",
                    "kid"
                  ],
                  "properties": {
                    "cert": {
                      "type": "string",
                      "description": "Next key certificate",
                      "default": "-----BEGIN CERTIFICATE-----\r\nMIIDDTCCA...YiA0TQhAt8=\r\n-----END CERTIFICATE-----"
                    },
                    "kid": {
                      "type": "string",
                      "description": "Next key id",
                      "default": "21hi274Rp02112mgkUGma"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected create:signing_keys and update:signing_keys."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_signing_keys",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:signing_keys",
              "update:signing_keys"
            ]
          }
        ]
      }
    },
    "/keys/signing/{kid}": {
      "get": {
        "summary": "Get an Application Signing Key by its key id",
        "description": "Retrieve details of the application signing key with the given ID.",
        "tags": [
          "keys"
        ],
        "parameters": [
          {
            "name": "kid",
            "in": "path",
            "description": "Key id of the key to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The signing keys were retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "cert",
                    "kid",
                    "fingerprint",
                    "thumbprint"
                  ],
                  "properties": {
                    "kid": {
                      "type": "string",
                      "description": "The key id of the signing key",
                      "default": "21hi274Rp02112mgkUGma"
                    },
                    "cert": {
                      "type": "string",
                      "description": "The public certificate of the signing key",
                      "default": "-----BEGIN CERTIFICATE-----\r\nMIIDDTCCA...YiA0TQhAt8=\r\n-----END CERTIFICATE-----"
                    },
                    "pkcs7": {
                      "type": "string",
                      "description": "The public certificate of the signing key in pkcs7 format",
                      "default": "-----BEGIN PKCS7-----\r\nMIIDPA....t8xAA==\r\n-----END PKCS7-----"
                    },
                    "current": {
                      "type": "boolean",
                      "description": "True if the key is the the current key",
                      "default": true
                    },
                    "next": {
                      "type": "boolean",
                      "description": "True if the key is the the next key"
                    },
                    "previous": {
                      "type": "boolean",
                      "description": "True if the key is the the previous key"
                    },
                    "current_since": {
                      "oneOf": [
                        {
                          "type": "string",
                          "description": "The date and time when the key became the current key"
                        },
                        {
                          "type": "object",
                          "description": "The date and time when the key became the current key",
                          "additionalProperties": true
                        }
                      ]
                    },
                    "current_until": {
                      "oneOf": [
                        {
                          "type": "string",
                          "description": "The date and time when the current key was rotated"
                        },
                        {
                          "type": "object",
                          "description": "The date and time when the current key was rotated",
                          "additionalProperties": true
                        }
                      ]
                    },
                    "fingerprint": {
                      "type": "string",
                      "description": "The cert fingerprint",
                      "default": "CC:FB:DD:D8:9A:B5:DE:1B:F0:CC:36:D2:99:59:21:12:03:DD:A8:25"
                    },
                    "thumbprint": {
                      "type": "string",
                      "description": "The cert thumbprint",
                      "default": "CCFBDDD89AB5DE1BF0CC36D29959211203DDA825"
                    },
                    "revoked": {
                      "type": "boolean",
                      "description": "True if the key is revoked"
                    },
                    "revoked_at": {
                      "oneOf": [
                        {
                          "type": "string",
                          "description": "The date and time when the key was revoked"
                        },
                        {
                          "type": "object",
                          "description": "The date and time when the key was revoked",
                          "additionalProperties": true
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation"
          },
          "403": {
            "description": "Insufficient scope, expected any of: read:signing_keys"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_signing_key",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:signing_keys"
            ]
          }
        ]
      }
    },
    "/keys/signing/{kid}/revoke": {
      "put": {
        "summary": "Revoke an Application Signing Key by its key id",
        "description": "Revoke the application signing key with the given ID.",
        "tags": [
          "keys"
        ],
        "parameters": [
          {
            "name": "kid",
            "in": "path",
            "description": "Key id of the key to revoke",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Signing key revoked successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "required": [
                    "cert",
                    "kid"
                  ],
                  "properties": {
                    "cert": {
                      "type": "string",
                      "description": "Revoked key certificate",
                      "default": "-----BEGIN CERTIFICATE-----\r\nMIIDDTCCA...YiA0TQhAt8=\r\n-----END CERTIFICATE-----"
                    },
                    "kid": {
                      "type": "string",
                      "description": "Revoked key id",
                      "default": "21hi274Rp02112mgkUGma"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:signing_keys."
          },
          "404": {
            "description": "Signing key not found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "put_signing_keys",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:signing_keys"
            ]
          }
        ]
      }
    },
    "/log-streams": {
      "get": {
        "summary": "Get log streams",
        "description": "Retrieve details on <a href=\"https://auth0.com/docs/logs/streams\">log streams</a>.\n<h5>Sample Response</h5><pre><code>[{\n\t\"id\": \"string\",\n\t\"name\": \"string\",\n\t\"type\": \"eventbridge\",\n\t\"status\": \"active|paused|suspended\",\n\t\"sink\": {\n\t\t\"awsAccountId\": \"string\",\n\t\t\"awsRegion\": \"string\",\n\t\t\"awsPartnerEventSource\": \"string\"\n\t}\n}, {\n\t\"id\": \"string\",\n\t\"name\": \"string\",\n\t\"type\": \"http\",\n\t\"status\": \"active|paused|suspended\",\n\t\"sink\": {\n\t\t\"httpContentFormat\": \"JSONLINES|JSONARRAY\",\n\t\t\"httpContentType\": \"string\",\n\t\t\"httpEndpoint\": \"string\",\n\t\t\"httpAuthorization\": \"string\"\n\t}\n},\n{\n\t\"id\": \"string\",\n\t\"name\": \"string\",\n\t\"type\": \"eventgrid\",\n\t\"status\": \"active|paused|suspended\",\n\t\"sink\": {\n\t\t\"azureSubscriptionId\": \"string\",\n\t\t\"azureResourceGroup\": \"string\",\n\t\t\"azureRegion\": \"string\",\n\t\t\"azurePartnerTopic\": \"string\"\n\t}\n},\n{\n\t\"id\": \"string\",\n\t\"name\": \"string\",\n\t\"type\": \"splunk\",\n\t\"status\": \"active|paused|suspended\",\n\t\"sink\": {\n\t\t\"splunkDomain\": \"string\",\n\t\t\"splunkToken\": \"string\",\n\t\t\"splunkPort\": \"string\",\n\t\t\"splunkSecure\": \"boolean\"\n\t}\n},\n{\n\t\"id\": \"string\",\n\t\"name\": \"string\",\n\t\"type\": \"sumo\",\n\t\"status\": \"active|paused|suspended\",\n\t\"sink\": {\n\t\t\"sumoSourceAddress\": \"string\",\n\t}\n},\n{\n\t\"id\": \"string\",\n\t\"name\": \"string\",\n\t\"type\": \"datadog\",\n\t\"status\": \"active|paused|suspended\",\n\t\"sink\": {\n\t\t\"datadogRegion\": \"string\",\n\t\t\"datadogApiKey\": \"string\"\n\t}\n}]</code></pre>\n",
        "tags": [
          "log-streams"
        ],
        "responses": {
          "200": {
            "description": "Returning log streams",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LogStreamResponseSchema"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:log_streams.",
            "x-description-1": "The account is not allowed to perform this operation."
          },
          "404": {
            "description": "The log stream does not exist."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_log-streams",
        "x-operation-name": "list",
        "x-operation-group": "logStreams",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:log_streams"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create a log stream",
        "description": "Create a log stream.\n<h5>Log Stream Types</h5> The <code>type</code> of log stream being created determines the properties required in the <code>sink</code> payload.\n<h5>HTTP Stream</h5> For an <code>http</code> Stream, the <code>sink</code> properties are listed in the payload below\nRequest: <pre><code>{\n\t\"name\": \"string\",\n\t\"type\": \"http\",\n\t\"sink\": {\n\t\t\"httpEndpoint\": \"string\",\n\t\t\"httpContentType\": \"string\",\n\t\t\"httpContentFormat\": \"JSONLINES|JSONARRAY\",\n\t\t\"httpAuthorization\": \"string\"\n\t}\n}</code></pre>\nResponse: <pre><code>{\n\t\"id\": \"string\",\n\t\"name\": \"string\",\n\t\"type\": \"http\",\n\t\"status\": \"active\",\n\t\"sink\": {\n\t\t\"httpEndpoint\": \"string\",\n\t\t\"httpContentType\": \"string\",\n\t\t\"httpContentFormat\": \"JSONLINES|JSONARRAY\",\n\t\t\"httpAuthorization\": \"string\"\n\t}\n}</code></pre>\n<h5>Amazon EventBridge Stream</h5> For an <code>eventbridge</code> Stream, the <code>sink</code> properties are listed in the payload below\nRequest: <pre><code>{\n\t\"name\": \"string\",\n\t\"type\": \"eventbridge\",\n\t\"sink\": {\n\t\t\"awsRegion\": \"string\",\n\t\t\"awsAccountId\": \"string\"\n\t}\n}</code></pre>\nThe response will include an additional field <code>awsPartnerEventSource</code> in the <code>sink</code>: <pre><code>{\n\t\"id\": \"string\",\n\t\"name\": \"string\",\n\t\"type\": \"eventbridge\",\n\t\"status\": \"active\",\n\t\"sink\": {\n\t\t\"awsAccountId\": \"string\",\n\t\t\"awsRegion\": \"string\",\n\t\t\"awsPartnerEventSource\": \"string\"\n\t}\n}</code></pre>\n<h5>Azure Event Grid Stream</h5> For an <code>Azure Event Grid</code> Stream, the <code>sink</code> properties are listed in the payload below\nRequest: <pre><code>{\n\t\"name\": \"string\",\n\t\"type\": \"eventgrid\",\n\t\"sink\": {\n\t\t\"azureSubscriptionId\": \"string\",\n\t\t\"azureResourceGroup\": \"string\",\n\t\t\"azureRegion\": \"string\"\n\t}\n}</code></pre>\nResponse: <pre><code>{\n\t\"id\": \"string\",\n\t\"name\": \"string\",\n\t\"type\": \"http\",\n\t\"status\": \"active\",\n\t\"sink\": {\n\t\t\"azureSubscriptionId\": \"string\",\n\t\t\"azureResourceGroup\": \"string\",\n\t\t\"azureRegion\": \"string\",\n\t\t\"azurePartnerTopic\": \"string\"\n\t}\n}</code></pre>\n<h5>Datadog Stream</h5> For a <code>Datadog</code> Stream, the <code>sink</code> properties are listed in the payload below\nRequest: <pre><code>{\n\t\"name\": \"string\",\n\t\"type\": \"datadog\",\n\t\"sink\": {\n\t\t\"datadogRegion\": \"string\",\n\t\t\"datadogApiKey\": \"string\"\n\t}\n}</code></pre>\nResponse: <pre><code>{\n\t\"id\": \"string\",\n\t\"name\": \"string\",\n\t\"type\": \"datadog\",\n\t\"status\": \"active\",\n\t\"sink\": {\n\t\t\"datadogRegion\": \"string\",\n\t\t\"datadogApiKey\": \"string\"\n\t}\n}</code></pre>\n<h5>Splunk Stream</h5> For a <code>Splunk</code> Stream, the <code>sink</code> properties are listed in the payload below\nRequest: <pre><code>{\n\t\"name\": \"string\",\n\t\"type\": \"splunk\",\n\t\"sink\": {\n\t\t\"splunkDomain\": \"string\",\n\t\t\"splunkToken\": \"string\",\n\t\t\"splunkPort\": \"string\",\n\t\t\"splunkSecure\": \"boolean\"\n\t}\n}</code></pre>\nResponse: <pre><code>{\n\t\"id\": \"string\",\n\t\"name\": \"string\",\n\t\"type\": \"splunk\",\n\t\"status\": \"active\",\n\t\"sink\": {\n\t\t\"splunkDomain\": \"string\",\n\t\t\"splunkToken\": \"string\",\n\t\t\"splunkPort\": \"string\",\n\t\t\"splunkSecure\": \"boolean\"\n\t}\n}</code></pre>\n<h5>Sumo Logic Stream</h5> For a <code>Sumo Logic</code> Stream, the <code>sink</code> properties are listed in the payload below\nRequest: <pre><code>{\n\t\"name\": \"string\",\n\t\"type\": \"sumo\",\n\t\"sink\": {\n\t\t\"sumoSourceAddress\": \"string\",\n\t}\n}</code></pre>\nResponse: <pre><code>{\n\t\"id\": \"string\",\n\t\"name\": \"string\",\n\t\"type\": \"sumo\",\n\t\"status\": \"active\",\n\t\"sink\": {\n\t\t\"sumoSourceAddress\": \"string\",\n\t}\n}</code></pre>\n",
        "tags": [
          "log-streams"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLogStreamRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateLogStreamRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Log stream created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateLogStreamResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: create:log_streams.",
            "x-description-1": "The account is not allowed to perform this operation."
          },
          "409": {
            "description": "You have reached the maximum number of log streams for your account."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_log-streams",
        "x-operation-name": "create",
        "x-operation-group": "logStreams",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:log_streams"
            ]
          }
        ]
      }
    },
    "/log-streams/{id}": {
      "get": {
        "summary": "Get log stream by ID",
        "description": "Retrieve a log stream configuration and status.\n<h5>Sample responses</h5><h5>Amazon EventBridge Log Stream</h5><pre><code>{\n\t\"id\": \"string\",\n\t\"name\": \"string\",\n\t\"type\": \"eventbridge\",\n\t\"status\": \"active|paused|suspended\",\n\t\"sink\": {\n\t\t\"awsAccountId\": \"string\",\n\t\t\"awsRegion\": \"string\",\n\t\t\"awsPartnerEventSource\": \"string\"\n\t}\n}</code></pre> <h5>HTTP Log Stream</h5><pre><code>{\n\t\"id\": \"string\",\n\t\"name\": \"string\",\n\t\"type\": \"http\",\n\t\"status\": \"active|paused|suspended\",\n\t\"sink\": {\n\t\t\"httpContentFormat\": \"JSONLINES|JSONARRAY\",\n\t\t\"httpContentType\": \"string\",\n\t\t\"httpEndpoint\": \"string\",\n\t\t\"httpAuthorization\": \"string\"\n\t}\n}</code></pre> <h5>Datadog Log Stream</h5><pre><code>{\n\t\"id\": \"string\",\n\t\"name\": \"string\",\n\t\"type\": \"datadog\",\n\t\"status\": \"active|paused|suspended\",\n\t\"sink\": {\n\t\t\"datadogRegion\": \"string\",\n\t\t\"datadogApiKey\": \"string\"\n\t}\n\n}</code></pre><h5>Mixpanel</h5>\n\t\n\tRequest: <pre><code>{\n\t  \"name\": \"string\",\n\t  \"type\": \"mixpanel\",\n\t  \"sink\": {\n\t\t\"mixpanelRegion\": \"string\", // \"us\" | \"eu\",\n\t\t\"mixpanelProjectId\": \"string\",\n\t\t\"mixpanelServiceAccountUsername\": \"string\",\n\t\t\"mixpanelServiceAccountPassword\": \"string\"\n\t  }\n\t} </code></pre>\n\t\n\t\n\tResponse: <pre><code>{\n\t\t\"id\": \"string\",\n\t\t\"name\": \"string\",\n\t\t\"type\": \"mixpanel\",\n\t\t\"status\": \"active\",\n\t\t\"sink\": {\n\t\t  \"mixpanelRegion\": \"string\", // \"us\" | \"eu\",\n\t\t  \"mixpanelProjectId\": \"string\",\n\t\t  \"mixpanelServiceAccountUsername\": \"string\",\n\t\t  \"mixpanelServiceAccountPassword\": \"string\" // the following is redacted on return\n\t\t}\n\t  } </code></pre>\n\n\t<h5>Segment</h5>\n\n\tRequest: <pre><code> {\n\t  \"name\": \"string\",\n\t  \"type\": \"segment\",\n\t  \"sink\": {\n\t\t\"segmentWriteKey\": \"string\"\n\t  }\n\t}</code></pre>\n\t\n\tResponse: <pre><code>{\n\t  \"id\": \"string\",\n\t  \"name\": \"string\",\n\t  \"type\": \"segment\",\n\t  \"status\": \"active\",\n\t  \"sink\": {\n\t\t\"segmentWriteKey\": \"string\"\n\t  }\n\t} </code></pre>\n\t\n<h5>Splunk Log Stream</h5><pre><code>{\n\t\"id\": \"string\",\n\t\"name\": \"string\",\n\t\"type\": \"splunk\",\n\t\"status\": \"active|paused|suspended\",\n\t\"sink\": {\n\t\t\"splunkDomain\": \"string\",\n\t\t\"splunkToken\": \"string\",\n\t\t\"splunkPort\": \"string\",\n\t\t\"splunkSecure\": \"boolean\"\n\t}\n}</code></pre> <h5>Sumo Logic Log Stream</h5><pre><code>{\n\t\"id\": \"string\",\n\t\"name\": \"string\",\n\t\"type\": \"sumo\",\n\t\"status\": \"active|paused|suspended\",\n\t\"sink\": {\n\t\t\"sumoSourceAddress\": \"string\",\n\t}\n}</code></pre> <h5>Status</h5> The <code>status</code> of a log stream maybe any of the following:\n1. <code>active</code> - Stream is currently enabled.\n2. <code>paused</code> - Stream is currently user disabled and will not attempt log delivery.\n3. <code>suspended</code> - Stream is currently disabled because of errors and will not attempt log delivery.\n",
        "tags": [
          "log-streams"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the log stream to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returning log stream.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLogStreamResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:log_streams.",
            "x-description-1": "The account is not allowed to perform this operation."
          },
          "404": {
            "description": "The log stream does not exist."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_log-streams_by_id",
        "x-operation-name": "get",
        "x-operation-group": "logStreams",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:log_streams"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete log stream",
        "description": "Delete a log stream.\n",
        "tags": [
          "log-streams"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the log stream to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The log stream was deleted."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope, expected: delete:log_streams."
          },
          "404": {
            "description": "The log stream does not exist."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_log-streams_by_id",
        "x-operation-name": "delete",
        "x-operation-group": "logStreams",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:log_streams"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update a log stream",
        "description": "Update a log stream.\n<h4>Examples of how to use the PATCH endpoint.</h4> The following fields may be updated in a PATCH operation: <ul><li>name</li><li>status</li><li>sink</li></ul> Note: For log streams of type <code>eventbridge</code> and <code>eventgrid</code>, updating the <code>sink</code> is not permitted.\n<h5>Update the status of a log stream</h5><pre><code>{\n\t\"status\": \"active|paused\"\n}</code></pre>\n<h5>Update the name of a log stream</h5><pre><code>{\n\t\"name\": \"string\"\n}</code></pre>\n<h5>Update the sink properties of a stream of type <code>http</code></h5><pre><code>{\n  \"sink\": {\n    \"httpEndpoint\": \"string\",\n    \"httpContentType\": \"string\",\n    \"httpContentFormat\": \"JSONARRAY|JSONLINES\",\n    \"httpAuthorization\": \"string\"\n  }\n}</code></pre>\n<h5>Update the sink properties of a stream of type <code>datadog</code></h5><pre><code>{\n  \"sink\": {\n\t\t\"datadogRegion\": \"string\",\n\t\t\"datadogApiKey\": \"string\"\n  }\n}</code></pre>\n<h5>Update the sink properties of a stream of type <code>splunk</code></h5><pre><code>{\n  \"sink\": {\n    \"splunkDomain\": \"string\",\n    \"splunkToken\": \"string\",\n    \"splunkPort\": \"string\",\n    \"splunkSecure\": \"boolean\"\n  }\n}</code></pre>\n<h5>Update the sink properties of a stream of type <code>sumo</code></h5><pre><code>{\n  \"sink\": {\n    \"sumoSourceAddress\": \"string\"\n  }\n}</code></pre> ",
        "tags": [
          "log-streams"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the log stream to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLogStreamRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLogStreamRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Log stream updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateLogStreamResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:log_streams.",
            "x-description-1": "The account is not allowed to perform this operation."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_log-streams_by_id",
        "x-operation-name": "update",
        "x-operation-group": "logStreams",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:log_streams"
            ]
          }
        ]
      }
    },
    "/logs": {
      "get": {
        "summary": "Search log events",
        "description": "Retrieve log entries that match the specified search criteria (or all log entries if no criteria specified).\n\nSet custom search criteria using the <code>q</code> parameter, or search from a specific log ID (<i>\"search from checkpoint\"</i>).\n\nFor more information on all possible event types, their respective acronyms, and descriptions, see <a href=\"https://auth0.com/docs/logs/log-event-type-codes\">Log Event Type Codes</a>.\n\n<h5>To set custom search criteria, use the following parameters:</h5>\n\n<ul>\n    <li><b>q:</b> Search Criteria using <a href=\"https://auth0.com/docs/logs/log-search-query-syntax\">Query String Syntax</a></li>\n    <li><b>page:</b> Page index of the results to return. First page is 0.</li>\n    <li><b>per_page:</b> Number of results per page.</li>\n    <li><b>sort:</b> Field to use for sorting appended with `:1` for ascending and `:-1` for descending. e.g. `date:-1`</li>\n    <li><b>fields:</b> Comma-separated list of fields to include or exclude (depending on include_fields) from the result, empty to retrieve all fields.</li>\n    <li><b>include_fields:</b> Whether specified fields are to be included (true) or excluded (false).</li>\n    <li><b>include_totals:</b> Return results inside an object that contains the total result count (true) or as a direct array of results (false, default). <b>Deprecated:</b> this field is deprecated and should be removed from use. See <a href=\"https://auth0.com/docs/product-lifecycle/deprecations-and-migrations/migrate-to-tenant-log-search-v3#pagination\">Search Engine V3 Breaking Changes</a></li>\n</ul>\n\nFor more information on the list of fields that can be used in <code>fields</code> and <code>sort</code>, see <a href=\"https://auth0.com/docs/logs/log-search-query-syntax#searchable-fields\">Searchable Fields</a>.\n\nAuth0 <a href=\"https://auth0.com/docs/logs/retrieve-log-events-using-mgmt-api#limitations\">limits the number of logs</a> you can return by search criteria to 100 logs per request. Furthermore, you may paginate only through 1,000 search results. If you exceed this threshold, please redefine your search or use the <a href=\"https://auth0.com/docs/logs/retrieve-log-events-using-mgmt-api#retrieve-logs-by-checkpoint\">get logs by checkpoint method</a>.\n\n<h5>To search from a checkpoint log ID, use the following parameters:</h5>\n<ul>\n    <li><b>from:</b> Log Event ID from which to start retrieving logs. You can limit the number of logs returned using the <code>take</code> parameter. If you use <code>from</code> at the same time as <code>q</code>, <code>from</code> takes precedence and <code>q</code> is ignored.</li>\n    <li><b>take:</b> Number of entries to retrieve when using the <code>from</code> parameter.</li>\n</ul>\n\n<strong>Important:</strong> When fetching logs from a checkpoint log ID, any parameter other than <code>from</code> and <code>take</code> will be ignored, and date ordering is not guaranteed.\n",
        "tags": [
          "logs"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page index of the results to return. First page is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": " Number of results per page. Paging is disabled if parameter not sent. Default: <code>50</code>. Max value: <code>100</code>",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Field to use for sorting appended with <code>:1</code>  for ascending and <code>:-1</code> for descending. e.g. <code>date:-1</code>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated list of fields to include or exclude (based on value provided for <code>include_fields</code>) in the result. Leave empty to retrieve all fields.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_fields",
            "in": "query",
            "description": "Whether specified fields are to be included (<code>true</code>) or excluded (<code>false</code>)",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "Return results as an array when false (default). Return results inside an object that also contains a total result count when true.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Log Event Id from which to start selection from.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of entries to retrieve when using the <code>from</code> parameter. Default <code>50</code>, max <code>100</code>",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Query in <a target='_new' href ='http://www.lucenetutorial.com/lucene-query-syntax.html'>Lucene query string syntax</a>.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Logs successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/log"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "start": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "length": {
                          "type": "number"
                        },
                        "total": {
                          "type": "number"
                        },
                        "logs": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/log"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:logs, read:logs_users."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_logs",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:logs",
              "read:logs_users"
            ]
          }
        ]
      }
    },
    "/logs/{id}": {
      "get": {
        "summary": "Get a log event by id",
        "description": "Retrieve an individual log event.",
        "tags": [
          "logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "log_id of the log to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Log successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/log"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:logs, read:logs_users."
          },
          "404": {
            "description": "Log not found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_logs_by_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:logs",
              "read:logs_users"
            ]
          }
        ]
      }
    },
    "/network-acls": {
      "get": {
        "summary": "Get all access control list entries for a tenant",
        "description": "Get all access control list entries for your client.",
        "tags": [
          "network-acls"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Use this field to request a specific page of the list results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "The amount of results per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Network access control list successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListNetworkAclsResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:network_acls."
          },
          "404": {
            "description": "Network access control list not found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_network-acls",
        "x-release-lifecycle": "EA",
        "x-operation-name": "list",
        "x-operation-group": "networkAcls",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:network_acls"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create Access Control List",
        "description": "Create a new access control list for your client.",
        "tags": [
          "network-acls"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNetworkAclRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateNetworkAclRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Network ACL successfully created."
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Entitlement is not enabled for this tenant. Please upgrade your subscription to enable Tenant ACL Management.",
            "x-description-1": "Tenant ACL Management is not enabled for this tenant.",
            "x-description-0": "Insufficient scope; expected any of: create:network_acls."
          },
          "409": {
            "description": "A Network ACL with this priority number has already been created."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          },
          "500": {
            "description": "There was an error retrieving Networks ACLs subscription settings."
          }
        },
        "operationId": "post_network-acls",
        "x-release-lifecycle": "EA",
        "x-operation-name": "create",
        "x-operation-group": "networkAcls",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:network_acls"
            ]
          }
        ]
      }
    },
    "/network-acls/{id}": {
      "get": {
        "summary": "Get a specific access control list entry for a tenant",
        "description": "Get a specific access control list entry for your client.",
        "tags": [
          "network-acls"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the access control list to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Suspicious IP throttling configuration successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetNetworkAclsResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:network_acls."
          },
          "404": {
            "description": "Network access control list not found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_network-acls_by_id",
        "x-release-lifecycle": "EA",
        "x-operation-name": "get",
        "x-operation-group": "networkAcls",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:network_acls"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete Access Control List",
        "description": "Delete existing access control list for your client.",
        "tags": [
          "network-acls"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the ACL to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Network ACL successfully deleted"
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Tenant ACL Management is not enabled for this tenant.",
            "x-description-1": "Insufficient scope; expected any of: delete:network_acls."
          },
          "404": {
            "description": "This ACL does not exist"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_network-acls_by_id",
        "x-release-lifecycle": "EA",
        "x-operation-name": "delete",
        "x-operation-group": "networkAcls",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:network_acls"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Partial Update for an Access Control List",
        "description": "Update existing access control list for your client.",
        "tags": [
          "network-acls"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the ACL to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNetworkAclRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNetworkAclRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Network ACL properties successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateNetworkAclResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:network_acls."
          },
          "404": {
            "description": "Network ACL not found and cannot be updated"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_network-acls_by_id",
        "x-release-lifecycle": "EA",
        "x-operation-name": "update",
        "x-operation-group": "networkAcls",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:network_acls"
            ]
          }
        ]
      },
      "put": {
        "summary": "Update Access Control List",
        "description": "Update existing access control list for your client.",
        "tags": [
          "network-acls"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the ACL to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetNetworkAclRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SetNetworkAclRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Network ACL properties successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetNetworkAclsResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:network_acls."
          },
          "404": {
            "description": "Network ACL not found and cannot be updated"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "put_network-acls_by_id",
        "x-release-lifecycle": "EA",
        "x-operation-name": "set",
        "x-operation-group": "networkAcls",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:network_acls"
            ]
          }
        ]
      }
    },
    "/organizations": {
      "get": {
        "summary": "Get organizations",
        "description": "Retrieve detailed list of all Organizations available in your tenant. For more information, see Auth0 Organizations.\n\nThis endpoint supports two types of pagination:\n<ul>\n<li>Offset pagination</li>\n<li>Checkpoint pagination</li>\n</ul>\n\nCheckpoint pagination must be used if you need to retrieve more than 1000 organizations.\n\n<h2>Checkpoint Pagination</h2>\n\nTo search by checkpoint, use the following parameters:\n<ul>\n<li><code>from</code>: Optional id from which to start selection.</li>\n<li><code>take</code>: The total number of entries to retrieve when using the <code>from</code> parameter. Defaults to 50.</li>\n</ul>\n\n<b>Note</b>: The first time you call this endpoint using checkpoint pagination, omit the <code>from</code> parameter. If there are more results, a <code>next</code> value is included in the response. You can use this for subsequent API calls. When <code>next</code> is no longer included in the response, no pages are remaining.\n",
        "tags": [
          "organizations"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page index of the results to return. First page is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Optional Id from which to start selection.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Field to sort by. Use <code>field:order</code> where order is <code>1</code> for ascending and <code>-1</code> for descending. e.g. <code>created_at:1</code>. We currently support sorting by the following fields: <code>name</code>, <code>display_name</code> and <code>created_at</code>.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organizations successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOrganizationsResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause.",
            "x-description-1": "Invalid query string paging options. The message will vary depending on the cause"
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:organizations."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_organizations",
        "x-operation-name": "list",
        "x-operation-group": "organizations",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:organizations",
              "read:organizations_summary"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create an Organization",
        "description": "Create a new Organization within your tenant.  To learn more about Organization settings, behavior, and configuration options, review <a href=\"https://auth0.com/docs/manage-users/organizations/create-first-organization\">Create Your First Organization</a>.\n",
        "tags": [
          "organizations"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrganizationRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrganizationRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Organization successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrganizationResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: create:organizations."
          },
          "409": {
            "description": "An organization with this name already exists."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_organizations",
        "x-operation-name": "create",
        "x-operation-group": "organizations",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:organizations",
              "create:organization_connections"
            ]
          }
        ]
      }
    },
    "/organizations/name/{name}": {
      "get": {
        "summary": "Get organization by name",
        "description": "Retrieve details about a single Organization specified by name.\n",
        "tags": [
          "organizations"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "name of the organization to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOrganizationByNameResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:organizations."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_name_by_name",
        "x-operation-name": "getByName",
        "x-operation-group": "organizations",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:organizations"
            ]
          }
        ]
      }
    },
    "/organizations/{id}": {
      "get": {
        "summary": "Get organization",
        "description": "Retrieve details about a single Organization specified by ID. \n",
        "tags": [
          "organizations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the organization to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOrganizationResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:organizations."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_organizations_by_id",
        "x-operation-name": "get",
        "x-operation-group": "organizations",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:organizations",
              "read:organizations_summary"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete organization",
        "description": "Remove an Organization from your tenant.  This action cannot be undone. \n\n<b>Note</b>: Members are automatically disassociated from an Organization when it is deleted. However, this action does <b>not</b> delete these users from your tenant.\n",
        "tags": [
          "organizations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The organization was deleted."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: delete:organizations."
          },
          "404": {
            "description": "The organization does not exist."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_organizations_by_id",
        "x-operation-name": "delete",
        "x-operation-group": "organizations",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:organizations"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Modify an Organization",
        "description": "Update the details of a specific <a href=\"https://auth0.com/docs/manage-users/organizations/configure-organizations/create-organizations\">Organization</a>, such as name and display name, branding options, and metadata.\n",
        "tags": [
          "organizations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the organization to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrganizationRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrganizationRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organization successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateOrganizationResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:organizations."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_organizations_by_id",
        "x-operation-name": "update",
        "x-operation-group": "organizations",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:organizations"
            ]
          }
        ]
      }
    },
    "/organizations/{id}/client-grants": {
      "get": {
        "summary": "Get client grants associated to an organization",
        "tags": [
          "organizations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "audience",
            "in": "query",
            "description": "Optional filter on audience of the client grant.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "query",
            "description": "Optional filter on client_id of the client grant.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "grant_ids",
            "in": "query",
            "description": "Optional filter on the ID of the client grant. Must be URL encoded and may be specified multiple times (max 10).<br /><b>e.g.</b> <i>../client-grants?grant_ids=id1&grant_ids=id2</i>",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "client-grant-id"
              }
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page index of the results to return. First page is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Client grants successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOrganizationClientGrantsResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause.",
            "x-description-1": "Invalid query string paging options. The message will vary depending on the cause"
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:organization_client_grants."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_organization-client-grants",
        "x-operation-name": "listClientGrants",
        "x-operation-group": "organizations",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:organization_client_grants"
            ]
          }
        ]
      },
      "post": {
        "summary": "Associate a client grant with an organization",
        "tags": [
          "organizations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssociateOrganizationClientGrantRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/AssociateOrganizationClientGrantRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Client Grant successfully associated with Organization.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociateOrganizationClientGrantResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: create:organization_client_grants."
          },
          "404": {
            "description": "The grant does not exist.",
            "x-description-1": "No organization found by that id"
          },
          "409": {
            "description": "The client grant has already been added to this organization.",
            "x-description-1": "Quota exceeded; cannot add more than 100 client grants to a single organization"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "create_organization-client-grants",
        "x-operation-name": "associateClientGrant",
        "x-operation-group": "organizations",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:organization_client_grants"
            ]
          }
        ]
      }
    },
    "/organizations/{id}/client-grants/{grant_id}": {
      "delete": {
        "summary": "Remove a client grant from an organization",
        "tags": [
          "organizations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "grant_id",
            "in": "path",
            "description": "The Client Grant ID to remove from the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The Client Grant was removed from the Organization."
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: delete:organization_client_grants."
          },
          "404": {
            "description": "No organization found by that id."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_client-grants_by_grant_id",
        "x-operation-name": "deleteClientGrant",
        "x-operation-group": "organizations",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:organization_client_grants"
            ]
          }
        ]
      }
    },
    "/organizations/{id}/enabled_connections": {
      "get": {
        "summary": "Get connections enabled for an organization",
        "description": "Retrieve details about a specific connection currently enabled for an Organization. Information returned includes details such as connection ID, name, strategy, and whether the connection automatically grants membership upon login.\n",
        "tags": [
          "organizations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page index of the results to return. First page is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Connections successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOrganizationConnectionsResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:organization_connections."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_enabled_connections",
        "x-operation-name": "listConnections",
        "x-operation-group": "organizations",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:organization_connections"
            ]
          }
        ]
      },
      "post": {
        "summary": "Add connections to an organization",
        "description": "Enable a specific connection for a given Organization. To enable a connection, it must already exist within your tenant; connections cannot be created through this action.\n\n<a href=\"https://auth0.com/docs/authenticate/identity-providers\">Connections</a> represent the relationship between Auth0 and a source of users. Available types of connections include database, enterprise, and social.\n",
        "tags": [
          "organizations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddOrganizationConnectionRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/AddOrganizationConnectionRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Organization connection successfully added.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddOrganizationConnectionResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: create:organization_connections."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_enabled_connections",
        "x-operation-name": "addConnection",
        "x-operation-group": "organizations",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:organization_connections"
            ]
          }
        ]
      }
    },
    "/organizations/{id}/enabled_connections/{connectionId}": {
      "get": {
        "summary": "Get an enabled connection for an organization",
        "description": "Retrieve details about a specific connection currently enabled for an Organization. Information returned includes details such as connection ID, name, strategy, and whether the connection automatically grants membership upon login.\n",
        "tags": [
          "organizations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "Connection identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Connection successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOrganizationConnectionResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:organization_connections."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_enabled_connections_by_connectionId",
        "x-operation-name": "getConnection",
        "x-operation-group": "organizations",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:organization_connections"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete connections from an organization",
        "description": "Disable a specific connection for an Organization. Once disabled, Organization members can no longer use that connection to authenticate. \n\n<b>Note</b>: This action does not remove the connection from your tenant.\n",
        "tags": [
          "organizations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "Connection identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Connection successfully removed from organization."
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: delete:organization_connections."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_enabled_connections_by_connectionId",
        "x-operation-name": "deleteConnection",
        "x-operation-group": "organizations",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:organization_connections"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update the Connection of an Organization",
        "description": "Modify the details of a specific connection currently enabled for an Organization.\n",
        "tags": [
          "organizations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "Connection identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrganizationConnectionRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrganizationConnectionRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organization connection successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateOrganizationConnectionResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:organization_connections."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_enabled_connections_by_connectionId",
        "x-operation-name": "updateConnection",
        "x-operation-group": "organizations",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:organization_connections"
            ]
          }
        ]
      }
    },
    "/organizations/{id}/invitations": {
      "get": {
        "summary": "Get invitations to an organization",
        "description": "Retrieve a detailed list of invitations sent to users for a specific Organization. The list includes details such as inviter and invitee information, invitation URLs, and dates of creation and expiration. To learn more about Organization invitations, review <a href=\"https://auth0.com/docs/manage-users/organizations/configure-organizations/invite-members\">Invite Organization Members</a>. \n",
        "tags": [
          "organizations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page index of the results to return. First page is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "When true, return results inside an object that also contains the start and limit.  When false (default), a direct array of results is returned.  We do not yet support returning the total invitations count.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated list of fields to include or exclude (based on value provided for include_fields) in the result. Leave empty to retrieve all fields.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_fields",
            "in": "query",
            "description": "Whether specified fields are to be included (true) or excluded (false). Defaults to true.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Field to sort by. Use field:order where order is 1 for ascending and -1 for descending Defaults to created_at:-1.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invitations successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOrganizationInvitationsResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Requesting page exceeds the allowed maximum of 1000 records",
            "x-description-0": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Client is not global.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Invalid token."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:organization_invitations."
          },
          "404": {
            "description": "No organization found by that id."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_invitations",
        "x-operation-name": "listInvitations",
        "x-operation-group": "organizations",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:organization_invitations"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create invitations to an organization",
        "description": "Create a user invitation for a specific Organization. Upon creation, the listed user receives an email inviting them to join the Organization. To learn more about Organization invitations, review <a href=\"https://auth0.com/docs/manage-users/organizations/configure-organizations/invite-members\">Invite Organization Members</a>. \n",
        "tags": [
          "organizations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrganizationInvitationRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrganizationInvitationRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Invitation successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrganizationInvitationResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "A default login route is required to generate the invitation url. For more information, see https://auth0.com/docs/universal-login/configure-default-login-routes",
            "x-description-1": "One or more of the specified roles do not exist: rol_0000000000000001, rol_0000000000000002",
            "x-description-2": "Passwordless connections are not supported.",
            "x-description-3": "The specified client_id does not allow organizations.",
            "x-description-4": "The specified client_id does not exist.",
            "x-description-5": "The specified connection (con_0000000000000001) is not enabled for the organization",
            "x-description-6": "The specified connection does not exist.",
            "x-description-0": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Client is not global.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Invalid token."
          },
          "403": {
            "description": "Insufficient scope; expected any of: create:organization_invitations."
          },
          "404": {
            "description": "No organization found by that id."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_invitations",
        "x-operation-name": "createInvitation",
        "x-operation-group": "organizations",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:organization_invitations"
            ]
          }
        ]
      }
    },
    "/organizations/{id}/invitations/{invitation_id}": {
      "get": {
        "summary": "Get a specific invitation to an Organization",
        "tags": [
          "organizations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invitation_id",
            "in": "path",
            "description": "The id of the user invitation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated list of fields to include or exclude (based on value provided for include_fields) in the result. Leave empty to retrieve all fields.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_fields",
            "in": "query",
            "description": "Whether specified fields are to be included (true) or excluded (false). Defaults to true.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invitation successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOrganizationInvitationResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Client is not global.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Invalid token."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:organization_invitations."
          },
          "404": {
            "description": "No organization found by that id.",
            "x-description-1": "The invitation does not exist."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_invitations_by_invitation_id",
        "x-operation-name": "getInvitation",
        "x-operation-group": "organizations",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:organization_invitations"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete an invitation to an Organization",
        "tags": [
          "organizations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invitation_id",
            "in": "path",
            "description": "The id of the user invitation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Invitation successfully deleted."
          },
          "401": {
            "description": "Client is not global.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Invalid token."
          },
          "403": {
            "description": "Insufficient scope; expected any of: delete:organization_invitations."
          },
          "404": {
            "description": "No organization found by that id."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_invitations_by_invitation_id",
        "x-operation-name": "deleteInvitation",
        "x-operation-group": "organizations",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:organization_invitations"
            ]
          }
        ]
      }
    },
    "/organizations/{id}/members": {
      "get": {
        "summary": "Get members who belong to an organization",
        "description": "List organization members.\nThis endpoint is subject to eventual consistency. New users may not be immediately included in the response and deleted users may not be immediately removed from it.\n\n<ul>\n  <li>\n    Use the <code>fields</code> parameter to optionally define the specific member details retrieved. If <code>fields</code> is left blank, all fields (except roles) are returned.\n  </li>\n  <li>\n    Member roles are not sent by default. Use <code>fields=roles</code> to retrieve the roles assigned to each listed member. To use this parameter, you must include the <code>read:organization_member_roles</code> scope in the token.\n  </li>\n</ul>\n\nThis endpoint supports two types of pagination:\n\n- Offset pagination\n- Checkpoint pagination\n\nCheckpoint pagination must be used if you need to retrieve more than 1000 organization members.\n\n<h2>Checkpoint Pagination</h2>\n\nTo search by checkpoint, use the following parameters: - from: Optional id from which to start selection. - take: The total amount of entries to retrieve when using the from parameter. Defaults to 50. Note: The first time you call this endpoint using Checkpoint Pagination, you should omit the <code>from</code> parameter. If there are more results, a <code>next</code> value will be included in the response. You can use this for subsequent API calls. When <code>next</code> is no longer included in the response, this indicates there are no more pages remaining.\n",
        "tags": [
          "organizations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page index of the results to return. First page is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Optional Id from which to start selection.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated list of fields to include or exclude (based on value provided for include_fields) in the result. Leave empty to retrieve all fields.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_fields",
            "in": "query",
            "description": "Whether specified fields are to be included (true) or excluded (false).",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Members successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOrganizationMembersResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause.",
            "x-description-1": "Invalid query string paging options. The message will vary depending on the cause"
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:organization_members, read:organization_member_roles."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_organization_members",
        "x-operation-name": "listMembers",
        "x-operation-group": "organizations",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:organization_members"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete members from an organization",
        "tags": [
          "organizations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteOrganizationMembersRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DeleteOrganizationMembersRequestBody"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Users successfully removed from organization."
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: delete:organization_members."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_members",
        "x-operation-name": "deleteMembers",
        "x-operation-group": "organizations",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:organization_members"
            ]
          }
        ]
      },
      "post": {
        "summary": "Add members to an organization",
        "description": "Set one or more existing users as members of a specific <a href=\"https://auth0.com/docs/manage-users/organizations\">Organization</a>.\n\nTo add a user to an Organization through this action, the user must already exist in your tenant. If a user does not yet exist, you can <a href=\"https://auth0.com/docs/manage-users/organizations/configure-organizations/invite-members\">invite them to create an account</a>, manually create them through the Auth0 Dashboard, or use the Management API.\n",
        "tags": [
          "organizations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrganizationMemberRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrganizationMemberRequestBody"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Members successfully added to organization."
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: create:organization_members."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_members",
        "x-operation-name": "createMember",
        "x-operation-group": "organizations",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:organization_members"
            ]
          }
        ]
      }
    },
    "/organizations/{id}/members/{user_id}/roles": {
      "get": {
        "summary": "Get user roles assigned to an Organization member",
        "description": "Retrieve detailed list of roles assigned to a given user within the context of a specific Organization. \n\nUsers can be members of multiple Organizations with unique roles assigned for each membership. This action only returns the roles associated with the specified Organization; any roles assigned to the user within other Organizations are not included.\n",
        "tags": [
          "organizations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "ID of the user to associate roles with.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page index of the results to return. First page is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Roles successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOrganizationMemberRolesResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause.",
            "x-description-1": "Invalid query string paging options. The message will vary depending on the cause"
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:organization_member_roles."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_organization_member_roles",
        "x-operation-name": "listMemberRoles",
        "x-operation-group": "organizations",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:organization_member_roles"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete user roles from an Organization member",
        "description": "Remove one or more Organization-specific <a href=\"https://auth0.com/docs/manage-users/access-control/rbac\">roles</a> from a given user.\n\nUsers can be members of multiple Organizations with unique roles assigned for each membership. This action removes roles from a user in relation to the specified Organization. Roles assigned to the user within a different Organization cannot be managed in the same call.\n",
        "tags": [
          "organizations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "User ID of the organization member to remove roles from.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteOrganizationMemberRolesRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DeleteOrganizationMemberRolesRequestBody"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Roles successfully removed from organization member."
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: delete:organization_member_roles."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_organization_member_roles",
        "x-operation-name": "deleteMemberRoles",
        "x-operation-group": "organizations",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:organization_member_roles"
            ]
          }
        ]
      },
      "post": {
        "summary": "Assign user roles to an Organization member",
        "description": "Assign one or more <a href=\"https://auth0.com/docs/manage-users/access-control/rbac\">roles</a> to a user to determine their access for a specific Organization.\n\nUsers can be members of multiple Organizations with unique roles assigned for each membership. This action assigns roles to a user only for the specified Organization. Roles cannot be assigned to a user across multiple Organizations in the same call.\n",
        "tags": [
          "organizations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "ID of the user to associate roles with.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignOrganizationMemberRolesRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/AssignOrganizationMemberRolesRequestBody"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Roles successfully associated with user."
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: create:organization_member_roles."
          },
          "409": {
            "description": "No more roles can be assigned to this organization member."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_organization_member_roles",
        "x-operation-name": "assignMemberRoles",
        "x-operation-group": "organizations",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:organization_member_roles"
            ]
          }
        ]
      }
    },
    "/prompts": {
      "get": {
        "summary": "Get prompt settings",
        "description": "Retrieve details of the Universal Login configuration of your tenant. This includes the <a href=\"https://auth0.com/docs/authenticate/login/auth0-universal-login/identifier-first\">Identifier First Authentication</a> and <a href=\"https://auth0.com/docs/secure/multi-factor-authentication/fido-authentication-with-webauthn/configure-webauthn-device-biometrics-for-mfa\">WebAuthn with Device Biometrics for MFA</a> features.",
        "tags": [
          "prompts"
        ],
        "responses": {
          "200": {
            "description": "Prompt settings successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSettingsResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "The specified client cannot perform the requested operation.",
            "x-description-1": "Insufficient scope; expected any of: read:prompts."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_prompts",
        "x-operation-name": "getSettings",
        "x-operation-group": "prompts",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:prompts"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update prompt settings",
        "description": "Update the Universal Login configuration of your tenant. This includes the <a href=\"https://auth0.com/docs/authenticate/login/auth0-universal-login/identifier-first\">Identifier First Authentication</a> and <a href=\"https://auth0.com/docs/secure/multi-factor-authentication/fido-authentication-with-webauthn/configure-webauthn-device-biometrics-for-mfa\">WebAuthn with Device Biometrics for MFA</a> features.",
        "tags": [
          "prompts"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSettingsRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSettingsRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Prompts settings successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateSettingsResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:prompts."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_prompts",
        "x-operation-name": "updateSettings",
        "x-operation-group": "prompts",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:prompts"
            ]
          }
        ]
      }
    },
    "/prompts/{prompt}/custom-text/{language}": {
      "get": {
        "summary": "Get custom text for a prompt",
        "description": "Retrieve custom text for a specific prompt and language.",
        "tags": [
          "prompts"
        ],
        "parameters": [
          {
            "name": "prompt",
            "in": "path",
            "description": "Name of the prompt.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PromptGroupNameEnum"
            }
          },
          {
            "name": "language",
            "in": "path",
            "description": "Language to update.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PromptLanguageEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Prompt dictionaries successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCustomTextsByLanguageResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:prompts."
          },
          "404": {
            "description": "The prompt does not exist."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_custom-text_by_language",
        "x-operation-name": "getCustomTextByLanguage",
        "x-operation-group": "prompts",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:prompts"
            ]
          }
        ]
      },
      "put": {
        "summary": "Set custom text for a specific prompt",
        "description": "Set custom text for a specific prompt. Existing texts will be overwritten.",
        "tags": [
          "prompts"
        ],
        "parameters": [
          {
            "name": "prompt",
            "in": "path",
            "description": "Name of the prompt.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PromptGroupNameEnum"
            }
          },
          {
            "name": "language",
            "in": "path",
            "description": "Language to update.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PromptLanguageEnum"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetsCustomTextsByLanguageRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SetsCustomTextsByLanguageRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Prompt dictionaries successfully updated."
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:prompts."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "put_custom-text_by_language",
        "x-operation-name": "setCustomTextByLanguage",
        "x-operation-group": "prompts",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:prompts"
            ]
          }
        ]
      }
    },
    "/prompts/{prompt}/partials": {
      "get": {
        "summary": "Get partials for a prompt",
        "description": "Get template partials for a prompt",
        "tags": [
          "prompts"
        ],
        "parameters": [
          {
            "name": "prompt",
            "in": "path",
            "description": "Name of the prompt.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PartialGroupsEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Prompt partials successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPartialsResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:prompts.",
            "x-description-1": "Permission Denied. This feature is not available on this plan."
          },
          "404": {
            "description": "The prompt does not exist."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_partials",
        "x-operation-name": "getPartials",
        "x-operation-group": "prompts",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:prompts"
            ]
          }
        ]
      },
      "put": {
        "summary": "Set partials for a prompt",
        "description": "Set template partials for a prompt",
        "tags": [
          "prompts"
        ],
        "parameters": [
          {
            "name": "prompt",
            "in": "path",
            "description": "Name of the prompt.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PartialGroupsEnum"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPartialsRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SetPartialsRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Template partials successfully updated."
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:prompts.",
            "x-description-1": "Permission Denied. This feature is not available on this plan."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "put_partials",
        "x-operation-name": "setPartials",
        "x-operation-group": "prompts",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:prompts"
            ]
          }
        ]
      }
    },
    "/prompts/{prompt}/screen/{screen}/rendering": {
      "get": {
        "summary": "Get render settings for a screen",
        "description": "Get render settings for a screen.",
        "tags": [
          "prompts"
        ],
        "parameters": [
          {
            "name": "prompt",
            "in": "path",
            "description": "Name of the prompt",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PromptGroupNameEnum"
            }
          },
          {
            "name": "screen",
            "in": "path",
            "description": "Name of the screen",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ScreenGroupNameEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ACUL settings successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAculResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "402": {
            "description": "A paid subscription is required to use Advanced Customizations."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:prompts.",
            "x-description-1": "This tenant does not have Advanced Customizations enabled.",
            "x-description-2": "This screen is not available in Advanced Customizations"
          },
          "404": {
            "description": "The prompt does not exist."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_rendering",
        "x-operation-name": "getAcul",
        "x-operation-group": "prompts",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:prompts"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update render settings for a screen",
        "description": "Learn more about <a href='https://auth0.com/docs/customize/login-pages/advanced-customizations/getting-started/configure-acul-screens'>configuring render settings</a> for advanced customization.\n\n<p>\n  Example <code>head_tags</code> array. See our <a href='https://auth0.com/docs/customize/login-pages/advanced-customizations/getting-started/configure-acul-screens'>documentation</a> on using Liquid variables within head tags.\n</p>\n<pre>{\n  \"head_tags\": [\n    {\n      \"tag\": \"script\",\n      \"attributes\": {\n        \"defer\": true,\n        \"src\": \"URL_TO_ASSET\",\n        \"async\": true,\n        \"integrity\": [\n          \"ASSET_SHA\"\n        ]\n      }\n    },\n    {\n      \"tag\": \"link\",\n      \"attributes\": {\n        \"href\": \"URL_TO_ASSET\",\n        \"rel\": \"stylesheet\"\n      }\n    }\n  ]\n}\n</pre>\n",
        "tags": [
          "prompts"
        ],
        "parameters": [
          {
            "name": "prompt",
            "in": "path",
            "description": "Name of the prompt",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PromptGroupNameEnum"
            }
          },
          {
            "name": "screen",
            "in": "path",
            "description": "Name of the screen",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ScreenGroupNameEnum"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAculRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAculRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ACUL settings successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateAculResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause.",
            "x-description-1": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "402": {
            "description": "A paid subscription is required to use Advanced Customizations."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:prompts.",
            "x-description-1": "This tenant does not have Advanced Customizations enabled.",
            "x-description-2": "This screen is not available in Advanced Customizations"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_rendering",
        "x-operation-name": "updateAcul",
        "x-operation-group": "prompts",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:prompts"
            ]
          }
        ]
      }
    },
    "/refresh-tokens/{id}": {
      "get": {
        "summary": "Get a refresh token",
        "description": "Retrieve refresh token information.",
        "tags": [
          "refresh-tokens"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID refresh token to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The refresh token was retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRefreshTokenResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation"
          },
          "403": {
            "description": "Insufficient scope, expected: read:refresh_tokens"
          },
          "404": {
            "description": "The refresh token does not exist."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_refresh_token",
        "x-operation-name": "get",
        "x-operation-group": "refreshTokens",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:refresh_tokens"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a refresh tokens",
        "description": "Delete a refresh token by its ID.",
        "tags": [
          "refresh-tokens"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the refresh token to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Refresh token deletion request accepted."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected: delete:refresh_tokens"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_refresh_token",
        "x-operation-name": "delete",
        "x-operation-group": "refreshTokens",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:refresh_tokens"
            ]
          }
        ]
      }
    },
    "/resource-servers": {
      "get": {
        "summary": "Get resource servers",
        "description": "Retrieve details of all APIs associated with your tenant.",
        "tags": [
          "resource-servers"
        ],
        "parameters": [
          {
            "name": "identifiers",
            "in": "query",
            "description": "An optional filter on the resource server identifier. Must be URL encoded and may be specified multiple times (max 10).<br /><b>e.g.</b> <i>../resource-servers?identifiers=id1&identifiers=id2</i>",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "minLength": 1
              }
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page index of the results to return. First page is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include_fields",
            "in": "query",
            "description": "Whether specified fields are to be included (true) or excluded (false).",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource servers successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/resourceServer"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "start": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "total": {
                          "type": "number"
                        },
                        "resource_servers": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/resourceServer"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope, expected any of: read:resource_servers."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_resource-servers",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:resource_servers"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create a resource server",
        "description": "Create a new API associated with your tenant. Note that all new APIs must be registered with Auth0. For more information, read <a href=\"https://www.auth0.com/docs/get-started/apis\"> APIs</a>.",
        "tags": [
          "resource-servers"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/resourceServerCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/resourceServerCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Resource server successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceServer"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause.",
            "x-description-1": "The selected identifier is reserved."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: create:resource_servers.",
            "x-description-1": "You reached the limit of entities of this type for this tenant."
          },
          "409": {
            "description": "A resource server with the same identifier already exists."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_resource-servers",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:resource_servers"
            ]
          }
        ]
      }
    },
    "/resource-servers/{id}": {
      "get": {
        "summary": "Get a resource server",
        "description": "Retrieve <a href=\"https://auth0.com/docs/apis\">API</a> details with the given ID.",
        "tags": [
          "resource-servers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID or audience of the resource server to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_fields",
            "in": "query",
            "description": "Whether specified fields are to be included (true) or excluded (false).",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource server successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceServer"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:resource_servers.",
            "x-description-1": "Some fields cannot be read with the permissions granted by the bearer token scopes. The message will vary depending on the fields and the scopes."
          },
          "404": {
            "description": "Resource server not found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_resource-servers_by_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:resource_servers"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a resource server",
        "description": "Delete an existing API by ID. For more information, read <a href=\"https://www.auth0.com/docs/get-started/apis/api-settings\">API Settings</a>.",
        "tags": [
          "resource-servers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID or the audience of the resource server to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Resource server successfully deleted."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "System resource servers cannot be deleted."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: delete:resource_servers."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_resource-servers_by_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:resource_servers"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update a resource server",
        "description": "Change an existing API setting by resource server ID. For more information, read <a href=\"https://www.auth0.com/docs/get-started/apis/api-settings\">API Settings</a>.",
        "tags": [
          "resource-servers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID or audience of the resource server to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/resourceServerUpdate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/resourceServerUpdate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Resource server successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceServer"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause.",
            "x-description-1": "System resource servers cannot be patched."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:resource_servers."
          },
          "409": {
            "description": "A resource server with the same identifier already exists."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_resource-servers_by_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:resource_servers"
            ]
          }
        ]
      }
    },
    "/roles": {
      "get": {
        "summary": "Get roles",
        "description": "Retrieve detailed list of user roles created in your tenant.\n\n<b>Note</b>: The returned list does not include standard roles available for tenant members, such as Admin or Support Access.\n",
        "tags": [
          "roles"
        ],
        "parameters": [
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page index of the results to return. First page is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "name_filter",
            "in": "query",
            "description": "Optional filter on name (case-insensitive).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Roles successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListRolesResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected: read:roles."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_roles",
        "x-operation-name": "list",
        "x-operation-group": "roles",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:roles"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create a role",
        "description": "Create a user role for <a href=\"https://auth0.com/docs/manage-users/access-control/rbac\">Role-Based Access Control</a>.\n\n<b>Note</b>: New roles are not associated with any permissions by default. To assign existing permissions to your role, review Associate Permissions with a Role. To create new permissions, review Add API Permissions.\n",
        "tags": [
          "roles"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRoleRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateRoleRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Role successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateRoleResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected: create:roles."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_roles",
        "x-operation-name": "create",
        "x-operation-group": "roles",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:roles"
            ]
          }
        ]
      }
    },
    "/roles/{id}": {
      "get": {
        "summary": "Get a role",
        "description": "Retrieve details about a specific <a href=\"https://auth0.com/docs/manage-users/access-control/rbac\">user role</a> specified by ID.\n",
        "tags": [
          "roles"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the role to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Role successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRoleResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected: read:roles."
          },
          "404": {
            "description": "Role not found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_roles_by_id",
        "x-operation-name": "get",
        "x-operation-group": "roles",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:roles"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a role",
        "description": "Delete a specific <a href=\"https://auth0.com/docs/manage-users/access-control/rbac\">user role</a> from your tenant. Once deleted, it is removed from any user who was previously assigned that role. This action cannot be undone.\n",
        "tags": [
          "roles"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the role to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Role successfully deleted."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected: delete:roles."
          },
          "404": {
            "description": "Role not found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_roles_by_id",
        "x-operation-name": "delete",
        "x-operation-group": "roles",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:roles"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update a role",
        "description": "Modify the details of a specific <a href=\"https://auth0.com/docs/manage-users/access-control/rbac\">user role</a> specified by ID.\n",
        "tags": [
          "roles"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the role to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Role successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateRoleResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected: update:roles."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_roles_by_id",
        "x-operation-name": "update",
        "x-operation-group": "roles",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:roles"
            ]
          }
        ]
      }
    },
    "/roles/{id}/permissions": {
      "get": {
        "summary": "Get permissions granted by role",
        "description": "Retrieve detailed list (name, description, resource server) of permissions granted by a specified user role.\n",
        "tags": [
          "roles"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the role to list granted permissions.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page index of the results to return. First page is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Role permissions successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListRolePermissionsResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected: read:roles."
          },
          "404": {
            "description": "Role not found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_role_permission",
        "x-operation-name": "listPermissions",
        "x-operation-group": "roles",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:roles"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Remove permissions from a role",
        "description": "Remove one or more <a href=\"https://auth0.com/docs/manage-users/access-control/configure-core-rbac/manage-permissions\">permissions</a> from a specified user role.\n",
        "tags": [
          "roles"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the role to remove permissions from.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRolePermissionsRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRolePermissionsRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Role permissions successfully updated."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected: update:roles."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_role_permission_assignment",
        "x-operation-name": "deletePermissions",
        "x-operation-group": "roles",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:roles"
            ]
          }
        ]
      },
      "post": {
        "summary": "Associate permissions with a role",
        "description": "Add one or more <a href=\"https://auth0.com/docs/manage-users/access-control/configure-core-rbac/manage-permissions\">permissions</a> to a specified user role.\n",
        "tags": [
          "roles"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the role to add permissions to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddRolePermissionsRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/AddRolePermissionsRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Role permissions updated."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected: update:roles."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_role_permission_assignment",
        "x-operation-name": "addPermissions",
        "x-operation-group": "roles",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:roles"
            ]
          }
        ]
      }
    },
    "/roles/{id}/users": {
      "get": {
        "summary": "Get a role's users",
        "description": "Retrieve list of users associated with a specific role. For Dashboard instructions, review <a href=\"https://auth0.com/docs/manage-users/access-control/configure-core-rbac/roles/view-users-assigned-to-roles\">View Users Assigned to Roles</a>.\n\nThis endpoint supports two types of pagination:\n<ul>\n<li>Offset pagination</li>\n<li>Checkpoint pagination</li>\n</ul>\n\nCheckpoint pagination must be used if you need to retrieve more than 1000 organization members.\n\n<h2>Checkpoint Pagination</h2>\n\nTo search by checkpoint, use the following parameters:\n<ul>\n<li><code>from</code>: Optional id from which to start selection.</li>\n<li><code>take</code>: The total amount of entries to retrieve when using the from parameter. Defaults to 50.</li>\n</ul>\n\n<b>Note</b>: The first time you call this endpoint using checkpoint pagination, omit the <code>from</code> parameter. If there are more results, a <code>next</code> value is included in the response. You can use this for subsequent API calls. When <code>next</code> is no longer included in the response, no pages are remaining.\n",
        "tags": [
          "roles"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the role to retrieve a list of users associated with.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page index of the results to return. First page is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Optional Id from which to start selection.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Role users successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListRoleUsersResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected all of: read:users, read:roles."
          },
          "404": {
            "description": "Role not found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_role_user",
        "x-operation-name": "listUsers",
        "x-operation-group": "roles",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:users",
              "read:roles",
              "read:role_members"
            ]
          }
        ]
      },
      "post": {
        "summary": "Assign users to a role",
        "description": "Assign one or more users to an existing user role. To learn more, review <a href=\"https://auth0.com/docs/manage-users/access-control/rbac\">Role-Based Access Control</a>.\n\n<b>Note</b>: New roles cannot be created through this action.\n",
        "tags": [
          "roles"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the role to assign users to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignRoleUsersRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/AssignRoleUsersRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Role users successfully updated."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected: update:roles."
          },
          "404": {
            "description": "Role not found.",
            "x-description-1": "One or more of the users do not exist."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_role_users",
        "x-operation-name": "assignUsers",
        "x-operation-group": "roles",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:roles",
              "create:role_members"
            ]
          }
        ]
      }
    },
    "/rules": {
      "get": {
        "summary": "Get rules",
        "description": "Retrieve a filtered list of <a href=\"https://auth0.com/docs/rules\">rules</a>. Accepts a list of fields to include or exclude.\n",
        "tags": [
          "rules"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page index of the results to return. First page is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "enabled",
            "in": "query",
            "description": "Optional filter on whether a rule is enabled (true) or disabled (false).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated list of fields to include or exclude (based on value provided for include_fields) in the result. Leave empty to retrieve all fields.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_fields",
            "in": "query",
            "description": "Whether specified fields are to be included (true) or excluded (false).",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rules successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/rule"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "start": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "total": {
                          "type": "number"
                        },
                        "rules": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/rule"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:rules."
          },
          "404": {
            "description": "Rule not found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_rules",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:rules"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create a rule",
        "description": "Create a <a href=\"https://auth0.com/docs/rules#create-a-new-rule-using-the-management-api\">new rule</a>.\n\nNote: Changing a rule's stage of execution from the default <code>login_success</code> can change the rule's function signature to have user omitted.\n",
        "tags": [
          "rules"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ruleCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ruleCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Rule successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rule"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:rules.",
            "x-description-1": "You reached the limit of entities of this type for this tenant."
          },
          "409": {
            "description": "A rule with the same name already exists.",
            "x-description-1": "A rule with the same order already exists.",
            "x-description-2": "A rule with the same execution stage already exists."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_rules",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:rules"
            ]
          }
        ]
      }
    },
    "/rules-configs": {
      "get": {
        "summary": "Retrieve config variable keys for rules (get_rules-configs)",
        "description": "Retrieve rules config variable keys.\n\n    Note: For security, config variable values cannot be retrieved outside rule execution.",
        "tags": [
          "rules-configs"
        ],
        "responses": {
          "200": {
            "description": "Rules config keys successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "key": {
                        "type": "string",
                        "description": "Key for a rules config variable.",
                        "default": "MY_RULES_CONFIG_KEY",
                        "minLength": 1,
                        "maxLength": 127
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:rules_configs."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_rules-configs",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:rules_configs"
            ]
          }
        ]
      }
    },
    "/rules-configs/{key}": {
      "delete": {
        "summary": "Delete rules config for a given key",
        "description": "Delete a rules config variable identified by its key.",
        "tags": [
          "rules-configs"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Key of the rules config variable to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Rules config variable successfully removed."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:rules_configs."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_rules-configs_by_key",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:rules_configs"
            ]
          }
        ]
      },
      "put": {
        "summary": "Set rules config for a given key",
        "description": "Sets a rules config variable.",
        "tags": [
          "rules-configs"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Key of the rules config variable to set (max length: 127 characters).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "value"
                ],
                "properties": {
                  "value": {
                    "type": "string",
                    "description": "Value for a rules config variable.",
                    "default": "MY_RULES_CONFIG_VALUE"
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "value"
                ],
                "properties": {
                  "value": {
                    "type": "string",
                    "description": "Value for a rules config variable.",
                    "default": "MY_RULES_CONFIG_VALUE"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rules config variable successfully set.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "required": [
                    "key",
                    "value"
                  ],
                  "properties": {
                    "key": {
                      "type": "string",
                      "description": "Key for a rules config variable.",
                      "default": "MY_RULES_CONFIG_KEY",
                      "minLength": 1,
                      "maxLength": 127
                    },
                    "value": {
                      "type": "string",
                      "description": "Value for a rules config variable.",
                      "default": "MY_RULES_CONFIG_VALUE"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:rules_configs."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "put_rules-configs_by_key",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:rules_configs"
            ]
          }
        ]
      }
    },
    "/rules/{id}": {
      "get": {
        "summary": "Get a rule",
        "description": "Retrieve <a href=\"https://auth0.com/docs/rules\">rule</a> details. Accepts a list of fields to include or exclude in the result.\n",
        "tags": [
          "rules"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the rule to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated list of fields to include or exclude (based on value provided for include_fields) in the result. Leave empty to retrieve all fields.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_fields",
            "in": "query",
            "description": "Whether specified fields are to be included (true) or excluded (false).",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rule successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rule"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:rules."
          },
          "404": {
            "description": "Rule not found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_rules_by_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:rules"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a rule",
        "description": "Delete a rule.\n",
        "tags": [
          "rules"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the rule to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Rule successfully deleted."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: delete:rules."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_rules_by_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:rules"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update a rule",
        "description": "Update an existing rule.\n",
        "tags": [
          "rules"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the rule to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ruleUpdate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ruleUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rule successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rule"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:rules."
          },
          "404": {
            "description": "Rule not found."
          },
          "409": {
            "description": "A rule with the same name already exists."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_rules_by_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:rules"
            ]
          }
        ]
      }
    },
    "/self-service-profiles": {
      "get": {
        "summary": "Get self-service profiles",
        "description": "Retrieves self-service profiles.\n",
        "tags": [
          "self-service-profiles"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page index of the results to return. First page is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of existing profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ssProfile"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "start": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "total": {
                          "type": "number"
                        },
                        "self_service_profiles": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ssProfile"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope, expected: read:self_service_profiles."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          },
          "500": {
            "description": "Internal error."
          }
        },
        "operationId": "get_self-service-profiles",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:self_service_profiles"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create a self-service profile",
        "description": "Creates a self-service profile.\n",
        "tags": [
          "self-service-profiles"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ssProfileCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ssProfileCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Self-service profile successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ssProfile"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Request Body."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope, expected: create:self_service_profiles."
          },
          "409": {
            "description": "No more profiles can be created for this tenant."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          },
          "500": {
            "description": "Internal error."
          }
        },
        "operationId": "post_self-service-profiles",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:self_service_profiles"
            ]
          }
        ]
      }
    },
    "/self-service-profiles/{id}": {
      "get": {
        "summary": "Get a self-service profile by Id",
        "description": "Retrieves a self-service profile by Id.",
        "tags": [
          "self-service-profiles"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the self-service profile to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record for existing self-service profile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ssProfile"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Request."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope, expected: read:self_service_profiles."
          },
          "404": {
            "description": "Self-service profile not found"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          },
          "500": {
            "description": "Internal error."
          }
        },
        "operationId": "get_self-service-profiles_by_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:self_service_profiles"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a self-service profile by Id",
        "description": "Deletes a self-service profile by Id.",
        "tags": [
          "self-service-profiles"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the self-service profile to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Self-service profile successfully deleted.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Invalid Request."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope, expected: delete:self_service_profiles."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          },
          "500": {
            "description": "Internal error."
          }
        },
        "operationId": "delete_self-service-profiles_by_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:self_service_profiles"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update a self-service profile",
        "description": "Updates a self-service profile.",
        "tags": [
          "self-service-profiles"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the self-service profile to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ssProfileUpdate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ssProfileUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Self-service profile successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ssProfile"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Request."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope, expected: update:self_service_profiles."
          },
          "404": {
            "description": "Self-service profile not found"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          },
          "500": {
            "description": "Internal error."
          }
        },
        "operationId": "patch_self-service-profiles_by_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:self_service_profiles"
            ]
          }
        ]
      }
    },
    "/self-service-profiles/{id}/custom-text/{language}/{page}": {
      "get": {
        "summary": "Get custom text for a self-service profile",
        "description": "Retrieves text customizations for a given self-service profile, language and Self Service SSO Flow page.\n",
        "tags": [
          "self-service-profiles"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the self-service profile.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "in": "path",
            "description": "The language of the custom text.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "en"
              ]
            }
          },
          {
            "name": "page",
            "in": "path",
            "description": "The page where the custom text is shown.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "get-started"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved custom text.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "The list of custom text keys and values.",
                  "additionalProperties": true
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:self_service_profile_custom_texts."
          },
          "404": {
            "description": "Self-service profile not found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_self_service_profile_custom_text",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:self_service_profile_custom_texts"
            ]
          }
        ]
      },
      "put": {
        "summary": "Set custom text for a self-service profile",
        "description": "Updates text customizations for a given self-service profile, language and Self Service SSO Flow page.\n",
        "tags": [
          "self-service-profiles"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the self-service profile.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "in": "path",
            "description": "The language of the custom text.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "en"
              ]
            }
          },
          {
            "name": "page",
            "in": "path",
            "description": "The page where the custom text is shown.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "get-started"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The list of text keys and values to customize the self-service SSO page. Values can be plain text or rich HTML content limited to basic styling tags and hyperlinks.",
                "additionalProperties": true
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "description": "The list of text keys and values to customize the self-service SSO page. Values can be plain text or rich HTML content limited to basic styling tags and hyperlinks.",
                "additionalProperties": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated custom text.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "The resulting list of custom text keys and values.",
                  "additionalProperties": true
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:self_service_profile_custom_texts."
          },
          "404": {
            "description": "Self-service profile not found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "put_self_service_profile_custom_text",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:self_service_profile_custom_texts"
            ]
          }
        ]
      }
    },
    "/self-service-profiles/{id}/sso-ticket": {
      "post": {
        "summary": "Create an SSO access ticket to initiate the Self Service SSO Flow",
        "description": "Creates an SSO access ticket to initiate the Self Service SSO Flow using a self-service profile.\n",
        "tags": [
          "self-service-profiles"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the self-service profile to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "connection_id": {
                    "type": "string",
                    "description": "If provided, this will allow editing of the provided connection during the SSO Flow"
                  },
                  "connection_config": {
                    "type": "object",
                    "description": "If provided, this will create a new connection for the SSO flow with the given configuration",
                    "additionalProperties": false,
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The name of the connection that will be created as a part of the SSO flow.",
                        "default": "sso-generated-SAML-customer-12",
                        "minLength": 1,
                        "maxLength": 128
                      },
                      "display_name": {
                        "type": "string",
                        "description": "Connection name used in the new universal login experience",
                        "maxLength": 128
                      },
                      "is_domain_connection": {
                        "type": "boolean",
                        "description": "<code>true</code> promotes to a domain-level connection so that third-party applications can use it. <code>false</code> does not promote the connection, so only first-party applications with the connection enabled can use it. (Defaults to <code>false</code>.)"
                      },
                      "show_as_button": {
                        "type": "boolean",
                        "description": "Enables showing a button for the connection in the login page (new experience only). If false, it will be usable only by HRD. (Defaults to <code>false</code>.)"
                      },
                      "metadata": {
                        "type": "object",
                        "description": "Metadata associated with the connection in the form of an object with string values (max 255 chars).  Maximum of 10 metadata properties allowed.",
                        "additionalProperties": true
                      },
                      "options": {
                        "type": "object",
                        "nullable": true,
                        "description": "The connection's options (depend on the connection strategy)",
                        "additionalProperties": false,
                        "properties": {
                          "icon_url": {
                            "type": "string",
                            "nullable": true,
                            "description": "URL for the icon. Must use HTTPS.",
                            "format": "strict-https-uri-or-null"
                          },
                          "domain_aliases": {
                            "type": "array",
                            "description": "List of domain_aliases that can be authenticated in the Identity Provider",
                            "items": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 255
                            }
                          },
                          "idpinitiated": {
                            "type": "object",
                            "nullable": true,
                            "description": "Allows IdP-initiated login",
                            "additionalProperties": false,
                            "properties": {
                              "enabled": {
                                "type": "boolean",
                                "description": "Enables IdP-initiated login for this connection"
                              },
                              "client_id": {
                                "type": "string",
                                "description": "Default application <code>client_id</code> user is redirected to after validated SAML response",
                                "format": "client-id"
                              },
                              "client_protocol": {
                                "type": "string",
                                "description": "The protocol used to connect to the the default application",
                                "enum": [
                                  "samlp",
                                  "wsfed",
                                  "oauth2"
                                ]
                              },
                              "client_authorizequery": {
                                "type": "string",
                                "description": "Query string options to customize the behaviour for OpenID Connect when <code>idpinitiated.client_protocol</code> is <code>oauth2</code>. Allowed parameters: <code>redirect_uri</code>, <code>scope</code>, <code>response_type</code>. For example, <code>redirect_uri=https://jwt.io&scope=openid email&response_type=token</code>",
                                "maxLength": 256
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "enabled_clients": {
                    "type": "array",
                    "description": "List of client_ids that the connection will be enabled for.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "enabled_organizations": {
                    "type": "array",
                    "description": "List of organizations that the connection will be enabled for.",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "organization_id"
                      ],
                      "properties": {
                        "organization_id": {
                          "type": "string",
                          "description": "Organization identifier.",
                          "format": "organization-id"
                        },
                        "assign_membership_on_login": {
                          "type": "boolean",
                          "description": "When true, all users that log in with this connection will be automatically granted membership in the organization. When false, users must be granted membership in the organization before logging in with this connection."
                        },
                        "show_as_button": {
                          "type": "boolean",
                          "description": "Determines whether a connection should be displayed on this organization’s login prompt. Only applicable for enterprise connections. Default: true."
                        }
                      }
                    }
                  },
                  "ttl_sec": {
                    "type": "integer",
                    "description": "Number of seconds for which the ticket is valid before expiration. If unspecified or set to 0, this value defaults to 432000 seconds (5 days)."
                  },
                  "domain_aliases_config": {
                    "type": "object",
                    "description": "Configuration for the setup of the connection’s domain_aliases in the self-service SSO flow.",
                    "additionalProperties": false,
                    "required": [
                      "domain_verification"
                    ],
                    "properties": {
                      "domain_verification": {
                        "type": "string",
                        "description": "Whether the end user should complete the domain verification step. Possible values are 'none' (the step is not shown to the user), 'optional' (the user may add a domain alias in the domain verification step) or 'required' (the user must add a domain alias in order to enable the connection). Defaults to 'none'.",
                        "enum": [
                          "none",
                          "optional",
                          "required"
                        ]
                      }
                    }
                  },
                  "directory_sync_config": {
                    "$ref": "#/components/schemas/DirectorySynConfig"
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "connection_id": {
                    "type": "string",
                    "description": "If provided, this will allow editing of the provided connection during the SSO Flow"
                  },
                  "connection_config": {
                    "type": "object",
                    "description": "If provided, this will create a new connection for the SSO flow with the given configuration",
                    "additionalProperties": false,
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The name of the connection that will be created as a part of the SSO flow.",
                        "default": "sso-generated-SAML-customer-12",
                        "minLength": 1,
                        "maxLength": 128
                      },
                      "display_name": {
                        "type": "string",
                        "description": "Connection name used in the new universal login experience",
                        "maxLength": 128
                      },
                      "is_domain_connection": {
                        "type": "boolean",
                        "description": "<code>true</code> promotes to a domain-level connection so that third-party applications can use it. <code>false</code> does not promote the connection, so only first-party applications with the connection enabled can use it. (Defaults to <code>false</code>.)"
                      },
                      "show_as_button": {
                        "type": "boolean",
                        "description": "Enables showing a button for the connection in the login page (new experience only). If false, it will be usable only by HRD. (Defaults to <code>false</code>.)"
                      },
                      "metadata": {
                        "type": "object",
                        "description": "Metadata associated with the connection in the form of an object with string values (max 255 chars).  Maximum of 10 metadata properties allowed.",
                        "additionalProperties": true
                      },
                      "options": {
                        "type": "object",
                        "nullable": true,
                        "description": "The connection's options (depend on the connection strategy)",
                        "additionalProperties": false,
                        "properties": {
                          "icon_url": {
                            "type": "string",
                            "nullable": true,
                            "description": "URL for the icon. Must use HTTPS.",
                            "format": "strict-https-uri-or-null"
                          },
                          "domain_aliases": {
                            "type": "array",
                            "description": "List of domain_aliases that can be authenticated in the Identity Provider",
                            "items": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 255
                            }
                          },
                          "idpinitiated": {
                            "type": "object",
                            "nullable": true,
                            "description": "Allows IdP-initiated login",
                            "additionalProperties": false,
                            "properties": {
                              "enabled": {
                                "type": "boolean",
                                "description": "Enables IdP-initiated login for this connection"
                              },
                              "client_id": {
                                "type": "string",
                                "description": "Default application <code>client_id</code> user is redirected to after validated SAML response",
                                "format": "client-id"
                              },
                              "client_protocol": {
                                "type": "string",
                                "description": "The protocol used to connect to the the default application",
                                "enum": [
                                  "samlp",
                                  "wsfed",
                                  "oauth2"
                                ]
                              },
                              "client_authorizequery": {
                                "type": "string",
                                "description": "Query string options to customize the behaviour for OpenID Connect when <code>idpinitiated.client_protocol</code> is <code>oauth2</code>. Allowed parameters: <code>redirect_uri</code>, <code>scope</code>, <code>response_type</code>. For example, <code>redirect_uri=https://jwt.io&scope=openid email&response_type=token</code>",
                                "maxLength": 256
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "enabled_clients": {
                    "type": "array",
                    "description": "List of client_ids that the connection will be enabled for.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "enabled_organizations": {
                    "type": "array",
                    "description": "List of organizations that the connection will be enabled for.",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "organization_id"
                      ],
                      "properties": {
                        "organization_id": {
                          "type": "string",
                          "description": "Organization identifier.",
                          "format": "organization-id"
                        },
                        "assign_membership_on_login": {
                          "type": "boolean",
                          "description": "When true, all users that log in with this connection will be automatically granted membership in the organization. When false, users must be granted membership in the organization before logging in with this connection."
                        },
                        "show_as_button": {
                          "type": "boolean",
                          "description": "Determines whether a connection should be displayed on this organization’s login prompt. Only applicable for enterprise connections. Default: true."
                        }
                      }
                    }
                  },
                  "ttl_sec": {
                    "type": "integer",
                    "description": "Number of seconds for which the ticket is valid before expiration. If unspecified or set to 0, this value defaults to 432000 seconds (5 days)."
                  },
                  "domain_aliases_config": {
                    "type": "object",
                    "description": "Configuration for the setup of the connection’s domain_aliases in the self-service SSO flow.",
                    "additionalProperties": false,
                    "required": [
                      "domain_verification"
                    ],
                    "properties": {
                      "domain_verification": {
                        "type": "string",
                        "description": "Whether the end user should complete the domain verification step. Possible values are 'none' (the step is not shown to the user), 'optional' (the user may add a domain alias in the domain verification step) or 'required' (the user must add a domain alias in order to enable the connection). Defaults to 'none'.",
                        "enum": [
                          "none",
                          "optional",
                          "required"
                        ]
                      }
                    }
                  },
                  "directory_sync_config": {
                    "$ref": "#/components/schemas/DirectorySynConfig"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "SSO Access Ticket successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ssoAccessTicketResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: create:sso_access_tickets."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_sso-ticket",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:sso_access_tickets"
            ]
          }
        ]
      }
    },
    "/self-service-profiles/{profileId}/sso-ticket/{id}/revoke": {
      "post": {
        "summary": "Revoke an SSO access ticket",
        "description": "Revokes an SSO access ticket and invalidates associated sessions. The ticket will no longer be accepted to initiate a Self-Service SSO session. If any users have already started a session through this ticket, their session will be terminated. Clients should expect a `202 Accepted` response upon successful processing, indicating that the request has been acknowledged and that the revocation is underway but may not be fully completed at the time of response. If the specified ticket does not exist, a `202 Accepted` response is also returned, signaling that no further action is required.\nClients should treat these `202` responses as an acknowledgment that the request has been accepted and is in progress, even if the ticket was not found.\n",
        "tags": [
          "self-service-profiles"
        ],
        "parameters": [
          {
            "name": "profileId",
            "in": "path",
            "description": "The id of the self-service profile",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the ticket to revoke",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "SSO Access Ticket revocation request accepted.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: delete:sso_access_tickets."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_revoke",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:sso_access_tickets"
            ]
          }
        ]
      }
    },
    "/sessions/{id}": {
      "get": {
        "summary": "Get session",
        "description": "Retrieve session information.",
        "tags": [
          "sessions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of session to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The session was retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSessionResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation"
          },
          "403": {
            "description": "Insufficient scope, expected any of: read:sessions"
          },
          "404": {
            "description": "The session does not exist."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_session",
        "x-operation-name": "get",
        "x-operation-group": "sessions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:sessions"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete session",
        "description": "Delete a session by ID.",
        "tags": [
          "sessions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the session to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Session deletion request accepted."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected: delete:sessions"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_session",
        "x-operation-name": "delete",
        "x-operation-group": "sessions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:sessions"
            ]
          }
        ]
      }
    },
    "/sessions/{id}/revoke": {
      "post": {
        "summary": "Revokes a session",
        "description": "Revokes a session by ID and all associated refresh tokens.",
        "tags": [
          "sessions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the session to revoke.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Session deletion request accepted."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected: delete:sessions"
          },
          "404": {
            "description": "The session does not exist."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "revoke_session",
        "x-operation-name": "revoke",
        "x-operation-group": "sessions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:sessions",
              "delete:refresh_tokens"
            ]
          }
        ]
      }
    },
    "/stats/active-users": {
      "get": {
        "summary": "Get active users count",
        "description": "Retrieve the number of active users that logged in during the last 30 days.",
        "tags": [
          "stats"
        ],
        "responses": {
          "200": {
            "description": "Number of active users successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number",
                  "description": "Number of active users in the last 30 days.",
                  "default": 100
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:stats."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_active-users",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:stats"
            ]
          }
        ]
      }
    },
    "/stats/daily": {
      "get": {
        "summary": "Get daily stats",
        "description": "Retrieve the number of logins, signups and breached-password detections (subscription required) that occurred each day within a specified date range.",
        "tags": [
          "stats"
        ],
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Optional first day of the date range (inclusive) in YYYYMMDD format.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "Optional last day of the date range (inclusive) in YYYYMMDD format.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Daily stats successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/statsEntry"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query. The message will vary depending on the cause.",
            "x-description-1": "'from' date cannot be greater than 'to' date."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:stats."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_daily",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:stats"
            ]
          }
        ]
      }
    },
    "/tenants/settings": {
      "get": {
        "summary": "Get tenant settings",
        "description": "Retrieve tenant settings. A list of fields to include or exclude may also be specified.",
        "tags": [
          "tenants"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated list of fields to include or exclude (based on value provided for include_fields) in the result. Leave empty to retrieve all fields.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_fields",
            "in": "query",
            "description": "Whether specified fields are to be included (true) or excluded (false).",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tenant settings successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tenantSettings"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "The specified client cannot perform the requested operation.",
            "x-description-1": "Insufficient scope; expected any of: read:tenant_settings."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "tenant_settings_route",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:tenant_settings"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update tenant settings",
        "description": "Update settings for a tenant.",
        "tags": [
          "tenants"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tenantSettingsUpdate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/tenantSettingsUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tenant settings successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tenantSettings"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:tenant_settings."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_settings",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:tenant_settings"
            ]
          }
        ]
      }
    },
    "/tickets/email-verification": {
      "post": {
        "summary": "Create an email verification ticket",
        "description": "Create an email verification ticket for a given user. An email verification ticket is a generated URL that the user can consume to verify their email address.\n",
        "tags": [
          "tickets"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "user_id"
                ],
                "properties": {
                  "result_url": {
                    "type": "string",
                    "description": "URL the user will be redirected to in the classic Universal Login experience once the ticket is used.",
                    "default": "http://myapp.com/callback",
                    "format": "url"
                  },
                  "user_id": {
                    "type": "string",
                    "description": "user_id of for whom the ticket should be created.",
                    "format": "user-id"
                  },
                  "client_id": {
                    "type": "string",
                    "description": "ID of the client (application). If provided for tenants using the New Universal Login experience, the email template and UI displays application details, and the user is prompted to redirect to the application's <a target='' href='https://auth0.com/docs/authenticate/login/auth0-universal-login/configure-default-login-routes#completing-the-password-reset-flow'>default login route</a> after the ticket is used. client_id is required to use the <a target='' href='https://auth0.com/docs/customize/actions/flows-and-triggers/post-change-password-flow'>Password Reset Post Challenge</a> trigger.",
                    "default": "DaM8bokEXBWrTUFCiJjWn50jei6ardyX",
                    "format": "client-id"
                  },
                  "organization_id": {
                    "type": "string",
                    "description": "(Optional) Organization ID – the ID of the Organization. If provided, organization parameters will be made available to the email template and organization branding will be applied to the prompt. In addition, the redirect link in the prompt will include organization_id and organization_name query string parameters.",
                    "default": "org_2eondWoxcMIpaLQc",
                    "format": "organization-id"
                  },
                  "ttl_sec": {
                    "type": "integer",
                    "description": "Number of seconds for which the ticket is valid before expiration. If unspecified or set to 0, this value defaults to 432000 seconds (5 days)."
                  },
                  "includeEmailInRedirect": {
                    "type": "boolean",
                    "description": "Whether to include the email address as part of the returnUrl in the reset_email (true), or not (false)."
                  },
                  "identity": {
                    "$ref": "#/components/schemas/Identity"
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "user_id"
                ],
                "properties": {
                  "result_url": {
                    "type": "string",
                    "description": "URL the user will be redirected to in the classic Universal Login experience once the ticket is used.",
                    "default": "http://myapp.com/callback",
                    "format": "url"
                  },
                  "user_id": {
                    "type": "string",
                    "description": "user_id of for whom the ticket should be created.",
                    "format": "user-id"
                  },
                  "client_id": {
                    "type": "string",
                    "description": "ID of the client (application). If provided for tenants using the New Universal Login experience, the email template and UI displays application details, and the user is prompted to redirect to the application's <a target='' href='https://auth0.com/docs/authenticate/login/auth0-universal-login/configure-default-login-routes#completing-the-password-reset-flow'>default login route</a> after the ticket is used. client_id is required to use the <a target='' href='https://auth0.com/docs/customize/actions/flows-and-triggers/post-change-password-flow'>Password Reset Post Challenge</a> trigger.",
                    "default": "DaM8bokEXBWrTUFCiJjWn50jei6ardyX",
                    "format": "client-id"
                  },
                  "organization_id": {
                    "type": "string",
                    "description": "(Optional) Organization ID – the ID of the Organization. If provided, organization parameters will be made available to the email template and organization branding will be applied to the prompt. In addition, the redirect link in the prompt will include organization_id and organization_name query string parameters.",
                    "default": "org_2eondWoxcMIpaLQc",
                    "format": "organization-id"
                  },
                  "ttl_sec": {
                    "type": "integer",
                    "description": "Number of seconds for which the ticket is valid before expiration. If unspecified or set to 0, this value defaults to 432000 seconds (5 days)."
                  },
                  "includeEmailInRedirect": {
                    "type": "boolean",
                    "description": "Whether to include the email address as part of the returnUrl in the reset_email (true), or not (false)."
                  },
                  "identity": {
                    "$ref": "#/components/schemas/Identity"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Ticket successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "required": [
                    "ticket"
                  ],
                  "properties": {
                    "ticket": {
                      "type": "string",
                      "description": "URL representing the ticket.",
                      "default": "https://login.auth0.com/lo/verify_email?client_id=nsaPS2p3cargoFy82WT7betaOPOt3qSh&tenant=mdocs&bewit=bmNlR01CcDNOUE1GeXVzODJXVDdyY1RUT1BPdDNxU2hcMTQzMDY2MjE4MVxuRTcxM0RSeUNlbEpzUUJmaFVaS3A1NEdJbWFzSUZMYzRTdEFtY2NMMXhZPVx7ImVtYWloojoiZGFtaWtww2NoQGhvdG1haWwuY29tIiwidGVuYW50IjoiZHNjaGVua2tjwWFuIiwiY2xpZW50X2lkIjoibmNlR01CcDNOUE1GeXVzODJXVDdyY1RUT1BPiiqxU2giLCJjb25uZWN0aW9uIjoiRGFtaWmsdiwicmVzdWx0VXJsIjoiIn0",
                      "format": "url"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause.",
            "x-description-1": "The user does not have an email address.",
            "x-description-2": "The user's main connection does not support this operation.",
            "x-description-3": "An error ocurred in Auth0's identity provider.",
            "x-description-4": "The connection with id {connection_id} does not exist.",
            "x-description-5": "The client does not exist",
            "x-description-6": "The organization does not exist",
            "x-description-7": "The user with id {user_id} is not a member of organization with id {organization_id}."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "User to be acted on does not match subject in bearer token.",
            "x-description-1": "Insufficient scope; expected any of: create:user_tickets."
          },
          "404": {
            "description": "User not found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_email-verification",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:user_tickets"
            ]
          }
        ]
      }
    },
    "/tickets/password-change": {
      "post": {
        "summary": "Create a password change ticket",
        "description": "Create a password change ticket for a given user. A password change ticket is a generated URL that the user can consume to start a reset password flow.\n\nNote: This endpoint does not verify the given user’s identity. If you call this endpoint within your application, you must design your application to verify the user’s identity.\n",
        "tags": [
          "tickets"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "result_url": {
                    "type": "string",
                    "description": "URL the user will be redirected to in the classic Universal Login experience once the ticket is used.",
                    "default": "http://myapp.com/callback",
                    "format": "url"
                  },
                  "user_id": {
                    "type": "string",
                    "description": "user_id of for whom the ticket should be created.",
                    "format": "user-id"
                  },
                  "client_id": {
                    "type": "string",
                    "description": "ID of the client (application). If provided for tenants using the New Universal Login experience, the email template and UI displays application details, and the user is prompted to redirect to the application's <a target='' href='https://auth0.com/docs/authenticate/login/auth0-universal-login/configure-default-login-routes#completing-the-password-reset-flow'>default login route</a> after the ticket is used. client_id is required to use the <a target='' href='https://auth0.com/docs/customize/actions/flows-and-triggers/post-change-password-flow'>Password Reset Post Challenge</a> trigger.",
                    "default": "DaM8bokEXBWrTUFCiJjWn50jei6ardyX",
                    "format": "client-id"
                  },
                  "organization_id": {
                    "type": "string",
                    "description": "(Optional) Organization ID – the ID of the Organization. If provided, organization parameters will be made available to the email template and organization branding will be applied to the prompt. In addition, the redirect link in the prompt will include organization_id and organization_name query string parameters.",
                    "default": "org_2eondWoxcMIpaLQc",
                    "format": "organization-id"
                  },
                  "connection_id": {
                    "type": "string",
                    "description": "ID of the connection. If provided, allows the user to be specified using email instead of user_id. If you set this value, you must also send the email parameter. You cannot send user_id when specifying a connection_id.",
                    "default": "con_0000000000000001"
                  },
                  "email": {
                    "type": "string",
                    "description": "Email address of the user for whom the tickets should be created. Requires the connection_id parameter. Cannot be specified when using user_id.",
                    "format": "email"
                  },
                  "ttl_sec": {
                    "type": "integer",
                    "description": "Number of seconds for which the ticket is valid before expiration. If unspecified or set to 0, this value defaults to 432000 seconds (5 days)."
                  },
                  "mark_email_as_verified": {
                    "type": "boolean",
                    "description": "Whether to set the email_verified attribute to true (true) or whether it should not be updated (false).",
                    "default": false
                  },
                  "includeEmailInRedirect": {
                    "type": "boolean",
                    "description": "Whether to include the email address as part of the returnUrl in the reset_email (true), or not (false)."
                  },
                  "identity": {
                    "$ref": "#/components/schemas/Identity"
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "result_url": {
                    "type": "string",
                    "description": "URL the user will be redirected to in the classic Universal Login experience once the ticket is used.",
                    "default": "http://myapp.com/callback",
                    "format": "url"
                  },
                  "user_id": {
                    "type": "string",
                    "description": "user_id of for whom the ticket should be created.",
                    "format": "user-id"
                  },
                  "client_id": {
                    "type": "string",
                    "description": "ID of the client (application). If provided for tenants using the New Universal Login experience, the email template and UI displays application details, and the user is prompted to redirect to the application's <a target='' href='https://auth0.com/docs/authenticate/login/auth0-universal-login/configure-default-login-routes#completing-the-password-reset-flow'>default login route</a> after the ticket is used. client_id is required to use the <a target='' href='https://auth0.com/docs/customize/actions/flows-and-triggers/post-change-password-flow'>Password Reset Post Challenge</a> trigger.",
                    "default": "DaM8bokEXBWrTUFCiJjWn50jei6ardyX",
                    "format": "client-id"
                  },
                  "organization_id": {
                    "type": "string",
                    "description": "(Optional) Organization ID – the ID of the Organization. If provided, organization parameters will be made available to the email template and organization branding will be applied to the prompt. In addition, the redirect link in the prompt will include organization_id and organization_name query string parameters.",
                    "default": "org_2eondWoxcMIpaLQc",
                    "format": "organization-id"
                  },
                  "connection_id": {
                    "type": "string",
                    "description": "ID of the connection. If provided, allows the user to be specified using email instead of user_id. If you set this value, you must also send the email parameter. You cannot send user_id when specifying a connection_id.",
                    "default": "con_0000000000000001"
                  },
                  "email": {
                    "type": "string",
                    "description": "Email address of the user for whom the tickets should be created. Requires the connection_id parameter. Cannot be specified when using user_id.",
                    "format": "email"
                  },
                  "ttl_sec": {
                    "type": "integer",
                    "description": "Number of seconds for which the ticket is valid before expiration. If unspecified or set to 0, this value defaults to 432000 seconds (5 days)."
                  },
                  "mark_email_as_verified": {
                    "type": "boolean",
                    "description": "Whether to set the email_verified attribute to true (true) or whether it should not be updated (false).",
                    "default": false
                  },
                  "includeEmailInRedirect": {
                    "type": "boolean",
                    "description": "Whether to include the email address as part of the returnUrl in the reset_email (true), or not (false)."
                  },
                  "identity": {
                    "$ref": "#/components/schemas/Identity"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Ticket successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "required": [
                    "ticket"
                  ],
                  "properties": {
                    "ticket": {
                      "type": "string",
                      "description": "URL representing the ticket.",
                      "default": "https://login.auth0.com/lo/reset?client_id=nsaPS2p3cargoFy82WT7betaOPOt3qSh&tenant=mdocs&bewit=bmNlR01CcDNOUE1GeXVzODJXVDdyY1RUT1BPdDNxU2hcMTQzMDY2MjE4MVxuRTcxM0RSeUNlbEpzUUJmaFVaS3A1NEdJbWFzSUZMYzRTdEFtY2NMMXhZPVx7ImVtYWloojoiZGFtaWtww2NoQGhvdG1haWwuY29tIiwidGVuYW50IjoiZHNjaGVua2tjwWFuIiwiY2xpZW50X2lkIjoibmNlR01CcDNOUE1GeXVzODJXVDdyY1RUT1BPiiqxU2giLCJjb25uZWN0aW9uIjoiRGFtaWmsdiwicmVzdWx0VXJsIjoiIn0",
                      "format": "url"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause.",
            "x-description-1": "The user does not have an email address.",
            "x-description-2": "The user's main connection does not support this operation.",
            "x-description-3": "An error ocurred in Auth0's identity provider.",
            "x-description-4": "The connection with id {connection_id} does not exist.",
            "x-description-5": "The client does not exist",
            "x-description-6": "The organization does not exist",
            "x-description-7": "The user with id {user_id} is not a member of organization with id {organization_id}."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "User to be acted on does not match subject in bearer token.",
            "x-description-1": "Insufficient scope; expected any of: create:user_tickets."
          },
          "404": {
            "description": "User not found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_password-change",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:user_tickets"
            ]
          }
        ]
      }
    },
    "/user-blocks": {
      "get": {
        "summary": "Get blocks by identifier",
        "description": "Retrieve details of all <a href=\"https://auth0.com/docs/secure/attack-protection/brute-force-protection\">Brute-force Protection</a> blocks for a user with the given identifier (username, phone number, or email).",
        "tags": [
          "user-blocks"
        ],
        "parameters": [
          {
            "name": "identifier",
            "in": "query",
            "description": "Should be any of a username, phone number, or email.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "consider_brute_force_enablement",
            "in": "query",
            "description": "\n          If true and Brute Force Protection is enabled and configured to block logins, will return a list of blocked IP addresses.\n          If true and Brute Force Protection is disabled, will return an empty list.\n        ",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userBlock"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:users."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_user-blocks",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:users"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Unblock by identifier",
        "description": "Remove all <a href=\"https://auth0.com/docs/secure/attack-protection/brute-force-protection\">Brute-force Protection</a> blocks for the user with the given identifier (username, phone number, or email).\n\nNote: This endpoint does not unblock users that were <a href=\"https://auth0.com/docs/user-profile#block-and-unblock-a-user\">blocked by a tenant administrator</a>.\n",
        "tags": [
          "user-blocks"
        ],
        "parameters": [
          {
            "name": "identifier",
            "in": "query",
            "description": "Should be any of a username, phone number, or email.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User successfully unblocked."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Some fields cannot be read with the permissions granted by the bearer token scopes. The message will vary depending on the fields and the scopes.",
            "x-description-1": "Insufficient scope; expected any of: update:users."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_user-blocks",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:users"
            ]
          }
        ]
      }
    },
    "/user-blocks/{id}": {
      "get": {
        "summary": "Get a user's blocks",
        "description": "Retrieve details of all <a href=\"https://auth0.com/docs/secure/attack-protection/brute-force-protection\">Brute-force Protection</a> blocks for the user with the given ID.\n",
        "tags": [
          "user-blocks"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "user_id of the user blocks to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "consider_brute_force_enablement",
            "in": "query",
            "description": "\n          If true and Brute Force Protection is enabled and configured to block logins, will return a list of blocked IP addresses.\n          If true and Brute Force Protection is disabled, will return an empty list.\n        ",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User block successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userBlock"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "User to be acted on does not match subject in bearer token.",
            "x-description-1": "Insufficient scope; expected any of: read:users."
          },
          "404": {
            "description": "User not found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_user-blocks_by_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:users"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Unblock a user",
        "description": "Remove all <a href=\"https://auth0.com/docs/secure/attack-protection/brute-force-protection\">Brute-force Protection</a> blocks for the user with the given ID.\n\nNote: This endpoint does not unblock users that were <a href=\"https://auth0.com/docs/user-profile#block-and-unblock-a-user\">blocked by a tenant administrator</a>.\n",
        "tags": [
          "user-blocks"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The user_id of the user to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User successfully unblocked."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "User to be acted on does not match subject in bearer token.",
            "x-description-1": "Some fields cannot be read with the permissions granted by the bearer token scopes. The message will vary depending on the fields and the scopes.",
            "x-description-2": "Insufficient scope; expected any of: update:users."
          },
          "404": {
            "description": "User not found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_user-blocks_by_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:users"
            ]
          }
        ]
      }
    },
    "/users": {
      "get": {
        "summary": "List or Search Users",
        "description": "Retrieve details of users. It is possible to:\n\n- Specify a search criteria for users\n- Sort the users to be returned\n- Select the fields to be returned\n- Specify the number of users to retrieve per page and the page index\n <!-- only v3 is available -->\nThe <code>q</code> query parameter can be used to get users that match the specified criteria <a href=\"https://auth0.com/docs/users/search/v3/query-syntax\">using query string syntax.</a>\n\n<a href=\"https://auth0.com/docs/users/search/v3\">Learn more about searching for users.</a>\n\nRead about <a href=\"https://auth0.com/docs/users/search/best-practices\">best practices</a> when working with the API endpoints for retrieving users.\n\nAuth0 limits the number of users you can return. If you exceed this threshold, please redefine your search, use the <a href=\"https://auth0.com/docs/api/management/v2#!/Jobs/post_users_exports\">export job</a>, or the <a href=\"https://auth0.com/docs/extensions/user-import-export\">User Import / Export</a> extension.\n",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page index of the results to return. First page is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Field to sort by. Use <code>field:order</code> where order is <code>1</code> for ascending and <code>-1</code> for descending. e.g. <code>created_at:1</code>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connection",
            "in": "query",
            "description": "Connection filter. Only applies when using <code>search_engine=v1</code>. To filter by connection with <code>search_engine=v2|v3</code>, use <code>q=identities.connection:\"connection_name\"</code>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated list of fields to include or exclude (based on value provided for include_fields) in the result. Leave empty to retrieve all fields.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_fields",
            "in": "query",
            "description": "Whether specified fields are to be included (true) or excluded (false).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Query in <a target='_new' href ='http://www.lucenetutorial.com/lucene-query-syntax.html'>Lucene query string syntax</a>. Not all metadata fields are searchable when using <code>search_engine=v2</code>, for details see <a href='https://auth0.com/docs/users/search/v2/query-syntax#searchable-fields'>Searchable Fields (v2)</a>. When using <code>search_engine=v3</code>, some query types cannot be used on metadata fields, for details see <a href='https://auth0.com/docs/users/search/v3/query-syntax#searchable-fields'>Searchable Fields (v3)</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search_engine",
            "in": "query",
            "description": "The version of the search engine",
            "schema": {
              "type": "string",
              "enum": [
                "v1",
                "v2",
                "v3"
              ]
            }
          },
          {
            "name": "primary_order",
            "in": "query",
            "description": "If true (default), results are returned in a deterministic order. If false, results may be returned in a non-deterministic order, which can enhance performance for complex queries targeting a small number of users. Set to false only when consistent ordering and pagination is not required.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Users successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "user_id": {
                            "type": "string",
                            "description": "ID of the user which can be used when interacting with other APIs.",
                            "default": "auth0|507f1f77bcf86cd799439020"
                          },
                          "email": {
                            "type": "string",
                            "description": "Email address of this user.",
                            "default": "john.doe@gmail.com",
                            "format": "email"
                          },
                          "email_verified": {
                            "type": "boolean",
                            "description": "Whether this email address is verified (true) or unverified (false).",
                            "default": false
                          },
                          "username": {
                            "type": "string",
                            "description": "Username of this user.",
                            "default": "johndoe"
                          },
                          "phone_number": {
                            "type": "string",
                            "description": "Phone number for this user. Follows the <a href=\"https://en.wikipedia.org/wiki/E.164\">E.164 recommendation</a>.",
                            "default": "+199999999999999"
                          },
                          "phone_verified": {
                            "type": "boolean",
                            "description": "Whether this phone number has been verified (true) or not (false).",
                            "default": false
                          },
                          "created_at": {
                            "oneOf": [
                              {
                                "type": "string",
                                "description": "Date and time when this user was created (ISO_8601 format)."
                              },
                              {
                                "type": "object",
                                "description": "Date and time when this user was created (ISO_8601 format).",
                                "additionalProperties": true
                              }
                            ]
                          },
                          "updated_at": {
                            "oneOf": [
                              {
                                "type": "string",
                                "description": "Date and time when this user was last updated/modified (ISO_8601 format)."
                              },
                              {
                                "type": "object",
                                "description": "Date and time when this user was last updated/modified (ISO_8601 format).",
                                "additionalProperties": true
                              }
                            ]
                          },
                          "identities": {
                            "type": "array",
                            "description": "Array of user identity objects when accounts are linked.",
                            "items": {
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "connection": {
                                  "type": "string",
                                  "description": "Name of the connection containing this identity."
                                },
                                "user_id": {
                                  "type": "string",
                                  "description": "Unique identifier of the user user for this identity."
                                },
                                "provider": {
                                  "type": "string",
                                  "description": "The type of identity provider",
                                  "enum": [
                                    "ad",
                                    "adfs",
                                    "amazon",
                                    "apple",
                                    "dropbox",
                                    "bitbucket",
                                    "aol",
                                    "auth0-oidc",
                                    "auth0",
                                    "baidu",
                                    "bitly",
                                    "box",
                                    "custom",
                                    "daccount",
                                    "dwolla",
                                    "email",
                                    "evernote-sandbox",
                                    "evernote",
                                    "exact",
                                    "facebook",
                                    "fitbit",
                                    "flickr",
                                    "github",
                                    "google-apps",
                                    "google-oauth2",
                                    "instagram",
                                    "ip",
                                    "line",
                                    "linkedin",
                                    "miicard",
                                    "oauth1",
                                    "oauth2",
                                    "office365",
                                    "oidc",
                                    "okta",
                                    "paypal",
                                    "paypal-sandbox",
                                    "pingfederate",
                                    "planningcenter",
                                    "renren",
                                    "salesforce-community",
                                    "salesforce-sandbox",
                                    "salesforce",
                                    "samlp",
                                    "sharepoint",
                                    "shopify",
                                    "sms",
                                    "soundcloud",
                                    "thecity-sandbox",
                                    "thecity",
                                    "thirtysevensignals",
                                    "twitter",
                                    "untappd",
                                    "vkontakte",
                                    "waad",
                                    "weibo",
                                    "windowslive",
                                    "wordpress",
                                    "yahoo",
                                    "yammer",
                                    "yandex"
                                  ]
                                },
                                "isSocial": {
                                  "type": "boolean",
                                  "description": "Whether this identity is from a social provider (true) or not (false)."
                                },
                                "access_token": {
                                  "type": "string",
                                  "description": "IDP access token returned only if scope read:user_idp_tokens is defined."
                                },
                                "access_token_secret": {
                                  "type": "string",
                                  "description": "IDP access token secret returned only if scope read:user_idp_tokens is defined."
                                },
                                "refresh_token": {
                                  "type": "string",
                                  "description": "IDP refresh token returned only if scope read:user_idp_tokens is defined."
                                },
                                "profileData": {
                                  "$ref": "#/components/schemas/userProfile"
                                }
                              }
                            }
                          },
                          "app_metadata": {
                            "$ref": "#/components/schemas/AppMetadata"
                          },
                          "user_metadata": {
                            "$ref": "#/components/schemas/UserMetadata"
                          },
                          "picture": {
                            "type": "string",
                            "description": "URL to picture, photo, or avatar of this user."
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of this user."
                          },
                          "nickname": {
                            "type": "string",
                            "description": "Preferred nickname or alias of this user."
                          },
                          "multifactor": {
                            "type": "array",
                            "description": "List of multi-factor authentication providers with which this user has enrolled.",
                            "items": {
                              "type": "string"
                            }
                          },
                          "last_ip": {
                            "type": "string",
                            "description": "Last IP address from which this user logged in."
                          },
                          "last_login": {
                            "oneOf": [
                              {
                                "type": "string",
                                "description": "Last date and time this user logged in (ISO_8601 format)."
                              },
                              {
                                "type": "object",
                                "description": "Last date and time this user logged in (ISO_8601 format).",
                                "additionalProperties": true
                              }
                            ]
                          },
                          "logins_count": {
                            "type": "integer",
                            "description": "Total number of logins this user has performed."
                          },
                          "blocked": {
                            "type": "boolean",
                            "description": "Whether this user was blocked by an administrator (true) or is not (false)."
                          },
                          "given_name": {
                            "type": "string",
                            "description": "Given name/first name/forename of this user."
                          },
                          "family_name": {
                            "type": "string",
                            "description": "Family name/last name/surname of this user."
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "start": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "length": {
                          "type": "number"
                        },
                        "total": {
                          "type": "number"
                        },
                        "users": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "additionalProperties": true,
                            "properties": {
                              "user_id": {
                                "type": "string",
                                "description": "ID of the user which can be used when interacting with other APIs.",
                                "default": "auth0|507f1f77bcf86cd799439020"
                              },
                              "email": {
                                "type": "string",
                                "description": "Email address of this user.",
                                "default": "john.doe@gmail.com",
                                "format": "email"
                              },
                              "email_verified": {
                                "type": "boolean",
                                "description": "Whether this email address is verified (true) or unverified (false).",
                                "default": false
                              },
                              "username": {
                                "type": "string",
                                "description": "Username of this user.",
                                "default": "johndoe"
                              },
                              "phone_number": {
                                "type": "string",
                                "description": "Phone number for this user. Follows the <a href=\"https://en.wikipedia.org/wiki/E.164\">E.164 recommendation</a>.",
                                "default": "+199999999999999"
                              },
                              "phone_verified": {
                                "type": "boolean",
                                "description": "Whether this phone number has been verified (true) or not (false).",
                                "default": false
                              },
                              "created_at": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                    "description": "Date and time when this user was created (ISO_8601 format)."
                                  },
                                  {
                                    "type": "object",
                                    "description": "Date and time when this user was created (ISO_8601 format).",
                                    "additionalProperties": true
                                  }
                                ]
                              },
                              "updated_at": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                    "description": "Date and time when this user was last updated/modified (ISO_8601 format)."
                                  },
                                  {
                                    "type": "object",
                                    "description": "Date and time when this user was last updated/modified (ISO_8601 format).",
                                    "additionalProperties": true
                                  }
                                ]
                              },
                              "identities": {
                                "type": "array",
                                "description": "Array of user identity objects when accounts are linked.",
                                "items": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "connection": {
                                      "type": "string",
                                      "description": "Name of the connection containing this identity."
                                    },
                                    "user_id": {
                                      "type": "string",
                                      "description": "Unique identifier of the user user for this identity."
                                    },
                                    "provider": {
                                      "type": "string",
                                      "description": "The type of identity provider",
                                      "enum": [
                                        "ad",
                                        "adfs",
                                        "amazon",
                                        "apple",
                                        "dropbox",
                                        "bitbucket",
                                        "aol",
                                        "auth0-oidc",
                                        "auth0",
                                        "baidu",
                                        "bitly",
                                        "box",
                                        "custom",
                                        "daccount",
                                        "dwolla",
                                        "email",
                                        "evernote-sandbox",
                                        "evernote",
                                        "exact",
                                        "facebook",
                                        "fitbit",
                                        "flickr",
                                        "github",
                                        "google-apps",
                                        "google-oauth2",
                                        "instagram",
                                        "ip",
                                        "line",
                                        "linkedin",
                                        "miicard",
                                        "oauth1",
                                        "oauth2",
                                        "office365",
                                        "oidc",
                                        "okta",
                                        "paypal",
                                        "paypal-sandbox",
                                        "pingfederate",
                                        "planningcenter",
                                        "renren",
                                        "salesforce-community",
                                        "salesforce-sandbox",
                                        "salesforce",
                                        "samlp",
                                        "sharepoint",
                                        "shopify",
                                        "sms",
                                        "soundcloud",
                                        "thecity-sandbox",
                                        "thecity",
                                        "thirtysevensignals",
                                        "twitter",
                                        "untappd",
                                        "vkontakte",
                                        "waad",
                                        "weibo",
                                        "windowslive",
                                        "wordpress",
                                        "yahoo",
                                        "yammer",
                                        "yandex"
                                      ]
                                    },
                                    "isSocial": {
                                      "type": "boolean",
                                      "description": "Whether this identity is from a social provider (true) or not (false)."
                                    },
                                    "access_token": {
                                      "type": "string",
                                      "description": "IDP access token returned only if scope read:user_idp_tokens is defined."
                                    },
                                    "access_token_secret": {
                                      "type": "string",
                                      "description": "IDP access token secret returned only if scope read:user_idp_tokens is defined."
                                    },
                                    "refresh_token": {
                                      "type": "string",
                                      "description": "IDP refresh token returned only if scope read:user_idp_tokens is defined."
                                    },
                                    "profileData": {
                                      "$ref": "#/components/schemas/userProfile"
                                    }
                                  }
                                }
                              },
                              "app_metadata": {
                                "$ref": "#/components/schemas/AppMetadata"
                              },
                              "user_metadata": {
                                "$ref": "#/components/schemas/UserMetadata"
                              },
                              "picture": {
                                "type": "string",
                                "description": "URL to picture, photo, or avatar of this user."
                              },
                              "name": {
                                "type": "string",
                                "description": "Name of this user."
                              },
                              "nickname": {
                                "type": "string",
                                "description": "Preferred nickname or alias of this user."
                              },
                              "multifactor": {
                                "type": "array",
                                "description": "List of multi-factor authentication providers with which this user has enrolled.",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "last_ip": {
                                "type": "string",
                                "description": "Last IP address from which this user logged in."
                              },
                              "last_login": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                    "description": "Last date and time this user logged in (ISO_8601 format)."
                                  },
                                  {
                                    "type": "object",
                                    "description": "Last date and time this user logged in (ISO_8601 format).",
                                    "additionalProperties": true
                                  }
                                ]
                              },
                              "logins_count": {
                                "type": "integer",
                                "description": "Total number of logins this user has performed."
                              },
                              "blocked": {
                                "type": "boolean",
                                "description": "Whether this user was blocked by an administrator (true) or is not (false)."
                              },
                              "given_name": {
                                "type": "string",
                                "description": "Given name/first name/forename of this user."
                              },
                              "family_name": {
                                "type": "string",
                                "description": "Family name/last name/surname of this user."
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause.",
            "x-description-1": "The 'q' parameter is available only if you specify 'search_engine=v2|v3'.",
            "x-description-2": "You are not allowed to use search_engine=v1.",
            "x-description-3": "You are not allowed to use search_engine=v2. Use search_engine=v3 instead.",
            "x-description-4": "You are not allowed to use search_engine=v3.",
            "x-description-5": "You can only page through the first undefined records. See https://auth0.com/docs/users/search/v3/view-search-results-by-page#limitation."
          },
          "401": {
            "description": "Client is not global.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Invalid token."
          },
          "403": {
            "description": "Insufficient scope, expected any of: read:users."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          },
          "503": {
            "description": "The query exceeded the timeout. Please try refining your search criteria. See https://auth0.com/docs/best-practices/search-best-practices."
          }
        },
        "operationId": "get_users",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:users",
              "read:user_idp_tokens"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create a User",
        "description": "Create a new user for a given <a href=\"https://auth0.com/docs/connections/database\">database</a> or <a href=\"https://auth0.com/docs/connections/passwordless\">passwordless</a> connection.\n\nNote: <code>connection</code> is required but other parameters such as <code>email</code> and <code>password</code> are dependent upon the type of connection.",
        "tags": [
          "users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/userCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/userCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "user_id": {
                      "type": "string",
                      "description": "ID of the user which can be used when interacting with other APIs.",
                      "default": "auth0|507f1f77bcf86cd799439020"
                    },
                    "email": {
                      "type": "string",
                      "description": "Email address of this user.",
                      "default": "john.doe@gmail.com",
                      "format": "email"
                    },
                    "email_verified": {
                      "type": "boolean",
                      "description": "Whether this email address is verified (true) or unverified (false).",
                      "default": false
                    },
                    "username": {
                      "type": "string",
                      "description": "Username of this user.",
                      "default": "johndoe"
                    },
                    "phone_number": {
                      "type": "string",
                      "description": "Phone number for this user. Follows the <a href=\"https://en.wikipedia.org/wiki/E.164\">E.164 recommendation</a>.",
                      "default": "+199999999999999"
                    },
                    "phone_verified": {
                      "type": "boolean",
                      "description": "Whether this phone number has been verified (true) or not (false).",
                      "default": false
                    },
                    "created_at": {
                      "oneOf": [
                        {
                          "type": "string",
                          "description": "Date and time when this user was created (ISO_8601 format)."
                        },
                        {
                          "type": "object",
                          "description": "Date and time when this user was created (ISO_8601 format).",
                          "additionalProperties": true
                        }
                      ]
                    },
                    "updated_at": {
                      "oneOf": [
                        {
                          "type": "string",
                          "description": "Date and time when this user was last updated/modified (ISO_8601 format)."
                        },
                        {
                          "type": "object",
                          "description": "Date and time when this user was last updated/modified (ISO_8601 format).",
                          "additionalProperties": true
                        }
                      ]
                    },
                    "identities": {
                      "type": "array",
                      "description": "Array of user identity objects when accounts are linked.",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "connection": {
                            "type": "string",
                            "description": "Name of the connection containing this identity."
                          },
                          "user_id": {
                            "type": "string",
                            "description": "Unique identifier of the user user for this identity."
                          },
                          "provider": {
                            "type": "string",
                            "description": "The type of identity provider",
                            "enum": [
                              "ad",
                              "adfs",
                              "amazon",
                              "apple",
                              "dropbox",
                              "bitbucket",
                              "aol",
                              "auth0-oidc",
                              "auth0",
                              "baidu",
                              "bitly",
                              "box",
                              "custom",
                              "daccount",
                              "dwolla",
                              "email",
                              "evernote-sandbox",
                              "evernote",
                              "exact",
                              "facebook",
                              "fitbit",
                              "flickr",
                              "github",
                              "google-apps",
                              "google-oauth2",
                              "instagram",
                              "ip",
                              "line",
                              "linkedin",
                              "miicard",
                              "oauth1",
                              "oauth2",
                              "office365",
                              "oidc",
                              "okta",
                              "paypal",
                              "paypal-sandbox",
                              "pingfederate",
                              "planningcenter",
                              "renren",
                              "salesforce-community",
                              "salesforce-sandbox",
                              "salesforce",
                              "samlp",
                              "sharepoint",
                              "shopify",
                              "sms",
                              "soundcloud",
                              "thecity-sandbox",
                              "thecity",
                              "thirtysevensignals",
                              "twitter",
                              "untappd",
                              "vkontakte",
                              "waad",
                              "weibo",
                              "windowslive",
                              "wordpress",
                              "yahoo",
                              "yammer",
                              "yandex"
                            ]
                          },
                          "isSocial": {
                            "type": "boolean",
                            "description": "Whether this identity is from a social provider (true) or not (false)."
                          },
                          "access_token": {
                            "type": "string",
                            "description": "IDP access token returned only if scope read:user_idp_tokens is defined."
                          },
                          "access_token_secret": {
                            "type": "string",
                            "description": "IDP access token secret returned only if scope read:user_idp_tokens is defined."
                          },
                          "refresh_token": {
                            "type": "string",
                            "description": "IDP refresh token returned only if scope read:user_idp_tokens is defined."
                          },
                          "profileData": {
                            "$ref": "#/components/schemas/userProfile"
                          }
                        }
                      }
                    },
                    "app_metadata": {
                      "$ref": "#/components/schemas/AppMetadata"
                    },
                    "user_metadata": {
                      "$ref": "#/components/schemas/UserMetadata"
                    },
                    "picture": {
                      "type": "string",
                      "description": "URL to picture, photo, or avatar of this user."
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of this user."
                    },
                    "nickname": {
                      "type": "string",
                      "description": "Preferred nickname or alias of this user."
                    },
                    "multifactor": {
                      "type": "array",
                      "description": "List of multi-factor authentication providers with which this user has enrolled.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "last_ip": {
                      "type": "string",
                      "description": "Last IP address from which this user logged in."
                    },
                    "last_login": {
                      "oneOf": [
                        {
                          "type": "string",
                          "description": "Last date and time this user logged in (ISO_8601 format)."
                        },
                        {
                          "type": "object",
                          "description": "Last date and time this user logged in (ISO_8601 format).",
                          "additionalProperties": true
                        }
                      ]
                    },
                    "logins_count": {
                      "type": "integer",
                      "description": "Total number of logins this user has performed."
                    },
                    "blocked": {
                      "type": "boolean",
                      "description": "Whether this user was blocked by an administrator (true) or is not (false)."
                    },
                    "given_name": {
                      "type": "string",
                      "description": "Given name/first name/forename of this user."
                    },
                    "family_name": {
                      "type": "string",
                      "description": "Family name/last name/surname of this user."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause.",
            "x-description-1": "Connection does not support user creation through the API. It must either be a database or passwordless connection.",
            "x-description-2": "Cannot set username for connection without requires_username.",
            "x-description-3": "Connection does not exist.",
            "x-description-4": "Connection is disabled."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope, expected any of: create:users."
          },
          "409": {
            "description": "User already exists."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_users",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:users"
            ]
          }
        ]
      }
    },
    "/users-by-email": {
      "get": {
        "summary": "Search Users by Email",
        "description": "Find users by email. If Auth0 is the identity provider (idP), the email address associated with a user is saved in lower case, regardless of how you initially provided it. \n\nFor example, if you register a user as JohnSmith@example.com, Auth0 saves the user's email as johnsmith@example.com. \n\nTherefore, when using this endpoint, make sure that you are searching for users via email addresses using the correct case.\n",
        "tags": [
          "users-by-email"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated list of fields to include or exclude (based on value provided for include_fields) in the result. Leave empty to retrieve all fields.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_fields",
            "in": "query",
            "description": "Whether specified fields are to be included (true) or excluded (false). Defaults to true.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "Email address to search for (case-sensitive).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Users successfully searched.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "user_id": {
                        "type": "string",
                        "description": "ID of the user which can be used when interacting with other APIs.",
                        "default": "auth0|507f1f77bcf86cd799439020"
                      },
                      "email": {
                        "type": "string",
                        "description": "Email address of this user.",
                        "default": "john.doe@gmail.com",
                        "format": "email"
                      },
                      "email_verified": {
                        "type": "boolean",
                        "description": "Whether this email address is verified (true) or unverified (false).",
                        "default": false
                      },
                      "username": {
                        "type": "string",
                        "description": "Username of this user.",
                        "default": "johndoe"
                      },
                      "phone_number": {
                        "type": "string",
                        "description": "Phone number for this user. Follows the <a href=\"https://en.wikipedia.org/wiki/E.164\">E.164 recommendation</a>.",
                        "default": "+199999999999999"
                      },
                      "phone_verified": {
                        "type": "boolean",
                        "description": "Whether this phone number has been verified (true) or not (false).",
                        "default": false
                      },
                      "created_at": {
                        "oneOf": [
                          {
                            "type": "string",
                            "description": "Date and time when this user was created (ISO_8601 format)."
                          },
                          {
                            "type": "object",
                            "description": "Date and time when this user was created (ISO_8601 format).",
                            "additionalProperties": true
                          }
                        ]
                      },
                      "updated_at": {
                        "oneOf": [
                          {
                            "type": "string",
                            "description": "Date and time when this user was last updated/modified (ISO_8601 format)."
                          },
                          {
                            "type": "object",
                            "description": "Date and time when this user was last updated/modified (ISO_8601 format).",
                            "additionalProperties": true
                          }
                        ]
                      },
                      "identities": {
                        "type": "array",
                        "description": "Array of user identity objects when accounts are linked.",
                        "items": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "connection": {
                              "type": "string",
                              "description": "Name of the connection containing this identity."
                            },
                            "user_id": {
                              "type": "string",
                              "description": "Unique identifier of the user user for this identity."
                            },
                            "provider": {
                              "type": "string",
                              "description": "The type of identity provider",
                              "enum": [
                                "ad",
                                "adfs",
                                "amazon",
                                "apple",
                                "dropbox",
                                "bitbucket",
                                "aol",
                                "auth0-oidc",
                                "auth0",
                                "baidu",
                                "bitly",
                                "box",
                                "custom",
                                "daccount",
                                "dwolla",
                                "email",
                                "evernote-sandbox",
                                "evernote",
                                "exact",
                                "facebook",
                                "fitbit",
                                "flickr",
                                "github",
                                "google-apps",
                                "google-oauth2",
                                "instagram",
                                "ip",
                                "line",
                                "linkedin",
                                "miicard",
                                "oauth1",
                                "oauth2",
                                "office365",
                                "oidc",
                                "okta",
                                "paypal",
                                "paypal-sandbox",
                                "pingfederate",
                                "planningcenter",
                                "renren",
                                "salesforce-community",
                                "salesforce-sandbox",
                                "salesforce",
                                "samlp",
                                "sharepoint",
                                "shopify",
                                "sms",
                                "soundcloud",
                                "thecity-sandbox",
                                "thecity",
                                "thirtysevensignals",
                                "twitter",
                                "untappd",
                                "vkontakte",
                                "waad",
                                "weibo",
                                "windowslive",
                                "wordpress",
                                "yahoo",
                                "yammer",
                                "yandex"
                              ]
                            },
                            "isSocial": {
                              "type": "boolean",
                              "description": "Whether this identity is from a social provider (true) or not (false)."
                            },
                            "access_token": {
                              "type": "string",
                              "description": "IDP access token returned only if scope read:user_idp_tokens is defined."
                            },
                            "access_token_secret": {
                              "type": "string",
                              "description": "IDP access token secret returned only if scope read:user_idp_tokens is defined."
                            },
                            "refresh_token": {
                              "type": "string",
                              "description": "IDP refresh token returned only if scope read:user_idp_tokens is defined."
                            },
                            "profileData": {
                              "$ref": "#/components/schemas/userProfile"
                            }
                          }
                        }
                      },
                      "app_metadata": {
                        "$ref": "#/components/schemas/AppMetadata"
                      },
                      "user_metadata": {
                        "$ref": "#/components/schemas/UserMetadata"
                      },
                      "picture": {
                        "type": "string",
                        "description": "URL to picture, photo, or avatar of this user."
                      },
                      "name": {
                        "type": "string",
                        "description": "Name of this user."
                      },
                      "nickname": {
                        "type": "string",
                        "description": "Preferred nickname or alias of this user."
                      },
                      "multifactor": {
                        "type": "array",
                        "description": "List of multi-factor authentication providers with which this user has enrolled.",
                        "items": {
                          "type": "string"
                        }
                      },
                      "last_ip": {
                        "type": "string",
                        "description": "Last IP address from which this user logged in."
                      },
                      "last_login": {
                        "oneOf": [
                          {
                            "type": "string",
                            "description": "Last date and time this user logged in (ISO_8601 format)."
                          },
                          {
                            "type": "object",
                            "description": "Last date and time this user logged in (ISO_8601 format).",
                            "additionalProperties": true
                          }
                        ]
                      },
                      "logins_count": {
                        "type": "integer",
                        "description": "Total number of logins this user has performed."
                      },
                      "blocked": {
                        "type": "boolean",
                        "description": "Whether this user was blocked by an administrator (true) or is not (false)."
                      },
                      "given_name": {
                        "type": "string",
                        "description": "Given name/first name/forename of this user."
                      },
                      "family_name": {
                        "type": "string",
                        "description": "Family name/last name/surname of this user."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "User to be acted on does not match subject in bearer token.",
            "x-description-1": "Insufficient scope; expected any of: read:users."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_users-by-email",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:users"
            ]
          }
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "summary": "Get a User",
        "description": "Retrieve user details. A list of fields to include or exclude may also be specified. For more information, see <a href=\"https://auth0.com/docs/manage-users/user-search/retrieve-users-with-get-users-endpoint\">Retrieve Users with the Get Users Endpoint</a>.\n",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the user to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated list of fields to include or exclude (based on value provided for include_fields) in the result. Leave empty to retrieve all fields.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_fields",
            "in": "query",
            "description": "Whether specified fields are to be included (true) or excluded (false).",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "user_id": {
                      "type": "string",
                      "description": "ID of the user which can be used when interacting with other APIs.",
                      "default": "auth0|507f1f77bcf86cd799439020"
                    },
                    "email": {
                      "type": "string",
                      "description": "Email address of this user.",
                      "default": "john.doe@gmail.com",
                      "format": "email"
                    },
                    "email_verified": {
                      "type": "boolean",
                      "description": "Whether this email address is verified (true) or unverified (false).",
                      "default": false
                    },
                    "username": {
                      "type": "string",
                      "description": "Username of this user.",
                      "default": "johndoe"
                    },
                    "phone_number": {
                      "type": "string",
                      "description": "Phone number for this user. Follows the <a href=\"https://en.wikipedia.org/wiki/E.164\">E.164 recommendation</a>.",
                      "default": "+199999999999999"
                    },
                    "phone_verified": {
                      "type": "boolean",
                      "description": "Whether this phone number has been verified (true) or not (false).",
                      "default": false
                    },
                    "created_at": {
                      "oneOf": [
                        {
                          "type": "string",
                          "description": "Date and time when this user was created (ISO_8601 format)."
                        },
                        {
                          "type": "object",
                          "description": "Date and time when this user was created (ISO_8601 format).",
                          "additionalProperties": true
                        }
                      ]
                    },
                    "updated_at": {
                      "oneOf": [
                        {
                          "type": "string",
                          "description": "Date and time when this user was last updated/modified (ISO_8601 format)."
                        },
                        {
                          "type": "object",
                          "description": "Date and time when this user was last updated/modified (ISO_8601 format).",
                          "additionalProperties": true
                        }
                      ]
                    },
                    "identities": {
                      "type": "array",
                      "description": "Array of user identity objects when accounts are linked.",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "connection": {
                            "type": "string",
                            "description": "Name of the connection containing this identity."
                          },
                          "user_id": {
                            "type": "string",
                            "description": "Unique identifier of the user user for this identity."
                          },
                          "provider": {
                            "type": "string",
                            "description": "The type of identity provider",
                            "enum": [
                              "ad",
                              "adfs",
                              "amazon",
                              "apple",
                              "dropbox",
                              "bitbucket",
                              "aol",
                              "auth0-oidc",
                              "auth0",
                              "baidu",
                              "bitly",
                              "box",
                              "custom",
                              "daccount",
                              "dwolla",
                              "email",
                              "evernote-sandbox",
                              "evernote",
                              "exact",
                              "facebook",
                              "fitbit",
                              "flickr",
                              "github",
                              "google-apps",
                              "google-oauth2",
                              "instagram",
                              "ip",
                              "line",
                              "linkedin",
                              "miicard",
                              "oauth1",
                              "oauth2",
                              "office365",
                              "oidc",
                              "okta",
                              "paypal",
                              "paypal-sandbox",
                              "pingfederate",
                              "planningcenter",
                              "renren",
                              "salesforce-community",
                              "salesforce-sandbox",
                              "salesforce",
                              "samlp",
                              "sharepoint",
                              "shopify",
                              "sms",
                              "soundcloud",
                              "thecity-sandbox",
                              "thecity",
                              "thirtysevensignals",
                              "twitter",
                              "untappd",
                              "vkontakte",
                              "waad",
                              "weibo",
                              "windowslive",
                              "wordpress",
                              "yahoo",
                              "yammer",
                              "yandex"
                            ]
                          },
                          "isSocial": {
                            "type": "boolean",
                            "description": "Whether this identity is from a social provider (true) or not (false)."
                          },
                          "access_token": {
                            "type": "string",
                            "description": "IDP access token returned only if scope read:user_idp_tokens is defined."
                          },
                          "access_token_secret": {
                            "type": "string",
                            "description": "IDP access token secret returned only if scope read:user_idp_tokens is defined."
                          },
                          "refresh_token": {
                            "type": "string",
                            "description": "IDP refresh token returned only if scope read:user_idp_tokens is defined."
                          },
                          "profileData": {
                            "$ref": "#/components/schemas/userProfile"
                          }
                        }
                      }
                    },
                    "app_metadata": {
                      "$ref": "#/components/schemas/AppMetadata"
                    },
                    "user_metadata": {
                      "$ref": "#/components/schemas/UserMetadata"
                    },
                    "picture": {
                      "type": "string",
                      "description": "URL to picture, photo, or avatar of this user."
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of this user."
                    },
                    "nickname": {
                      "type": "string",
                      "description": "Preferred nickname or alias of this user."
                    },
                    "multifactor": {
                      "type": "array",
                      "description": "List of multi-factor authentication providers with which this user has enrolled.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "last_ip": {
                      "type": "string",
                      "description": "Last IP address from which this user logged in."
                    },
                    "last_login": {
                      "oneOf": [
                        {
                          "type": "string",
                          "description": "Last date and time this user logged in (ISO_8601 format)."
                        },
                        {
                          "type": "object",
                          "description": "Last date and time this user logged in (ISO_8601 format).",
                          "additionalProperties": true
                        }
                      ]
                    },
                    "logins_count": {
                      "type": "integer",
                      "description": "Total number of logins this user has performed."
                    },
                    "blocked": {
                      "type": "boolean",
                      "description": "Whether this user was blocked by an administrator (true) or is not (false)."
                    },
                    "given_name": {
                      "type": "string",
                      "description": "Given name/first name/forename of this user."
                    },
                    "family_name": {
                      "type": "string",
                      "description": "Family name/last name/surname of this user."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "User to be acted on does not match subject in bearer token.",
            "x-description-1": "Insufficient scope; expected any of: read:users, read:user_idp_tokens, read:current_user."
          },
          "404": {
            "description": "User not found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_users_by_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:users",
              "read:current_user",
              "read:user_idp_tokens"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a User",
        "description": "Delete a user by user ID. This action cannot be undone. For Auth0 Dashboard instructions, see <a href=\"https://auth0.com/docs/manage-users/user-accounts/delete-users\">Delete Users</a>.\n",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the user to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User successfully deleted."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "User to be acted on does not match subject in bearer token.",
            "x-description-1": "Insufficient scope; expected any of: delete:users,delete:current_user."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_users_by_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:users",
              "delete:current_user"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update a User",
        "description": "Update a user.\n\nThese are the attributes that can be updated at the root level:\n\n<ul>\n    <li>app_metadata</li>\n    <li>blocked</li>\n    <li>email</li>\n    <li>email_verified</li>\n    <li>family_name</li>\n    <li>given_name</li>\n    <li>name</li>\n    <li>nickname</li>\n    <li>password</li>\n    <li>phone_number</li>\n    <li>phone_verified</li>\n    <li>picture</li>\n    <li>username</li>\n    <li>user_metadata</li>\n    <li>verify_email</li>\n</ul>\n\nSome considerations:\n<ul>\n    <li>The properties of the new object will replace the old ones.</li>\n    <li>The metadata fields are an exception to this rule (<code>user_metadata</code> and <code>app_metadata</code>). These properties are merged instead of being replaced but be careful, the merge only occurs on the first level.</li>\n    <li>If you are updating <code>email</code>, <code>email_verified</code>, <code>phone_number</code>, <code>phone_verified</code>, <code>username</code> or <code>password</code> of a secondary identity, you need to specify the <code>connection</code> property too.</li>\n    <li>If you are updating <code>email</code> or <code>phone_number</code> you can specify, optionally, the <code>client_id</code> property.</li>\n    <li>Updating <code>email_verified</code> is not supported for enterprise and passwordless sms connections.</li>\n    <li>Updating the <code>blocked</code> to <code>false</code> does not affect the user's blocked state from an excessive amount of incorrectly provided credentials. Use the \"Unblock a user\" endpoint from the \"User Blocks\" API to change the user's state.</li>\n    <li>Supported attributes can be unset by supplying <code>null</code> as the value.</li>\n</ul>\n\n<h5>Updating a field (non-metadata property)</h5>\nTo mark the email address of a user as verified, the body to send should be:\n<pre><code>{ \"email_verified\": true }</code></pre>\n\n<h5>Updating a user metadata root property</h5>Let's assume that our test user has the following <code>user_metadata</code>:\n<pre><code>{ \"user_metadata\" : { \"profileCode\": 1479 } }</code></pre>\n\nTo add the field <code>addresses</code> the body to send should be:\n<pre><code>{ \"user_metadata\" : { \"addresses\": {\"work_address\": \"100 Industrial Way\"} }}</code></pre>\n\nThe modified object ends up with the following <code>user_metadata</code> property:<pre><code>{\n  \"user_metadata\": {\n    \"profileCode\": 1479,\n    \"addresses\": { \"work_address\": \"100 Industrial Way\" }\n  }\n}</code></pre>\n\n<h5>Updating an inner user metadata property</h5>If there's existing user metadata to which we want to add  <code>\"home_address\": \"742 Evergreen Terrace\"</code> (using the <code>addresses</code> property) we should send the whole <code>addresses</code> object. Since this is a first-level object, the object will be merged in, but its own properties will not be. The body to send should be:\n<pre><code>{\n  \"user_metadata\": {\n    \"addresses\": {\n      \"work_address\": \"100 Industrial Way\",\n      \"home_address\": \"742 Evergreen Terrace\"\n    }\n  }\n}</code></pre>\n\nThe modified object ends up with the following <code>user_metadata</code> property:\n<pre><code>{\n  \"user_metadata\": {\n    \"profileCode\": 1479,\n    \"addresses\": {\n      \"work_address\": \"100 Industrial Way\",\n      \"home_address\": \"742 Evergreen Terrace\"\n    }\n  }\n}</code></pre>\n",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the user to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/userUpdate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/userUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "user_id": {
                      "type": "string",
                      "description": "ID of the user which can be used when interacting with other APIs.",
                      "default": "auth0|507f1f77bcf86cd799439020"
                    },
                    "email": {
                      "type": "string",
                      "description": "Email address of this user.",
                      "default": "john.doe@gmail.com",
                      "format": "email"
                    },
                    "email_verified": {
                      "type": "boolean",
                      "description": "Whether this email address is verified (true) or unverified (false).",
                      "default": false
                    },
                    "username": {
                      "type": "string",
                      "description": "Username of this user.",
                      "default": "johndoe"
                    },
                    "phone_number": {
                      "type": "string",
                      "description": "Phone number for this user. Follows the <a href=\"https://en.wikipedia.org/wiki/E.164\">E.164 recommendation</a>.",
                      "default": "+199999999999999"
                    },
                    "phone_verified": {
                      "type": "boolean",
                      "description": "Whether this phone number has been verified (true) or not (false).",
                      "default": false
                    },
                    "created_at": {
                      "oneOf": [
                        {
                          "type": "string",
                          "description": "Date and time when this user was created (ISO_8601 format)."
                        },
                        {
                          "type": "object",
                          "description": "Date and time when this user was created (ISO_8601 format).",
                          "additionalProperties": true
                        }
                      ]
                    },
                    "updated_at": {
                      "oneOf": [
                        {
                          "type": "string",
                          "description": "Date and time when this user was last updated/modified (ISO_8601 format)."
                        },
                        {
                          "type": "object",
                          "description": "Date and time when this user was last updated/modified (ISO_8601 format).",
                          "additionalProperties": true
                        }
                      ]
                    },
                    "identities": {
                      "type": "array",
                      "description": "Array of user identity objects when accounts are linked.",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "connection": {
                            "type": "string",
                            "description": "Name of the connection containing this identity."
                          },
                          "user_id": {
                            "type": "string",
                            "description": "Unique identifier of the user user for this identity."
                          },
                          "provider": {
                            "type": "string",
                            "description": "The type of identity provider",
                            "enum": [
                              "ad",
                              "adfs",
                              "amazon",
                              "apple",
                              "dropbox",
                              "bitbucket",
                              "aol",
                              "auth0-oidc",
                              "auth0",
                              "baidu",
                              "bitly",
                              "box",
                              "custom",
                              "daccount",
                              "dwolla",
                              "email",
                              "evernote-sandbox",
                              "evernote",
                              "exact",
                              "facebook",
                              "fitbit",
                              "flickr",
                              "github",
                              "google-apps",
                              "google-oauth2",
                              "instagram",
                              "ip",
                              "line",
                              "linkedin",
                              "miicard",
                              "oauth1",
                              "oauth2",
                              "office365",
                              "oidc",
                              "okta",
                              "paypal",
                              "paypal-sandbox",
                              "pingfederate",
                              "planningcenter",
                              "renren",
                              "salesforce-community",
                              "salesforce-sandbox",
                              "salesforce",
                              "samlp",
                              "sharepoint",
                              "shopify",
                              "sms",
                              "soundcloud",
                              "thecity-sandbox",
                              "thecity",
                              "thirtysevensignals",
                              "twitter",
                              "untappd",
                              "vkontakte",
                              "waad",
                              "weibo",
                              "windowslive",
                              "wordpress",
                              "yahoo",
                              "yammer",
                              "yandex"
                            ]
                          },
                          "isSocial": {
                            "type": "boolean",
                            "description": "Whether this identity is from a social provider (true) or not (false)."
                          },
                          "access_token": {
                            "type": "string",
                            "description": "IDP access token returned only if scope read:user_idp_tokens is defined."
                          },
                          "access_token_secret": {
                            "type": "string",
                            "description": "IDP access token secret returned only if scope read:user_idp_tokens is defined."
                          },
                          "refresh_token": {
                            "type": "string",
                            "description": "IDP refresh token returned only if scope read:user_idp_tokens is defined."
                          },
                          "profileData": {
                            "$ref": "#/components/schemas/userProfile"
                          }
                        }
                      }
                    },
                    "app_metadata": {
                      "$ref": "#/components/schemas/AppMetadata"
                    },
                    "user_metadata": {
                      "$ref": "#/components/schemas/UserMetadata"
                    },
                    "picture": {
                      "type": "string",
                      "description": "URL to picture, photo, or avatar of this user."
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of this user."
                    },
                    "nickname": {
                      "type": "string",
                      "description": "Preferred nickname or alias of this user."
                    },
                    "multifactor": {
                      "type": "array",
                      "description": "List of multi-factor authentication providers with which this user has enrolled.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "last_ip": {
                      "type": "string",
                      "description": "Last IP address from which this user logged in."
                    },
                    "last_login": {
                      "oneOf": [
                        {
                          "type": "string",
                          "description": "Last date and time this user logged in (ISO_8601 format)."
                        },
                        {
                          "type": "object",
                          "description": "Last date and time this user logged in (ISO_8601 format).",
                          "additionalProperties": true
                        }
                      ]
                    },
                    "logins_count": {
                      "type": "integer",
                      "description": "Total number of logins this user has performed."
                    },
                    "blocked": {
                      "type": "boolean",
                      "description": "Whether this user was blocked by an administrator (true) or is not (false)."
                    },
                    "given_name": {
                      "type": "string",
                      "description": "Given name/first name/forename of this user."
                    },
                    "family_name": {
                      "type": "string",
                      "description": "Family name/last name/surname of this user."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request body. The message will vary depending on the cause.",
            "x-description-2": "Connection does not exist.",
            "x-description-3": "Connection is not supported for this operation.",
            "x-description-4": "Cannot update password and email simultaneously.",
            "x-description-5": "Cannot update password and email_verified simultaneously.",
            "x-description-6": "Cannot update username and email simultaneously.",
            "x-description-7": "Cannot update username and email_verified simultaneously.",
            "x-description-8": "Cannot update username and password simultaneously.",
            "x-description-9": "Cannot update email for non-database user.",
            "x-description-10": "Cannot change email or password for users in a disabled connection.",
            "x-description-11": "Email verification is not supported for enterprise users.",
            "x-description-12": "Your account is not allowed to update the following user attributes: family_name, given_name, name, nickname, picture.",
            "x-description-13": "The following user attributes cannot be updated: family_name, given_name, name, nickname, picture. The connection must either be a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'.",
            "x-description-14": "The following user attributes cannot be updated: family_name, given_name, name, nickname, picture. The specified connection belongs to a secondary identity.",
            "x-description-15": "The following user attributes cannot be removed: family_name, given_name, name, nickname, picture. The connection (non-federated-conn) must either be a custom database connection with import mode disabled, a social or enterprise connection.",
            "x-description-16": "The following user attributes cannot be removed: foo, bar. The connection (some-connection) should have disabled 'Sync user profile attributes at each login' (see <a href='https://auth0.com/docs/users/configure-connection-sync-with-auth0'>Configuring Connection Sync with Auth0</a>) or defined these attributes in 'options.non_persistent_attrs' array (see <a href='https://auth0.com/docs/security/denylist-user-attributes'>Add User Attributes to DenyList</a>)."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "User to be acted on does not match subject in bearer token.",
            "x-description-1": "Some fields cannot be read with the permissions granted by the bearer token scopes. The message will vary depending on the fields and the scopes.",
            "x-description-2": "Insufficient scope; expected any of: update:users,update:users_app_metadata,update:current_user_metadata."
          },
          "404": {
            "description": "User not found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_users_by_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:users",
              "update:users_app_metadata",
              "update:current_user_metadata"
            ]
          }
        ]
      }
    },
    "/users/{id}/authentication-methods": {
      "get": {
        "summary": "Get a list of authentication methods",
        "description": "Retrieve detailed list of authentication methods associated with a specified user.",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user in question.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page index of the results to return. First page is 0. Default is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results per page. Default is 50.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The authentication methods for the user were retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "array",
                      "description": "The paginated authentication methods. Returned in this structure when include_totals is false.",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "id",
                          "type",
                          "created_at"
                        ],
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The ID of the authentication method (auto generated)"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "recovery-code",
                              "totp",
                              "push",
                              "phone",
                              "email",
                              "email-verification",
                              "webauthn-roaming",
                              "webauthn-platform",
                              "guardian",
                              "passkey",
                              "password"
                            ]
                          },
                          "confirmed": {
                            "type": "boolean",
                            "description": "The authentication method status"
                          },
                          "name": {
                            "type": "string",
                            "description": "A human-readable label to identify the authentication method",
                            "maxLength": 20
                          },
                          "authentication_methods": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "additionalProperties": true,
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "totp",
                                    "push",
                                    "sms",
                                    "voice"
                                  ]
                                },
                                "id": {
                                  "type": "string",
                                  "format": "authenticator-id"
                                }
                              }
                            }
                          },
                          "preferred_authentication_method": {
                            "type": "string",
                            "description": "Applies to phone authentication methods only. The preferred communication method.",
                            "enum": [
                              "sms",
                              "voice"
                            ]
                          },
                          "link_id": {
                            "type": "string",
                            "description": "The ID of a linked authentication method. Linked authentication methods will be deleted together."
                          },
                          "phone_number": {
                            "type": "string",
                            "description": "Applies to phone authentication methods only. The destination phone number used to send verification codes via text and voice."
                          },
                          "email": {
                            "type": "string",
                            "description": "Applies to email and email-verification authentication methods only. The email address used to send verification messages."
                          },
                          "key_id": {
                            "type": "string",
                            "description": "Applies to webauthn authentication methods only. The ID of the generated credential."
                          },
                          "public_key": {
                            "type": "string",
                            "description": "Applies to webauthn authentication methods only. The public key."
                          },
                          "created_at": {
                            "type": "string",
                            "description": "Authenticator creation date",
                            "format": "date-time"
                          },
                          "enrolled_at": {
                            "type": "string",
                            "description": "Enrollment date",
                            "format": "date-time"
                          },
                          "last_auth_at": {
                            "type": "string",
                            "description": "Last authentication",
                            "format": "date-time"
                          },
                          "credential_device_type": {
                            "type": "string",
                            "description": "Applies to passkeys only. The kind of device the credential is stored on as defined by backup eligibility. \"single_device\" credentials cannot be backed up and synced to another device, \"multi_device\" credentials can be backed up if enabled by the end-user."
                          },
                          "credential_backed_up": {
                            "type": "boolean",
                            "description": "Applies to passkeys only. Whether the credential was backed up."
                          },
                          "identity_user_id": {
                            "type": "string",
                            "description": "Applies to passkeys only. The ID of the user identity linked with the authentication method."
                          },
                          "user_agent": {
                            "type": "string",
                            "description": "Applies to passkeys only. The user-agent of the browser used to create the passkey."
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "start": {
                          "type": "number",
                          "description": "Index of the starting record. Derived from the page and per_page parameters."
                        },
                        "limit": {
                          "type": "number",
                          "description": "Maximum amount of records to return."
                        },
                        "total": {
                          "type": "number",
                          "description": "Total number of pageable records."
                        },
                        "authenticators": {
                          "type": "array",
                          "description": "The paginated authentication methods. Returned in this structure when include_totals is true.",
                          "items": {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "id",
                              "type",
                              "created_at"
                            ],
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "The ID of the authentication method (auto generated)"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "recovery-code",
                                  "totp",
                                  "push",
                                  "phone",
                                  "email",
                                  "email-verification",
                                  "webauthn-roaming",
                                  "webauthn-platform",
                                  "guardian",
                                  "passkey",
                                  "password"
                                ]
                              },
                              "confirmed": {
                                "type": "boolean",
                                "description": "The authentication method status"
                              },
                              "name": {
                                "type": "string",
                                "description": "A human-readable label to identify the authentication method",
                                "maxLength": 20
                              },
                              "authentication_methods": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "additionalProperties": true,
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "totp",
                                        "push",
                                        "sms",
                                        "voice"
                                      ]
                                    },
                                    "id": {
                                      "type": "string",
                                      "format": "authenticator-id"
                                    }
                                  }
                                }
                              },
                              "preferred_authentication_method": {
                                "type": "string",
                                "description": "Applies to phone authentication methods only. The preferred communication method.",
                                "enum": [
                                  "sms",
                                  "voice"
                                ]
                              },
                              "link_id": {
                                "type": "string",
                                "description": "The ID of a linked authentication method. Linked authentication methods will be deleted together."
                              },
                              "phone_number": {
                                "type": "string",
                                "description": "Applies to phone authentication methods only. The destination phone number used to send verification codes via text and voice."
                              },
                              "email": {
                                "type": "string",
                                "description": "Applies to email and email-verification authentication methods only. The email address used to send verification messages."
                              },
                              "key_id": {
                                "type": "string",
                                "description": "Applies to webauthn authentication methods only. The ID of the generated credential."
                              },
                              "public_key": {
                                "type": "string",
                                "description": "Applies to webauthn authentication methods only. The public key."
                              },
                              "created_at": {
                                "type": "string",
                                "description": "Authenticator creation date",
                                "format": "date-time"
                              },
                              "enrolled_at": {
                                "type": "string",
                                "description": "Enrollment date",
                                "format": "date-time"
                              },
                              "last_auth_at": {
                                "type": "string",
                                "description": "Last authentication",
                                "format": "date-time"
                              },
                              "credential_device_type": {
                                "type": "string",
                                "description": "Applies to passkeys only. The kind of device the credential is stored on as defined by backup eligibility. \"single_device\" credentials cannot be backed up and synced to another device, \"multi_device\" credentials can be backed up if enabled by the end-user."
                              },
                              "credential_backed_up": {
                                "type": "boolean",
                                "description": "Applies to passkeys only. Whether the credential was backed up."
                              },
                              "identity_user_id": {
                                "type": "string",
                                "description": "Applies to passkeys only. The ID of the user identity linked with the authentication method."
                              },
                              "user_agent": {
                                "type": "string",
                                "description": "Applies to passkeys only. The user-agent of the browser used to create the passkey."
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request query string. The message will vary depending on the cause.",
            "x-description-2": "The number of user identifiers associated with a user exceeds the maximum allowed."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation"
          },
          "403": {
            "description": "User to be acted on does not match subject in bearer token.",
            "x-description-1": "Insufficient scope, expected any of: read:authentication_methods"
          },
          "404": {
            "description": "The user does not exist."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_authentication-methods",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:authentication_methods"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete all authentication methods for the given user",
        "description": "Remove all authentication methods (i.e., enrolled MFA factors) from the specified user account. This action cannot be undone. ",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user in question.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Authentication methods successfully deleted."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "User to be acted on does not match subject in bearer token.",
            "x-description-1": "Insufficient scope; expected any of: delete:authentication_methods",
            "x-description-2": "Operation not permitted when the user has registered at least 1 passkey",
            "x-description-3": "The number of user identifiers associated with a user exceeds the maximum allowed."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_authentication-methods",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:authentication_methods"
            ]
          }
        ]
      },
      "post": {
        "summary": "Creates an authentication method for a given user",
        "description": "Create an authentication method. Authentication methods created via this endpoint will be auto confirmed and should already have verification completed.",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user to whom the new authentication method will be assigned.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "type"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "phone",
                      "email",
                      "totp",
                      "webauthn-roaming",
                      "passkey"
                    ]
                  },
                  "name": {
                    "type": "string",
                    "description": "A human-readable label to identify the authentication method."
                  },
                  "totp_secret": {
                    "type": "string",
                    "description": "Base32 encoded secret for TOTP generation."
                  },
                  "phone_number": {
                    "type": "string",
                    "description": "Applies to phone authentication methods only. The destination phone number used to send verification codes via text and voice.",
                    "minLength": 2,
                    "maxLength": 30
                  },
                  "email": {
                    "type": "string",
                    "description": "Applies to email authentication methods only. The email address used to send verification messages."
                  },
                  "preferred_authentication_method": {
                    "type": "string",
                    "description": "Applies to phone authentication methods only. The preferred communication method.",
                    "enum": [
                      "voice",
                      "sms"
                    ]
                  },
                  "key_id": {
                    "type": "string",
                    "description": "Applies to webauthn authentication methods only. The id of the credential."
                  },
                  "public_key": {
                    "type": "string",
                    "description": "Applies to webauthn authentication methods only. The public key."
                  },
                  "relying_party_identifier": {
                    "type": "string",
                    "description": "Applies to webauthn authentication methods only. The relying party identifier."
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "type"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "phone",
                      "email",
                      "totp",
                      "webauthn-roaming",
                      "passkey"
                    ]
                  },
                  "name": {
                    "type": "string",
                    "description": "A human-readable label to identify the authentication method."
                  },
                  "totp_secret": {
                    "type": "string",
                    "description": "Base32 encoded secret for TOTP generation."
                  },
                  "phone_number": {
                    "type": "string",
                    "description": "Applies to phone authentication methods only. The destination phone number used to send verification codes via text and voice.",
                    "minLength": 2,
                    "maxLength": 30
                  },
                  "email": {
                    "type": "string",
                    "description": "Applies to email authentication methods only. The email address used to send verification messages."
                  },
                  "preferred_authentication_method": {
                    "type": "string",
                    "description": "Applies to phone authentication methods only. The preferred communication method.",
                    "enum": [
                      "voice",
                      "sms"
                    ]
                  },
                  "key_id": {
                    "type": "string",
                    "description": "Applies to webauthn authentication methods only. The id of the credential."
                  },
                  "public_key": {
                    "type": "string",
                    "description": "Applies to webauthn authentication methods only. The public key."
                  },
                  "relying_party_identifier": {
                    "type": "string",
                    "description": "Applies to webauthn authentication methods only. The relying party identifier."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Authentication method created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "The successfully created authentication method.",
                  "additionalProperties": false,
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the newly created authentication method (automatically generated by the application)",
                      "format": "authenticator-id"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "phone",
                        "email",
                        "totp",
                        "webauthn-roaming",
                        "passkey"
                      ]
                    },
                    "name": {
                      "type": "string",
                      "description": "A human-readable label to identify the authentication method."
                    },
                    "totp_secret": {
                      "type": "string",
                      "description": "Base32 encoded secret for TOTP generation"
                    },
                    "phone_number": {
                      "type": "string",
                      "description": "Applies to phone authentication methods only. The destination phone number used to send verification codes via text and voice.",
                      "minLength": 2,
                      "maxLength": 30
                    },
                    "email": {
                      "type": "string",
                      "description": "Applies to email authentication methods only. The email address used to send verification messages."
                    },
                    "authentication_methods": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "authenticator-id"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "totp",
                              "push",
                              "sms",
                              "voice"
                            ]
                          }
                        }
                      }
                    },
                    "preferred_authentication_method": {
                      "type": "string",
                      "description": "Preferred phone authentication method",
                      "enum": [
                        "voice",
                        "sms"
                      ]
                    },
                    "key_id": {
                      "type": "string",
                      "description": "Applies to webauthn authenticators only. The id of the credential."
                    },
                    "public_key": {
                      "type": "string",
                      "description": "Applies to webauthn authenticators only. The public key."
                    },
                    "relying_party_identifier": {
                      "type": "string",
                      "description": "Applies to webauthn authenticators only. The relying party identifier."
                    },
                    "created_at": {
                      "type": "string",
                      "description": "Authentication method creation date",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation"
          },
          "403": {
            "description": "You reached the limit of entities of this type for this user.",
            "x-description-1": "User to be acted on does not match subject in bearer token.",
            "x-description-2": "Insufficient scope, expected: create:authentication_methods"
          },
          "404": {
            "description": "The user does not exist."
          },
          "409": {
            "description": "Authentication method already exists."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_authentication-methods",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:authentication_methods"
            ]
          }
        ]
      },
      "put": {
        "summary": "Update all authentication methods by replacing them with the given ones",
        "description": "Replace the specified user <a href=\"https://auth0.com/docs/secure/multi-factor-authentication/multi-factor-authentication-factors\"> authentication methods</a> with supplied values.\n\n    <b>Note</b>: Authentication methods supplied through this action do not iterate on existing methods. Instead, any methods passed will overwrite the user&#8217s existing settings.",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user in question.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "phone",
                        "email",
                        "totp"
                      ]
                    },
                    "preferred_authentication_method": {
                      "type": "string",
                      "description": "Applies to phone authentication methods only. The preferred communication method.",
                      "enum": [
                        "voice",
                        "sms"
                      ]
                    },
                    "name": {
                      "type": "string",
                      "description": "AA human-readable label to identify the authentication method.",
                      "minLength": 1,
                      "maxLength": 20
                    },
                    "phone_number": {
                      "type": "string",
                      "description": "Applies to phone authentication methods only. The destination phone number used to send verification codes via text and voice.",
                      "minLength": 2,
                      "maxLength": 30
                    },
                    "email": {
                      "type": "string",
                      "description": "Applies to email authentication methods only. The email address used to send verification messages.",
                      "minLength": 1
                    },
                    "totp_secret": {
                      "type": "string",
                      "description": "Applies to totp authentication methods only. The base32 encoded secret for TOTP generation.",
                      "minLength": 1
                    }
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "phone",
                        "email",
                        "totp"
                      ]
                    },
                    "preferred_authentication_method": {
                      "type": "string",
                      "description": "Applies to phone authentication methods only. The preferred communication method.",
                      "enum": [
                        "voice",
                        "sms"
                      ]
                    },
                    "name": {
                      "type": "string",
                      "description": "AA human-readable label to identify the authentication method.",
                      "minLength": 1,
                      "maxLength": 20
                    },
                    "phone_number": {
                      "type": "string",
                      "description": "Applies to phone authentication methods only. The destination phone number used to send verification codes via text and voice.",
                      "minLength": 2,
                      "maxLength": 30
                    },
                    "email": {
                      "type": "string",
                      "description": "Applies to email authentication methods only. The email address used to send verification messages.",
                      "minLength": 1
                    },
                    "totp_secret": {
                      "type": "string",
                      "description": "Applies to totp authentication methods only. The base32 encoded secret for TOTP generation.",
                      "minLength": 1
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "All authentication methods successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "description": "The successfully created authentication method.",
                    "additionalProperties": false,
                    "required": [
                      "type"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The ID of the newly created authentication method (automatically generated by the application)",
                        "format": "authenticator-id"
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "phone",
                          "email",
                          "totp",
                          "webauthn-roaming"
                        ]
                      },
                      "name": {
                        "type": "string",
                        "description": "A human-readable label to identify the authentication method."
                      },
                      "totp_secret": {
                        "type": "string",
                        "description": "Base32 encoded secret for TOTP generation"
                      },
                      "phone_number": {
                        "type": "string",
                        "description": "Applies to phone authentication methods only. The destination phone number used to send verification codes via text and voice.",
                        "minLength": 2,
                        "maxLength": 30
                      },
                      "email": {
                        "type": "string",
                        "description": "Applies to email authentication methods only. The email address used to send verification messages."
                      },
                      "authentication_methods": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "additionalProperties": true,
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "authenticator-id"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "totp",
                                "push",
                                "sms",
                                "voice"
                              ]
                            }
                          }
                        }
                      },
                      "preferred_authentication_method": {
                        "type": "string",
                        "description": "Preferred phone authentication method",
                        "enum": [
                          "voice",
                          "sms"
                        ]
                      },
                      "key_id": {
                        "type": "string",
                        "description": "Applies to webauthn authenticators only. The id of the credential."
                      },
                      "public_key": {
                        "type": "string",
                        "description": "Applies to webauthn authenticators only. The public key."
                      },
                      "relying_party_identifier": {
                        "type": "string",
                        "description": "Applies to webauthn authenticators only. The relying party identifier."
                      },
                      "created_at": {
                        "type": "string",
                        "description": "Authentication method creation date",
                        "format": "date-time"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "User to be acted on does not match subject in bearer token.",
            "x-description-1": "Insufficient scope; expected: update:authentication_methods",
            "x-description-2": "Operation not permitted when the user has registered at least 1 passkey",
            "x-description-3": "The number of user identifiers associated with a user exceeds the maximum allowed."
          },
          "409": {
            "description": "Authentication method already exists."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "put_authentication-methods",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:authentication_methods"
            ]
          }
        ]
      }
    },
    "/users/{id}/authentication-methods/{authentication_method_id}": {
      "get": {
        "summary": "Get an authentication method by ID",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user in question.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authentication_method_id",
            "in": "path",
            "description": "The ID of the authentication methods in question.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authentication method retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "type",
                    "created_at"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the authentication method (auto generated)"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "recovery-code",
                        "totp",
                        "push",
                        "phone",
                        "email",
                        "email-verification",
                        "webauthn-roaming",
                        "webauthn-platform",
                        "guardian",
                        "passkey",
                        "password"
                      ]
                    },
                    "confirmed": {
                      "type": "boolean",
                      "description": "The authentication method status"
                    },
                    "name": {
                      "type": "string",
                      "description": "A human-readable label to identify the authentication method",
                      "maxLength": 20
                    },
                    "authentication_methods": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "totp",
                              "push",
                              "sms",
                              "voice"
                            ]
                          },
                          "id": {
                            "type": "string",
                            "format": "authenticator-id"
                          }
                        }
                      }
                    },
                    "preferred_authentication_method": {
                      "type": "string",
                      "description": "Applies to phone authentication methods only. The preferred communication method.",
                      "enum": [
                        "sms",
                        "voice"
                      ]
                    },
                    "link_id": {
                      "type": "string",
                      "description": "The ID of a linked authentication method. Linked authentication methods will be deleted together."
                    },
                    "phone_number": {
                      "type": "string",
                      "description": "Applies to phone authentication methods only. The destination phone number used to send verification codes via text and voice."
                    },
                    "email": {
                      "type": "string",
                      "description": "Applies to email and email-verification authentication methods only. The email address used to send verification messages."
                    },
                    "key_id": {
                      "type": "string",
                      "description": "Applies to webauthn authentication methods only. The ID of the generated credential."
                    },
                    "public_key": {
                      "type": "string",
                      "description": "Applies to webauthn authentication methods only. The public key."
                    },
                    "created_at": {
                      "type": "string",
                      "description": "Authenticator creation date",
                      "format": "date-time"
                    },
                    "enrolled_at": {
                      "type": "string",
                      "description": "Enrollment date",
                      "format": "date-time"
                    },
                    "last_auth_at": {
                      "type": "string",
                      "description": "Last authentication",
                      "format": "date-time"
                    },
                    "credential_device_type": {
                      "type": "string",
                      "description": "Applies to passkeys only. The kind of device the credential is stored on as defined by backup eligibility. \"single_device\" credentials cannot be backed up and synced to another device, \"multi_device\" credentials can be backed up if enabled by the end-user."
                    },
                    "credential_backed_up": {
                      "type": "boolean",
                      "description": "Applies to passkeys only. Whether the credential was backed up."
                    },
                    "identity_user_id": {
                      "type": "string",
                      "description": "Applies to passkeys only. The ID of the user identity linked with the authentication method."
                    },
                    "user_agent": {
                      "type": "string",
                      "description": "Applies to passkeys only. The user-agent of the browser used to create the passkey."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation"
          },
          "403": {
            "description": "User to be acted on does not match subject in bearer token.",
            "x-description-1": "Insufficient scope, expected: read:authentication_methods.",
            "x-description-2": "The number of user identifiers associated with a user exceeds the maximum allowed."
          },
          "404": {
            "description": "The user does not exist.",
            "x-description-1": "The authentication method could not be found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_authentication-methods_by_authentication_method_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:authentication_methods"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete an authentication method by ID",
        "description": "Remove the authentication method with the given ID from the specified user. For more information, review <a href=\"https://auth0.com/docs/secure/multi-factor-authentication/manage-mfa-auth0-apis/manage-authentication-methods-with-management-api\">Manage Authentication Methods with Management API</a>.",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user in question.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authentication_method_id",
            "in": "path",
            "description": "The ID of the authentication method to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Authentication method successfully deleted."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "User to be acted on does not match subject in bearer token.",
            "x-description-1": "Insufficient scope; expected any of: delete:authentication_methods",
            "x-description-2": "The number of user identifiers associated with a user exceeds the maximum allowed."
          },
          "404": {
            "description": "The user does not exist.",
            "x-description-1": "The authentication method could not be found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_authentication-methods_by_authentication_method_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:authentication_methods"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update an authentication method",
        "description": "Modify the authentication method with the given ID from the specified user. For more information, review <a href=\"https://auth0.com/docs/secure/multi-factor-authentication/manage-mfa-auth0-apis/manage-authentication-methods-with-management-api\">Manage Authentication Methods with Management API</a>.",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user in question.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authentication_method_id",
            "in": "path",
            "description": "The ID of the authentication method to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "A human-readable label to identify the authentication method."
                  },
                  "preferred_authentication_method": {
                    "type": "string",
                    "description": "Preferred phone authentication method",
                    "enum": [
                      "voice",
                      "sms"
                    ]
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "A human-readable label to identify the authentication method."
                  },
                  "preferred_authentication_method": {
                    "type": "string",
                    "description": "Preferred phone authentication method",
                    "enum": [
                      "voice",
                      "sms"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Authentication method updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "The successfully created authentication method.",
                  "additionalProperties": false,
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the newly created authentication method (automatically generated by the application)",
                      "format": "authenticator-id"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "phone",
                        "email",
                        "totp",
                        "webauthn-roaming"
                      ]
                    },
                    "name": {
                      "type": "string",
                      "description": "A human-readable label to identify the authentication method."
                    },
                    "totp_secret": {
                      "type": "string",
                      "description": "Base32 encoded secret for TOTP generation"
                    },
                    "phone_number": {
                      "type": "string",
                      "description": "Applies to phone authentication methods only. The destination phone number used to send verification codes via text and voice.",
                      "minLength": 2,
                      "maxLength": 30
                    },
                    "email": {
                      "type": "string",
                      "description": "Applies to email authentication methods only. The email address used to send verification messages."
                    },
                    "authentication_methods": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "authenticator-id"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "totp",
                              "push",
                              "sms",
                              "voice"
                            ]
                          }
                        }
                      }
                    },
                    "preferred_authentication_method": {
                      "type": "string",
                      "description": "Applies to phone authentication methods only. The preferred communication method.",
                      "enum": [
                        "voice",
                        "sms"
                      ]
                    },
                    "key_id": {
                      "type": "string",
                      "description": "Applies to webauthn authentication methods only. The id of the credential."
                    },
                    "public_key": {
                      "type": "string",
                      "description": "Applies to webauthn authentication methods only. The public key."
                    },
                    "relying_party_identifier": {
                      "type": "string",
                      "description": "Applies to webauthn authentication methods only. The relying party identifier."
                    },
                    "created_at": {
                      "type": "string",
                      "description": "Authentication method creation date",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation"
          },
          "403": {
            "description": "User to be acted on does not match subject in bearer token.",
            "x-description-1": "Insufficient scope, expected: update:authentication_methods."
          },
          "404": {
            "description": "The user does not exist."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_authentication-methods_by_authentication_method_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:authentication_methods"
            ]
          }
        ]
      }
    },
    "/users/{id}/authenticators": {
      "delete": {
        "summary": "Delete All Authenticators",
        "description": "Remove all authenticators registered to a given user ID, such as OTP, email, phone, and push-notification. This action cannot be undone. For more information, review <a href=\"https://auth0.com/docs/secure/multi-factor-authentication/manage-mfa-auth0-apis/manage-authentication-methods-with-management-api\">Manage Authentication Methods with Management API</a>.",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the user to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "All authenticators successfully deleted."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "User to be acted on does not match subject in bearer token.",
            "x-description-1": "Insufficient scope; expected any of: remove:authenticators"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_authenticators",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:guardian_enrollments"
            ]
          }
        ]
      }
    },
    "/users/{id}/enrollments": {
      "get": {
        "summary": "Get the First Confirmed Multi-factor Authentication Enrollment",
        "description": "Retrieve the first <a href=\"https://auth0.com/docs/secure/multi-factor-authentication/multi-factor-authentication-factors\">multi-factor authentication</a> enrollment that a specific user has confirmed.",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the user to list enrollments for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Enrollments successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/userEnrollment"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "User to be acted on does not match subject in bearer token.",
            "x-description-1": "Insufficient scope; expected any of: read:users,read:current_user."
          },
          "404": {
            "description": "User not found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_enrollments",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:users",
              "read:current_user"
            ]
          }
        ]
      }
    },
    "/users/{id}/federated-connections-tokensets": {
      "get": {
        "summary": "Get tokensets for a user",
        "description": "List active federated connections tokensets for a provided user",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Flows successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "connection": {
                        "type": "string"
                      },
                      "scope": {
                        "type": "string"
                      },
                      "expires_at": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "issued_at": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "last_used_at": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:federated_connections_tokens."
          },
          "404": {
            "description": "The user does not exist."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_federated-connections-tokensets",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:federated_connections_tokens"
            ]
          }
        ]
      }
    },
    "/users/{id}/federated-connections-tokensets/{tokenset_id}": {
      "delete": {
        "summary": "Deletes a tokenset for federated connections by id.",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the user that owns the tokenset",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokenset_id",
            "in": "path",
            "description": "The tokenset id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Tokenset successfully deleted."
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause.",
            "x-description-1": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: delete:federated_connections_tokens."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_federated-connections-tokensets_by_tokenset_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:federated_connections_tokens"
            ]
          }
        ]
      }
    },
    "/users/{id}/identities": {
      "post": {
        "summary": "Link a User Account",
        "description": "Link two user accounts together forming a primary and secondary relationship. On successful linking, the endpoint returns the new array of the primary account identities.\n\nNote: There are two ways of invoking the endpoint:\n\n<ul>\n  <li>With the authenticated primary account's JWT in the Authorization header, which has the <code>update:current_user_identities</code> scope:\n    <pre>\n      POST /api/v2/users/PRIMARY_ACCOUNT_USER_ID/identities\n      Authorization: \"Bearer PRIMARY_ACCOUNT_JWT\"\n      {\n        \"link_with\": \"SECONDARY_ACCOUNT_JWT\"\n      }\n    </pre>\n    In this case, only the <code>link_with</code> param is required in the body, which also contains the JWT obtained upon the secondary account's authentication.\n  </li>\n  <li>With a token generated by the API V2 containing the <code>update:users</code> scope:\n    <pre>\n    POST /api/v2/users/PRIMARY_ACCOUNT_USER_ID/identities\n    Authorization: \"Bearer YOUR_API_V2_TOKEN\"\n    {\n      \"provider\": \"SECONDARY_ACCOUNT_PROVIDER\",\n      \"connection_id\": \"SECONDARY_ACCOUNT_CONNECTION_ID(OPTIONAL)\",\n      \"user_id\": \"SECONDARY_ACCOUNT_USER_ID\"\n    }\n    </pre>\n    In this case you need to send <code>provider</code> and <code>user_id</code> in the body. Optionally you can also send the <code>connection_id</code> param which is suitable for identifying a particular database connection for the 'auth0' provider.\n  </li>\n</ul>",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the primary user account to link a second user account to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "provider": {
                    "type": "string",
                    "description": "Identity provider of the secondary user account being linked.",
                    "default": "twitter",
                    "enum": [
                      "ad",
                      "adfs",
                      "amazon",
                      "apple",
                      "dropbox",
                      "bitbucket",
                      "aol",
                      "auth0-oidc",
                      "auth0",
                      "baidu",
                      "bitly",
                      "box",
                      "custom",
                      "daccount",
                      "dwolla",
                      "email",
                      "evernote-sandbox",
                      "evernote",
                      "exact",
                      "facebook",
                      "fitbit",
                      "flickr",
                      "github",
                      "google-apps",
                      "google-oauth2",
                      "instagram",
                      "ip",
                      "line",
                      "linkedin",
                      "miicard",
                      "oauth1",
                      "oauth2",
                      "office365",
                      "oidc",
                      "okta",
                      "paypal",
                      "paypal-sandbox",
                      "pingfederate",
                      "planningcenter",
                      "renren",
                      "salesforce-community",
                      "salesforce-sandbox",
                      "salesforce",
                      "samlp",
                      "sharepoint",
                      "shopify",
                      "sms",
                      "soundcloud",
                      "thecity-sandbox",
                      "thecity",
                      "thirtysevensignals",
                      "twitter",
                      "untappd",
                      "vkontakte",
                      "waad",
                      "weibo",
                      "windowslive",
                      "wordpress",
                      "yahoo",
                      "yammer",
                      "yandex"
                    ]
                  },
                  "connection_id": {
                    "type": "string",
                    "description": "connection_id of the secondary user account being linked when more than one `auth0` database provider exists."
                  },
                  "user_id": {
                    "description": "user_id of the secondary user account being linked.",
                    "oneOf": [
                      {
                        "type": "string",
                        "default": "abc",
                        "minLength": 1
                      },
                      {
                        "type": "integer",
                        "default": 191919191
                      }
                    ]
                  },
                  "link_with": {
                    "type": "string",
                    "description": "JWT for the secondary account being linked. If sending this parameter, `provider`, `user_id`, and `connection_id` must not be sent.",
                    "default": "{SECONDARY_ACCOUNT_JWT}"
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "provider": {
                    "type": "string",
                    "description": "Identity provider of the secondary user account being linked.",
                    "default": "twitter",
                    "enum": [
                      "ad",
                      "adfs",
                      "amazon",
                      "apple",
                      "dropbox",
                      "bitbucket",
                      "aol",
                      "auth0-oidc",
                      "auth0",
                      "baidu",
                      "bitly",
                      "box",
                      "custom",
                      "daccount",
                      "dwolla",
                      "email",
                      "evernote-sandbox",
                      "evernote",
                      "exact",
                      "facebook",
                      "fitbit",
                      "flickr",
                      "github",
                      "google-apps",
                      "google-oauth2",
                      "instagram",
                      "ip",
                      "line",
                      "linkedin",
                      "miicard",
                      "oauth1",
                      "oauth2",
                      "office365",
                      "oidc",
                      "okta",
                      "paypal",
                      "paypal-sandbox",
                      "pingfederate",
                      "planningcenter",
                      "renren",
                      "salesforce-community",
                      "salesforce-sandbox",
                      "salesforce",
                      "samlp",
                      "sharepoint",
                      "shopify",
                      "sms",
                      "soundcloud",
                      "thecity-sandbox",
                      "thecity",
                      "thirtysevensignals",
                      "twitter",
                      "untappd",
                      "vkontakte",
                      "waad",
                      "weibo",
                      "windowslive",
                      "wordpress",
                      "yahoo",
                      "yammer",
                      "yandex"
                    ]
                  },
                  "connection_id": {
                    "type": "string",
                    "description": "connection_id of the secondary user account being linked when more than one `auth0` database provider exists."
                  },
                  "user_id": {
                    "description": "user_id of the secondary user account being linked.",
                    "oneOf": [
                      {
                        "type": "string",
                        "default": "abc",
                        "minLength": 1
                      },
                      {
                        "type": "integer",
                        "default": 191919191
                      }
                    ]
                  },
                  "link_with": {
                    "type": "string",
                    "description": "JWT for the secondary account being linked. If sending this parameter, `provider`, `user_id`, and `connection_id` must not be sent.",
                    "default": "{SECONDARY_ACCOUNT_JWT}"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Identity successfully added.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "An array of objects with information about the user's identities.",
                  "items": {
                    "$ref": "#/components/schemas/userIdentity"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request body. The message will vary depending on the cause.",
            "x-description-2": "The provider/connection is not configured.",
            "x-description-3": "Main identity and the new one are the same.",
            "x-description-4": "Invalid token (link_with).",
            "x-description-5": "JWT (link_with) contains an invalid aud claim.",
            "x-description-6": "JWT (link_with) must contains sub claim.",
            "x-description-7": "JWT (link_with) contains an invalid sub claim.",
            "x-description-8": "JWT (link_with) must have an alg of RS256.",
            "x-description-9": "JWT (link_with) must have the same issuer as the calling user.",
            "x-description-10": "JWT (link_with) must have an aud claim that matches that of the calling token's azp.",
            "x-description-11": "Linking to an inexistent identity requires a connection.",
            "x-description-12": "Linking to an inexistent identity is not allowed.",
            "x-description-13": "Unable to link with the secondary account.",
            "x-description-14": "Provided secondary account not found."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected: update:users, update:current_user_identities.",
            "x-description-1": "User to be acted on does not match subject in bearer token."
          },
          "409": {
            "description": "Specified identity already exists."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_identities",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:users",
              "update:current_user_identities"
            ]
          }
        ]
      }
    },
    "/users/{id}/identities/{provider}/{user_id}": {
      "delete": {
        "summary": "Unlink a User Identity",
        "description": "Unlink a specific secondary account from a target user. This action requires the ID of both the target user and the secondary account. \n\nUnlinking the secondary account removes it from the identities array of the target user and creates a new standalone profile for the secondary account. To learn more, review <a href=\"https://auth0.com/docs/manage-users/user-accounts/user-account-linking/unlink-user-accounts\">Unlink User Accounts</a>.\n",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the primary user account.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "provider",
            "in": "path",
            "description": "Identity provider name of the secondary linked account (e.g. `google-oauth2`).",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ad",
                "adfs",
                "amazon",
                "apple",
                "dropbox",
                "bitbucket",
                "aol",
                "auth0-oidc",
                "auth0",
                "baidu",
                "bitly",
                "box",
                "custom",
                "daccount",
                "dwolla",
                "email",
                "evernote-sandbox",
                "evernote",
                "exact",
                "facebook",
                "fitbit",
                "flickr",
                "github",
                "google-apps",
                "google-oauth2",
                "instagram",
                "ip",
                "line",
                "linkedin",
                "miicard",
                "oauth1",
                "oauth2",
                "office365",
                "oidc",
                "okta",
                "paypal",
                "paypal-sandbox",
                "pingfederate",
                "planningcenter",
                "renren",
                "salesforce-community",
                "salesforce-sandbox",
                "salesforce",
                "samlp",
                "sharepoint",
                "shopify",
                "sms",
                "soundcloud",
                "thecity-sandbox",
                "thecity",
                "thirtysevensignals",
                "twitter",
                "untappd",
                "vkontakte",
                "waad",
                "weibo",
                "windowslive",
                "wordpress",
                "yahoo",
                "yammer",
                "yandex"
              ]
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "ID of the secondary linked account (e.g. `123456789081523216417` part after the `|` in `google-oauth2|123456789081523216417`).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User identity successfully unlinked.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "An array of objects with information about the user's identities.",
                  "items": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "provider",
                      "user_id",
                      "connection"
                    ],
                    "properties": {
                      "connection": {
                        "type": "string",
                        "description": "The name of the connection for the identity.",
                        "default": "Initial-Connection"
                      },
                      "user_id": {
                        "type": "string",
                        "description": "The unique identifier for the user for the identity.",
                        "default": "5457edea1b8f22891a000004"
                      },
                      "provider": {
                        "type": "string",
                        "description": "The type of identity provider.",
                        "default": "auth0"
                      },
                      "isSocial": {
                        "type": "boolean",
                        "description": "<code>true</code> if the identity provider is a social provider, <code>false</code>s otherwise"
                      },
                      "access_token": {
                        "type": "string",
                        "description": "IDP access token returned only if scope read:user_idp_tokens is defined"
                      },
                      "access_token_secret": {
                        "type": "string",
                        "description": "IDP access token secret returned only if scope read:user_idp_tokens is defined."
                      },
                      "refresh_token": {
                        "type": "string",
                        "description": "IDP refresh token returned only if scope read:user_idp_tokens is defined."
                      },
                      "profileData": {
                        "$ref": "#/components/schemas/userProfile"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Main identity cannot be removed."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected: update:users, update:current_user_identities.",
            "x-description-1": "User to be acted on does not match subject in bearer token."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_user_identity_by_user_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:users",
              "update:current_user_identities"
            ]
          }
        ]
      }
    },
    "/users/{id}/logs": {
      "get": {
        "summary": "Get user's log events",
        "description": "Retrieve log events for a specific user.\n\nNote: For more information on all possible event types, their respective acronyms and descriptions, see <a href=\"https://auth0.com/docs/logs/log-event-type-codes\">Log Event Type Codes</a>.\n\nFor more information on the list of fields that can be used in `sort`, see <a href=\"https://auth0.com/docs/logs/log-search-query-syntax#searchable-fields\">Searchable Fields</a>.\n\nAuth0 <a href=\"https://auth0.com/docs/logs/retrieve-log-events-using-mgmt-api#limitations\">limits the number of logs</a> you can return by search criteria to 100 logs per request. Furthermore, you may only paginate through up to 1,000 search results. If you exceed this threshold, please redefine your search.",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the user of the logs to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page index of the results to return. First page is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results per page. Paging is disabled if parameter not sent.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Field to sort by. Use `fieldname:1` for ascending order and `fieldname:-1` for descending.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Logs successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/log"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "start": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "length": {
                          "type": "number"
                        },
                        "total": {
                          "type": "number"
                        },
                        "logs": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/log"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:logs, read:logs_users."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_logs_by_user",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:logs",
              "read:logs_users"
            ]
          }
        ]
      }
    },
    "/users/{id}/multifactor/actions/invalidate-remember-browser": {
      "post": {
        "summary": "Invalidate All Remembered Browsers for Multi-factor Authentication",
        "description": "Invalidate all remembered browsers across all <a href=\"https://auth0.com/docs/multifactor-authentication\">authentication factors</a> for a user.",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the user to invalidate all remembered browsers and authentication factors for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Remembered browsers for MFA invalidated."
          },
          "400": {
            "description": "Invalid input based on schemas."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope; expected: update:users."
          }
        },
        "operationId": "post_invalidate-remember-browser",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:users"
            ]
          }
        ]
      }
    },
    "/users/{id}/multifactor/{provider}": {
      "delete": {
        "summary": "Delete a User's Multi-factor Provider",
        "description": "Remove a <a href=\"https://auth0.com/docs/multifactor-authentication\">multifactor</a> authentication configuration from a user's account. This forces the user to manually reconfigure the multi-factor provider.",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the user to remove a multifactor configuration from.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "provider",
            "in": "path",
            "description": "The multi-factor provider. Supported values 'duo' or 'google-authenticator'",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "duo",
                "google-authenticator"
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Multi-factor provider successfully deleted for user."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "User to be acted on does not match subject in bearer token.",
            "x-description-1": "Insufficient scope; expected any of: update:users."
          },
          "404": {
            "description": "User not found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_multifactor_by_provider",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:users"
            ]
          }
        ]
      }
    },
    "/users/{id}/organizations": {
      "get": {
        "summary": "List user's organizations",
        "description": "Retrieve list of the specified user's current Organization memberships. User must be specified by user ID. For more information, review <a href=\"https://auth0.com/docs/manage-users/organizations\">Auth0 Organizations</a>.\n",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the user to retrieve the organizations for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page index of the results to return. First page is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organizations successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Organization"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "start": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "total": {
                          "type": "number"
                        },
                        "organizations": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Organization"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:users, read:organizations."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_user_organizations",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:organizations"
            ]
          }
        ]
      }
    },
    "/users/{id}/permissions": {
      "get": {
        "summary": "Get a User's Permissions",
        "description": "Retrieve all permissions associated with the user.",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the user to retrieve the permissions for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page index of the results to return. First page is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Permissions successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "sources": {},
                          "resource_server_identifier": {
                            "type": "string",
                            "description": "Resource server (API) identifier that this permission is for."
                          },
                          "permission_name": {
                            "type": "string",
                            "description": "Name of this permission."
                          },
                          "resource_server_name": {
                            "type": "string",
                            "description": "Resource server (API) name this permission is for."
                          },
                          "description": {
                            "type": "string",
                            "description": "Description of this permission."
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "start": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "total": {
                          "type": "number"
                        },
                        "permissions": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "sources": {},
                              "resource_server_identifier": {
                                "type": "string",
                                "description": "Resource server (API) identifier that this permission is for."
                              },
                              "permission_name": {
                                "type": "string",
                                "description": "Name of this permission."
                              },
                              "resource_server_name": {
                                "type": "string",
                                "description": "Resource server (API) name this permission is for."
                              },
                              "description": {
                                "type": "string",
                                "description": "Description of this permission."
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected: read:users."
          },
          "404": {
            "description": "User not found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_permissions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:users"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Remove Permissions from a User",
        "description": "Remove permissions from a user.\n",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the user to remove permissions from.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "permissions"
                ],
                "properties": {
                  "permissions": {
                    "type": "array",
                    "description": "List of permissions to remove from this user.",
                    "items": {
                      "$ref": "#/components/schemas/PermissionRequestPayload"
                    }
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "permissions"
                ],
                "properties": {
                  "permissions": {
                    "type": "array",
                    "description": "List of permissions to remove from this user.",
                    "items": {
                      "$ref": "#/components/schemas/PermissionRequestPayload"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "User permissions removed."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected: update:users."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_permissions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:users"
            ]
          }
        ]
      },
      "post": {
        "summary": "Assign Permissions to a User",
        "description": "Assign permissions to a user.",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the user to assign permissions to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "permissions"
                ],
                "properties": {
                  "permissions": {
                    "type": "array",
                    "description": "List of permissions to add to this user.",
                    "items": {
                      "$ref": "#/components/schemas/PermissionRequestPayload"
                    }
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "permissions"
                ],
                "properties": {
                  "permissions": {
                    "type": "array",
                    "description": "List of permissions to add to this user.",
                    "items": {
                      "$ref": "#/components/schemas/PermissionRequestPayload"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Permissions assigned to user."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request body. The message will vary depending on the cause.",
            "x-description-2": "No more permissions can be assigned to this user."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected: update:users."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_permissions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:users"
            ]
          }
        ]
      }
    },
    "/users/{id}/recovery-code-regeneration": {
      "post": {
        "summary": "Generate New Multi-factor Authentication Recovery Code",
        "description": "Remove an existing multi-factor authentication (MFA) <a href=\"https://auth0.com/docs/secure/multi-factor-authentication/reset-user-mfa\">recovery code</a> and generate a new one. If a user cannot access the original device or account used for MFA enrollment, they can use a recovery code to authenticate. ",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the user to regenerate a multi-factor authentication recovery code for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "New recovery code successfully generated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "recovery_code": {
                      "type": "string",
                      "description": "New account recovery code."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope; expected: update:users."
          },
          "404": {
            "description": "Enrollment not found."
          }
        },
        "operationId": "post_recovery-code-regeneration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:users"
            ]
          }
        ]
      }
    },
    "/users/{id}/revoke-access": {
      "post": {
        "summary": "Revokes selected resources from a user",
        "description": "Revokes selected resources related to a user (sessions, refresh tokens, ...).",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "session_id": {
                    "type": "string",
                    "description": "ID of the session to revoke.",
                    "maxLength": 50,
                    "format": "session-id"
                  },
                  "preserve_refresh_tokens": {
                    "type": "boolean",
                    "description": "Whether to preserve the refresh tokens associated with the session.",
                    "default": false
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "session_id": {
                    "type": "string",
                    "description": "ID of the session to revoke.",
                    "maxLength": 50,
                    "format": "session-id"
                  },
                  "preserve_refresh_tokens": {
                    "type": "boolean",
                    "description": "Whether to preserve the refresh tokens associated with the session.",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Session deletion request accepted."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected: delete:sessions"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "user_revoke_access",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:sessions",
              "delete:refresh_tokens"
            ]
          }
        ]
      }
    },
    "/users/{id}/roles": {
      "get": {
        "summary": "Get a user's roles",
        "description": "Retrieve detailed list of all user roles currently assigned to a user.\n\n<b>Note</b>: This action retrieves all roles assigned to a user in the context of your whole tenant. To retrieve Organization-specific roles, use the following endpoint: <a href=\"https://auth0.com/docs/api/management/v2/organizations/get-organization-member-roles\">Get user roles assigned to an Organization member</a>.\n",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the user to list roles for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page index of the results to return. First page is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Roles successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Role"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "start": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "total": {
                          "type": "number"
                        },
                        "roles": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Role"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected all of: read:users, read:roles."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_user_roles",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:users",
              "read:roles",
              "read:role_members"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Removes roles from a user",
        "description": "Remove one or more specified user roles assigned to a user.\n\n<b>Note</b>: This action removes a role from a user in the context of your whole tenant. If you want to unassign a role from a user in the context of a specific Organization, use the following endpoint: <a href=\"https://auth0.com/docs/api/management/v2/organizations/delete-organization-member-roles\">Delete user roles from an Organization member</a>.\n",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the user to remove roles from.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "roles"
                ],
                "properties": {
                  "roles": {
                    "type": "array",
                    "description": "List of roles IDs to remove from the user.",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    }
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "roles"
                ],
                "properties": {
                  "roles": {
                    "type": "array",
                    "description": "List of roles IDs to remove from the user.",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Users roles successfully removed."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:users."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_user_roles",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:users",
              "delete:role_members"
            ]
          }
        ]
      },
      "post": {
        "summary": "Assign roles to a user",
        "description": "Assign one or more existing user roles to a user. For more information, review <a href=\"https://auth0.com/docs/manage-users/access-control/rbac\">Role-Based Access Control</a>.\n\n<b>Note</b>: New roles cannot be created through this action. Additionally, this action is used to assign roles to a user in the context of your whole tenant. To assign roles in the context of a specific Organization, use the following endpoint: <a href=\"https://auth0.com/docs/api/management/v2/organizations/post-organization-member-roles\">Assign user roles to an Organization member</a>.\n",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the user to associate roles with.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "roles"
                ],
                "properties": {
                  "roles": {
                    "type": "array",
                    "description": "List of roles IDs to associated with the user.",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    }
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "roles"
                ],
                "properties": {
                  "roles": {
                    "type": "array",
                    "description": "List of roles IDs to associated with the user.",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Roles successfully associated with user."
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:roles, update:users."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_user_roles",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:users",
              "create:role_members"
            ]
          }
        ]
      }
    },
    "/users/{user_id}/refresh-tokens": {
      "get": {
        "summary": "Get refresh tokens for a user",
        "description": "Retrieve details for a user's refresh tokens.",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID of the user to get refresh tokens for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "An optional cursor from which to start the selection (exclusive).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The refresh tokens were retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListRefreshTokensPaginatedResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation"
          },
          "403": {
            "description": "Insufficient scope, expected any of: read:refresh_tokens"
          },
          "404": {
            "description": "User not found"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_refresh_tokens_for_user",
        "x-operation-name": "listRefreshTokens",
        "x-operation-group": "users",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:refresh_tokens"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete refresh tokens for a user",
        "description": "Delete all refresh tokens for a user.",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID of the user to get remove refresh tokens for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Refresh token deletion request accepted."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected: delete:refresh_tokens"
          },
          "404": {
            "description": "User not found"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_refresh_tokens_for_user",
        "x-operation-name": "deleteRefreshTokens",
        "x-operation-group": "users",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:refresh_tokens"
            ]
          }
        ]
      }
    },
    "/users/{user_id}/sessions": {
      "get": {
        "summary": "Get sessions for user",
        "description": "Retrieve details for a user's sessions.",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID of the user to get sessions for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "An optional cursor from which to start the selection (exclusive).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The sessions were retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListUserSessionsPaginatedResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation"
          },
          "403": {
            "description": "Insufficient scope, expected any of: read:sessions"
          },
          "404": {
            "description": "User not found"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_sessions_for_user",
        "x-operation-name": "listSessions",
        "x-operation-group": "users",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:sessions"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete sessions for user",
        "description": "Delete all sessions for a user.",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID of the user to get sessions for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Session deletion request accepted."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected: delete:sessions"
          },
          "404": {
            "description": "User not found"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_sessions_for_user",
        "x-operation-name": "deleteSessions",
        "x-operation-group": "users",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:sessions"
            ]
          }
        ]
      }
    },
    "/verifiable-credentials/verification/templates": {
      "get": {
        "summary": "List verifiable credentials template for tenant.",
        "description": "List a verifiable credential templates.",
        "tags": [
          "verifiable-credentials"
        ],
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Optional Id from which to start selection.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Templates successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListVerifiableCredentialTemplatesPaginatedResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:vdcs_templates."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_vc_templates",
        "x-operation-name": "listVerificationTemplates",
        "x-operation-group": "verifiableCredentials",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:vdcs_templates"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create a verifiable credential template.",
        "description": "Create a verifiable credential template.",
        "tags": [
          "verifiable-credentials"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVerifiableCredentialTemplateRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateVerifiableCredentialTemplateRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Template successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateVerifiableCredentialTemplateResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:vdcs_templates."
          },
          "409": {
            "description": "Template (name) already exists."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_vc_templates",
        "x-operation-name": "createVerificationTemplate",
        "x-operation-group": "verifiableCredentials",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:vdcs_templates"
            ]
          }
        ]
      }
    },
    "/verifiable-credentials/verification/templates/{id}": {
      "get": {
        "summary": "Get a verifiable credential template by ID.",
        "description": "Get a verifiable credential template.",
        "tags": [
          "verifiable-credentials"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the template to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Template successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetVerifiableCredentialTemplateResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:vdcs_templates."
          },
          "404": {
            "description": "The verifiable credential template does not exist."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_vc_templates_by_id",
        "x-operation-name": "getVerificationTemplate",
        "x-operation-group": "verifiableCredentials",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:vdcs_templates"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a verifiable credential template by ID.",
        "description": "Delete a verifiable credential template.",
        "tags": [
          "verifiable-credentials"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the template to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Template successfully deleted."
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: delete:vdcs_templates."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_vc_templates_by_id",
        "x-operation-name": "deleteVerificationTemplate",
        "x-operation-group": "verifiableCredentials",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:vdcs_templates"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update a verifiable credential template by ID.",
        "description": "Update a verifiable credential template.",
        "tags": [
          "verifiable-credentials"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the template to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVerifiableCredentialTemplateRequestBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVerifiableCredentialTemplateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Template successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateVerifiableCredentialTemplateResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:vdcs_templates."
          },
          "409": {
            "description": "Template (name) already exists."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_vc_templates_by_id",
        "x-operation-name": "updateVerificationTemplate",
        "x-operation-group": "verifiableCredentials",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:vdcs_templates"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Action": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of the action.",
            "default": "910b1053-577f-4d81-a8c8-020e7319a38a"
          },
          "name": {
            "type": "string",
            "description": "The name of an action.",
            "default": "my-action"
          },
          "supported_triggers": {
            "type": "array",
            "description": "The list of triggers that this action supports. At this time, an action can only target a single trigger at a time.",
            "items": {
              "$ref": "#/components/schemas/ActionTrigger"
            }
          },
          "all_changes_deployed": {
            "type": "boolean",
            "description": "True if all of an Action's contents have been deployed.",
            "default": false
          },
          "created_at": {
            "type": "string",
            "description": "The time when this action was created.",
            "default": "2021-01-01T00:00:00.000Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "The time when this action was updated.",
            "default": "2021-01-01T00:00:00.000Z",
            "format": "date-time"
          },
          "code": {
            "type": "string",
            "description": "The source code of the action.",
            "default": "module.exports = () => {}"
          },
          "dependencies": {
            "type": "array",
            "description": "The list of third party npm modules, and their versions, that this action depends on.",
            "items": {
              "$ref": "#/components/schemas/ActionVersionDependency"
            }
          },
          "runtime": {
            "type": "string",
            "description": "The Node runtime. For example: `node12`, defaults to `node12`",
            "default": "node12"
          },
          "secrets": {
            "type": "array",
            "description": "The list of secrets that are included in an action or a version of an action.",
            "items": {
              "$ref": "#/components/schemas/ActionSecretResponse"
            }
          },
          "deployed_version": {
            "$ref": "#/components/schemas/ActionDeployedVersion"
          },
          "installed_integration_id": {
            "type": "string",
            "description": "installed_integration_id is the fk reference to the InstalledIntegration entity.",
            "default": "7d2bc0c9-c0c2-433a-9f4e-86ef80270aad"
          },
          "integration": {
            "$ref": "#/components/schemas/Integration"
          },
          "status": {
            "$ref": "#/components/schemas/ActionBuildStatusEnum"
          },
          "built_at": {
            "type": "string",
            "description": "The time when this action was built successfully.",
            "default": "2021-01-01T00:00:00.000Z",
            "format": "date-time"
          },
          "deploy": {
            "type": "boolean",
            "description": "True if the action should be deployed after creation.",
            "default": false
          }
        }
      },
      "ActionBase": {
        "type": "object",
        "description": "The action to which this version belongs.",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of the action.",
            "default": "910b1053-577f-4d81-a8c8-020e7319a38a"
          },
          "name": {
            "type": "string",
            "description": "The name of an action.",
            "default": "my-action"
          },
          "supported_triggers": {
            "type": "array",
            "description": "The list of triggers that this action supports. At this time, an action can only target a single trigger at a time.",
            "items": {
              "$ref": "#/components/schemas/ActionTrigger"
            }
          },
          "all_changes_deployed": {
            "type": "boolean",
            "description": "True if all of an Action's contents have been deployed.",
            "default": false
          },
          "created_at": {
            "type": "string",
            "description": "The time when this action was created.",
            "default": "2021-01-01T00:00:00.000Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "The time when this action was updated.",
            "default": "2021-01-01T00:00:00.000Z",
            "format": "date-time"
          }
        }
      },
      "ActionBinding": {
        "type": "object",
        "description": "Binding is the associative entity joining a trigger, and an action together.",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of this binding.",
            "default": "4a881e22-0562-4178-bc91-b0f2b321dc13"
          },
          "trigger_id": {
            "$ref": "#/components/schemas/ActionTriggerTypeEnum"
          },
          "display_name": {
            "type": "string",
            "description": "The name of the binding.",
            "default": "my-action-1"
          },
          "action": {
            "$ref": "#/components/schemas/Action"
          },
          "created_at": {
            "type": "string",
            "description": "The time when the binding was created.",
            "default": "2021-01-01T00:00:00.000Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "The time when the binding was updated.",
            "default": "2021-01-01T00:00:00.000Z",
            "format": "date-time"
          }
        }
      },
      "ActionBindingRef": {
        "type": "object",
        "description": "A reference to an action. An action can be referred to by ID or by Name.",
        "additionalProperties": true,
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ActionBindingRefTypeEnum"
          },
          "value": {
            "type": "string",
            "description": "The id or name of an action that is being bound to a trigger.",
            "default": "my-action"
          }
        }
      },
      "ActionBindingRefTypeEnum": {
        "type": "string",
        "description": "How the action is being referred to: `action_id` or `action_name`.",
        "default": "action_name",
        "enum": [
          "binding_id",
          "action_id",
          "action_name"
        ]
      },
      "ActionBindingTypeEnum": {
        "type": "string",
        "description": "In order to execute an Action, it must be bound to a trigger using a binding. `trigger-bound` means that bindings are managed by the tenant. `entity-bound` means that the bindings are automatically managed by Auth0 and other internal resouces will control those bindings. Tenants cannot manage `entity-bound` bindings.",
        "enum": [
          "trigger-bound",
          "entity-bound"
        ]
      },
      "ActionBindingWithRef": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "ref"
        ],
        "properties": {
          "ref": {
            "$ref": "#/components/schemas/ActionBindingRef"
          },
          "display_name": {
            "type": "string",
            "description": "The name of the binding.",
            "default": "my-action-1"
          },
          "secrets": {
            "type": "array",
            "description": "The list of secrets that are included in an action or a version of an action.",
            "items": {
              "$ref": "#/components/schemas/ActionSecretRequest"
            }
          }
        }
      },
      "ActionBuildStatusEnum": {
        "type": "string",
        "description": "The build status of this action.",
        "default": "built",
        "enum": [
          "pending",
          "building",
          "packaged",
          "built",
          "retrying",
          "failed"
        ]
      },
      "ActionDeployedVersion": {
        "type": "object",
        "description": "The version of the action that is currently deployed.",
        "additionalProperties": true
      },
      "ActionError": {
        "type": "object",
        "description": "Error is a generic error with a human readable id which should be easily referenced in support tickets.",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string"
          },
          "msg": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "ActionExecutionResult": {
        "type": "object",
        "description": "Captures the results of a single action being executed.",
        "additionalProperties": false,
        "properties": {
          "action_name": {
            "type": "string",
            "description": "The name of the action that was executed.",
            "default": "my-action"
          },
          "error": {
            "$ref": "#/components/schemas/ActionError"
          },
          "started_at": {
            "type": "string",
            "description": "The time when the action was started.",
            "default": "2021-01-01T00:00:00.000Z",
            "format": "date-time"
          },
          "ended_at": {
            "type": "string",
            "description": "The time when the action finished executing.",
            "default": "2021-01-01T00:00:00.000Z",
            "format": "date-time"
          }
        }
      },
      "ActionExecutionStatusEnum": {
        "type": "string",
        "description": "The overall status of an execution.",
        "default": "final",
        "enum": [
          "unspecified",
          "pending",
          "final",
          "partial",
          "canceled",
          "suspended"
        ]
      },
      "ActionSecretRequest": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the particular secret, e.g. API_KEY.",
            "default": "mySecret"
          },
          "value": {
            "type": "string",
            "description": "The value of the particular secret, e.g. secret123. A secret's value can only be set upon creation. A secret's value will never be returned by the API.",
            "default": "mySecretValue"
          }
        }
      },
      "ActionSecretResponse": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the particular secret, e.g. API_KEY.",
            "default": "mySecret"
          },
          "updated_at": {
            "type": "string",
            "description": "The time when the secret was last updated.",
            "default": "2021-01-01T00:00:00.000Z",
            "format": "date-time"
          }
        }
      },
      "ActionTrigger": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ActionTriggerTypeEnum"
          },
          "version": {
            "type": "string",
            "description": "The version of a trigger. v1, v2, etc."
          },
          "status": {
            "type": "string",
            "description": "status points to the trigger status."
          },
          "runtimes": {
            "type": "array",
            "description": "runtimes supported by this trigger.",
            "items": {
              "type": "string"
            }
          },
          "default_runtime": {
            "type": "string",
            "description": "Runtime that will be used when none is specified when creating an action."
          },
          "compatible_triggers": {
            "type": "array",
            "description": "compatible_triggers informs which other trigger supports the same event and api.",
            "items": {
              "$ref": "#/components/schemas/ActionTriggerCompatibleTrigger"
            }
          },
          "binding_policy": {
            "$ref": "#/components/schemas/ActionBindingTypeEnum"
          }
        }
      },
      "ActionTriggerCompatibleTrigger": {
        "type": "object",
        "additionalProperties": true,
        "required": [
          "id",
          "version"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ActionTriggerTypeEnum"
          },
          "version": {
            "type": "string",
            "description": "The version of a trigger. v1, v2, etc."
          }
        }
      },
      "ActionTriggerTypeEnum": {
        "type": "string"
      },
      "ActionVersion": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique id of an action version.",
            "default": "12a3b9e6-06e6-4a29-96bf-90c82fe79a0d"
          },
          "action_id": {
            "type": "string",
            "description": "The id of the action to which this version belongs.",
            "default": "910b1053-577f-4d81-a8c8-020e7319a38a"
          },
          "code": {
            "type": "string",
            "description": "The source code of this specific version of the action.",
            "default": "module.exports = () => {}"
          },
          "dependencies": {
            "type": "array",
            "description": "The list of third party npm modules, and their versions, that this specific version depends on. ",
            "items": {
              "$ref": "#/components/schemas/ActionVersionDependency"
            }
          },
          "deployed": {
            "type": "boolean",
            "description": "Indicates if this speciic version is the currently one deployed.",
            "default": true
          },
          "runtime": {
            "type": "string",
            "description": "The Node runtime. For example: `node12`",
            "default": "node12"
          },
          "secrets": {
            "type": "array",
            "description": "The list of secrets that are included in an action or a version of an action.",
            "items": {
              "$ref": "#/components/schemas/ActionSecretResponse"
            }
          },
          "status": {
            "$ref": "#/components/schemas/ActionVersionBuildStatusEnum"
          },
          "number": {
            "type": "number",
            "description": "The index of this version in list of versions for the action.",
            "default": 1
          },
          "errors": {
            "type": "array",
            "description": "Any errors that occurred while the version was being built.",
            "items": {
              "$ref": "#/components/schemas/ActionError"
            }
          },
          "action": {
            "$ref": "#/components/schemas/ActionBase"
          },
          "built_at": {
            "type": "string",
            "description": "The time when this version was built successfully.",
            "default": "2021-01-01T00:00:00.000Z",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "description": "The time when this version was created.",
            "default": "2021-01-01T00:00:00.000Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "The time when a version was updated. Versions are never updated externally. Only Auth0 will update an action version as it is being built.",
            "default": "2021-01-01T00:00:00.000Z",
            "format": "date-time"
          },
          "supported_triggers": {
            "type": "array",
            "description": "The list of triggers that this version supports. At this time, a version can only target a single trigger at a time.",
            "items": {
              "$ref": "#/components/schemas/ActionTrigger"
            }
          }
        }
      },
      "ActionVersionBuildStatusEnum": {
        "type": "string",
        "description": "The build status of this specific version.",
        "default": "built",
        "enum": [
          "pending",
          "building",
          "packaged",
          "built",
          "retrying",
          "failed"
        ]
      },
      "ActionVersionDependency": {
        "type": "object",
        "description": "Dependency is an npm module. These values are used to produce an immutable artifact, which manifests as a layer_id.",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "name is the name of the npm module, e.g. lodash"
          },
          "version": {
            "type": "string",
            "description": "description is the version of the npm module, e.g. 4.17.1"
          },
          "registry_url": {
            "type": "string",
            "description": "registry_url is an optional value used primarily for private npm registries."
          }
        }
      },
      "AculClientFilter": {
        "type": "object",
        "description": "Client array filter items",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Client ID"
          },
          "metadata": {
            "$ref": "#/components/schemas/AculClientMetadata"
          }
        }
      },
      "AculClientMetadata": {
        "type": "object",
        "description": "Client metadata key/value pairs",
        "additionalProperties": true
      },
      "AculDomainFilter": {
        "type": "object",
        "description": "Domains array filter items",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Domain ID"
          },
          "metadata": {
            "$ref": "#/components/schemas/AculDomainMetadata"
          }
        }
      },
      "AculDomainMetadata": {
        "type": "object",
        "description": "Client metadata key/value pairs",
        "additionalProperties": true
      },
      "AculFilters": {
        "type": "object",
        "nullable": true,
        "description": "Optional filters to apply rendering rules to specific entities",
        "additionalProperties": false,
        "properties": {
          "match_type": {
            "$ref": "#/components/schemas/AculMatchTypeEnum"
          },
          "clients": {
            "type": "array",
            "description": "Clients filter",
            "items": {
              "$ref": "#/components/schemas/AculClientFilter"
            }
          },
          "organizations": {
            "type": "array",
            "description": "Organizations filter",
            "items": {
              "$ref": "#/components/schemas/AculOrganizationFilter"
            }
          },
          "domains": {
            "type": "array",
            "description": "Domains filter",
            "items": {
              "$ref": "#/components/schemas/AculDomainFilter"
            }
          }
        }
      },
      "AculHeadTag": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "tag": {
            "type": "string",
            "description": "Any HTML element valid for use in the head tag"
          },
          "attributes": {
            "$ref": "#/components/schemas/AculHeadTagAttributes"
          },
          "content": {
            "type": "string",
            "description": "Text/content within the opening and closing tags of the element. \nSee <a href=\"https://auth0.com/docs/customize/login-pages/advanced-customizations/getting-started/configure-acul-screens\">documentation</a> on using context variables",
            "maxLength": 250
          }
        }
      },
      "AculHeadTagAttributes": {
        "type": "object",
        "description": "Attributes of the HTML tag",
        "additionalProperties": true,
        "properties": {
          "integrity": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AculMatchTypeEnum": {
        "type": "string",
        "description": "Type of match to apply",
        "enum": [
          "includes_any",
          "excludes_any"
        ]
      },
      "AculOrganizationFilter": {
        "type": "object",
        "description": "Organizations array filter items",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Organization ID"
          },
          "metadata": {
            "$ref": "#/components/schemas/AculOrganizationMetadata"
          }
        }
      },
      "AculOrganizationMetadata": {
        "type": "object",
        "description": "Client metadata key/value pairs",
        "additionalProperties": true
      },
      "AculRenderingModeEnum": {
        "type": "string",
        "enum": [
          "advanced",
          "standard"
        ]
      },
      "AddOrganizationConnectionRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "connection_id"
        ],
        "properties": {
          "connection_id": {
            "type": "string",
            "description": "Single connection ID to add to the organization.",
            "format": "connection-id"
          },
          "assign_membership_on_login": {
            "type": "boolean",
            "description": "When true, all users that log in with this connection will be automatically granted membership in the organization. When false, users must be granted membership in the organization before logging in with this connection."
          },
          "is_signup_enabled": {
            "type": "boolean",
            "description": "Determines whether organization signup should be enabled for this organization connection. Only applicable for database connections. Default: false."
          },
          "show_as_button": {
            "type": "boolean",
            "description": "Determines whether a connection should be displayed on this organization’s login prompt. Only applicable for enterprise connections. Default: true."
          }
        }
      },
      "AddOrganizationConnectionResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "connection_id": {
            "type": "string",
            "description": "ID of the connection."
          },
          "assign_membership_on_login": {
            "type": "boolean",
            "description": "When true, all users that log in with this connection will be automatically granted membership in the organization. When false, users must be granted membership in the organization before logging in with this connection."
          },
          "show_as_button": {
            "type": "boolean",
            "description": "Determines whether a connection should be displayed on this organization’s login prompt. Only applicable for enterprise connections. Default: true."
          },
          "is_signup_enabled": {
            "type": "boolean",
            "description": "Determines whether organization signup should be enabled for this organization connection. Only applicable for database connections. Default: false."
          },
          "connection": {
            "$ref": "#/components/schemas/OrganizationConnectionInformation"
          }
        }
      },
      "AddRolePermissionsRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "permissions"
        ],
        "properties": {
          "permissions": {
            "type": "array",
            "description": "array of resource_server_identifier, permission_name pairs.",
            "items": {
              "$ref": "#/components/schemas/PermissionRequestPayload"
            }
          }
        }
      },
      "AnomalyIPFormat": {
        "type": "string"
      },
      "AppMetadata": {
        "type": "object",
        "description": "Data related to the user that does affect the application's core functionality.",
        "additionalProperties": true,
        "properties": {}
      },
      "AssignOrganizationMemberRolesRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "roles"
        ],
        "properties": {
          "roles": {
            "type": "array",
            "description": "List of roles IDs to associated with the user.",
            "items": {
              "type": "string",
              "format": "role-id"
            }
          }
        }
      },
      "AssignRoleUsersRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "users"
        ],
        "properties": {
          "users": {
            "type": "array",
            "description": "user_id's of the users to assign the role to.",
            "items": {
              "type": "string",
              "format": "user-id-with-max-length"
            }
          }
        }
      },
      "AssociateOrganizationClientGrantRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "grant_id"
        ],
        "properties": {
          "grant_id": {
            "type": "string",
            "description": "A Client Grant ID to add to the organization.",
            "format": "client-grant-id"
          }
        }
      },
      "AssociateOrganizationClientGrantResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the client grant."
          },
          "client_id": {
            "type": "string",
            "description": "ID of the client."
          },
          "audience": {
            "type": "string",
            "description": "The audience (API identifier) of this client grant",
            "minLength": 1
          },
          "scope": {
            "type": "array",
            "description": "Scopes allowed for this client grant.",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "organization_usage": {
            "$ref": "#/components/schemas/OrganizationUsageEnum"
          },
          "allow_any_organization": {
            "type": "boolean",
            "description": "If enabled, any organization can be used with this grant. If disabled (default), the grant must be explicitly assigned to the desired organizations."
          }
        }
      },
      "Client": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "client_id": {
            "type": "string",
            "description": "ID of this client.",
            "default": "AaiyAPdpYdesoKnqjj8HJqRn4T5titww"
          },
          "tenant": {
            "type": "string",
            "description": "Name of the tenant this client belongs to.",
            "default": ""
          },
          "name": {
            "type": "string",
            "description": "Name of this client (min length: 1 character, does not allow `<` or `>`).",
            "default": "My application"
          },
          "description": {
            "type": "string",
            "description": "Free text description of this client (max length: 140 characters).",
            "default": ""
          },
          "global": {
            "type": "boolean",
            "description": "Whether this is your global 'All Applications' client representing legacy tenant settings (true) or a regular client (false).",
            "default": false
          },
          "client_secret": {
            "type": "string",
            "description": "Client secret (which you must not make public).",
            "default": "MG_TNT2ver-SylNat-_VeMmd-4m0Waba0jr1troztBniSChEw0glxEmgEi2Kw40H"
          },
          "app_type": {
            "type": "string",
            "description": "Type of client used to determine which settings are applicable. Can be `spa`, `native`, `non_interactive`, or `regular_web`.",
            "default": ""
          },
          "logo_uri": {
            "type": "string",
            "description": "URL of the logo to display for this client. Recommended size is 150x150 pixels."
          },
          "is_first_party": {
            "type": "boolean",
            "description": "Whether this client a first party client (true) or not (false).",
            "default": false
          },
          "oidc_conformant": {
            "type": "boolean",
            "description": "Whether this client conforms to <a href='https://auth0.com/docs/api-auth/tutorials/adoption'>strict OIDC specifications</a> (true) or uses legacy features (false).",
            "default": false
          },
          "callbacks": {
            "type": "array",
            "description": "Comma-separated list of URLs whitelisted for Auth0 to use as a callback to the client after authentication.",
            "items": {
              "type": "string"
            }
          },
          "allowed_origins": {
            "type": "array",
            "description": "Comma-separated list of URLs allowed to make requests from JavaScript to Auth0 API (typically used with CORS). By default, all your callback URLs will be allowed. This field allows you to enter other origins if necessary. You can also use wildcards at the subdomain level (e.g., https://*.contoso.com). Query strings and hash information are not taken into account when validating these URLs.",
            "items": {
              "type": "string"
            }
          },
          "web_origins": {
            "type": "array",
            "description": "Comma-separated list of allowed origins for use with <a href='https://auth0.com/docs/cross-origin-authentication'>Cross-Origin Authentication</a>, <a href='https://auth0.com/docs/flows/concepts/device-auth'>Device Flow</a>, and <a href='https://auth0.com/docs/protocols/oauth2#how-response-mode-works'>web message response mode</a>.",
            "items": {
              "type": "string"
            }
          },
          "client_aliases": {
            "type": "array",
            "description": "List of audiences/realms for SAML protocol. Used by the wsfed addon.",
            "items": {
              "type": "string"
            }
          },
          "allowed_clients": {
            "type": "array",
            "description": "List of allow clients and API ids that are allowed to make delegation requests. Empty means all all your clients are allowed.",
            "items": {
              "type": "string"
            }
          },
          "allowed_logout_urls": {
            "type": "array",
            "description": "Comma-separated list of URLs that are valid to redirect to after logout from Auth0. Wildcards are allowed for subdomains.",
            "items": {
              "type": "string"
            }
          },
          "session_transfer": {
            "$ref": "#/components/schemas/ClientSessionTransferConfiguration"
          },
          "oidc_logout": {
            "$ref": "#/components/schemas/ClientOIDCBackchannelLogoutSettings"
          },
          "grant_types": {
            "type": "array",
            "description": "List of grant types supported for this application. Can include `authorization_code`, `implicit`, `refresh_token`, `client_credentials`, `password`, `http://auth0.com/oauth/grant-type/password-realm`, `http://auth0.com/oauth/grant-type/mfa-oob`, `http://auth0.com/oauth/grant-type/mfa-otp`, `http://auth0.com/oauth/grant-type/mfa-recovery-code`, `urn:openid:params:grant-type:ciba`, and `urn:ietf:params:oauth:grant-type:device_code`.",
            "items": {
              "type": "string"
            }
          },
          "jwt_configuration": {
            "$ref": "#/components/schemas/ClientJwtConfiguration"
          },
          "signing_keys": {
            "$ref": "#/components/schemas/ClientSigningKeys"
          },
          "encryption_key": {
            "$ref": "#/components/schemas/ClientEncryptionKey"
          },
          "sso": {
            "type": "boolean",
            "description": "Applies only to SSO clients and determines whether Auth0 will handle Single Sign On (true) or whether the Identity Provider will (false).",
            "default": false
          },
          "sso_disabled": {
            "type": "boolean",
            "description": "Whether Single Sign On is disabled (true) or enabled (true). Defaults to true.",
            "default": false
          },
          "cross_origin_authentication": {
            "type": "boolean",
            "description": "Whether this client can be used to make cross-origin authentication requests (true) or it is not allowed to make such requests (false)."
          },
          "cross_origin_loc": {
            "type": "string",
            "description": "URL of the location in your site where the cross origin verification takes place for the cross-origin auth flow when performing Auth in your own domain instead of Auth0 hosted login page.",
            "format": "url"
          },
          "custom_login_page_on": {
            "type": "boolean",
            "description": "Whether a custom login page is to be used (true) or the default provided login page (false).",
            "default": true
          },
          "custom_login_page": {
            "type": "string",
            "description": "The content (HTML, CSS, JS) of the custom login page.",
            "default": ""
          },
          "custom_login_page_preview": {
            "type": "string",
            "description": "The content (HTML, CSS, JS) of the custom login page. (Used on Previews)",
            "default": ""
          },
          "form_template": {
            "type": "string",
            "description": "HTML form template to be used for WS-Federation.",
            "default": ""
          },
          "addons": {
            "$ref": "#/components/schemas/ClientAddons"
          },
          "token_endpoint_auth_method": {
            "$ref": "#/components/schemas/ClientTokenEndpointAuthMethodEnum"
          },
          "client_metadata": {
            "$ref": "#/components/schemas/ClientMetadata"
          },
          "mobile": {
            "$ref": "#/components/schemas/ClientMobile"
          },
          "initiate_login_uri": {
            "type": "string",
            "description": "Initiate login uri, must be https",
            "format": "absolute-https-uri-or-empty"
          },
          "native_social_login": {},
          "refresh_token": {
            "$ref": "#/components/schemas/ClientRefreshTokenConfiguration"
          },
          "default_organization": {
            "$ref": "#/components/schemas/ClientDefaultOrganization"
          },
          "organization_usage": {
            "$ref": "#/components/schemas/ClientOrganizationUsageEnum"
          },
          "organization_require_behavior": {
            "$ref": "#/components/schemas/ClientOrganizationRequireBehaviorEnum"
          },
          "client_authentication_methods": {
            "$ref": "#/components/schemas/ClientAuthenticationMethod"
          },
          "require_pushed_authorization_requests": {
            "type": "boolean",
            "description": "Makes the use of Pushed Authorization Requests mandatory for this client",
            "default": false
          },
          "require_proof_of_possession": {
            "type": "boolean",
            "description": "Makes the use of Proof-of-Possession mandatory for this client",
            "default": false
          },
          "signed_request_object": {
            "$ref": "#/components/schemas/ClientSignedRequestObjectWithCredentialId"
          },
          "compliance_level": {
            "$ref": "#/components/schemas/ClientComplianceLevelEnum"
          },
          "par_request_expiry": {
            "type": "integer",
            "nullable": true,
            "description": "Specifies how long, in seconds, a Pushed Authorization Request URI remains valid"
          },
          "token_quota": {
            "$ref": "#/components/schemas/TokenQuota"
          }
        }
      },
      "ClientAddonAWS": {
        "type": "object",
        "description": "AWS addon configuration.",
        "additionalProperties": true,
        "properties": {
          "principal": {
            "type": "string",
            "description": "AWS principal ARN, e.g. `arn:aws:iam::010616021751:saml-provider/idpname`"
          },
          "role": {
            "type": "string",
            "description": "AWS role ARN, e.g. `arn:aws:iam::010616021751:role/foo`"
          },
          "lifetime_in_seconds": {
            "type": "integer",
            "description": "AWS token lifetime in seconds"
          }
        }
      },
      "ClientAddonAzureBlob": {
        "type": "object",
        "description": "Azure Blob Storage addon configuration.",
        "additionalProperties": true,
        "properties": {
          "accountName": {
            "type": "string",
            "description": "Your Azure storage account name. Usually first segment in your Azure storage URL. e.g. `https://acme-org.blob.core.windows.net` would be the account name `acme-org`."
          },
          "storageAccessKey": {
            "type": "string",
            "description": "Access key associated with this storage account."
          },
          "containerName": {
            "type": "string",
            "description": "Container to request a token for. e.g. `my-container`."
          },
          "blobName": {
            "type": "string",
            "description": "Entity to request a token for. e.g. `my-blob`. If blank the computed SAS will apply to the entire storage container."
          },
          "expiration": {
            "type": "integer",
            "description": "Expiration in minutes for the generated token (default of 5 minutes)."
          },
          "signedIdentifier": {
            "type": "string",
            "description": "Shared access policy identifier defined in your storage account resource."
          },
          "blob_read": {
            "type": "boolean",
            "description": "Indicates if the issued token has permission to read the content, properties, metadata and block list. Use the blob as the source of a copy operation."
          },
          "blob_write": {
            "type": "boolean",
            "description": "Indicates if the issued token has permission to create or write content, properties, metadata, or block list. Snapshot or lease the blob. Resize the blob (page blob only). Use the blob as the destination of a copy operation within the same account."
          },
          "blob_delete": {
            "type": "boolean",
            "description": "Indicates if the issued token has permission to delete the blob."
          },
          "container_read": {
            "type": "boolean",
            "description": "Indicates if the issued token has permission to read the content, properties, metadata or block list of any blob in the container. Use any blob in the container as the source of a copy operation"
          },
          "container_write": {
            "type": "boolean",
            "description": "Indicates that for any blob in the container if the issued token has permission to create or write content, properties, metadata, or block list. Snapshot or lease the blob. Resize the blob (page blob only). Use the blob as the destination of a copy operation within the same account."
          },
          "container_delete": {
            "type": "boolean",
            "description": "Indicates if issued token has permission to delete any blob in the container."
          },
          "container_list": {
            "type": "boolean",
            "description": "Indicates if the issued token has permission to list blobs in the container."
          }
        }
      },
      "ClientAddonAzureSB": {
        "type": "object",
        "description": "Azure Storage Bus addon configuration.",
        "additionalProperties": true,
        "properties": {
          "namespace": {
            "type": "string",
            "description": "Your Azure Service Bus namespace. Usually the first segment of your Service Bus URL (e.g. `https://acme-org.servicebus.windows.net` would be `acme-org`)."
          },
          "sasKeyName": {
            "type": "string",
            "description": "Your shared access policy name defined in your Service Bus entity."
          },
          "sasKey": {
            "type": "string",
            "description": "Primary Key associated with your shared access policy."
          },
          "entityPath": {
            "type": "string",
            "description": "Entity you want to request a token for. e.g. `my-queue`.'"
          },
          "expiration": {
            "type": "integer",
            "description": "Optional expiration in minutes for the generated token. Defaults to 5 minutes."
          }
        }
      },
      "ClientAddonBox": {
        "type": "object",
        "description": "Box SSO indicator (no configuration settings needed for Box SSO).",
        "additionalProperties": true
      },
      "ClientAddonCloudBees": {
        "type": "object",
        "description": "CloudBees SSO indicator (no configuration settings needed for CloudBees SSO).",
        "additionalProperties": true
      },
      "ClientAddonConcur": {
        "type": "object",
        "description": "Concur SSO indicator (no configuration settings needed for Concur SSO).",
        "additionalProperties": true
      },
      "ClientAddonDropbox": {
        "type": "object",
        "description": "Dropbox SSO indicator (no configuration settings needed for Dropbox SSO).",
        "additionalProperties": true
      },
      "ClientAddonEchoSign": {
        "type": "object",
        "description": "Adobe EchoSign SSO configuration.",
        "additionalProperties": true,
        "properties": {
          "domain": {
            "type": "string",
            "description": "Your custom domain found in your EchoSign URL. e.g. `https://acme-org.echosign.com` would be `acme-org`."
          }
        }
      },
      "ClientAddonEgnyte": {
        "type": "object",
        "description": "Egnyte SSO configuration.",
        "additionalProperties": true,
        "properties": {
          "domain": {
            "type": "string",
            "description": "Your custom domain found in your Egnyte URL. e.g. `https://acme-org.egnyte.com` would be `acme-org`."
          }
        }
      },
      "ClientAddonFirebase": {
        "type": "object",
        "description": "Google Firebase addon configuration.",
        "additionalProperties": true,
        "properties": {
          "secret": {
            "type": "string",
            "description": "Google Firebase Secret. (SDK 2 only)."
          },
          "private_key_id": {
            "type": "string",
            "description": "Optional ID of the private key to obtain kid header in the issued token (SDK v3+ tokens only)."
          },
          "private_key": {
            "type": "string",
            "description": "Private Key for signing the token (SDK v3+ tokens only)."
          },
          "client_email": {
            "type": "string",
            "description": "ID of the Service Account you have created (shown as `client_email` in the generated JSON file, SDK v3+ tokens only)."
          },
          "lifetime_in_seconds": {
            "type": "integer",
            "description": "Optional expiration in seconds for the generated token. Defaults to 3600 seconds (SDK v3+ tokens only)."
          }
        }
      },
      "ClientAddonLayer": {
        "type": "object",
        "description": "Layer addon configuration.",
        "additionalProperties": true,
        "required": [
          "providerId",
          "keyId",
          "privateKey"
        ],
        "properties": {
          "providerId": {
            "type": "string",
            "description": "Provider ID of your Layer account"
          },
          "keyId": {
            "type": "string",
            "description": "Authentication Key identifier used to sign the Layer token."
          },
          "privateKey": {
            "type": "string",
            "description": "Private key for signing the Layer token."
          },
          "principal": {
            "type": "string",
            "description": "Name of the property used as the unique user id in Layer. If not specified `user_id` is used."
          },
          "expiration": {
            "type": "integer",
            "description": "Optional expiration in minutes for the generated token. Defaults to 5 minutes."
          }
        }
      },
      "ClientAddonMSCRM": {
        "type": "object",
        "description": "Microsoft Dynamics CRM SSO configuration.",
        "additionalProperties": true,
        "required": [
          "url"
        ],
        "properties": {
          "url": {
            "type": "string",
            "description": "Microsoft Dynamics CRM application URL.",
            "format": "url"
          }
        }
      },
      "ClientAddonNewRelic": {
        "type": "object",
        "description": "New Relic SSO configuration.",
        "additionalProperties": true,
        "properties": {
          "account": {
            "type": "string",
            "description": "Your New Relic Account ID found in your New Relic URL after the `/accounts/` path. e.g. `https://rpm.newrelic.com/accounts/123456/query` would be `123456`."
          }
        }
      },
      "ClientAddonOAG": {
        "type": "object",
        "nullable": true,
        "description": "Okta Access Gateway SSO configuration",
        "additionalProperties": false,
        "properties": {}
      },
      "ClientAddonOffice365": {
        "type": "object",
        "description": "Microsoft Office 365 SSO configuration.",
        "additionalProperties": true,
        "properties": {
          "domain": {
            "type": "string",
            "description": "Your Office 365 domain name. e.g. `acme-org.com`."
          },
          "connection": {
            "type": "string",
            "description": "Optional Auth0 database connection for testing an already-configured Office 365 tenant."
          }
        }
      },
      "ClientAddonRMS": {
        "type": "object",
        "description": "Active Directory Rights Management Service SSO configuration.",
        "additionalProperties": true,
        "required": [
          "url"
        ],
        "properties": {
          "url": {
            "type": "string",
            "description": "URL of your Rights Management Server. It can be internal or external, but users will have to be able to reach it.",
            "format": "url"
          }
        }
      },
      "ClientAddonSAML": {
        "type": "object",
        "description": "SAML2 addon indicator (no configuration settings needed for SAML2 addon).",
        "additionalProperties": true,
        "properties": {
          "mappings": {
            "$ref": "#/components/schemas/ClientAddonSAMLMapping"
          },
          "audience": {
            "type": "string"
          },
          "recipient": {
            "type": "string"
          },
          "createUpnClaim": {
            "type": "boolean"
          },
          "mapUnknownClaimsAsIs": {
            "type": "boolean"
          },
          "passthroughClaimsWithNoMapping": {
            "type": "boolean"
          },
          "mapIdentities": {
            "type": "boolean"
          },
          "signatureAlgorithm": {
            "type": "string"
          },
          "digestAlgorithm": {
            "type": "string"
          },
          "issuer": {
            "type": "string"
          },
          "destination": {
            "type": "string"
          },
          "lifetimeInSeconds": {
            "type": "integer"
          },
          "signResponse": {
            "type": "boolean"
          },
          "nameIdentifierFormat": {
            "type": "string"
          },
          "nameIdentifierProbes": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "authnContextClassRef": {
            "type": "string"
          }
        }
      },
      "ClientAddonSAMLMapping": {
        "type": "object",
        "additionalProperties": true
      },
      "ClientAddonSAPAPI": {
        "type": "object",
        "description": "SAP API addon configuration.",
        "additionalProperties": true,
        "properties": {
          "clientid": {
            "type": "string",
            "description": "If activated in the OAuth 2.0 client configuration (transaction SOAUTH2) the SAML attribute client_id must be set and equal the client_id form parameter of the access token request."
          },
          "usernameAttribute": {
            "type": "string",
            "description": "Name of the property in the user object that maps to a SAP username. e.g. `email`."
          },
          "tokenEndpointUrl": {
            "type": "string",
            "description": "Your SAP OData server OAuth2 token endpoint URL.",
            "format": "url"
          },
          "scope": {
            "type": "string",
            "description": "Requested scope for SAP APIs."
          },
          "servicePassword": {
            "type": "string",
            "description": "Service account password to use to authenticate API calls to the token endpoint."
          },
          "nameIdentifierFormat": {
            "type": "string",
            "description": "NameID element of the Subject which can be used to express the user's identity. Defaults to `urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified`."
          }
        }
      },
      "ClientAddonSSOIntegration": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "name": {
            "type": "string",
            "description": "SSO integration name"
          },
          "version": {
            "type": "string",
            "description": "SSO integration version installed"
          }
        }
      },
      "ClientAddonSalesforce": {
        "type": "object",
        "description": "Salesforce SSO configuration.",
        "additionalProperties": true,
        "properties": {
          "entity_id": {
            "type": "string",
            "description": "Arbitrary logical URL that identifies the Saleforce resource. e.g. `https://acme-org.com`.",
            "format": "url"
          }
        }
      },
      "ClientAddonSalesforceAPI": {
        "type": "object",
        "description": "Salesforce API addon configuration.",
        "additionalProperties": true,
        "properties": {
          "clientid": {
            "type": "string",
            "description": "Consumer Key assigned by Salesforce to the Connected App."
          },
          "principal": {
            "type": "string",
            "description": "Name of the property in the user object that maps to a Salesforce username. e.g. `email`."
          },
          "communityName": {
            "type": "string",
            "description": "Community name."
          },
          "community_url_section": {
            "type": "string",
            "description": "Community url section."
          }
        }
      },
      "ClientAddonSalesforceSandboxAPI": {
        "type": "object",
        "description": "Salesforce Sandbox addon configuration.",
        "additionalProperties": true,
        "properties": {
          "clientid": {
            "type": "string",
            "description": "Consumer Key assigned by Salesforce to the Connected App."
          },
          "principal": {
            "type": "string",
            "description": "Name of the property in the user object that maps to a Salesforce username. e.g. `email`."
          },
          "communityName": {
            "type": "string",
            "description": "Community name."
          },
          "community_url_section": {
            "type": "string",
            "description": "Community url section."
          }
        }
      },
      "ClientAddonSentry": {
        "type": "object",
        "description": "Sentry SSO configuration.",
        "additionalProperties": true,
        "properties": {
          "org_slug": {
            "type": "string",
            "description": "Generated slug for your Sentry organization. Found in your Sentry URL. e.g. `https://sentry.acme.com/acme-org/` would be `acme-org`."
          },
          "base_url": {
            "type": "string",
            "description": "URL prefix only if running Sentry Community Edition, otherwise leave should be blank."
          }
        }
      },
      "ClientAddonSharePoint": {
        "type": "object",
        "description": "SharePoint SSO configuration.",
        "additionalProperties": true,
        "properties": {
          "url": {
            "type": "string",
            "description": "Internal SharePoint application URL."
          },
          "external_url": {
            "description": "External SharePoint application URLs if exposed to the Internet.",
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string"
              }
            ]
          }
        }
      },
      "ClientAddonSlack": {
        "type": "object",
        "description": "Slack team or workspace name usually first segment in your Slack URL. e.g. `https://acme-org.slack.com` would be `acme-org`.",
        "additionalProperties": true,
        "required": [
          "team"
        ],
        "properties": {
          "team": {
            "type": "string",
            "description": "Slack team name."
          }
        }
      },
      "ClientAddonSpringCM": {
        "type": "object",
        "description": "SpringCM SSO configuration.",
        "additionalProperties": true,
        "properties": {
          "acsurl": {
            "type": "string",
            "description": "SpringCM ACS URL, e.g. `https://na11.springcm.com/atlas/sso/SSOEndpoint.ashx`."
          }
        }
      },
      "ClientAddonWAMS": {
        "type": "object",
        "description": "Windows Azure Mobile Services addon configuration.",
        "additionalProperties": true,
        "properties": {
          "masterkey": {
            "type": "string",
            "description": "Your master key for Windows Azure Mobile Services."
          }
        }
      },
      "ClientAddonWSFed": {
        "type": "object",
        "description": "WS-Fed (WIF) addon indicator. Actual configuration is stored in `callback` and `client_aliases` properties on the client.",
        "additionalProperties": true
      },
      "ClientAddonZendesk": {
        "type": "object",
        "description": "Zendesk SSO configuration.",
        "additionalProperties": true,
        "properties": {
          "accountName": {
            "type": "string",
            "description": "Zendesk account name usually first segment in your Zendesk URL. e.g. `https://acme-org.zendesk.com` would be `acme-org`."
          }
        }
      },
      "ClientAddonZoom": {
        "type": "object",
        "description": "Zoom SSO configuration.",
        "additionalProperties": true,
        "properties": {
          "account": {
            "type": "string",
            "description": "Zoom account name usually first segment of your Zoom URL, e.g. `https://acme-org.zoom.us` would be `acme-org`."
          }
        }
      },
      "ClientAddons": {
        "type": "object",
        "description": "Addons enabled for this client and their associated configurations.",
        "additionalProperties": false,
        "properties": {
          "aws": {
            "$ref": "#/components/schemas/ClientAddonAWS"
          },
          "azure_blob": {
            "$ref": "#/components/schemas/ClientAddonAzureBlob"
          },
          "azure_sb": {
            "$ref": "#/components/schemas/ClientAddonAzureSB"
          },
          "rms": {
            "$ref": "#/components/schemas/ClientAddonRMS"
          },
          "mscrm": {
            "$ref": "#/components/schemas/ClientAddonMSCRM"
          },
          "slack": {
            "$ref": "#/components/schemas/ClientAddonSlack"
          },
          "sentry": {
            "$ref": "#/components/schemas/ClientAddonSentry"
          },
          "box": {
            "$ref": "#/components/schemas/ClientAddonBox"
          },
          "cloudbees": {
            "$ref": "#/components/schemas/ClientAddonCloudBees"
          },
          "concur": {
            "$ref": "#/components/schemas/ClientAddonConcur"
          },
          "dropbox": {
            "$ref": "#/components/schemas/ClientAddonDropbox"
          },
          "echosign": {
            "$ref": "#/components/schemas/ClientAddonEchoSign"
          },
          "egnyte": {
            "$ref": "#/components/schemas/ClientAddonEgnyte"
          },
          "firebase": {
            "$ref": "#/components/schemas/ClientAddonFirebase"
          },
          "newrelic": {
            "$ref": "#/components/schemas/ClientAddonNewRelic"
          },
          "office365": {
            "$ref": "#/components/schemas/ClientAddonOffice365"
          },
          "salesforce": {
            "$ref": "#/components/schemas/ClientAddonSalesforce"
          },
          "salesforce_api": {
            "$ref": "#/components/schemas/ClientAddonSalesforceAPI"
          },
          "salesforce_sandbox_api": {
            "$ref": "#/components/schemas/ClientAddonSalesforceSandboxAPI"
          },
          "samlp": {
            "$ref": "#/components/schemas/ClientAddonSAML"
          },
          "layer": {
            "$ref": "#/components/schemas/ClientAddonLayer"
          },
          "sap_api": {
            "$ref": "#/components/schemas/ClientAddonSAPAPI"
          },
          "sharepoint": {
            "$ref": "#/components/schemas/ClientAddonSharePoint"
          },
          "springcm": {
            "$ref": "#/components/schemas/ClientAddonSpringCM"
          },
          "wams": {
            "$ref": "#/components/schemas/ClientAddonWAMS"
          },
          "wsfed": {
            "$ref": "#/components/schemas/ClientAddonWSFed"
          },
          "zendesk": {
            "$ref": "#/components/schemas/ClientAddonZendesk"
          },
          "zoom": {
            "$ref": "#/components/schemas/ClientAddonZoom"
          },
          "sso_integration": {
            "$ref": "#/components/schemas/ClientAddonSSOIntegration"
          },
          "oag": {
            "$ref": "#/components/schemas/ClientAddonOAG"
          }
        }
      },
      "ClientAppTypeEnum": {
        "type": "string",
        "description": "Type of client used to determine which settings are applicable. Can be `spa`, `native`, `non_interactive`, or `regular_web`.",
        "enum": [
          "native",
          "spa",
          "regular_web",
          "non_interactive",
          "rms",
          "box",
          "cloudbees",
          "concur",
          "dropbox",
          "mscrm",
          "echosign",
          "egnyte",
          "newrelic",
          "office365",
          "salesforce",
          "sentry",
          "sharepoint",
          "slack",
          "springcm",
          "zendesk",
          "zoom",
          "sso_integration",
          "oag"
        ]
      },
      "ClientAuthenticationMethod": {
        "type": "object",
        "nullable": true,
        "description": "Defines client authentication methods.",
        "additionalProperties": false,
        "properties": {
          "private_key_jwt": {
            "$ref": "#/components/schemas/PrivateKeyJWT"
          },
          "tls_client_auth": {
            "$ref": "#/components/schemas/ClientAuthenticationMethodTLSClientAuth"
          },
          "self_signed_tls_client_auth": {
            "$ref": "#/components/schemas/ClientAuthenticationMethodSelfSignedTLSClientAuth"
          }
        }
      },
      "ClientAuthenticationMethodSelfSignedTLSClientAuth": {
        "type": "object",
        "description": "Defines `self_signed_tls_client_auth` client authentication method. If the property is defined, the client is configured to use mTLS authentication method utilizing self-signed certificate.",
        "additionalProperties": false,
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "array",
            "description": "A list of unique and previously created credential IDs enabled on the client for mTLS authentication utilizing self-signed certificate.",
            "items": {
              "$ref": "#/components/schemas/CredentialId"
            }
          }
        }
      },
      "ClientAuthenticationMethodTLSClientAuth": {
        "type": "object",
        "description": "Defines `tls_client_auth` client authentication method. If the property is defined, the client is configured to use CA-based mTLS authentication method.",
        "additionalProperties": false,
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "array",
            "description": "A list of unique and previously created credential IDs enabled on the client for CA-based mTLS authentication.",
            "items": {
              "$ref": "#/components/schemas/CredentialId"
            }
          }
        }
      },
      "ClientComplianceLevelEnum": {
        "type": "string",
        "nullable": true,
        "description": "Defines the compliance level for this client, which may restrict it's capabilities",
        "enum": [
          "none",
          "fapi1_adv_pkj_par",
          "fapi1_adv_mtls_par",
          "fapi2_sp_pkj_mtls",
          "fapi2_sp_mtls_mtls",
          null
        ]
      },
      "ClientCreateAuthenticationMethod": {
        "type": "object",
        "description": "Defines client authentication methods.",
        "additionalProperties": false,
        "properties": {
          "private_key_jwt": {
            "$ref": "#/components/schemas/PrivateKeyJWT"
          },
          "tls_client_auth": {
            "$ref": "#/components/schemas/ClientAuthenticationMethodTLSClientAuth"
          },
          "self_signed_tls_client_auth": {
            "$ref": "#/components/schemas/ClientAuthenticationMethodSelfSignedTLSClientAuth"
          }
        }
      },
      "ClientCredential": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the credential. Generated on creation.",
            "default": "cred_1m7sfABoNTTKYwTQ8qt6tX"
          },
          "name": {
            "type": "string",
            "description": "The name given to the credential by the user.",
            "default": ""
          },
          "kid": {
            "type": "string",
            "description": "The key identifier of the credential, generated on creation.",
            "default": "IZSSTECp..."
          },
          "alg": {
            "$ref": "#/components/schemas/ClientCredentialAlgorithmEnum"
          },
          "credential_type": {
            "$ref": "#/components/schemas/ClientCredentialTypeEnum"
          },
          "subject_dn": {
            "type": "string",
            "description": "The X509 certificate's Subject Distinguished Name"
          },
          "thumbprint_sha256": {
            "type": "string",
            "description": "The X509 certificate's SHA256 thumbprint"
          },
          "created_at": {
            "type": "string",
            "description": "The ISO 8601 formatted date the credential was created.",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "The ISO 8601 formatted date the credential was updated.",
            "format": "date-time"
          },
          "expires_at": {
            "type": "string",
            "description": "The ISO 8601 formatted date representing the expiration of the credential.",
            "format": "date-time"
          }
        }
      },
      "ClientCredentialAlgorithmEnum": {
        "type": "string",
        "description": "Algorithm which will be used with the credential. Supported algorithms: RS256,RS384,PS256",
        "default": "RS256",
        "enum": [
          "RS256",
          "RS384",
          "PS256"
        ]
      },
      "ClientCredentialTypeEnum": {
        "type": "string",
        "description": "The type of credential.",
        "enum": [
          "public_key",
          "cert_subject_dn",
          "x509_cert"
        ]
      },
      "ClientDefaultOrganization": {
        "type": "object",
        "nullable": true,
        "description": "Defines the default Organization ID and flows",
        "additionalProperties": false,
        "required": [
          "organization_id",
          "flows"
        ],
        "properties": {
          "organization_id": {
            "type": "string",
            "description": "The default Organization ID to be used",
            "format": "organization-id"
          },
          "flows": {
            "type": "array",
            "description": "The default Organization usage",
            "items": {
              "$ref": "#/components/schemas/ClientDefaultOrganizationFlowsEnum"
            }
          }
        }
      },
      "ClientDefaultOrganizationFlowsEnum": {
        "type": "string",
        "enum": [
          "client_credentials"
        ]
      },
      "ClientEncryptionKey": {
        "type": "object",
        "nullable": true,
        "description": "Encryption used for WsFed responses with this client.",
        "additionalProperties": true,
        "properties": {
          "pub": {
            "type": "string",
            "description": "Encryption Public RSA Key."
          },
          "cert": {
            "type": "string",
            "description": "Encryption certificate for public key in X.509 (.CER) format."
          },
          "subject": {
            "type": "string",
            "description": "Encryption certificate name for this certificate in the format `/CN={domain}`."
          }
        }
      },
      "ClientGrantAllowAnyOrganizationEnum": {
        "type": "boolean",
        "enum": [
          true
        ]
      },
      "ClientGrantOrganizationNullableUsageEnum": {
        "type": "string",
        "nullable": true,
        "description": "Controls how organizations may be used with this grant",
        "enum": [
          "deny",
          "allow",
          "require",
          null
        ]
      },
      "ClientGrantOrganizationUsageEnum": {
        "type": "string",
        "description": "Defines whether organizations can be used with client credentials exchanges for this grant.",
        "enum": [
          "deny",
          "allow",
          "require"
        ]
      },
      "ClientGrantResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the client grant."
          },
          "client_id": {
            "type": "string",
            "description": "ID of the client."
          },
          "audience": {
            "type": "string",
            "description": "The audience (API identifier) of this client grant.",
            "minLength": 1
          },
          "scope": {
            "type": "array",
            "description": "Scopes allowed for this client grant.",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "organization_usage": {
            "$ref": "#/components/schemas/ClientGrantOrganizationUsageEnum"
          },
          "allow_any_organization": {
            "type": "boolean",
            "description": "If enabled, any organization can be used with this grant. If disabled (default), the grant must be explicitly assigned to the desired organizations."
          }
        }
      },
      "ClientJwtConfiguration": {
        "type": "object",
        "description": "Configuration related to JWTs for the client.",
        "additionalProperties": true,
        "properties": {
          "lifetime_in_seconds": {
            "type": "integer",
            "description": "Number of seconds the JWT will be valid for (affects `exp` claim).",
            "default": 36000
          },
          "secret_encoded": {
            "type": "boolean",
            "description": "Whether the client secret is base64 encoded (true) or unencoded (false).",
            "default": true
          },
          "scopes": {
            "$ref": "#/components/schemas/ClientJwtConfigurationScopes"
          },
          "alg": {
            "$ref": "#/components/schemas/SigningAlgorithmEnum"
          }
        }
      },
      "ClientJwtConfigurationScopes": {
        "type": "object",
        "description": "Configuration related to id token claims for the client.",
        "additionalProperties": true
      },
      "ClientMetadata": {
        "type": "object",
        "description": "Metadata associated with the client, in the form of an object with string values (max 255 chars).  Maximum of 10 metadata properties allowed.  Field names (max 255 chars) are alphanumeric and may only include the following special characters:  :,-+=_*?\"/\\()<>@\t[Tab] [Space]",
        "additionalProperties": true
      },
      "ClientMobile": {
        "type": "object",
        "description": "Additional configuration for native mobile apps.",
        "additionalProperties": true,
        "properties": {
          "android": {
            "$ref": "#/components/schemas/ClientMobileAndroid"
          },
          "ios": {
            "$ref": "#/components/schemas/ClientMobileiOS"
          }
        }
      },
      "ClientMobileAndroid": {
        "type": "object",
        "description": "Android native app configuration.",
        "additionalProperties": true,
        "properties": {
          "app_package_name": {
            "type": "string",
            "description": "App package name found in AndroidManifest.xml.",
            "default": ""
          },
          "sha256_cert_fingerprints": {
            "type": "array",
            "description": "SHA256 fingerprints of the app's signing certificate. Multiple fingerprints can be used to support different versions of your app, such as debug and production builds.",
            "items": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      },
      "ClientMobileiOS": {
        "type": "object",
        "description": "iOS native app configuration.",
        "additionalProperties": true,
        "properties": {
          "team_id": {
            "type": "string",
            "description": "Identifier assigned to the Apple account that signs and uploads the app to the store.",
            "default": ""
          },
          "app_bundle_identifier": {
            "type": "string",
            "description": "Assigned by developer to the app as its unique identifier inside the store. Usually this is a reverse domain plus the app name, e.g. `com.you.MyApp`.",
            "default": ""
          }
        }
      },
      "ClientOIDCBackchannelLogoutInitiators": {
        "type": "object",
        "description": "Configuration for OIDC backchannel logout initiators",
        "additionalProperties": true,
        "properties": {
          "mode": {
            "$ref": "#/components/schemas/ClientOIDCBackchannelLogoutInitiatorsModeEnum"
          },
          "selected_initiators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientOIDCBackchannelLogoutInitiatorsEnum"
            }
          }
        }
      },
      "ClientOIDCBackchannelLogoutInitiatorsEnum": {
        "type": "string",
        "description": "The `selected_initiators` property contains the list of initiators to be enabled for the given application.",
        "enum": [
          "rp-logout",
          "idp-logout",
          "password-changed",
          "session-expired",
          "session-revoked",
          "account-deleted",
          "email-identifier-changed",
          "mfa-phone-unenrolled",
          "account-deactivated"
        ]
      },
      "ClientOIDCBackchannelLogoutInitiatorsModeEnum": {
        "type": "string",
        "description": "The `mode` property determines the configuration method for enabling initiators. `custom` enables only the initiators listed in the selected_initiators array, `all` enables all current and future initiators.",
        "enum": [
          "custom",
          "all"
        ]
      },
      "ClientOIDCBackchannelLogoutSettings": {
        "type": "object",
        "description": "Configuration for OIDC backchannel logout",
        "additionalProperties": true,
        "properties": {
          "backchannel_logout_urls": {
            "type": "array",
            "description": "Comma-separated list of URLs that are valid to call back from Auth0 for OIDC backchannel logout. Currently only one URL is allowed.",
            "items": {
              "type": "string",
              "format": "absolute-https-uri-or-empty"
            }
          },
          "backchannel_logout_initiators": {
            "$ref": "#/components/schemas/ClientOIDCBackchannelLogoutInitiators"
          }
        }
      },
      "ClientOrganizationRequireBehaviorEnum": {
        "type": "string",
        "description": "Defines how to proceed during an authentication transaction when `client.organization_usage: 'require'`. Can be `no_prompt` (default), `pre_login_prompt` or `post_login_prompt`. `post_login_prompt` requires `oidc_conformant: true`.",
        "default": "no_prompt",
        "enum": [
          "no_prompt",
          "pre_login_prompt",
          "post_login_prompt"
        ]
      },
      "ClientOrganizationUsageEnum": {
        "type": "string",
        "description": "Defines how to proceed during an authentication transaction with regards an organization. Can be `deny` (default), `allow` or `require`.",
        "default": "deny",
        "enum": [
          "deny",
          "allow",
          "require"
        ]
      },
      "ClientRefreshTokenConfiguration": {
        "type": "object",
        "nullable": true,
        "description": "Refresh token configuration",
        "additionalProperties": false,
        "required": [
          "rotation_type",
          "expiration_type"
        ],
        "properties": {
          "rotation_type": {
            "$ref": "#/components/schemas/RefreshTokenRotationTypeEnum"
          },
          "expiration_type": {
            "$ref": "#/components/schemas/RefreshTokenExpirationTypeEnum"
          },
          "leeway": {
            "type": "integer",
            "description": "Period in seconds where the previous refresh token can be exchanged without triggering breach detection"
          },
          "token_lifetime": {
            "type": "integer",
            "description": "Period (in seconds) for which refresh tokens will remain valid"
          },
          "infinite_token_lifetime": {
            "type": "boolean",
            "description": "Prevents tokens from having a set lifetime when `true` (takes precedence over `token_lifetime` values)"
          },
          "idle_token_lifetime": {
            "type": "integer",
            "description": "Period (in seconds) for which refresh tokens will remain valid without use"
          },
          "infinite_idle_token_lifetime": {
            "type": "boolean",
            "description": "Prevents tokens from expiring without use when `true` (takes precedence over `idle_token_lifetime` values)",
            "default": false
          }
        }
      },
      "ClientSessionTransferAllowedAuthenticationMethodsEnum": {
        "type": "string",
        "enum": [
          "cookie",
          "query"
        ]
      },
      "ClientSessionTransferConfiguration": {
        "type": "object",
        "nullable": true,
        "description": "Native to Web SSO Configuration",
        "additionalProperties": false,
        "properties": {
          "can_create_session_transfer_token": {
            "type": "boolean",
            "description": "Indicates whether an app can issue a session_token through Token Exchange. If set to 'false', the app will not be able to issue a session_token.",
            "default": false
          },
          "allowed_authentication_methods": {
            "type": "array",
            "description": "Indicates whether an app can create a session from a session_token received via indicated methods.",
            "items": {
              "$ref": "#/components/schemas/ClientSessionTransferAllowedAuthenticationMethodsEnum"
            }
          },
          "enforce_device_binding": {
            "$ref": "#/components/schemas/ClientSessionTransferDeviceBindingEnum"
          },
          "allow_refresh_token": {
            "type": "boolean",
            "description": "Indicates whether Refresh Tokens are allowed to be issued when authenticating with a session_transfer_token.",
            "default": false
          },
          "enforce_online_refresh_tokens": {
            "type": "boolean",
            "description": "Indicates whether Refresh Tokens created during a native-to-web session are tied to that session's lifetime. This determines if such refresh tokens should be automatically revoked when their corresponding sessions are.",
            "default": true
          },
          "enforce_cascade_revocation": {
            "type": "boolean",
            "description": "Indicates whether revoking the parent Refresh Token that initiated a Native to Web flow and was used to issue a Session Transfer Token should trigger a cascade revocation affecting its dependent child entities.",
            "default": true
          }
        }
      },
      "ClientSessionTransferDeviceBindingEnum": {
        "type": "string",
        "description": "Indicates whether device binding security should be enforced for the app. If set to 'ip', the app will enforce device binding by IP, meaning that consumption of session_token must be done from the same IP of the issuer. Likewise, if set to 'asn', device binding is enforced by ASN, meaning consumption of session_token must be done from the same ASN as the issuer. If set to 'null', device binding is not enforced.",
        "default": "ip",
        "enum": [
          "ip",
          "asn",
          "none"
        ]
      },
      "ClientSignedRequestObjectWithCredentialId": {
        "type": "object",
        "description": "JWT-secured Authorization Requests (JAR) settings.",
        "additionalProperties": false,
        "properties": {
          "required": {
            "type": "boolean",
            "description": "Indicates whether the JAR requests are mandatory",
            "default": false
          },
          "credentials": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CredentialId"
            }
          }
        }
      },
      "ClientSignedRequestObjectWithPublicKey": {
        "type": "object",
        "description": "JWT-secured Authorization Requests (JAR) settings.",
        "additionalProperties": false,
        "properties": {
          "required": {
            "type": "boolean",
            "description": "Indicates whether the JAR requests are mandatory",
            "default": false
          },
          "credentials": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicKeyCredential"
            }
          }
        }
      },
      "ClientSigningKey": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "pkcs7": {
            "type": "string",
            "description": "Signing certificate public key and chain in PKCS#7 (.P7B) format.",
            "default": ""
          },
          "cert": {
            "type": "string",
            "description": "Signing certificate public key in X.509 (.CER) format.",
            "default": ""
          },
          "subject": {
            "type": "string",
            "description": "Subject name for this certificate in the format `/CN={domain}`.",
            "default": ""
          }
        }
      },
      "ClientSigningKeys": {
        "type": "array",
        "description": "Signing certificates associated with this client.",
        "items": {
          "$ref": "#/components/schemas/ClientSigningKey"
        }
      },
      "ClientTokenEndpointAuthMethodEnum": {
        "type": "string",
        "description": "Defines the requested authentication method for the token endpoint. Can be `none` (public client without a client secret), `client_secret_post` (client uses HTTP POST parameters), or `client_secret_basic` (client uses HTTP Basic).",
        "default": "none",
        "enum": [
          "none",
          "client_secret_post",
          "client_secret_basic"
        ]
      },
      "ClientTokenEndpointAuthMethodOrNullEnum": {
        "type": "string",
        "nullable": true,
        "description": "Defines the requested authentication method for the token endpoint. Can be `none` (public client without a client secret), `client_secret_post` (client uses HTTP POST parameters), or `client_secret_basic` (client uses HTTP Basic).",
        "default": "none",
        "enum": [
          "none",
          "client_secret_post",
          "client_secret_basic",
          null
        ]
      },
      "ConnectionForList": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the connection",
            "default": "My connection"
          },
          "display_name": {
            "type": "string",
            "description": "Connection name used in login screen"
          },
          "options": {
            "type": "object",
            "description": "In order to return options in the response, the `read:connections_options` scope must be present",
            "additionalProperties": true
          },
          "id": {
            "type": "string",
            "description": "The connection's identifier",
            "default": "con_0000000000000001"
          },
          "strategy": {
            "type": "string",
            "description": "The type of the connection, related to the identity provider",
            "default": "auth0"
          },
          "realms": {
            "type": "array",
            "description": "Defines the realms for which the connection will be used (ie: email domains). If the array is empty or the property is not specified, the connection name will be added as realm.",
            "items": {
              "type": "string",
              "description": "The realm where this connection belongs",
              "format": "connection-realm"
            }
          },
          "is_domain_connection": {
            "type": "boolean",
            "description": "True if the connection is domain level"
          },
          "show_as_button": {
            "type": "boolean",
            "description": "Enables showing a button for the connection in the login page (new experience only). If false, it will be usable only by HRD."
          },
          "metadata": {
            "type": "object",
            "description": "Metadata associated with the connection in the form of an object with string values (max 255 chars).  Maximum of 10 metadata properties allowed.",
            "additionalProperties": true
          }
        }
      },
      "ConnectionForOrganization": {
        "type": "object",
        "description": "Connection to be added to the organization.",
        "additionalProperties": false,
        "required": [
          "connection_id"
        ],
        "properties": {
          "connection_id": {
            "type": "string",
            "description": "ID of the connection."
          },
          "assign_membership_on_login": {
            "type": "boolean",
            "description": "When true, all users that log in with this connection will be automatically granted membership in the organization. When false, users must be granted membership in the organization before logging in with this connection."
          },
          "show_as_button": {
            "type": "boolean",
            "description": "Determines whether a connection should be displayed on this organization’s login prompt. Only applicable for enterprise connections. Default: true."
          },
          "is_signup_enabled": {
            "type": "boolean",
            "description": "Determines whether organization signup should be enabled for this organization connection. Only applicable for database connections. Default: false."
          }
        }
      },
      "ConnectionStrategyEnum": {
        "type": "string",
        "enum": [
          "ad",
          "adfs",
          "amazon",
          "apple",
          "dropbox",
          "bitbucket",
          "aol",
          "auth0-oidc",
          "auth0",
          "baidu",
          "bitly",
          "box",
          "custom",
          "daccount",
          "dwolla",
          "email",
          "evernote-sandbox",
          "evernote",
          "exact",
          "facebook",
          "fitbit",
          "flickr",
          "github",
          "google-apps",
          "google-oauth2",
          "instagram",
          "ip",
          "line",
          "linkedin",
          "miicard",
          "oauth1",
          "oauth2",
          "office365",
          "oidc",
          "okta",
          "paypal",
          "paypal-sandbox",
          "pingfederate",
          "planningcenter",
          "renren",
          "salesforce-community",
          "salesforce-sandbox",
          "salesforce",
          "samlp",
          "sharepoint",
          "shopify",
          "sms",
          "soundcloud",
          "thecity-sandbox",
          "thecity",
          "thirtysevensignals",
          "twitter",
          "untappd",
          "vkontakte",
          "waad",
          "weibo",
          "windowslive",
          "wordpress",
          "yahoo",
          "yammer",
          "yandex",
          "auth0-adldap"
        ]
      },
      "CreateActionRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "supported_triggers"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of an action.",
            "default": "my-action"
          },
          "supported_triggers": {
            "type": "array",
            "description": "The list of triggers that this action supports. At this time, an action can only target a single trigger at a time.",
            "items": {
              "$ref": "#/components/schemas/ActionTrigger"
            }
          },
          "code": {
            "type": "string",
            "description": "The source code of the action.",
            "default": "module.exports = () => {}"
          },
          "dependencies": {
            "type": "array",
            "description": "The list of third party npm modules, and their versions, that this action depends on.",
            "items": {
              "$ref": "#/components/schemas/ActionVersionDependency"
            }
          },
          "runtime": {
            "type": "string",
            "description": "The Node runtime. For example: `node12`, defaults to `node12`",
            "default": "node12"
          },
          "secrets": {
            "type": "array",
            "description": "The list of secrets that are included in an action or a version of an action.",
            "items": {
              "$ref": "#/components/schemas/ActionSecretRequest"
            }
          },
          "deploy": {
            "type": "boolean",
            "description": "True if the action should be deployed after creation.",
            "default": false
          }
        }
      },
      "CreateActionResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of the action.",
            "default": "910b1053-577f-4d81-a8c8-020e7319a38a"
          },
          "name": {
            "type": "string",
            "description": "The name of an action.",
            "default": "my-action"
          },
          "supported_triggers": {
            "type": "array",
            "description": "The list of triggers that this action supports. At this time, an action can only target a single trigger at a time.",
            "items": {
              "$ref": "#/components/schemas/ActionTrigger"
            }
          },
          "all_changes_deployed": {
            "type": "boolean",
            "description": "True if all of an Action's contents have been deployed.",
            "default": false
          },
          "created_at": {
            "type": "string",
            "description": "The time when this action was created.",
            "default": "2021-01-01T00:00:00.000Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "The time when this action was updated.",
            "default": "2021-01-01T00:00:00.000Z",
            "format": "date-time"
          },
          "code": {
            "type": "string",
            "description": "The source code of the action.",
            "default": "module.exports = () => {}"
          },
          "dependencies": {
            "type": "array",
            "description": "The list of third party npm modules, and their versions, that this action depends on.",
            "items": {
              "$ref": "#/components/schemas/ActionVersionDependency"
            }
          },
          "runtime": {
            "type": "string",
            "description": "The Node runtime. For example: `node12`, defaults to `node12`",
            "default": "node12"
          },
          "secrets": {
            "type": "array",
            "description": "The list of secrets that are included in an action or a version of an action.",
            "items": {
              "$ref": "#/components/schemas/ActionSecretResponse"
            }
          },
          "deployed_version": {
            "$ref": "#/components/schemas/ActionDeployedVersion"
          },
          "installed_integration_id": {
            "type": "string",
            "description": "installed_integration_id is the fk reference to the InstalledIntegration entity.",
            "default": "7d2bc0c9-c0c2-433a-9f4e-86ef80270aad"
          },
          "integration": {
            "$ref": "#/components/schemas/Integration"
          },
          "status": {
            "$ref": "#/components/schemas/ActionBuildStatusEnum"
          },
          "built_at": {
            "type": "string",
            "description": "The time when this action was built successfully.",
            "default": "2021-01-01T00:00:00.000Z",
            "format": "date-time"
          },
          "deploy": {
            "type": "boolean",
            "description": "True if the action should be deployed after creation.",
            "default": false
          }
        }
      },
      "CreateClientGrantRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "client_id",
          "audience",
          "scope"
        ],
        "properties": {
          "client_id": {
            "type": "string",
            "description": "ID of the client."
          },
          "audience": {
            "type": "string",
            "description": "The audience (API identifier) of this client grant",
            "minLength": 1
          },
          "organization_usage": {
            "$ref": "#/components/schemas/ClientGrantOrganizationUsageEnum"
          },
          "allow_any_organization": {
            "type": "boolean",
            "description": "If enabled, any organization can be used with this grant. If disabled (default), the grant must be explicitly assigned to the desired organizations.",
            "default": false
          },
          "scope": {
            "type": "array",
            "description": "Scopes allowed for this client grant.",
            "items": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      },
      "CreateClientGrantResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the client grant."
          },
          "client_id": {
            "type": "string",
            "description": "ID of the client."
          },
          "audience": {
            "type": "string",
            "description": "The audience (API identifier) of this client grant.",
            "minLength": 1
          },
          "scope": {
            "type": "array",
            "description": "Scopes allowed for this client grant.",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "organization_usage": {
            "$ref": "#/components/schemas/ClientGrantOrganizationUsageEnum"
          },
          "allow_any_organization": {
            "type": "boolean",
            "description": "If enabled, any organization can be used with this grant. If disabled (default), the grant must be explicitly assigned to the desired organizations."
          }
        }
      },
      "CreateClientRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of this client (min length: 1 character, does not allow `<` or `>`)."
          },
          "description": {
            "type": "string",
            "description": "Free text description of this client (max length: 140 characters).",
            "maxLength": 140
          },
          "logo_uri": {
            "type": "string",
            "description": "URL of the logo to display for this client. Recommended size is 150x150 pixels.",
            "format": "absolute-uri-or-empty"
          },
          "callbacks": {
            "type": "array",
            "description": "Comma-separated list of URLs whitelisted for Auth0 to use as a callback to the client after authentication.",
            "items": {
              "type": "string",
              "format": "callback-url"
            }
          },
          "oidc_logout": {
            "$ref": "#/components/schemas/ClientOIDCBackchannelLogoutSettings"
          },
          "oidc_backchannel_logout": {
            "$ref": "#/components/schemas/ClientOIDCBackchannelLogoutSettings"
          },
          "session_transfer": {
            "$ref": "#/components/schemas/ClientSessionTransferConfiguration"
          },
          "allowed_origins": {
            "type": "array",
            "description": "Comma-separated list of URLs allowed to make requests from JavaScript to Auth0 API (typically used with CORS). By default, all your callback URLs will be allowed. This field allows you to enter other origins if necessary. You can also use wildcards at the subdomain level (e.g., https://*.contoso.com). Query strings and hash information are not taken into account when validating these URLs.",
            "items": {
              "type": "string",
              "format": "url-with-placeholders"
            }
          },
          "web_origins": {
            "type": "array",
            "description": "Comma-separated list of allowed origins for use with <a href='https://auth0.com/docs/cross-origin-authentication'>Cross-Origin Authentication</a>, <a href='https://auth0.com/docs/flows/concepts/device-auth'>Device Flow</a>, and <a href='https://auth0.com/docs/protocols/oauth2#how-response-mode-works'>web message response mode</a>.",
            "items": {
              "type": "string",
              "format": "url-with-placeholders"
            }
          },
          "client_aliases": {
            "type": "array",
            "description": "List of audiences/realms for SAML protocol. Used by the wsfed addon.",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "allowed_clients": {
            "type": "array",
            "description": "List of allow clients and API ids that are allowed to make delegation requests. Empty means all all your clients are allowed.",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "allowed_logout_urls": {
            "type": "array",
            "description": "Comma-separated list of URLs that are valid to redirect to after logout from Auth0. Wildcards are allowed for subdomains.",
            "items": {
              "type": "string",
              "format": "url-with-placeholders"
            }
          },
          "grant_types": {
            "type": "array",
            "description": "List of grant types supported for this application. Can include `authorization_code`, `implicit`, `refresh_token`, `client_credentials`, `password`, `http://auth0.com/oauth/grant-type/password-realm`, `http://auth0.com/oauth/grant-type/mfa-oob`, `http://auth0.com/oauth/grant-type/mfa-otp`, `http://auth0.com/oauth/grant-type/mfa-recovery-code`, `urn:openid:params:grant-type:ciba`, and `urn:ietf:params:oauth:grant-type:device_code`.",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "token_endpoint_auth_method": {
            "$ref": "#/components/schemas/ClientTokenEndpointAuthMethodEnum"
          },
          "app_type": {
            "$ref": "#/components/schemas/ClientAppTypeEnum"
          },
          "is_first_party": {
            "type": "boolean",
            "description": "Whether this client a first party client or not",
            "default": true
          },
          "oidc_conformant": {
            "type": "boolean",
            "description": "Whether this client conforms to <a href='https://auth0.com/docs/api-auth/tutorials/adoption'>strict OIDC specifications</a> (true) or uses legacy features (false).",
            "default": false
          },
          "jwt_configuration": {
            "$ref": "#/components/schemas/ClientJwtConfiguration"
          },
          "encryption_key": {
            "$ref": "#/components/schemas/ClientEncryptionKey"
          },
          "sso": {
            "type": "boolean",
            "description": "Applies only to SSO clients and determines whether Auth0 will handle Single Sign On (true) or whether the Identity Provider will (false)."
          },
          "cross_origin_authentication": {
            "type": "boolean",
            "description": "Whether this client can be used to make cross-origin authentication requests (true) or it is not allowed to make such requests (false).",
            "default": false
          },
          "cross_origin_loc": {
            "type": "string",
            "description": "URL of the location in your site where the cross origin verification takes place for the cross-origin auth flow when performing Auth in your own domain instead of Auth0 hosted login page.",
            "format": "url"
          },
          "sso_disabled": {
            "type": "boolean",
            "description": "<code>true</code> to disable Single Sign On, <code>false</code> otherwise (default: <code>false</code>)"
          },
          "custom_login_page_on": {
            "type": "boolean",
            "description": "<code>true</code> if the custom login page is to be used, <code>false</code> otherwise. Defaults to <code>true</code>"
          },
          "custom_login_page": {
            "type": "string",
            "description": "The content (HTML, CSS, JS) of the custom login page.",
            "minLength": 1
          },
          "custom_login_page_preview": {
            "type": "string",
            "description": "The content (HTML, CSS, JS) of the custom login page. (Used on Previews)",
            "minLength": 1
          },
          "form_template": {
            "type": "string",
            "description": "HTML form template to be used for WS-Federation.",
            "minLength": 1
          },
          "addons": {
            "$ref": "#/components/schemas/ClientAddons"
          },
          "client_metadata": {
            "$ref": "#/components/schemas/ClientMetadata"
          },
          "mobile": {
            "$ref": "#/components/schemas/ClientMobile"
          },
          "initiate_login_uri": {
            "type": "string",
            "description": "Initiate login uri, must be https",
            "format": "absolute-https-uri-or-empty"
          },
          "native_social_login": {
            "$ref": "#/components/schemas/NativeSocialLogin"
          },
          "refresh_token": {
            "$ref": "#/components/schemas/ClientRefreshTokenConfiguration"
          },
          "default_organization": {
            "$ref": "#/components/schemas/ClientDefaultOrganization"
          },
          "organization_usage": {
            "$ref": "#/components/schemas/ClientOrganizationUsageEnum"
          },
          "organization_require_behavior": {
            "$ref": "#/components/schemas/ClientOrganizationRequireBehaviorEnum"
          },
          "client_authentication_methods": {
            "$ref": "#/components/schemas/ClientCreateAuthenticationMethod"
          },
          "require_pushed_authorization_requests": {
            "type": "boolean",
            "description": "Makes the use of Pushed Authorization Requests mandatory for this client",
            "default": false
          },
          "require_proof_of_possession": {
            "type": "boolean",
            "description": "Makes the use of Proof-of-Possession mandatory for this client",
            "default": false
          },
          "signed_request_object": {
            "$ref": "#/components/schemas/ClientSignedRequestObjectWithPublicKey"
          },
          "compliance_level": {
            "$ref": "#/components/schemas/ClientComplianceLevelEnum"
          },
          "par_request_expiry": {
            "type": "integer",
            "nullable": true,
            "description": "Specifies how long, in seconds, a Pushed Authorization Request URI remains valid"
          },
          "token_quota": {
            "$ref": "#/components/schemas/CreateTokenQuota"
          }
        }
      },
      "CreateClientResponseContent": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "client_id": {
            "type": "string",
            "description": "ID of this client.",
            "default": "AaiyAPdpYdesoKnqjj8HJqRn4T5titww"
          },
          "tenant": {
            "type": "string",
            "description": "Name of the tenant this client belongs to.",
            "default": ""
          },
          "name": {
            "type": "string",
            "description": "Name of this client (min length: 1 character, does not allow `<` or `>`).",
            "default": "My application"
          },
          "description": {
            "type": "string",
            "description": "Free text description of this client (max length: 140 characters).",
            "default": ""
          },
          "global": {
            "type": "boolean",
            "description": "Whether this is your global 'All Applications' client representing legacy tenant settings (true) or a regular client (false).",
            "default": false
          },
          "client_secret": {
            "type": "string",
            "description": "Client secret (which you must not make public).",
            "default": "MG_TNT2ver-SylNat-_VeMmd-4m0Waba0jr1troztBniSChEw0glxEmgEi2Kw40H"
          },
          "app_type": {
            "type": "string",
            "description": "Type of client used to determine which settings are applicable. Can be `spa`, `native`, `non_interactive`, or `regular_web`.",
            "default": ""
          },
          "logo_uri": {
            "type": "string",
            "description": "URL of the logo to display for this client. Recommended size is 150x150 pixels."
          },
          "is_first_party": {
            "type": "boolean",
            "description": "Whether this client a first party client (true) or not (false).",
            "default": false
          },
          "oidc_conformant": {
            "type": "boolean",
            "description": "Whether this client conforms to <a href='https://auth0.com/docs/api-auth/tutorials/adoption'>strict OIDC specifications</a> (true) or uses legacy features (false).",
            "default": false
          },
          "callbacks": {
            "type": "array",
            "description": "Comma-separated list of URLs whitelisted for Auth0 to use as a callback to the client after authentication.",
            "items": {
              "type": "string"
            }
          },
          "allowed_origins": {
            "type": "array",
            "description": "Comma-separated list of URLs allowed to make requests from JavaScript to Auth0 API (typically used with CORS). By default, all your callback URLs will be allowed. This field allows you to enter other origins if necessary. You can also use wildcards at the subdomain level (e.g., https://*.contoso.com). Query strings and hash information are not taken into account when validating these URLs.",
            "items": {
              "type": "string"
            }
          },
          "web_origins": {
            "type": "array",
            "description": "Comma-separated list of allowed origins for use with <a href='https://auth0.com/docs/cross-origin-authentication'>Cross-Origin Authentication</a>, <a href='https://auth0.com/docs/flows/concepts/device-auth'>Device Flow</a>, and <a href='https://auth0.com/docs/protocols/oauth2#how-response-mode-works'>web message response mode</a>.",
            "items": {
              "type": "string"
            }
          },
          "client_aliases": {
            "type": "array",
            "description": "List of audiences/realms for SAML protocol. Used by the wsfed addon.",
            "items": {
              "type": "string"
            }
          },
          "allowed_clients": {
            "type": "array",
            "description": "List of allow clients and API ids that are allowed to make delegation requests. Empty means all all your clients are allowed.",
            "items": {
              "type": "string"
            }
          },
          "allowed_logout_urls": {
            "type": "array",
            "description": "Comma-separated list of URLs that are valid to redirect to after logout from Auth0. Wildcards are allowed for subdomains.",
            "items": {
              "type": "string"
            }
          },
          "session_transfer": {
            "$ref": "#/components/schemas/ClientSessionTransferConfiguration"
          },
          "oidc_logout": {
            "$ref": "#/components/schemas/ClientOIDCBackchannelLogoutSettings"
          },
          "grant_types": {
            "type": "array",
            "description": "List of grant types supported for this application. Can include `authorization_code`, `implicit`, `refresh_token`, `client_credentials`, `password`, `http://auth0.com/oauth/grant-type/password-realm`, `http://auth0.com/oauth/grant-type/mfa-oob`, `http://auth0.com/oauth/grant-type/mfa-otp`, `http://auth0.com/oauth/grant-type/mfa-recovery-code`, `urn:openid:params:grant-type:ciba`, and `urn:ietf:params:oauth:grant-type:device_code`.",
            "items": {
              "type": "string"
            }
          },
          "jwt_configuration": {
            "$ref": "#/components/schemas/ClientJwtConfiguration"
          },
          "signing_keys": {
            "$ref": "#/components/schemas/ClientSigningKeys"
          },
          "encryption_key": {
            "$ref": "#/components/schemas/ClientEncryptionKey"
          },
          "sso": {
            "type": "boolean",
            "description": "Applies only to SSO clients and determines whether Auth0 will handle Single Sign On (true) or whether the Identity Provider will (false).",
            "default": false
          },
          "sso_disabled": {
            "type": "boolean",
            "description": "Whether Single Sign On is disabled (true) or enabled (true). Defaults to true.",
            "default": false
          },
          "cross_origin_authentication": {
            "type": "boolean",
            "description": "Whether this client can be used to make cross-origin authentication requests (true) or it is not allowed to make such requests (false)."
          },
          "cross_origin_loc": {
            "type": "string",
            "description": "URL of the location in your site where the cross origin verification takes place for the cross-origin auth flow when performing Auth in your own domain instead of Auth0 hosted login page.",
            "format": "url"
          },
          "custom_login_page_on": {
            "type": "boolean",
            "description": "Whether a custom login page is to be used (true) or the default provided login page (false).",
            "default": true
          },
          "custom_login_page": {
            "type": "string",
            "description": "The content (HTML, CSS, JS) of the custom login page.",
            "default": ""
          },
          "custom_login_page_preview": {
            "type": "string",
            "description": "The content (HTML, CSS, JS) of the custom login page. (Used on Previews)",
            "default": ""
          },
          "form_template": {
            "type": "string",
            "description": "HTML form template to be used for WS-Federation.",
            "default": ""
          },
          "addons": {
            "$ref": "#/components/schemas/ClientAddons"
          },
          "token_endpoint_auth_method": {
            "$ref": "#/components/schemas/ClientTokenEndpointAuthMethodEnum"
          },
          "client_metadata": {
            "$ref": "#/components/schemas/ClientMetadata"
          },
          "mobile": {
            "$ref": "#/components/schemas/ClientMobile"
          },
          "initiate_login_uri": {
            "type": "string",
            "description": "Initiate login uri, must be https",
            "format": "absolute-https-uri-or-empty"
          },
          "native_social_login": {},
          "refresh_token": {
            "$ref": "#/components/schemas/ClientRefreshTokenConfiguration"
          },
          "default_organization": {
            "$ref": "#/components/schemas/ClientDefaultOrganization"
          },
          "organization_usage": {
            "$ref": "#/components/schemas/ClientOrganizationUsageEnum"
          },
          "organization_require_behavior": {
            "$ref": "#/components/schemas/ClientOrganizationRequireBehaviorEnum"
          },
          "client_authentication_methods": {
            "$ref": "#/components/schemas/ClientAuthenticationMethod"
          },
          "require_pushed_authorization_requests": {
            "type": "boolean",
            "description": "Makes the use of Pushed Authorization Requests mandatory for this client",
            "default": false
          },
          "require_proof_of_possession": {
            "type": "boolean",
            "description": "Makes the use of Proof-of-Possession mandatory for this client",
            "default": false
          },
          "signed_request_object": {
            "$ref": "#/components/schemas/ClientSignedRequestObjectWithCredentialId"
          },
          "compliance_level": {
            "$ref": "#/components/schemas/ClientComplianceLevelEnum"
          },
          "par_request_expiry": {
            "type": "integer",
            "nullable": true,
            "description": "Specifies how long, in seconds, a Pushed Authorization Request URI remains valid"
          },
          "token_quota": {
            "$ref": "#/components/schemas/TokenQuota"
          }
        }
      },
      "CreateCustomDomainRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "domain",
          "type"
        ],
        "properties": {
          "domain": {
            "type": "string",
            "description": "Domain name."
          },
          "type": {
            "$ref": "#/components/schemas/CustomDomainProvisioningTypeEnum"
          },
          "verification_method": {
            "$ref": "#/components/schemas/CustomDomainVerificationMethodEnum"
          },
          "tls_policy": {
            "$ref": "#/components/schemas/CustomDomainTlsPolicyEnum"
          },
          "custom_client_ip_header": {
            "nullable": true,
            "description": "The HTTP header to fetch the client's IP address",
            "default": "true-client-ip",
            "type": "string",
            "enum": [
              "true-client-ip",
              "cf-connecting-ip",
              "x-forwarded-for",
              "x-azure-clientip",
              ""
            ]
          }
        }
      },
      "CreateCustomDomainResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "custom_domain_id",
          "domain",
          "primary",
          "status",
          "type",
          "verification"
        ],
        "properties": {
          "custom_domain_id": {
            "type": "string",
            "description": "ID of the custom domain.",
            "default": "cd_0000000000000001"
          },
          "domain": {
            "type": "string",
            "description": "Domain name.",
            "default": "login.mycompany.com"
          },
          "primary": {
            "type": "boolean",
            "description": "Whether this is a primary domain (true) or not (false).",
            "default": false
          },
          "status": {
            "$ref": "#/components/schemas/CustomDomainStatusEnum"
          },
          "type": {
            "$ref": "#/components/schemas/CustomDomainTypeEnum"
          },
          "verification": {
            "$ref": "#/components/schemas/DomainVerification"
          },
          "custom_client_ip_header": {
            "type": "string",
            "nullable": true,
            "description": "The HTTP header to fetch the client's IP address"
          },
          "tls_policy": {
            "type": "string",
            "description": "The TLS version policy",
            "default": "recommended"
          }
        }
      },
      "CreateEmailProviderRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "credentials"
        ],
        "properties": {
          "name": {
            "$ref": "#/components/schemas/EmailProviderNameEnum"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the provider is enabled (true) or disabled (false).",
            "default": true
          },
          "default_from_address": {
            "type": "string",
            "description": "Email address to use as \"from\" when no other address specified."
          },
          "credentials": {
            "$ref": "#/components/schemas/EmailProviderCredentialsSchema"
          },
          "settings": {
            "$ref": "#/components/schemas/EmailSpecificProviderSettingsWithAdditionalProperties"
          }
        }
      },
      "CreateEmailProviderResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "getPayloadSchema": {}
        }
      },
      "CreateEmailTemplateRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "template",
          "body",
          "from",
          "subject",
          "syntax",
          "enabled"
        ],
        "properties": {
          "template": {
            "$ref": "#/components/schemas/EmailTemplateNameEnum"
          },
          "body": {
            "type": "string",
            "nullable": true,
            "description": "Body of the email template."
          },
          "from": {
            "type": "string",
            "nullable": true,
            "description": "Senders `from` email address.",
            "default": "sender@auth0.com"
          },
          "resultUrl": {
            "type": "string",
            "nullable": true,
            "description": "URL to redirect the user to after a successful action."
          },
          "subject": {
            "type": "string",
            "nullable": true,
            "description": "Subject line of the email."
          },
          "syntax": {
            "type": "string",
            "nullable": true,
            "description": "Syntax of the template body.",
            "default": "liquid"
          },
          "urlLifetimeInSeconds": {
            "type": "number",
            "nullable": true,
            "description": "Lifetime in seconds that the link within the email will be valid for."
          },
          "includeEmailInRedirect": {
            "type": "boolean",
            "description": "Whether the `reset_email` and `verify_email` templates should include the user's email address as the `email` parameter in the returnUrl (true) or whether no email address should be included in the redirect (false). Defaults to true."
          },
          "enabled": {
            "type": "boolean",
            "nullable": true,
            "description": "Whether the template is enabled (true) or disabled (false)."
          }
        }
      },
      "CreateEmailTemplateResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "template",
          "body",
          "from",
          "subject",
          "syntax",
          "enabled"
        ],
        "properties": {
          "template": {
            "$ref": "#/components/schemas/EmailTemplateNameEnum"
          },
          "body": {
            "type": "string",
            "nullable": true,
            "description": "Body of the email template."
          },
          "from": {
            "type": "string",
            "nullable": true,
            "description": "Senders `from` email address.",
            "default": "sender@auth0.com"
          },
          "resultUrl": {
            "type": "string",
            "nullable": true,
            "description": "URL to redirect the user to after a successful action."
          },
          "subject": {
            "type": "string",
            "nullable": true,
            "description": "Subject line of the email."
          },
          "syntax": {
            "type": "string",
            "nullable": true,
            "description": "Syntax of the template body.",
            "default": "liquid"
          },
          "urlLifetimeInSeconds": {
            "type": "number",
            "nullable": true,
            "description": "Lifetime in seconds that the link within the email will be valid for."
          },
          "includeEmailInRedirect": {
            "type": "boolean",
            "description": "Whether the `reset_email` and `verify_email` templates should include the user's email address as the `email` parameter in the returnUrl (true) or whether no email address should be included in the redirect (false). Defaults to true."
          },
          "enabled": {
            "type": "boolean",
            "nullable": true,
            "description": "Whether the template is enabled (true) or disabled (false)."
          }
        }
      },
      "CreateEventStreamEventBridgeRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "destination"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the event stream.",
            "minLength": 1,
            "maxLength": 128
          },
          "subscriptions": {
            "type": "array",
            "description": "List of event types subscribed to in this stream.",
            "items": {
              "$ref": "#/components/schemas/EventStreamSubscription"
            }
          },
          "destination": {
            "$ref": "#/components/schemas/EventStreamEventBridgeDestination"
          }
        }
      },
      "CreateEventStreamRedeliveryRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "date_from": {
            "type": "string",
            "description": "An RFC-3339 date-time for redelivery start, inclusive. Does not allow sub-second precision.",
            "maxLength": 20,
            "format": "date-time"
          },
          "date_to": {
            "type": "string",
            "description": "An RFC-3339 date-time for redelivery end, exclusive. Does not allow sub-second precision.",
            "maxLength": 20,
            "format": "date-time"
          },
          "statuses": {
            "type": "array",
            "description": "Filter by status",
            "items": {
              "$ref": "#/components/schemas/EventStreamDeliveryStatusEnum"
            }
          },
          "event_types": {
            "type": "array",
            "description": "Filter by event type",
            "items": {
              "$ref": "#/components/schemas/EventStreamEventTypeEnum"
            }
          }
        }
      },
      "CreateEventStreamRedeliveryResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "date_from": {
            "type": "string",
            "description": "An RFC-3339 date-time for redelivery start, inclusive. Does not allow sub-second precision.",
            "maxLength": 20,
            "format": "date-time"
          },
          "date_to": {
            "type": "string",
            "description": "An RFC-3339 date-time for redelivery end, exclusive. Does not allow sub-second precision.",
            "maxLength": 20,
            "format": "date-time"
          },
          "statuses": {
            "type": "array",
            "description": "Filter by status",
            "items": {
              "$ref": "#/components/schemas/EventStreamDeliveryStatusEnum"
            }
          },
          "event_types": {
            "type": "array",
            "description": "Filter by event type",
            "items": {
              "$ref": "#/components/schemas/EventStreamEventTypeEnum"
            }
          }
        }
      },
      "CreateEventStreamResponseContent": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/EventStreamWebhookResponseContent"
          },
          {
            "$ref": "#/components/schemas/EventStreamEventBridgeResponseContent"
          }
        ]
      },
      "CreateEventStreamWebHookRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "destination"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the event stream.",
            "minLength": 1,
            "maxLength": 128
          },
          "subscriptions": {
            "type": "array",
            "description": "List of event types subscribed to in this stream.",
            "items": {
              "$ref": "#/components/schemas/EventStreamSubscription"
            }
          },
          "destination": {
            "$ref": "#/components/schemas/EventStreamWebhookDestination"
          }
        }
      },
      "CreateExportUsersFields": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the field in the profile.",
            "maxLength": 100
          },
          "export_as": {
            "type": "string",
            "description": "Title of the column in the exported CSV.",
            "maxLength": 100
          }
        }
      },
      "CreateExportUsersRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "connection_id": {
            "type": "string",
            "description": "connection_id of the connection from which users will be exported.",
            "default": "con_0000000000000001"
          },
          "format": {
            "$ref": "#/components/schemas/JobFileFormatEnum"
          },
          "limit": {
            "type": "integer",
            "description": "Limit the number of records.",
            "default": 5
          },
          "fields": {
            "type": "array",
            "description": "List of fields to be included in the CSV. Defaults to a predefined set of fields.",
            "items": {
              "$ref": "#/components/schemas/CreateExportUsersFields"
            }
          }
        }
      },
      "CreateExportUsersResponseContent": {
        "type": "object",
        "additionalProperties": true,
        "required": [
          "id",
          "type",
          "status",
          "connection"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of this job.",
            "default": "pending"
          },
          "type": {
            "type": "string",
            "description": "Type of job this is.",
            "default": "users_export"
          },
          "created_at": {
            "type": "string",
            "description": "When this job was created."
          },
          "id": {
            "type": "string",
            "description": "ID of this job.",
            "default": "job_0000000000000001"
          },
          "connection_id": {
            "type": "string",
            "description": "connection_id of the connection from which users will be exported.",
            "default": "con_0000000000000001"
          },
          "format": {
            "$ref": "#/components/schemas/JobFileFormatEnum"
          },
          "limit": {
            "type": "integer",
            "description": "Limit the number of records.",
            "default": 5
          },
          "fields": {
            "type": "array",
            "description": "List of fields to be included in the CSV. Defaults to a predefined set of fields.",
            "items": {
              "$ref": "#/components/schemas/CreateExportUsersFields"
            }
          }
        }
      },
      "CreateImportUsersRequestBody": {
        "type": "object",
        "additionalProperties": true,
        "required": [
          "users",
          "connection_id"
        ],
        "properties": {
          "users": {
            "type": "string",
            "format": "binary"
          },
          "connection_id": {
            "type": "string",
            "description": "connection_id of the connection to which users will be imported.",
            "default": "con_0000000000000001"
          },
          "upsert": {
            "type": "boolean",
            "description": "Whether to update users if they already exist (true) or to ignore them (false).",
            "default": false
          },
          "external_id": {
            "type": "string",
            "description": "Customer-defined ID."
          },
          "send_completion_email": {
            "type": "boolean",
            "description": "Whether to send a completion email to all tenant owners when the job is finished (true) or not (false).",
            "default": true
          }
        }
      },
      "CreateImportUsersResponseContent": {
        "type": "object",
        "additionalProperties": true,
        "required": [
          "id",
          "type",
          "status",
          "connection",
          "connection_id",
          "created_at"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of this job.",
            "default": "pending"
          },
          "type": {
            "type": "string",
            "description": "Type of job this is.",
            "default": "users_import"
          },
          "created_at": {
            "type": "string",
            "description": "When this job was created."
          },
          "id": {
            "type": "string",
            "description": "ID of this job.",
            "default": "job_0000000000000001"
          },
          "connection_id": {
            "type": "string",
            "description": "connection_id of the connection to which users will be imported.",
            "default": "con_0000000000000001"
          },
          "external_id": {
            "type": "string",
            "description": "Customer-defined ID."
          }
        }
      },
      "CreateLogStreamDatadogRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "sink"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "log stream name"
          },
          "type": {
            "$ref": "#/components/schemas/LogStreamDatadogEnum"
          },
          "isPriority": {
            "type": "boolean",
            "description": "True for priority log streams, false for non-priority"
          },
          "filters": {
            "type": "array",
            "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
            "items": {
              "$ref": "#/components/schemas/LogStreamFilter"
            }
          },
          "sink": {
            "$ref": "#/components/schemas/LogStreamDatadogSink"
          },
          "startFrom": {
            "type": "string",
            "description": "The optional datetime (ISO 8601) to start streaming logs from",
            "default": "2021-03-01T19:57:29.532Z"
          }
        }
      },
      "CreateLogStreamEventBridgeRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "sink"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "log stream name"
          },
          "type": {
            "type": "string",
            "enum": [
              "eventbridge"
            ]
          },
          "isPriority": {
            "type": "boolean",
            "description": "True for priority log streams, false for non-priority"
          },
          "filters": {
            "type": "array",
            "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
            "items": {
              "$ref": "#/components/schemas/LogStreamFilter"
            }
          },
          "sink": {
            "$ref": "#/components/schemas/LogStreamEventBridgeSink"
          },
          "startFrom": {
            "type": "string",
            "description": "The optional datetime (ISO 8601) to start streaming logs from",
            "default": "2021-03-01T19:57:29.532Z"
          }
        }
      },
      "CreateLogStreamEventGridRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "sink"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "log stream name"
          },
          "type": {
            "$ref": "#/components/schemas/LogStreamEventGridEnum"
          },
          "isPriority": {
            "type": "boolean",
            "description": "True for priority log streams, false for non-priority"
          },
          "filters": {
            "type": "array",
            "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
            "items": {
              "$ref": "#/components/schemas/LogStreamFilter"
            }
          },
          "sink": {
            "$ref": "#/components/schemas/LogStreamEventGridSink"
          },
          "startFrom": {
            "type": "string",
            "description": "The optional datetime (ISO 8601) to start streaming logs from",
            "default": "2021-03-01T19:57:29.532Z"
          }
        }
      },
      "CreateLogStreamHttpRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "sink"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "log stream name"
          },
          "type": {
            "$ref": "#/components/schemas/LogStreamHttpEnum"
          },
          "isPriority": {
            "type": "boolean",
            "description": "True for priority log streams, false for non-priority"
          },
          "filters": {
            "type": "array",
            "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
            "items": {
              "$ref": "#/components/schemas/LogStreamFilter"
            }
          },
          "sink": {
            "$ref": "#/components/schemas/LogStreamHttpSink"
          },
          "startFrom": {
            "type": "string",
            "description": "The optional datetime (ISO 8601) to start streaming logs from",
            "default": "2021-03-01T19:57:29.532Z"
          }
        }
      },
      "CreateLogStreamMixpanelRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "sink"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "log stream name"
          },
          "type": {
            "$ref": "#/components/schemas/LogStreamMixpanelEnum"
          },
          "isPriority": {
            "type": "boolean",
            "description": "True for priority log streams, false for non-priority"
          },
          "filters": {
            "type": "array",
            "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
            "items": {
              "$ref": "#/components/schemas/LogStreamFilter"
            }
          },
          "sink": {
            "$ref": "#/components/schemas/LogStreamMixpanelSink"
          },
          "startFrom": {
            "type": "string",
            "description": "The optional datetime (ISO 8601) to start streaming logs from",
            "default": "2021-03-01T19:57:29.532Z"
          }
        }
      },
      "CreateLogStreamRequestBody": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/CreateLogStreamHttpRequestBody"
          },
          {
            "$ref": "#/components/schemas/CreateLogStreamEventBridgeRequestBody"
          },
          {
            "$ref": "#/components/schemas/CreateLogStreamEventGridRequestBody"
          },
          {
            "$ref": "#/components/schemas/CreateLogStreamDatadogRequestBody"
          },
          {
            "$ref": "#/components/schemas/CreateLogStreamSplunkRequestBody"
          },
          {
            "$ref": "#/components/schemas/CreateLogStreamSumoRequestBody"
          },
          {
            "$ref": "#/components/schemas/CreateLogStreamSegmentRequestBody"
          },
          {
            "$ref": "#/components/schemas/CreateLogStreamMixpanelRequestBody"
          }
        ]
      },
      "CreateLogStreamResponseContent": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/LogStreamHttpResponseSchema"
          },
          {
            "$ref": "#/components/schemas/LogStreamEventBridgeResponseSchema"
          },
          {
            "$ref": "#/components/schemas/LogStreamEventGridResponseSchema"
          },
          {
            "$ref": "#/components/schemas/LogStreamDatadogResponseSchema"
          },
          {
            "$ref": "#/components/schemas/LogStreamSplunkResponseSchema"
          },
          {
            "$ref": "#/components/schemas/LogStreamSumoResponseSchema"
          },
          {
            "$ref": "#/components/schemas/LogStreamSegmentResponseSchema"
          },
          {
            "$ref": "#/components/schemas/LogStreamMixpanelResponseSchema"
          }
        ]
      },
      "CreateLogStreamSegmentRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "sink"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "log stream name"
          },
          "type": {
            "$ref": "#/components/schemas/LogStreamSegmentEnum"
          },
          "isPriority": {
            "type": "boolean",
            "description": "True for priority log streams, false for non-priority"
          },
          "filters": {
            "type": "array",
            "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
            "items": {
              "$ref": "#/components/schemas/LogStreamFilter"
            }
          },
          "sink": {
            "$ref": "#/components/schemas/LogStreamSegmentSinkWriteKey"
          },
          "startFrom": {
            "type": "string",
            "description": "The optional datetime (ISO 8601) to start streaming logs from",
            "default": "2021-03-01T19:57:29.532Z"
          }
        }
      },
      "CreateLogStreamSplunkRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "sink"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "log stream name"
          },
          "type": {
            "$ref": "#/components/schemas/LogStreamSplunkEnum"
          },
          "isPriority": {
            "type": "boolean",
            "description": "True for priority log streams, false for non-priority"
          },
          "filters": {
            "type": "array",
            "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
            "items": {
              "$ref": "#/components/schemas/LogStreamFilter"
            }
          },
          "sink": {
            "$ref": "#/components/schemas/LogStreamSplunkSink"
          },
          "startFrom": {
            "type": "string",
            "description": "The optional datetime (ISO 8601) to start streaming logs from",
            "default": "2021-03-01T19:57:29.532Z"
          }
        }
      },
      "CreateLogStreamSumoRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "sink"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "log stream name"
          },
          "type": {
            "$ref": "#/components/schemas/LogStreamSumoEnum"
          },
          "isPriority": {
            "type": "boolean",
            "description": "True for priority log streams, false for non-priority"
          },
          "filters": {
            "type": "array",
            "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
            "items": {
              "$ref": "#/components/schemas/LogStreamFilter"
            }
          },
          "sink": {
            "$ref": "#/components/schemas/LogStreamSumoSink"
          },
          "startFrom": {
            "type": "string",
            "description": "The optional datetime (ISO 8601) to start streaming logs from",
            "default": "2021-03-01T19:57:29.532Z"
          }
        }
      },
      "CreateNetworkAclRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "description",
          "active",
          "priority",
          "rule"
        ],
        "properties": {
          "description": {
            "type": "string",
            "maxLength": 255
          },
          "active": {
            "type": "boolean",
            "description": "Indicates whether or not this access control list is actively being used"
          },
          "priority": {
            "type": "number",
            "description": "Indicates the order in which the ACL will be evaluated relative to other ACL rules."
          },
          "rule": {
            "$ref": "#/components/schemas/NetworkAclRule"
          }
        }
      },
      "CreateOrganizationInvitationRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "inviter",
          "invitee",
          "client_id"
        ],
        "properties": {
          "inviter": {
            "$ref": "#/components/schemas/OrganizationInvitationInviter"
          },
          "invitee": {
            "$ref": "#/components/schemas/OrganizationInvitationInvitee"
          },
          "client_id": {
            "type": "string",
            "description": "Auth0 client ID. Used to resolve the application's login initiation endpoint.",
            "default": "AaiyAPdpYdesoKnqjj8HJqRn4T5titww",
            "format": "client-id"
          },
          "connection_id": {
            "type": "string",
            "description": "The id of the connection to force invitee to authenticate with.",
            "default": "con_0000000000000001",
            "format": "connection-id"
          },
          "app_metadata": {
            "$ref": "#/components/schemas/AppMetadata"
          },
          "user_metadata": {
            "$ref": "#/components/schemas/UserMetadata"
          },
          "ttl_sec": {
            "type": "integer",
            "description": "Number of seconds for which the invitation is valid before expiration. If unspecified or set to 0, this value defaults to 604800 seconds (7 days). Max value: 2592000 seconds (30 days)."
          },
          "roles": {
            "type": "array",
            "description": "List of roles IDs to associated with the user.",
            "items": {
              "type": "string",
              "format": "role-id"
            }
          },
          "send_invitation_email": {
            "type": "boolean",
            "description": "Whether the user will receive an invitation email (true) or no email (false), true by default",
            "default": true
          }
        }
      },
      "CreateOrganizationInvitationResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the user invitation.",
            "default": "uinv_0000000000000001",
            "format": "user-invitation-id"
          },
          "organization_id": {
            "type": "string",
            "description": "Organization identifier.",
            "format": "organization-id"
          },
          "inviter": {
            "$ref": "#/components/schemas/OrganizationInvitationInviter"
          },
          "invitee": {
            "$ref": "#/components/schemas/OrganizationInvitationInvitee"
          },
          "invitation_url": {
            "type": "string",
            "description": "The invitation url to be send to the invitee.",
            "default": "https://mycompany.org/login?invitation=f81dWWYW6gzGGicxT8Ha0txBkGNcAcYr&organization=org_0000000000000001&organization_name=acme",
            "format": "strict-https-uri"
          },
          "created_at": {
            "type": "string",
            "description": "The ISO 8601 formatted timestamp representing the creation time of the invitation.",
            "default": "2020-08-20T19:10:06.299Z",
            "format": "date-time"
          },
          "expires_at": {
            "type": "string",
            "description": "The ISO 8601 formatted timestamp representing the expiration time of the invitation.",
            "default": "2020-08-27T19:10:06.299Z",
            "format": "date-time"
          },
          "client_id": {
            "type": "string",
            "description": "Auth0 client ID. Used to resolve the application's login initiation endpoint.",
            "default": "AaiyAPdpYdesoKnqjj8HJqRn4T5titww",
            "format": "client-id"
          },
          "connection_id": {
            "type": "string",
            "description": "The id of the connection to force invitee to authenticate with.",
            "default": "con_0000000000000001",
            "format": "connection-id"
          },
          "app_metadata": {
            "$ref": "#/components/schemas/AppMetadata"
          },
          "user_metadata": {
            "$ref": "#/components/schemas/UserMetadata"
          },
          "roles": {
            "type": "array",
            "description": "List of roles IDs to associated with the user.",
            "items": {
              "type": "string",
              "format": "role-id"
            }
          },
          "ticket_id": {
            "type": "string",
            "description": "The id of the invitation ticket",
            "format": "ticket-id"
          }
        }
      },
      "CreateOrganizationMemberRequestBody": {
        "type": "object",
        "additionalProperties": true,
        "required": [
          "members"
        ],
        "properties": {
          "members": {
            "type": "array",
            "description": "List of user IDs to add to the organization as members.",
            "items": {
              "type": "string",
              "format": "user-id-with-max-length"
            }
          }
        }
      },
      "CreateOrganizationRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of this organization.",
            "default": "organization-1",
            "minLength": 1,
            "maxLength": 50,
            "format": "organization-name"
          },
          "display_name": {
            "type": "string",
            "description": "Friendly name of this organization.",
            "default": "Acme Users",
            "minLength": 1,
            "maxLength": 255
          },
          "branding": {
            "$ref": "#/components/schemas/OrganizationBranding"
          },
          "metadata": {
            "$ref": "#/components/schemas/OrganizationMetadata"
          },
          "enabled_connections": {
            "type": "array",
            "description": "Connections that will be enabled for this organization. See POST enabled_connections endpoint for the object format. (Max of 10 connections allowed)",
            "items": {
              "$ref": "#/components/schemas/ConnectionForOrganization"
            }
          },
          "token_quota": {
            "$ref": "#/components/schemas/CreateTokenQuota"
          }
        }
      },
      "CreateOrganizationResponseContent": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "id": {
            "type": "string",
            "description": "Organization identifier.",
            "format": "organization-id"
          },
          "name": {
            "type": "string",
            "description": "The name of this organization.",
            "default": "organization-1",
            "minLength": 1,
            "maxLength": 50,
            "format": "organization-name"
          },
          "display_name": {
            "type": "string",
            "description": "Friendly name of this organization.",
            "default": "Acme Users",
            "minLength": 1,
            "maxLength": 255
          },
          "branding": {
            "$ref": "#/components/schemas/OrganizationBranding"
          },
          "metadata": {
            "$ref": "#/components/schemas/OrganizationMetadata"
          },
          "token_quota": {
            "$ref": "#/components/schemas/TokenQuota"
          },
          "enabled_connections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationEnabledConnection"
            }
          }
        }
      },
      "CreateRoleRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the role."
          },
          "description": {
            "type": "string",
            "description": "Description of the role."
          }
        }
      },
      "CreateRoleResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "ID for this role."
          },
          "name": {
            "type": "string",
            "description": "Name of this role."
          },
          "description": {
            "type": "string",
            "description": "Description of this role."
          }
        }
      },
      "CreateTokenQuota": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "client_credentials"
        ],
        "x-release-lifecycle": "EA",
        "properties": {
          "client_credentials": {
            "$ref": "#/components/schemas/TokenQuotaClientCredentials"
          }
        }
      },
      "CreateVerifiableCredentialTemplateRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "dialect",
          "presentation",
          "type",
          "well_known_trusted_issuers"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "type": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "dialect": {
            "type": "string",
            "maxLength": 255
          },
          "presentation": {
            "$ref": "#/components/schemas/MdlPresentationRequest"
          },
          "custom_certificate_authority": {
            "type": "string",
            "minLength": 1,
            "maxLength": 4096
          },
          "well_known_trusted_issuers": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          }
        }
      },
      "CreateVerifiableCredentialTemplateResponseContent": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the template.",
            "default": "vct_0000000000000001"
          },
          "name": {
            "type": "string",
            "description": "The name of the template."
          },
          "type": {
            "type": "string",
            "description": "The type of the template.",
            "default": "mdl"
          },
          "dialect": {
            "type": "string",
            "description": "The dialect of the template.",
            "default": "simplified/1.0",
            "maxLength": 255
          },
          "presentation": {
            "$ref": "#/components/schemas/MdlPresentationRequest"
          },
          "custom_certificate_authority": {
            "type": "string",
            "description": "The custom certificate authority.",
            "minLength": 1,
            "maxLength": 4096
          },
          "well_known_trusted_issuers": {
            "type": "string",
            "description": "The well-known trusted issuers, comma separated.",
            "minLength": 1,
            "maxLength": 255
          },
          "created_at": {
            "type": "string",
            "description": "The date and time the template was created.",
            "default": "2021-01-01T00:00:00Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "The date and time the template was created.",
            "default": "2021-01-01T00:00:00Z",
            "format": "date-time"
          }
        }
      },
      "CreateVerificationEmailRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "user_id"
        ],
        "properties": {
          "user_id": {
            "type": "string",
            "description": "user_id of the user to send the verification email to.",
            "default": "google-oauth2|1234",
            "format": "user-id"
          },
          "client_id": {
            "type": "string",
            "description": "client_id of the client (application). If no value provided, the global Client ID will be used.",
            "format": "client-id"
          },
          "identity": {
            "$ref": "#/components/schemas/Identity"
          },
          "organization_id": {
            "type": "string",
            "description": "(Optional) Organization ID – the ID of the Organization. If provided, organization parameters will be made available to the email template and organization branding will be applied to the prompt. In addition, the redirect link in the prompt will include organization_id and organization_name query string parameters.",
            "default": "org_2eondWoxcMIpaLQc",
            "format": "organization-id"
          }
        }
      },
      "CreateVerificationEmailResponseContent": {
        "type": "object",
        "additionalProperties": true,
        "required": [
          "id",
          "type",
          "status"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of this job.",
            "default": "completed"
          },
          "type": {
            "type": "string",
            "description": "Type of job this is.",
            "default": "verification_email"
          },
          "created_at": {
            "type": "string",
            "description": "When this job was created."
          },
          "id": {
            "type": "string",
            "description": "ID of this job.",
            "default": "job_0000000000000001"
          }
        }
      },
      "CredentialId": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Credential ID",
            "format": "credential-id"
          }
        }
      },
      "CustomDomain": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "custom_domain_id",
          "domain",
          "primary",
          "status",
          "type"
        ],
        "properties": {
          "custom_domain_id": {
            "type": "string",
            "description": "ID of the custom domain.",
            "default": "cd_0000000000000001"
          },
          "domain": {
            "type": "string",
            "description": "Domain name.",
            "default": "login.mycompany.com"
          },
          "primary": {
            "type": "boolean",
            "description": "Whether this is a primary domain (true) or not (false).",
            "default": false
          },
          "status": {
            "$ref": "#/components/schemas/CustomDomainStatusEnum"
          },
          "type": {
            "$ref": "#/components/schemas/CustomDomainTypeEnum"
          },
          "origin_domain_name": {
            "type": "string",
            "description": "Intermediate address.",
            "default": "mycompany_cd_0000000000000001.edge.tenants.auth0.com"
          },
          "verification": {
            "$ref": "#/components/schemas/DomainVerification"
          },
          "custom_client_ip_header": {
            "type": "string",
            "nullable": true,
            "description": "The HTTP header to fetch the client's IP address"
          },
          "tls_policy": {
            "type": "string",
            "description": "The TLS version policy",
            "default": "recommended"
          }
        }
      },
      "CustomDomainProvisioningTypeEnum": {
        "type": "string",
        "description": "Custom domain provisioning type. Must be `auth0_managed_certs` or `self_managed_certs`.",
        "enum": [
          "auth0_managed_certs",
          "self_managed_certs"
        ]
      },
      "CustomDomainStatusEnum": {
        "type": "string",
        "description": "Custom domain configuration status. Can be `disabled`, `pending`, `pending_verification`, or `ready`.",
        "default": "ready",
        "enum": [
          "disabled",
          "pending",
          "pending_verification",
          "ready"
        ]
      },
      "CustomDomainTlsPolicyEnum": {
        "type": "string",
        "description": "Custom domain TLS policy. Must be `recommended`, includes TLS 1.2.",
        "default": "recommended",
        "enum": [
          "recommended"
        ]
      },
      "CustomDomainTypeEnum": {
        "type": "string",
        "description": "Custom domain provisioning type. Can be `auth0_managed_certs` or `self_managed_certs`.",
        "default": "self_managed_certs",
        "enum": [
          "auth0_managed_certs",
          "self_managed_certs"
        ]
      },
      "CustomDomainVerificationMethodEnum": {
        "type": "string",
        "description": "Custom domain verification method. Must be `txt`.",
        "default": "txt",
        "enum": [
          "txt"
        ]
      },
      "CustomSigningKeyAlgorithmEnum": {
        "type": "string",
        "description": "Key algorithm",
        "enum": [
          "RS256",
          "RS384",
          "RS512",
          "ES256",
          "ES384",
          "ES512",
          "PS256",
          "PS384",
          "PS512"
        ]
      },
      "CustomSigningKeyCurveEnum": {
        "type": "string",
        "description": "Curve",
        "enum": [
          "P-256",
          "P-384",
          "P-521"
        ]
      },
      "CustomSigningKeyJWK": {
        "type": "object",
        "description": "JWK representing a custom public signing key.",
        "additionalProperties": false,
        "required": [
          "kty"
        ],
        "properties": {
          "kty": {
            "$ref": "#/components/schemas/CustomSigningKeyTypeEnum"
          },
          "kid": {
            "type": "string",
            "description": "Key identifier"
          },
          "use": {
            "$ref": "#/components/schemas/CustomSigningKeyUseEnum"
          },
          "key_ops": {
            "type": "array",
            "description": "Key operations",
            "items": {
              "$ref": "#/components/schemas/CustomSigningKeyOperationEnum"
            }
          },
          "alg": {
            "$ref": "#/components/schemas/CustomSigningKeyAlgorithmEnum"
          },
          "n": {
            "type": "string",
            "description": "Key modulus"
          },
          "e": {
            "type": "string",
            "description": "Key exponent"
          },
          "crv": {
            "$ref": "#/components/schemas/CustomSigningKeyCurveEnum"
          },
          "x": {
            "type": "string",
            "description": "X coordinate"
          },
          "y": {
            "type": "string",
            "description": "Y coordinate"
          },
          "x5u": {
            "type": "string",
            "description": "X.509 URL"
          },
          "x5c": {
            "type": "array",
            "description": "X.509 certificate chain",
            "items": {
              "type": "string"
            }
          },
          "x5t": {
            "type": "string",
            "description": "X.509 certificate SHA-1 thumbprint"
          },
          "x5t#S256": {
            "type": "string",
            "description": "X.509 certificate SHA-256 thumbprint"
          }
        }
      },
      "CustomSigningKeyOperationEnum": {
        "type": "string",
        "enum": [
          "verify"
        ]
      },
      "CustomSigningKeyTypeEnum": {
        "type": "string",
        "description": "Key type",
        "enum": [
          "EC",
          "RSA"
        ]
      },
      "CustomSigningKeyUseEnum": {
        "type": "string",
        "description": "Key use",
        "enum": [
          "sig"
        ]
      },
      "DefaultTokenQuota": {
        "type": "object",
        "nullable": true,
        "description": "Token Quota configuration, to configure quotas for token issuance for clients and organizations. Applied to all clients and organizations unless overridden in individual client or organization settings.",
        "additionalProperties": false,
        "x-release-lifecycle": "EA",
        "properties": {
          "clients": {
            "$ref": "#/components/schemas/TokenQuotaConfiguration"
          },
          "organizations": {
            "$ref": "#/components/schemas/TokenQuotaConfiguration"
          }
        }
      },
      "DeleteOrganizationMemberRolesRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "roles"
        ],
        "properties": {
          "roles": {
            "type": "array",
            "description": "List of roles IDs associated with the organization member to remove.",
            "items": {
              "type": "string",
              "format": "role-id"
            }
          }
        }
      },
      "DeleteOrganizationMembersRequestBody": {
        "type": "object",
        "additionalProperties": true,
        "required": [
          "members"
        ],
        "properties": {
          "members": {
            "type": "array",
            "description": "List of user IDs to remove from the organization.",
            "items": {
              "type": "string",
              "format": "user-id-with-max-length"
            }
          }
        }
      },
      "DeleteRolePermissionsRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "permissions"
        ],
        "properties": {
          "permissions": {
            "type": "array",
            "description": "array of resource_server_identifier, permission_name pairs.",
            "items": {
              "$ref": "#/components/schemas/PermissionRequestPayload"
            }
          }
        }
      },
      "DeployActionResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique id of an action version.",
            "default": "12a3b9e6-06e6-4a29-96bf-90c82fe79a0d"
          },
          "action_id": {
            "type": "string",
            "description": "The id of the action to which this version belongs.",
            "default": "910b1053-577f-4d81-a8c8-020e7319a38a"
          },
          "code": {
            "type": "string",
            "description": "The source code of this specific version of the action.",
            "default": "module.exports = () => {}"
          },
          "dependencies": {
            "type": "array",
            "description": "The list of third party npm modules, and their versions, that this specific version depends on. ",
            "items": {
              "$ref": "#/components/schemas/ActionVersionDependency"
            }
          },
          "deployed": {
            "type": "boolean",
            "description": "Indicates if this speciic version is the currently one deployed.",
            "default": true
          },
          "runtime": {
            "type": "string",
            "description": "The Node runtime. For example: `node12`",
            "default": "node12"
          },
          "secrets": {
            "type": "array",
            "description": "The list of secrets that are included in an action or a version of an action.",
            "items": {
              "$ref": "#/components/schemas/ActionSecretResponse"
            }
          },
          "status": {
            "$ref": "#/components/schemas/ActionVersionBuildStatusEnum"
          },
          "number": {
            "type": "number",
            "description": "The index of this version in list of versions for the action.",
            "default": 1
          },
          "errors": {
            "type": "array",
            "description": "Any errors that occurred while the version was being built.",
            "items": {
              "$ref": "#/components/schemas/ActionError"
            }
          },
          "action": {
            "$ref": "#/components/schemas/ActionBase"
          },
          "built_at": {
            "type": "string",
            "description": "The time when this version was built successfully.",
            "default": "2021-01-01T00:00:00.000Z",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "description": "The time when this version was created.",
            "default": "2021-01-01T00:00:00.000Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "The time when a version was updated. Versions are never updated externally. Only Auth0 will update an action version as it is being built.",
            "default": "2021-01-01T00:00:00.000Z",
            "format": "date-time"
          },
          "supported_triggers": {
            "type": "array",
            "description": "The list of triggers that this version supports. At this time, a version can only target a single trigger at a time.",
            "items": {
              "$ref": "#/components/schemas/ActionTrigger"
            }
          }
        }
      },
      "DeployActionVersionRequestBody": {
        "nullable": true,
        "oneOf": [
          {
            "$ref": "#/components/schemas/DeployActionVersionRequestBodyParams"
          }
        ]
      },
      "DeployActionVersionRequestBodyParams": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "update_draft": {
            "type": "boolean",
            "description": "True if the draft of the action should be updated with the reverted version.",
            "default": false
          }
        }
      },
      "DeployActionVersionResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique id of an action version.",
            "default": "12a3b9e6-06e6-4a29-96bf-90c82fe79a0d"
          },
          "action_id": {
            "type": "string",
            "description": "The id of the action to which this version belongs.",
            "default": "910b1053-577f-4d81-a8c8-020e7319a38a"
          },
          "code": {
            "type": "string",
            "description": "The source code of this specific version of the action.",
            "default": "module.exports = () => {}"
          },
          "dependencies": {
            "type": "array",
            "description": "The list of third party npm modules, and their versions, that this specific version depends on. ",
            "items": {
              "$ref": "#/components/schemas/ActionVersionDependency"
            }
          },
          "deployed": {
            "type": "boolean",
            "description": "Indicates if this speciic version is the currently one deployed.",
            "default": true
          },
          "runtime": {
            "type": "string",
            "description": "The Node runtime. For example: `node12`",
            "default": "node12"
          },
          "secrets": {
            "type": "array",
            "description": "The list of secrets that are included in an action or a version of an action.",
            "items": {
              "$ref": "#/components/schemas/ActionSecretResponse"
            }
          },
          "status": {
            "$ref": "#/components/schemas/ActionVersionBuildStatusEnum"
          },
          "number": {
            "type": "number",
            "description": "The index of this version in list of versions for the action.",
            "default": 1
          },
          "errors": {
            "type": "array",
            "description": "Any errors that occurred while the version was being built.",
            "items": {
              "$ref": "#/components/schemas/ActionError"
            }
          },
          "action": {
            "$ref": "#/components/schemas/ActionBase"
          },
          "built_at": {
            "type": "string",
            "description": "The time when this version was built successfully.",
            "default": "2021-01-01T00:00:00.000Z",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "description": "The time when this version was created.",
            "default": "2021-01-01T00:00:00.000Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "The time when a version was updated. Versions are never updated externally. Only Auth0 will update an action version as it is being built.",
            "default": "2021-01-01T00:00:00.000Z",
            "format": "date-time"
          },
          "supported_triggers": {
            "type": "array",
            "description": "The list of triggers that this version supports. At this time, a version can only target a single trigger at a time.",
            "items": {
              "$ref": "#/components/schemas/ActionTrigger"
            }
          }
        }
      },
      "DirectorySynConfig": {
        "type": "object",
        "description": "Configuration for the setup of Directory Sync in the self-service flow.",
        "additionalProperties": false,
        "required": [
          "scopes"
        ],
        "properties": {
          "scopes": {
            "type": "array",
            "description": "The scopes of the SCIM tokens generated during the self-service flow.",
            "items": {
              "type": "string",
              "enum": [
                "get:users",
                "post:users",
                "put:users",
                "patch:users",
                "delete:users"
              ]
            }
          },
          "token_lifetime": {
            "nullable": true,
            "description": "Lifetime of the tokens in seconds. Must be greater than 900. If not provided, the tokens don't expire.",
            "type": "integer"
          }
        }
      },
      "DomainVerification": {
        "type": "object",
        "description": "Domain verification settings.",
        "additionalProperties": false,
        "properties": {
          "methods": {
            "type": "array",
            "description": "Domain verification methods.",
            "items": {
              "$ref": "#/components/schemas/DomainVerificationMethod"
            }
          }
        }
      },
      "DomainVerificationMethod": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "record"
        ],
        "properties": {
          "name": {
            "$ref": "#/components/schemas/DomainVerificationMethodNameEnum"
          },
          "record": {
            "type": "string",
            "description": "Value used to verify the domain.",
            "default": "auth0-domain-verification=..."
          },
          "domain": {
            "type": "string",
            "description": "The name of the txt record for verification",
            "default": "_cf-custom-hostname.login.mycompany.com"
          }
        }
      },
      "DomainVerificationMethodNameEnum": {
        "type": "string",
        "description": "Domain verification method.",
        "default": "txt",
        "enum": [
          "cname",
          "txt"
        ]
      },
      "EmailMailgunRegionEnum": {
        "description": "Set to <code>eu</code> if your domain is provisioned to use Mailgun's EU region. Otherwise, set to <code>null</code>.",
        "enum": [
          "eu",
          null
        ]
      },
      "EmailProviderCredentialsSchema": {
        "type": "object",
        "description": "Credentials required to use the provider.",
        "anyOf": [
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "api_key"
            ],
            "properties": {
              "api_key": {
                "type": "string",
                "description": "API Key",
                "minLength": 1
              }
            }
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "accessKeyId": {
                "type": "string",
                "description": "AWS Access Key ID.",
                "minLength": 1
              },
              "secretAccessKey": {
                "type": "string",
                "description": "AWS Secret Access Key.",
                "minLength": 1
              },
              "region": {
                "type": "string",
                "description": "AWS region.",
                "minLength": 1
              }
            }
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "smtp_host": {
                "$ref": "#/components/schemas/EmailSMTPHost"
              },
              "smtp_port": {
                "type": "integer",
                "description": "SMTP port."
              },
              "smtp_user": {
                "type": "string",
                "description": "SMTP username.",
                "minLength": 1
              },
              "smtp_pass": {
                "type": "string",
                "description": "SMTP password.",
                "minLength": 1
              }
            }
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "api_key": {
                "type": "string",
                "description": "API Key",
                "minLength": 1
              },
              "region": {
                "$ref": "#/components/schemas/EmailSparkPostRegionEnum"
              }
            }
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "api_key": {
                "type": "string",
                "description": "API Key",
                "minLength": 1
              },
              "domain": {
                "type": "string",
                "description": "Domain",
                "minLength": 4
              },
              "region": {
                "$ref": "#/components/schemas/EmailMailgunRegionEnum"
              }
            }
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "connectionString": {
                "type": "string",
                "description": "Azure Communication Services Connection String.",
                "minLength": 1
              }
            }
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "tenantId": {
                "type": "string",
                "description": "Microsoft 365 Tenant ID.",
                "minLength": 1
              },
              "clientId": {
                "type": "string",
                "description": "Microsoft 365 Client ID.",
                "minLength": 1
              },
              "clientSecret": {
                "type": "string",
                "description": "Microsoft 365 Client Secret.",
                "minLength": 1
              }
            }
          },
          {
            "$ref": "#/components/schemas/ExtensibilityEmailProviderCredentials"
          }
        ]
      },
      "EmailProviderNameEnum": {
        "type": "string",
        "description": "Name of the email provider. Can be `mailgun`, `mandrill`, `sendgrid`, `ses`, `sparkpost`, `smtp`, `azure_cs`, `ms365`, or `custom`.",
        "enum": [
          "mailgun",
          "mandrill",
          "sendgrid",
          "ses",
          "sparkpost",
          "smtp",
          "azure_cs",
          "ms365",
          "custom"
        ]
      },
      "EmailSMTPHost": {
        "type": "string",
        "description": "SMTP host.",
        "anyOf": [
          {
            "type": "string",
            "format": "hostname-rfc2181"
          },
          {
            "type": "string",
            "format": "ipv4"
          },
          {
            "type": "string",
            "format": "ipv6"
          }
        ]
      },
      "EmailSparkPostRegionEnum": {
        "description": "Set to <code>eu</code> to use SparkPost service hosted in Western Europe. To use SparkPost hosted in North America, set it to <code>null</code>.",
        "enum": [
          "eu",
          null
        ]
      },
      "EmailSpecificProviderSettingsWithAdditionalProperties": {
        "type": "object",
        "nullable": true,
        "description": "Specific provider setting",
        "additionalProperties": true
      },
      "EmailTemplateNameEnum": {
        "type": "string",
        "description": "Template name. Can be `verify_email`, `verify_email_by_code`, `reset_email`, `reset_email_by_code`, `welcome_email`, `blocked_account`, `stolen_credentials`, `enrollment_email`, `mfa_oob_code`, `user_invitation`, `change_password` (legacy), or `password_reset` (legacy).",
        "default": "verify_email",
        "enum": [
          "verify_email",
          "verify_email_by_code",
          "reset_email",
          "reset_email_by_code",
          "welcome_email",
          "blocked_account",
          "stolen_credentials",
          "enrollment_email",
          "mfa_oob_code",
          "user_invitation",
          "change_password",
          "password_reset"
        ]
      },
      "EventStreamCloudEvent": {
        "type": "object",
        "description": "Event content. This will only be set if delivery failed.",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the event",
            "minLength": 26,
            "maxLength": 26,
            "format": "event-id"
          },
          "source": {
            "type": "string",
            "description": "Where the event originated"
          },
          "specversion": {
            "type": "string",
            "description": "Version of CloudEvents spec"
          },
          "type": {
            "type": "string",
            "description": "Type of the event (e.g., user.created)"
          },
          "time": {
            "type": "string",
            "description": "Timestamp at which the event was generated",
            "format": "date-time"
          },
          "data": {
            "type": "string",
            "description": "Event contents encoded as a string."
          }
        }
      },
      "EventStreamDelivery": {
        "type": "object",
        "description": "Metadata about a specific attempt to deliver an event",
        "additionalProperties": false,
        "required": [
          "id",
          "event_stream_id",
          "status",
          "event_type",
          "attempts"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the delivery"
          },
          "event_stream_id": {
            "type": "string",
            "description": "Unique identifier for the event stream.",
            "minLength": 26,
            "maxLength": 26,
            "format": "event-stream-id"
          },
          "status": {
            "$ref": "#/components/schemas/EventStreamDeliveryStatusEnum"
          },
          "event_type": {
            "$ref": "#/components/schemas/EventStreamDeliveryEventTypeEnum"
          },
          "attempts": {
            "type": "array",
            "description": "Results of delivery attempts",
            "items": {
              "$ref": "#/components/schemas/EventStreamDeliveryAttempt"
            }
          },
          "event": {
            "$ref": "#/components/schemas/EventStreamCloudEvent"
          }
        }
      },
      "EventStreamDeliveryAttempt": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "status",
          "timestamp"
        ],
        "properties": {
          "status": {
            "$ref": "#/components/schemas/EventStreamDeliveryStatusEnum"
          },
          "timestamp": {
            "type": "string",
            "description": "Timestamp of delivery attempt",
            "format": "date-time"
          },
          "error_message": {
            "type": "string",
            "description": "Delivery error message, if applicable"
          }
        }
      },
      "EventStreamDeliveryEventTypeEnum": {
        "type": "string",
        "description": "Type of event",
        "maxLength": 33,
        "enum": [
          "user.created",
          "user.deleted",
          "user.updated",
          "organization.created",
          "organization.updated",
          "organization.deleted",
          "organization.member.added",
          "organization.member.deleted",
          "organization.member.role.assigned",
          "organization.member.role.deleted",
          "organization.connection.added",
          "organization.connection.updated",
          "organization.connection.removed"
        ]
      },
      "EventStreamDeliveryStatusEnum": {
        "type": "string",
        "description": "Delivery status",
        "maxLength": 6,
        "enum": [
          "failed"
        ]
      },
      "EventStreamDestinationPatch": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/EventStreamWebhookDestination"
          }
        ]
      },
      "EventStreamEventBridgeAWSRegionEnum": {
        "type": "string",
        "description": "AWS Region for EventBridge destination.",
        "enum": [
          "ap-east-1",
          "ap-northeast-1",
          "ap-northeast-2",
          "ap-northeast-3",
          "ap-south-1",
          "ap-southeast-1",
          "ap-southeast-2",
          "ca-central-1",
          "cn-north-1",
          "cn-northwest-1",
          "eu-central-1",
          "eu-north-1",
          "eu-west-1",
          "eu-west-2",
          "eu-west-3",
          "me-south-1",
          "sa-east-1",
          "us-gov-east-1",
          "us-gov-west-1",
          "us-east-1",
          "us-east-2",
          "us-west-1",
          "us-west-2"
        ]
      },
      "EventStreamEventBridgeConfiguration": {
        "type": "object",
        "description": "Configuration specific to an eventbridge destination.",
        "additionalProperties": false,
        "required": [
          "aws_account_id",
          "aws_region"
        ],
        "properties": {
          "aws_account_id": {
            "type": "string",
            "description": "AWS Account ID for EventBridge destination.\n"
          },
          "aws_region": {
            "$ref": "#/components/schemas/EventStreamEventBridgeAWSRegionEnum"
          },
          "aws_partner_event_source": {
            "type": "string",
            "description": "AWS Partner Event Source for EventBridge destination.\n"
          }
        }
      },
      "EventStreamEventBridgeDestination": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "configuration"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/EventStreamEventBridgeDestinationTypeEnum"
          },
          "configuration": {
            "$ref": "#/components/schemas/EventStreamEventBridgeConfiguration"
          }
        }
      },
      "EventStreamEventBridgeDestinationTypeEnum": {
        "type": "string",
        "enum": [
          "eventbridge"
        ]
      },
      "EventStreamEventBridgeResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the event stream.",
            "minLength": 26,
            "maxLength": 26,
            "format": "event-stream-id"
          },
          "name": {
            "type": "string",
            "description": "Name of the event stream.",
            "minLength": 1,
            "maxLength": 128
          },
          "subscriptions": {
            "type": "array",
            "description": "List of event types subscribed to in this stream.",
            "items": {
              "$ref": "#/components/schemas/EventStreamSubscription"
            }
          },
          "destination": {
            "$ref": "#/components/schemas/EventStreamEventBridgeDestination"
          },
          "status": {
            "$ref": "#/components/schemas/EventStreamStatusEnum"
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp when the event stream was created.",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "Timestamp when the event stream was last updated.",
            "format": "date-time"
          }
        }
      },
      "EventStreamEventTypeEnum": {
        "type": "string",
        "enum": [
          "user.created",
          "user.deleted",
          "user.updated",
          "organization.created",
          "organization.updated",
          "organization.deleted",
          "organization.member.added",
          "organization.member.deleted",
          "organization.member.role.assigned",
          "organization.member.role.deleted",
          "organization.connection.added",
          "organization.connection.updated",
          "organization.connection.removed"
        ]
      },
      "EventStreamResponseContent": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/EventStreamWebhookResponseContent"
          },
          {
            "$ref": "#/components/schemas/EventStreamEventBridgeResponseContent"
          }
        ]
      },
      "EventStreamStatusEnum": {
        "type": "string",
        "description": "Indicates whether the event stream is actively forwarding events.",
        "maxLength": 8,
        "enum": [
          "enabled",
          "disabled"
        ]
      },
      "EventStreamSubscription": {
        "type": "object",
        "description": "Event types",
        "additionalProperties": false,
        "properties": {
          "event_type": {
            "type": "string"
          }
        }
      },
      "EventStreamWebhookAuthorizationResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/EventStreamWebhookBasicAuth"
          },
          {
            "$ref": "#/components/schemas/EventStreamWebhookBearerAuth"
          }
        ]
      },
      "EventStreamWebhookBasicAuth": {
        "type": "object",
        "description": "Basic Authorization for HTTP requests (e.g., 'Basic credentials').\n",
        "additionalProperties": false,
        "required": [
          "method",
          "username"
        ],
        "properties": {
          "method": {
            "$ref": "#/components/schemas/EventStreamWebhookBasicAuthMethodEnum"
          },
          "username": {
            "type": "string",
            "description": "Username",
            "maxLength": 128
          }
        }
      },
      "EventStreamWebhookBasicAuthMethodEnum": {
        "type": "string",
        "description": "Type of authorization.",
        "enum": [
          "basic"
        ]
      },
      "EventStreamWebhookBearerAuth": {
        "type": "object",
        "description": "Bearer Authorization for HTTP requests (e.g., 'Bearer token').\n",
        "additionalProperties": false,
        "required": [
          "method"
        ],
        "properties": {
          "method": {
            "$ref": "#/components/schemas/EventStreamWebhookBearerAuthMethodEnum"
          }
        }
      },
      "EventStreamWebhookBearerAuthMethodEnum": {
        "type": "string",
        "description": "Type of authorization.",
        "enum": [
          "bearer"
        ]
      },
      "EventStreamWebhookConfiguration": {
        "type": "object",
        "description": "Configuration specific to a webhook destination.",
        "additionalProperties": false,
        "required": [
          "webhook_endpoint",
          "webhook_authorization"
        ],
        "properties": {
          "webhook_endpoint": {
            "type": "string",
            "description": "Target HTTP endpoint URL."
          },
          "webhook_authorization": {
            "$ref": "#/components/schemas/EventStreamWebhookAuthorizationResponse"
          }
        }
      },
      "EventStreamWebhookDestination": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "configuration"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/EventStreamWebhookDestinationTypeEnum"
          },
          "configuration": {
            "$ref": "#/components/schemas/EventStreamWebhookConfiguration"
          }
        }
      },
      "EventStreamWebhookDestinationTypeEnum": {
        "type": "string",
        "enum": [
          "webhook"
        ]
      },
      "EventStreamWebhookResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the event stream.",
            "minLength": 26,
            "maxLength": 26,
            "format": "event-stream-id"
          },
          "name": {
            "type": "string",
            "description": "Name of the event stream.",
            "minLength": 1,
            "maxLength": 128
          },
          "subscriptions": {
            "type": "array",
            "description": "List of event types subscribed to in this stream.",
            "items": {
              "$ref": "#/components/schemas/EventStreamSubscription"
            }
          },
          "destination": {
            "$ref": "#/components/schemas/EventStreamWebhookDestination"
          },
          "status": {
            "$ref": "#/components/schemas/EventStreamStatusEnum"
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp when the event stream was created.",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "Timestamp when the event stream was last updated.",
            "format": "date-time"
          }
        }
      },
      "ExtensibilityEmailProviderCredentials": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "GetActionExecutionResponseContent": {
        "type": "object",
        "description": "The result of a specific execution of a trigger.",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "ID identifies this specific execution simulation. These IDs would resemble real executions in production.",
            "default": "c5b35bb1-c67d-40bb-9b0d-700b6fe33dd9"
          },
          "trigger_id": {
            "$ref": "#/components/schemas/ActionTriggerTypeEnum"
          },
          "status": {
            "$ref": "#/components/schemas/ActionExecutionStatusEnum"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionExecutionResult"
            }
          },
          "created_at": {
            "type": "string",
            "description": "The time that the execution was started.",
            "default": "2021-01-01T00:00:00.000Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "The time that the exeution finished executing.",
            "default": "2021-01-01T00:00:00.000Z",
            "format": "date-time"
          }
        }
      },
      "GetActionResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of the action.",
            "default": "910b1053-577f-4d81-a8c8-020e7319a38a"
          },
          "name": {
            "type": "string",
            "description": "The name of an action.",
            "default": "my-action"
          },
          "supported_triggers": {
            "type": "array",
            "description": "The list of triggers that this action supports. At this time, an action can only target a single trigger at a time.",
            "items": {
              "$ref": "#/components/schemas/ActionTrigger"
            }
          },
          "all_changes_deployed": {
            "type": "boolean",
            "description": "True if all of an Action's contents have been deployed.",
            "default": false
          },
          "created_at": {
            "type": "string",
            "description": "The time when this action was created.",
            "default": "2021-01-01T00:00:00.000Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "The time when this action was updated.",
            "default": "2021-01-01T00:00:00.000Z",
            "format": "date-time"
          },
          "code": {
            "type": "string",
            "description": "The source code of the action.",
            "default": "module.exports = () => {}"
          },
          "dependencies": {
            "type": "array",
            "description": "The list of third party npm modules, and their versions, that this action depends on.",
            "items": {
              "$ref": "#/components/schemas/ActionVersionDependency"
            }
          },
          "runtime": {
            "type": "string",
            "description": "The Node runtime. For example: `node12`, defaults to `node12`",
            "default": "node12"
          },
          "secrets": {
            "type": "array",
            "description": "The list of secrets that are included in an action or a version of an action.",
            "items": {
              "$ref": "#/components/schemas/ActionSecretResponse"
            }
          },
          "deployed_version": {
            "$ref": "#/components/schemas/ActionDeployedVersion"
          },
          "installed_integration_id": {
            "type": "string",
            "description": "installed_integration_id is the fk reference to the InstalledIntegration entity.",
            "default": "7d2bc0c9-c0c2-433a-9f4e-86ef80270aad"
          },
          "integration": {
            "$ref": "#/components/schemas/Integration"
          },
          "status": {
            "$ref": "#/components/schemas/ActionBuildStatusEnum"
          },
          "built_at": {
            "type": "string",
            "description": "The time when this action was built successfully.",
            "default": "2021-01-01T00:00:00.000Z",
            "format": "date-time"
          },
          "deploy": {
            "type": "boolean",
            "description": "True if the action should be deployed after creation.",
            "default": false
          }
        }
      },
      "GetActionVersionResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique id of an action version.",
            "default": "12a3b9e6-06e6-4a29-96bf-90c82fe79a0d"
          },
          "action_id": {
            "type": "string",
            "description": "The id of the action to which this version belongs.",
            "default": "910b1053-577f-4d81-a8c8-020e7319a38a"
          },
          "code": {
            "type": "string",
            "description": "The source code of this specific version of the action.",
            "default": "module.exports = () => {}"
          },
          "dependencies": {
            "type": "array",
            "description": "The list of third party npm modules, and their versions, that this specific version depends on. ",
            "items": {
              "$ref": "#/components/schemas/ActionVersionDependency"
            }
          },
          "deployed": {
            "type": "boolean",
            "description": "Indicates if this speciic version is the currently one deployed.",
            "default": true
          },
          "runtime": {
            "type": "string",
            "description": "The Node runtime. For example: `node12`",
            "default": "node12"
          },
          "secrets": {
            "type": "array",
            "description": "The list of secrets that are included in an action or a version of an action.",
            "items": {
              "$ref": "#/components/schemas/ActionSecretResponse"
            }
          },
          "status": {
            "$ref": "#/components/schemas/ActionVersionBuildStatusEnum"
          },
          "number": {
            "type": "number",
            "description": "The index of this version in list of versions for the action.",
            "default": 1
          },
          "errors": {
            "type": "array",
            "description": "Any errors that occurred while the version was being built.",
            "items": {
              "$ref": "#/components/schemas/ActionError"
            }
          },
          "action": {
            "$ref": "#/components/schemas/ActionBase"
          },
          "built_at": {
            "type": "string",
            "description": "The time when this version was built successfully.",
            "default": "2021-01-01T00:00:00.000Z",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "description": "The time when this version was created.",
            "default": "2021-01-01T00:00:00.000Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "The time when a version was updated. Versions are never updated externally. Only Auth0 will update an action version as it is being built.",
            "default": "2021-01-01T00:00:00.000Z",
            "format": "date-time"
          },
          "supported_triggers": {
            "type": "array",
            "description": "The list of triggers that this version supports. At this time, a version can only target a single trigger at a time.",
            "items": {
              "$ref": "#/components/schemas/ActionTrigger"
            }
          }
        }
      },
      "GetAculResponseContent": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "tenant": {
            "type": "string",
            "description": "Tenant ID"
          },
          "prompt": {
            "type": "string",
            "description": "Name of the prompt"
          },
          "screen": {
            "type": "string",
            "description": "Name of the screen"
          },
          "rendering_mode": {
            "$ref": "#/components/schemas/AculRenderingModeEnum"
          },
          "context_configuration": {
            "type": "array",
            "description": "Context values to make available",
            "items": {
              "type": "string"
            }
          },
          "default_head_tags_disabled": {
            "type": "boolean",
            "description": "Override Universal Login default head tags"
          },
          "head_tags": {
            "type": "array",
            "description": "An array of head tags",
            "items": {
              "$ref": "#/components/schemas/AculHeadTag"
            }
          }
        }
      },
      "GetClientCredentialResponseContent": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the credential. Generated on creation.",
            "default": "cred_1m7sfABoNTTKYwTQ8qt6tX"
          },
          "name": {
            "type": "string",
            "description": "The name given to the credential by the user.",
            "default": ""
          },
          "kid": {
            "type": "string",
            "description": "The key identifier of the credential, generated on creation.",
            "default": "IZSSTECp..."
          },
          "alg": {
            "$ref": "#/components/schemas/ClientCredentialAlgorithmEnum"
          },
          "credential_type": {
            "$ref": "#/components/schemas/ClientCredentialTypeEnum"
          },
          "subject_dn": {
            "type": "string",
            "description": "The X509 certificate's Subject Distinguished Name"
          },
          "thumbprint_sha256": {
            "type": "string",
            "description": "The X509 certificate's SHA256 thumbprint"
          },
          "created_at": {
            "type": "string",
            "description": "The ISO 8601 formatted date the credential was created.",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "The ISO 8601 formatted date the credential was updated.",
            "format": "date-time"
          },
          "expires_at": {
            "type": "string",
            "description": "The ISO 8601 formatted date representing the expiration of the credential.",
            "format": "date-time"
          }
        }
      },
      "GetClientResponseContent": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "client_id": {
            "type": "string",
            "description": "ID of this client.",
            "default": "AaiyAPdpYdesoKnqjj8HJqRn4T5titww"
          },
          "tenant": {
            "type": "string",
            "description": "Name of the tenant this client belongs to.",
            "default": ""
          },
          "name": {
            "type": "string",
            "description": "Name of this client (min length: 1 character, does not allow `<` or `>`).",
            "default": "My application"
          },
          "description": {
            "type": "string",
            "description": "Free text description of this client (max length: 140 characters).",
            "default": ""
          },
          "global": {
            "type": "boolean",
            "description": "Whether this is your global 'All Applications' client representing legacy tenant settings (true) or a regular client (false).",
            "default": false
          },
          "client_secret": {
            "type": "string",
            "description": "Client secret (which you must not make public).",
            "default": "MG_TNT2ver-SylNat-_VeMmd-4m0Waba0jr1troztBniSChEw0glxEmgEi2Kw40H"
          },
          "app_type": {
            "type": "string",
            "description": "Type of client used to determine which settings are applicable. Can be `spa`, `native`, `non_interactive`, or `regular_web`.",
            "default": ""
          },
          "logo_uri": {
            "type": "string",
            "description": "URL of the logo to display for this client. Recommended size is 150x150 pixels."
          },
          "is_first_party": {
            "type": "boolean",
            "description": "Whether this client a first party client (true) or not (false).",
            "default": false
          },
          "oidc_conformant": {
            "type": "boolean",
            "description": "Whether this client conforms to <a href='https://auth0.com/docs/api-auth/tutorials/adoption'>strict OIDC specifications</a> (true) or uses legacy features (false).",
            "default": false
          },
          "callbacks": {
            "type": "array",
            "description": "Comma-separated list of URLs whitelisted for Auth0 to use as a callback to the client after authentication.",
            "items": {
              "type": "string"
            }
          },
          "allowed_origins": {
            "type": "array",
            "description": "Comma-separated list of URLs allowed to make requests from JavaScript to Auth0 API (typically used with CORS). By default, all your callback URLs will be allowed. This field allows you to enter other origins if necessary. You can also use wildcards at the subdomain level (e.g., https://*.contoso.com). Query strings and hash information are not taken into account when validating these URLs.",
            "items": {
              "type": "string"
            }
          },
          "web_origins": {
            "type": "array",
            "description": "Comma-separated list of allowed origins for use with <a href='https://auth0.com/docs/cross-origin-authentication'>Cross-Origin Authentication</a>, <a href='https://auth0.com/docs/flows/concepts/device-auth'>Device Flow</a>, and <a href='https://auth0.com/docs/protocols/oauth2#how-response-mode-works'>web message response mode</a>.",
            "items": {
              "type": "string"
            }
          },
          "client_aliases": {
            "type": "array",
            "description": "List of audiences/realms for SAML protocol. Used by the wsfed addon.",
            "items": {
              "type": "string"
            }
          },
          "allowed_clients": {
            "type": "array",
            "description": "List of allow clients and API ids that are allowed to make delegation requests. Empty means all all your clients are allowed.",
            "items": {
              "type": "string"
            }
          },
          "allowed_logout_urls": {
            "type": "array",
            "description": "Comma-separated list of URLs that are valid to redirect to after logout from Auth0. Wildcards are allowed for subdomains.",
            "items": {
              "type": "string"
            }
          },
          "session_transfer": {
            "$ref": "#/components/schemas/ClientSessionTransferConfiguration"
          },
          "oidc_logout": {
            "$ref": "#/components/schemas/ClientOIDCBackchannelLogoutSettings"
          },
          "grant_types": {
            "type": "array",
            "description": "List of grant types supported for this application. Can include `authorization_code`, `implicit`, `refresh_token`, `client_credentials`, `password`, `http://auth0.com/oauth/grant-type/password-realm`, `http://auth0.com/oauth/grant-type/mfa-oob`, `http://auth0.com/oauth/grant-type/mfa-otp`, `http://auth0.com/oauth/grant-type/mfa-recovery-code`, `urn:openid:params:grant-type:ciba`, and `urn:ietf:params:oauth:grant-type:device_code`.",
            "items": {
              "type": "string"
            }
          },
          "jwt_configuration": {
            "$ref": "#/components/schemas/ClientJwtConfiguration"
          },
          "signing_keys": {
            "$ref": "#/components/schemas/ClientSigningKeys"
          },
          "encryption_key": {
            "$ref": "#/components/schemas/ClientEncryptionKey"
          },
          "sso": {
            "type": "boolean",
            "description": "Applies only to SSO clients and determines whether Auth0 will handle Single Sign On (true) or whether the Identity Provider will (false).",
            "default": false
          },
          "sso_disabled": {
            "type": "boolean",
            "description": "Whether Single Sign On is disabled (true) or enabled (true). Defaults to true.",
            "default": false
          },
          "cross_origin_authentication": {
            "type": "boolean",
            "description": "Whether this client can be used to make cross-origin authentication requests (true) or it is not allowed to make such requests (false)."
          },
          "cross_origin_loc": {
            "type": "string",
            "description": "URL of the location in your site where the cross origin verification takes place for the cross-origin auth flow when performing Auth in your own domain instead of Auth0 hosted login page.",
            "format": "url"
          },
          "custom_login_page_on": {
            "type": "boolean",
            "description": "Whether a custom login page is to be used (true) or the default provided login page (false).",
            "default": true
          },
          "custom_login_page": {
            "type": "string",
            "description": "The content (HTML, CSS, JS) of the custom login page.",
            "default": ""
          },
          "custom_login_page_preview": {
            "type": "string",
            "description": "The content (HTML, CSS, JS) of the custom login page. (Used on Previews)",
            "default": ""
          },
          "form_template": {
            "type": "string",
            "description": "HTML form template to be used for WS-Federation.",
            "default": ""
          },
          "addons": {
            "$ref": "#/components/schemas/ClientAddons"
          },
          "token_endpoint_auth_method": {
            "$ref": "#/components/schemas/ClientTokenEndpointAuthMethodEnum"
          },
          "client_metadata": {
            "$ref": "#/components/schemas/ClientMetadata"
          },
          "mobile": {
            "$ref": "#/components/schemas/ClientMobile"
          },
          "initiate_login_uri": {
            "type": "string",
            "description": "Initiate login uri, must be https",
            "format": "absolute-https-uri-or-empty"
          },
          "native_social_login": {},
          "refresh_token": {
            "$ref": "#/components/schemas/ClientRefreshTokenConfiguration"
          },
          "default_organization": {
            "$ref": "#/components/schemas/ClientDefaultOrganization"
          },
          "organization_usage": {
            "$ref": "#/components/schemas/ClientOrganizationUsageEnum"
          },
          "organization_require_behavior": {
            "$ref": "#/components/schemas/ClientOrganizationRequireBehaviorEnum"
          },
          "client_authentication_methods": {
            "$ref": "#/components/schemas/ClientAuthenticationMethod"
          },
          "require_pushed_authorization_requests": {
            "type": "boolean",
            "description": "Makes the use of Pushed Authorization Requests mandatory for this client",
            "default": false
          },
          "require_proof_of_possession": {
            "type": "boolean",
            "description": "Makes the use of Proof-of-Possession mandatory for this client",
            "default": false
          },
          "signed_request_object": {
            "$ref": "#/components/schemas/ClientSignedRequestObjectWithCredentialId"
          },
          "compliance_level": {
            "$ref": "#/components/schemas/ClientComplianceLevelEnum"
          },
          "par_request_expiry": {
            "type": "integer",
            "nullable": true,
            "description": "Specifies how long, in seconds, a Pushed Authorization Request URI remains valid"
          },
          "token_quota": {
            "$ref": "#/components/schemas/TokenQuota"
          }
        }
      },
      "GetCustomDomainResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "custom_domain_id",
          "domain",
          "primary",
          "status",
          "type"
        ],
        "properties": {
          "custom_domain_id": {
            "type": "string",
            "description": "ID of the custom domain.",
            "default": "cd_0000000000000001"
          },
          "domain": {
            "type": "string",
            "description": "Domain name.",
            "default": "login.mycompany.com"
          },
          "primary": {
            "type": "boolean",
            "description": "Whether this is a primary domain (true) or not (false).",
            "default": false
          },
          "status": {
            "$ref": "#/components/schemas/CustomDomainStatusEnum"
          },
          "type": {
            "$ref": "#/components/schemas/CustomDomainTypeEnum"
          },
          "origin_domain_name": {
            "type": "string",
            "description": "Intermediate address.",
            "default": "mycompany_cd_0000000000000001.edge.tenants.auth0.com"
          },
          "verification": {
            "$ref": "#/components/schemas/DomainVerification"
          },
          "custom_client_ip_header": {
            "type": "string",
            "nullable": true,
            "description": "The HTTP header to fetch the client's IP address"
          },
          "tls_policy": {
            "type": "string",
            "description": "The TLS version policy",
            "default": "recommended"
          }
        }
      },
      "GetCustomSigningKeysResponseContent": {
        "type": "object",
        "description": "JWKS representing an array of custom public signing keys.",
        "additionalProperties": false,
        "properties": {
          "keys": {
            "type": "array",
            "description": "An array of custom public signing keys.",
            "items": {
              "$ref": "#/components/schemas/CustomSigningKeyJWK"
            }
          }
        }
      },
      "GetCustomTextsByLanguageResponseContent": {
        "type": "object",
        "description": "An object containing custom dictionaries for a group of screens.",
        "additionalProperties": true
      },
      "GetEmailProviderResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "getPayloadSchema": {}
        }
      },
      "GetEmailTemplateResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "template": {
            "$ref": "#/components/schemas/EmailTemplateNameEnum"
          },
          "body": {
            "type": "string",
            "nullable": true,
            "description": "Body of the email template."
          },
          "from": {
            "type": "string",
            "nullable": true,
            "description": "Senders `from` email address.",
            "default": "sender@auth0.com"
          },
          "resultUrl": {
            "type": "string",
            "nullable": true,
            "description": "URL to redirect the user to after a successful action."
          },
          "subject": {
            "type": "string",
            "nullable": true,
            "description": "Subject line of the email."
          },
          "syntax": {
            "type": "string",
            "nullable": true,
            "description": "Syntax of the template body.",
            "default": "liquid"
          },
          "urlLifetimeInSeconds": {
            "type": "number",
            "nullable": true,
            "description": "Lifetime in seconds that the link within the email will be valid for."
          },
          "includeEmailInRedirect": {
            "type": "boolean",
            "description": "Whether the `reset_email` and `verify_email` templates should include the user's email address as the `email` parameter in the returnUrl (true) or whether no email address should be included in the redirect (false). Defaults to true."
          },
          "enabled": {
            "type": "boolean",
            "nullable": true,
            "description": "Whether the template is enabled (true) or disabled (false)."
          }
        }
      },
      "GetEventStreamDeliveryHistoryResponseContent": {
        "type": "object",
        "description": "Metadata about a specific attempt to deliver an event",
        "additionalProperties": false,
        "required": [
          "id",
          "event_stream_id",
          "status",
          "event_type",
          "attempts"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the delivery"
          },
          "event_stream_id": {
            "type": "string",
            "description": "Unique identifier for the event stream.",
            "minLength": 26,
            "maxLength": 26,
            "format": "event-stream-id"
          },
          "status": {
            "$ref": "#/components/schemas/EventStreamDeliveryStatusEnum"
          },
          "event_type": {
            "$ref": "#/components/schemas/EventStreamDeliveryEventTypeEnum"
          },
          "attempts": {
            "type": "array",
            "description": "Results of delivery attempts",
            "items": {
              "$ref": "#/components/schemas/EventStreamDeliveryAttempt"
            }
          },
          "event": {
            "$ref": "#/components/schemas/EventStreamCloudEvent"
          }
        }
      },
      "GetEventStreamResponseContent": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/EventStreamWebhookResponseContent"
          },
          {
            "$ref": "#/components/schemas/EventStreamEventBridgeResponseContent"
          }
        ]
      },
      "GetJobErrorResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "user": {
            "$ref": "#/components/schemas/GetJobUserError"
          },
          "errors": {
            "type": "array",
            "description": "Errors importing the user.",
            "items": {
              "$ref": "#/components/schemas/GetJobImportUserError"
            }
          }
        }
      },
      "GetJobGenericErrorResponseContent": {
        "type": "object",
        "additionalProperties": true,
        "required": [
          "id",
          "type",
          "status"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of this job.",
            "default": "pending"
          },
          "type": {
            "type": "string",
            "description": "Type of job this is.",
            "default": "users_import"
          },
          "created_at": {
            "type": "string",
            "description": "When this job was created."
          },
          "id": {
            "type": "string",
            "description": "ID of this job.",
            "default": "job_0000000000000001"
          },
          "connection_id": {
            "type": "string",
            "description": "connection_id of the connection this job uses.",
            "default": "con_0000000000000001"
          },
          "status_details": {
            "type": "string",
            "description": "Status details."
          }
        }
      },
      "GetJobImportUserError": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "code": {
            "type": "string",
            "description": "Error code."
          },
          "message": {
            "type": "string",
            "description": "Error message."
          },
          "path": {
            "type": "string",
            "description": "Error field."
          }
        }
      },
      "GetJobResponseContent": {
        "type": "object",
        "additionalProperties": true,
        "required": [
          "id",
          "type",
          "status"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of this job.",
            "default": "pending"
          },
          "type": {
            "type": "string",
            "description": "Type of job this is.",
            "default": "users_import"
          },
          "created_at": {
            "type": "string",
            "description": "When this job was created."
          },
          "id": {
            "type": "string",
            "description": "ID of this job.",
            "default": "job_0000000000000001"
          },
          "connection_id": {
            "type": "string",
            "description": "connection_id of the connection this job uses.",
            "default": "con_0000000000000001"
          },
          "location": {
            "type": "string",
            "description": "URL to download the result of this job."
          },
          "percentage_done": {
            "type": "integer",
            "description": "Completion percentage of this job."
          },
          "time_left_seconds": {
            "type": "integer",
            "description": "Estimated time remaining before job completes."
          },
          "format": {
            "$ref": "#/components/schemas/JobFileFormatEnum"
          },
          "status_details": {
            "type": "string",
            "description": "Status details."
          }
        }
      },
      "GetJobUserError": {
        "type": "object",
        "description": "User, as provided in the import file",
        "additionalProperties": true
      },
      "GetLogStreamResponseContent": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/LogStreamHttpResponseSchema"
          },
          {
            "$ref": "#/components/schemas/LogStreamEventBridgeResponseSchema"
          },
          {
            "$ref": "#/components/schemas/LogStreamEventGridResponseSchema"
          },
          {
            "$ref": "#/components/schemas/LogStreamDatadogResponseSchema"
          },
          {
            "$ref": "#/components/schemas/LogStreamSplunkResponseSchema"
          },
          {
            "$ref": "#/components/schemas/LogStreamSumoResponseSchema"
          },
          {
            "$ref": "#/components/schemas/LogStreamSegmentResponseSchema"
          },
          {
            "$ref": "#/components/schemas/LogStreamMixpanelResponseSchema"
          }
        ]
      },
      "GetNetworkAclsResponseContent": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "priority": {
            "type": "number"
          },
          "rule": {
            "$ref": "#/components/schemas/NetworkAclRule"
          },
          "created_at": {
            "type": "string",
            "description": "The timestamp when the Network ACL Configuration was created"
          },
          "updated_at": {
            "type": "string",
            "description": "The timestamp when the Network ACL Configuration was last updated"
          }
        }
      },
      "GetOrganizationByNameResponseContent": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "id": {
            "type": "string",
            "description": "Organization identifier.",
            "format": "organization-id"
          },
          "name": {
            "type": "string",
            "description": "The name of this organization.",
            "default": "organization-1",
            "minLength": 1,
            "maxLength": 50,
            "format": "organization-name"
          },
          "display_name": {
            "type": "string",
            "description": "Friendly name of this organization.",
            "default": "Acme Users",
            "minLength": 1,
            "maxLength": 255
          },
          "branding": {
            "$ref": "#/components/schemas/OrganizationBranding"
          },
          "metadata": {
            "$ref": "#/components/schemas/OrganizationMetadata"
          },
          "token_quota": {
            "$ref": "#/components/schemas/TokenQuota"
          }
        }
      },
      "GetOrganizationConnectionResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "connection_id": {
            "type": "string",
            "description": "ID of the connection."
          },
          "assign_membership_on_login": {
            "type": "boolean",
            "description": "When true, all users that log in with this connection will be automatically granted membership in the organization. When false, users must be granted membership in the organization before logging in with this connection."
          },
          "show_as_button": {
            "type": "boolean",
            "description": "Determines whether a connection should be displayed on this organization’s login prompt. Only applicable for enterprise connections. Default: true."
          },
          "is_signup_enabled": {
            "type": "boolean",
            "description": "Determines whether organization signup should be enabled for this organization connection. Only applicable for database connections. Default: false."
          },
          "connection": {
            "$ref": "#/components/schemas/OrganizationConnectionInformation"
          }
        }
      },
      "GetOrganizationInvitationResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the user invitation.",
            "default": "uinv_0000000000000001",
            "format": "user-invitation-id"
          },
          "organization_id": {
            "type": "string",
            "description": "Organization identifier.",
            "format": "organization-id"
          },
          "inviter": {
            "$ref": "#/components/schemas/OrganizationInvitationInviter"
          },
          "invitee": {
            "$ref": "#/components/schemas/OrganizationInvitationInvitee"
          },
          "invitation_url": {
            "type": "string",
            "description": "The invitation url to be send to the invitee.",
            "default": "https://mycompany.org/login?invitation=f81dWWYW6gzGGicxT8Ha0txBkGNcAcYr&organization=org_0000000000000001&organization_name=acme",
            "format": "strict-https-uri"
          },
          "created_at": {
            "type": "string",
            "description": "The ISO 8601 formatted timestamp representing the creation time of the invitation.",
            "default": "2020-08-20T19:10:06.299Z",
            "format": "date-time"
          },
          "expires_at": {
            "type": "string",
            "description": "The ISO 8601 formatted timestamp representing the expiration time of the invitation.",
            "default": "2020-08-27T19:10:06.299Z",
            "format": "date-time"
          },
          "client_id": {
            "type": "string",
            "description": "Auth0 client ID. Used to resolve the application's login initiation endpoint.",
            "default": "AaiyAPdpYdesoKnqjj8HJqRn4T5titww",
            "format": "client-id"
          },
          "connection_id": {
            "type": "string",
            "description": "The id of the connection to force invitee to authenticate with.",
            "default": "con_0000000000000001",
            "format": "connection-id"
          },
          "app_metadata": {
            "$ref": "#/components/schemas/AppMetadata"
          },
          "user_metadata": {
            "$ref": "#/components/schemas/UserMetadata"
          },
          "roles": {
            "type": "array",
            "description": "List of roles IDs to associated with the user.",
            "items": {
              "type": "string",
              "format": "role-id"
            }
          },
          "ticket_id": {
            "type": "string",
            "description": "The id of the invitation ticket",
            "format": "ticket-id"
          }
        }
      },
      "GetOrganizationResponseContent": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "id": {
            "type": "string",
            "description": "Organization identifier.",
            "format": "organization-id"
          },
          "name": {
            "type": "string",
            "description": "The name of this organization.",
            "default": "organization-1",
            "minLength": 1,
            "maxLength": 50,
            "format": "organization-name"
          },
          "display_name": {
            "type": "string",
            "description": "Friendly name of this organization.",
            "default": "Acme Users",
            "minLength": 1,
            "maxLength": 255
          },
          "branding": {
            "$ref": "#/components/schemas/OrganizationBranding"
          },
          "metadata": {
            "$ref": "#/components/schemas/OrganizationMetadata"
          },
          "token_quota": {
            "$ref": "#/components/schemas/TokenQuota"
          }
        }
      },
      "GetPartialsResponseContent": {
        "type": "object",
        "description": "An object containing template partials for a group of screens.",
        "additionalProperties": true
      },
      "GetRefreshTokenResponseContent": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the refresh token"
          },
          "user_id": {
            "type": "string",
            "description": "ID of the user which can be used when interacting with other APIs.",
            "default": "auth0|507f1f77bcf86cd799439020"
          },
          "created_at": {
            "$ref": "#/components/schemas/RefreshTokenDate"
          },
          "idle_expires_at": {
            "$ref": "#/components/schemas/RefreshTokenDate"
          },
          "expires_at": {
            "$ref": "#/components/schemas/RefreshTokenDate"
          },
          "device": {
            "$ref": "#/components/schemas/RefreshTokenDevice"
          },
          "client_id": {
            "type": "string",
            "description": "ID of the client application granted with this refresh token"
          },
          "session_id": {
            "$ref": "#/components/schemas/RefreshTokenSessionId"
          },
          "rotating": {
            "type": "boolean",
            "description": "True if the token is a rotating refresh token"
          },
          "resource_servers": {
            "type": "array",
            "description": "A list of the resource server IDs associated to this refresh-token and their granted scopes",
            "items": {
              "$ref": "#/components/schemas/RefreshTokenResourceServer"
            }
          },
          "last_exchanged_at": {
            "$ref": "#/components/schemas/RefreshTokenDate"
          }
        }
      },
      "GetRoleResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "ID for this role."
          },
          "name": {
            "type": "string",
            "description": "Name of this role."
          },
          "description": {
            "type": "string",
            "description": "Description of this role."
          }
        }
      },
      "GetSessionResponseContent": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the session"
          },
          "user_id": {
            "type": "string",
            "description": "ID of the user which can be used when interacting with other APIs."
          },
          "created_at": {
            "$ref": "#/components/schemas/SessionDate"
          },
          "updated_at": {
            "$ref": "#/components/schemas/SessionDate"
          },
          "authenticated_at": {
            "$ref": "#/components/schemas/SessionDate"
          },
          "idle_expires_at": {
            "$ref": "#/components/schemas/SessionDate"
          },
          "expires_at": {
            "$ref": "#/components/schemas/SessionDate"
          },
          "last_interacted_at": {
            "$ref": "#/components/schemas/SessionDate"
          },
          "device": {
            "$ref": "#/components/schemas/SessionDeviceMetadata"
          },
          "clients": {
            "type": "array",
            "description": "List of client details for the session",
            "items": {
              "$ref": "#/components/schemas/SessionClientMetadata"
            }
          },
          "authentication": {
            "$ref": "#/components/schemas/SessionAuthenticationSignals"
          }
        }
      },
      "GetSettingsResponseContent": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "universal_login_experience": {
            "$ref": "#/components/schemas/UniversalLoginExperienceEnum"
          },
          "identifier_first": {
            "type": "boolean",
            "description": "Whether identifier first is enabled or not"
          },
          "webauthn_platform_first_factor": {
            "type": "boolean",
            "description": "Use WebAuthn with Device Biometrics as the first authentication factor"
          }
        }
      },
      "GetVerifiableCredentialTemplateResponseContent": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the template.",
            "default": "vct_0000000000000001"
          },
          "name": {
            "type": "string",
            "description": "The name of the template."
          },
          "type": {
            "type": "string",
            "description": "The type of the template.",
            "default": "mdl"
          },
          "dialect": {
            "type": "string",
            "description": "The dialect of the template.",
            "default": "simplified/1.0",
            "maxLength": 255
          },
          "presentation": {
            "$ref": "#/components/schemas/MdlPresentationRequest"
          },
          "custom_certificate_authority": {
            "type": "string",
            "description": "The custom certificate authority.",
            "minLength": 1,
            "maxLength": 4096
          },
          "well_known_trusted_issuers": {
            "type": "string",
            "description": "The well-known trusted issuers, comma separated.",
            "minLength": 1,
            "maxLength": 255
          },
          "created_at": {
            "type": "string",
            "description": "The date and time the template was created.",
            "default": "2021-01-01T00:00:00Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "The date and time the template was created.",
            "default": "2021-01-01T00:00:00Z",
            "format": "date-time"
          }
        }
      },
      "HttpCustomHeader": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "header": {
            "type": "string",
            "description": "HTTP header name"
          },
          "value": {
            "type": "string",
            "description": "HTTP header value"
          }
        }
      },
      "Identity": {
        "type": "object",
        "description": "This must be provided to verify primary social, enterprise and passwordless email identities. Also, is needed to verify secondary identities.",
        "additionalProperties": false,
        "required": [
          "user_id",
          "provider"
        ],
        "properties": {
          "user_id": {
            "type": "string",
            "description": "user_id of the identity to be verified.",
            "default": "5457edea1b8f22891a000004"
          },
          "provider": {
            "type": "string",
            "description": "Identity provider name of the identity (e.g. `google-oauth2`).",
            "default": "google-oauth2",
            "enum": [
              "ad",
              "adfs",
              "amazon",
              "apple",
              "dropbox",
              "bitbucket",
              "aol",
              "auth0-oidc",
              "auth0",
              "baidu",
              "bitly",
              "box",
              "custom",
              "daccount",
              "dwolla",
              "email",
              "evernote-sandbox",
              "evernote",
              "exact",
              "facebook",
              "fitbit",
              "flickr",
              "github",
              "google-apps",
              "google-oauth2",
              "instagram",
              "ip",
              "line",
              "linkedin",
              "miicard",
              "oauth1",
              "oauth2",
              "office365",
              "oidc",
              "okta",
              "paypal",
              "paypal-sandbox",
              "pingfederate",
              "planningcenter",
              "renren",
              "salesforce-community",
              "salesforce-sandbox",
              "salesforce",
              "samlp",
              "sharepoint",
              "shopify",
              "sms",
              "soundcloud",
              "thecity-sandbox",
              "thecity",
              "thirtysevensignals",
              "twitter",
              "untappd",
              "vkontakte",
              "waad",
              "weibo",
              "windowslive",
              "wordpress",
              "yahoo",
              "yammer",
              "yandex"
            ]
          }
        }
      },
      "Integration": {
        "type": "object",
        "description": "Integration defines a self contained functioning unit which partners\npublish. A partner may create one or many of these integrations.",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "id is a system generated GUID. This same ID is designed to be federated in\nall the applicable localities.",
            "default": "8e9fe2d0-a2fc-4c8c-9e35-dae5afadb70b"
          },
          "catalog_id": {
            "type": "string",
            "description": "catalog_id refers to the ID in the marketplace catalog",
            "default": "awesome-auth0-integration"
          },
          "url_slug": {
            "type": "string",
            "description": "url_slug refers to the url_slug in the marketplace catalog",
            "default": "awesome-auth0-integration-slug"
          },
          "partner_id": {
            "type": "string",
            "description": "partner_id is the foreign key reference to the partner account this\nintegration belongs to.",
            "default": "b8575c12-8d9d-4b5c-b28e-671fe9d39029"
          },
          "name": {
            "type": "string",
            "description": "name is the integration name, which will be used for display purposes in\nthe marketplace.\n\nTo start we're going to make sure the display name is at least 3\ncharacters. Can adjust this easily later.",
            "default": "Example Auth0 integration"
          },
          "description": {
            "type": "string",
            "description": "description adds more text for the integration name -- also relevant for\nthe marketplace listing.",
            "default": "An awesome Auth0 integration"
          },
          "short_description": {
            "type": "string",
            "description": "short_description is the brief description of the integration, which is used for display purposes in cards",
            "default": "Awesome Auth0 integration"
          },
          "logo": {
            "type": "string"
          },
          "feature_type": {
            "$ref": "#/components/schemas/IntegrationFeatureTypeEnum"
          },
          "terms_of_use_url": {
            "type": "string"
          },
          "privacy_policy_url": {
            "type": "string"
          },
          "public_support_link": {
            "type": "string"
          },
          "current_release": {
            "$ref": "#/components/schemas/IntegrationRelease"
          },
          "created_at": {
            "type": "string",
            "default": "2021-06-21T15:47:29.072Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "default": "2021-06-21T15:47:29.072Z",
            "format": "date-time"
          }
        }
      },
      "IntegrationFeatureTypeEnum": {
        "type": "string",
        "description": "feature_type is the type of the integration.",
        "default": "action",
        "enum": [
          "unspecified",
          "action",
          "social_connection",
          "log_stream",
          "sso_integration",
          "sms_provider"
        ]
      },
      "IntegrationRelease": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the associated IntegrationRelease"
          },
          "trigger": {
            "$ref": "#/components/schemas/ActionTrigger"
          },
          "semver": {
            "$ref": "#/components/schemas/IntegrationSemVer"
          },
          "required_secrets": {
            "type": "array",
            "description": "required_secrets declares all the necessary secrets for an integration to\nwork.",
            "items": {
              "$ref": "#/components/schemas/IntegrationRequiredParam"
            }
          },
          "required_configuration": {
            "type": "array",
            "description": "required_configuration declares all the necessary configuration fields for an integration to work.",
            "items": {
              "$ref": "#/components/schemas/IntegrationRequiredParam"
            }
          }
        }
      },
      "IntegrationRequiredParam": {
        "type": "object",
        "description": "Param are form input values, primarily utilized when specifying secrets and\nconfiguration values for actions.\n\nThese are especially important for partner integrations -- but can be\nexposed to tenant admins as well if they want to parameterize their custom\nactions.",
        "additionalProperties": false,
        "properties": {
          "type": {
            "$ref": "#/components/schemas/IntegrationRequiredParamTypeEnum"
          },
          "name": {
            "type": "string",
            "description": "The name of the parameter."
          },
          "required": {
            "type": "boolean",
            "description": "The flag for if this parameter is required."
          },
          "optional": {
            "type": "boolean",
            "description": "The temp flag for if this parameter is required (experimental; for Labs use only)."
          },
          "label": {
            "type": "string",
            "description": "The short label for this parameter."
          },
          "description": {
            "type": "string",
            "description": "The lengthier description for this parameter."
          },
          "default_value": {
            "type": "string",
            "description": "The default value for this parameter."
          },
          "placeholder": {
            "type": "string",
            "description": "Placeholder text for this parameter."
          },
          "options": {
            "type": "array",
            "description": "The allowable options for this param.",
            "items": {
              "$ref": "#/components/schemas/IntegrationRequiredParamOption"
            }
          }
        }
      },
      "IntegrationRequiredParamOption": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "value": {
            "type": "string",
            "description": "The value of an option that will be used within the application."
          },
          "label": {
            "type": "string",
            "description": "The display value of an option suitable for displaying in a UI."
          }
        }
      },
      "IntegrationRequiredParamTypeEnum": {
        "type": "string",
        "enum": [
          "UNSPECIFIED",
          "STRING"
        ]
      },
      "IntegrationSemVer": {
        "type": "object",
        "description": "Semver denotes the major.minor version of an integration release",
        "additionalProperties": false,
        "properties": {
          "major": {
            "type": "integer",
            "description": "Major is the major number of a semver",
            "default": 1
          },
          "minor": {
            "type": "integer",
            "description": "Minior is the minior number of a semver",
            "default": 1
          }
        }
      },
      "JobFileFormatEnum": {
        "type": "string",
        "description": "Format of the file. Must be `json` or `csv`.",
        "enum": [
          "json",
          "csv"
        ]
      },
      "ListActionBindingsPaginatedResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "total": {
            "type": "number",
            "description": "The total result count.",
            "default": 1
          },
          "page": {
            "type": "number",
            "description": "Page index of the results being returned. First page is 0.",
            "default": 0
          },
          "per_page": {
            "type": "number",
            "description": "Number of results per page.",
            "default": 20
          },
          "bindings": {
            "type": "array",
            "description": "The list of actions that are bound to this trigger in the order in which they will be executed.",
            "items": {
              "$ref": "#/components/schemas/ActionBinding"
            }
          }
        }
      },
      "ListActionTriggersResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "triggers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionTrigger"
            }
          }
        }
      },
      "ListActionVersionsPaginatedResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "total": {
            "type": "number",
            "description": "The total result count.",
            "default": 1
          },
          "page": {
            "type": "number",
            "description": "Page index of the results being returned. First page is 0.",
            "default": 0
          },
          "per_page": {
            "type": "number",
            "description": "Number of results per page.",
            "default": 20
          },
          "versions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionVersion"
            }
          }
        }
      },
      "ListActionsPaginatedResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "total": {
            "type": "number",
            "description": "The total result count.",
            "default": 1
          },
          "page": {
            "type": "number",
            "description": "Page index of the results being returned. First page is 0.",
            "default": 0
          },
          "per_page": {
            "type": "number",
            "description": "Number of results per page.",
            "default": 20
          },
          "actions": {
            "type": "array",
            "description": "The list of actions.",
            "items": {
              "$ref": "#/components/schemas/Action"
            }
          }
        }
      },
      "ListClientConnectionsResponseContent": {
        "type": "object",
        "additionalProperties": true,
        "required": [
          "connections"
        ],
        "properties": {
          "connections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConnectionForList"
            }
          },
          "next": {
            "type": "string",
            "description": "Encoded next token"
          }
        }
      },
      "ListClientGrantOffsetPaginatedResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "start": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "total": {
            "type": "number"
          },
          "client_grants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientGrantResponseContent"
            }
          }
        }
      },
      "ListClientGrantOrganizationsOffsetPaginatedResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "start": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "total": {
            "type": "number"
          },
          "organizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Organization"
            }
          }
        }
      },
      "ListClientGrantOrganizationsPaginatedResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "next": {
            "type": "string",
            "description": "Opaque identifier for use with the <i>from</i> query parameter for the next page of results.<br/>This identifier is valid for 24 hours."
          },
          "organizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Organization"
            }
          }
        }
      },
      "ListClientGrantOrganizationsResponseContent": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Organization"
            }
          },
          {
            "$ref": "#/components/schemas/ListClientGrantOrganizationsOffsetPaginatedResponseContent"
          },
          {
            "$ref": "#/components/schemas/ListClientGrantOrganizationsPaginatedResponseContent"
          }
        ]
      },
      "ListClientGrantPaginatedResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "next": {
            "type": "string",
            "description": "Opaque identifier for use with the <i>from</i> query parameter for the next page of results.<br/>This identifier is valid for 24 hours."
          },
          "client_grants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientGrantResponseContent"
            }
          }
        }
      },
      "ListClientGrantResponseContent": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientGrantResponseContent"
            }
          },
          {
            "$ref": "#/components/schemas/ListClientGrantOffsetPaginatedResponseContent"
          },
          {
            "$ref": "#/components/schemas/ListClientGrantPaginatedResponseContent"
          }
        ]
      },
      "ListClientsOffsetPaginatedResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "start": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "total": {
            "type": "number"
          },
          "clients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Client"
            }
          }
        }
      },
      "ListClientsPaginatedResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "next": {
            "type": "string",
            "description": "Opaque identifier for use with the <i>from</i> query parameter for the next page of results.<br/>This identifier is valid for 24 hours."
          },
          "clients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Client"
            }
          }
        }
      },
      "ListCustomDomainsResponseContent": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/CustomDomain"
        }
      },
      "ListNetworkAclsOffsetPaginatedResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "network_acls": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NetworkAclsResponseContent"
            }
          },
          "start": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "total": {
            "type": "number"
          }
        }
      },
      "ListNetworkAclsResponseContent": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ListNetworkAclsOffsetPaginatedResponseContent"
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NetworkAclsResponseContent"
            }
          }
        ]
      },
      "ListOrganizationClientGrantsOffsetPaginatedResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "start": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "total": {
            "type": "number"
          },
          "client_grants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationClientGrant"
            }
          }
        }
      },
      "ListOrganizationClientGrantsResponseContent": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationClientGrant"
            }
          },
          {
            "$ref": "#/components/schemas/ListOrganizationClientGrantsOffsetPaginatedResponseContent"
          }
        ]
      },
      "ListOrganizationConnectionsOffsetPaginatedResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "start": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "total": {
            "type": "number"
          },
          "enabled_connections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationConnection"
            }
          }
        }
      },
      "ListOrganizationConnectionsResponseContent": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationConnection"
            }
          },
          {
            "$ref": "#/components/schemas/ListOrganizationConnectionsOffsetPaginatedResponseContent"
          }
        ]
      },
      "ListOrganizationInvitationsOffsetPaginatedResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "start": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "invitations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationInvitation"
            }
          }
        }
      },
      "ListOrganizationInvitationsResponseContent": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationInvitation"
            }
          },
          {
            "$ref": "#/components/schemas/ListOrganizationInvitationsOffsetPaginatedResponseContent"
          }
        ]
      },
      "ListOrganizationMemberRolesOffsetPaginatedResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "start": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "total": {
            "type": "number"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role"
            }
          }
        }
      },
      "ListOrganizationMemberRolesResponseContent": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role"
            }
          },
          {
            "$ref": "#/components/schemas/ListOrganizationMemberRolesOffsetPaginatedResponseContent"
          }
        ]
      },
      "ListOrganizationMembersOffsetPaginatedResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "start": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "total": {
            "type": "number"
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationMember"
            }
          }
        }
      },
      "ListOrganizationMembersPaginatedResponseContent": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "next": {
            "type": "string"
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationMember"
            }
          }
        }
      },
      "ListOrganizationMembersResponseContent": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationMember"
            }
          },
          {
            "$ref": "#/components/schemas/ListOrganizationMembersOffsetPaginatedResponseContent"
          },
          {
            "$ref": "#/components/schemas/ListOrganizationMembersPaginatedResponseContent"
          }
        ]
      },
      "ListOrganizationsOffsetPaginatedResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "start": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "total": {
            "type": "number"
          },
          "organizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Organization"
            }
          }
        }
      },
      "ListOrganizationsPaginatedResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "next": {
            "type": "string"
          },
          "organizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Organization"
            }
          }
        }
      },
      "ListOrganizationsResponseContent": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Organization"
            }
          },
          {
            "$ref": "#/components/schemas/ListOrganizationsOffsetPaginatedResponseContent"
          },
          {
            "$ref": "#/components/schemas/ListOrganizationsPaginatedResponseContent"
          }
        ]
      },
      "ListRefreshTokensPaginatedResponseContent": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "tokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RefreshTokenResponseContent"
            }
          },
          "next": {
            "type": "string",
            "description": "A cursor to be used as the \"from\" query parameter for the next page of results."
          }
        }
      },
      "ListRolePermissionsOffsetPaginatedResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "start": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "total": {
            "type": "number"
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionsResponsePayload"
            }
          }
        }
      },
      "ListRolePermissionsResponseContent": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionsResponsePayload"
            }
          },
          {
            "$ref": "#/components/schemas/ListRolePermissionsOffsetPaginatedResponseContent"
          }
        ]
      },
      "ListRoleUsersOffsetPaginatedResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "start": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "total": {
            "type": "number"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleUser"
            }
          }
        }
      },
      "ListRoleUsersPaginatedResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "next": {
            "type": "string"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleUser"
            }
          }
        }
      },
      "ListRoleUsersResponseContent": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleUser"
            }
          },
          {
            "$ref": "#/components/schemas/ListRoleUsersOffsetPaginatedResponseContent"
          },
          {
            "$ref": "#/components/schemas/ListRoleUsersPaginatedResponseContent"
          }
        ]
      },
      "ListRolesOffsetPaginatedResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "start": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "total": {
            "type": "number"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role"
            }
          }
        }
      },
      "ListRolesResponseContent": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role"
            }
          },
          {
            "$ref": "#/components/schemas/ListRolesOffsetPaginatedResponseContent"
          }
        ]
      },
      "ListUserSessionsPaginatedResponseContent": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "sessions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionResponseContent"
            }
          },
          "next": {
            "type": "string",
            "description": "A cursor to be used as the \"from\" query parameter for the next page of results."
          }
        }
      },
      "ListVerifiableCredentialTemplatesPaginatedResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "next": {
            "type": "string",
            "description": "Opaque identifier for use with the <i>from</i> query parameter for the next page of results.<br/>This identifier is valid for 24 hours."
          },
          "templates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VerifiableCredentialTemplateResponse"
            }
          }
        }
      },
      "LogStreamDatadogEnum": {
        "type": "string",
        "enum": [
          "datadog"
        ]
      },
      "LogStreamDatadogRegionEnum": {
        "type": "string",
        "description": "Datadog region",
        "enum": [
          "us",
          "eu",
          "us3",
          "us5"
        ]
      },
      "LogStreamDatadogResponseSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the log stream",
            "format": "log-stream-id"
          },
          "name": {
            "type": "string",
            "description": "log stream name"
          },
          "status": {
            "$ref": "#/components/schemas/LogStreamStatusEnum"
          },
          "type": {
            "$ref": "#/components/schemas/LogStreamDatadogEnum"
          },
          "isPriority": {
            "type": "boolean",
            "description": "True for priority log streams, false for non-priority"
          },
          "filters": {
            "type": "array",
            "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
            "items": {
              "$ref": "#/components/schemas/LogStreamFilter"
            }
          },
          "sink": {
            "$ref": "#/components/schemas/LogStreamDatadogSink"
          }
        }
      },
      "LogStreamDatadogSink": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "datadogApiKey",
          "datadogRegion"
        ],
        "properties": {
          "datadogApiKey": {
            "type": "string",
            "description": "Datadog API Key"
          },
          "datadogRegion": {
            "$ref": "#/components/schemas/LogStreamDatadogRegionEnum"
          }
        }
      },
      "LogStreamEventBridgeResponseSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the log stream",
            "format": "log-stream-id"
          },
          "name": {
            "type": "string",
            "description": "log stream name"
          },
          "status": {
            "$ref": "#/components/schemas/LogStreamStatusEnum"
          },
          "type": {
            "type": "string",
            "enum": [
              "eventbridge"
            ]
          },
          "isPriority": {
            "type": "boolean",
            "description": "True for priority log streams, false for non-priority"
          },
          "filters": {
            "type": "array",
            "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
            "items": {
              "$ref": "#/components/schemas/LogStreamFilter"
            }
          },
          "sink": {
            "$ref": "#/components/schemas/LogStreamEventBridgeSink"
          }
        }
      },
      "LogStreamEventBridgeSink": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "awsAccountId",
          "awsRegion"
        ],
        "properties": {
          "awsAccountId": {
            "type": "string",
            "description": "AWS account ID"
          },
          "awsRegion": {
            "$ref": "#/components/schemas/LogStreamEventBridgeSinkRegionEnum"
          },
          "awsPartnerEventSource": {
            "type": "string",
            "description": "AWS EventBridge partner event source"
          }
        }
      },
      "LogStreamEventBridgeSinkRegionEnum": {
        "type": "string",
        "description": "The region in which the EventBridge event source will be created",
        "enum": [
          "ap-east-1",
          "ap-northeast-1",
          "ap-northeast-2",
          "ap-northeast-3",
          "ap-south-1",
          "ap-southeast-1",
          "ap-southeast-2",
          "ca-central-1",
          "eu-central-1",
          "eu-north-1",
          "eu-west-1",
          "eu-west-2",
          "eu-west-3",
          "me-south-1",
          "sa-east-1",
          "us-gov-east-1",
          "us-gov-west-1",
          "us-east-1",
          "us-east-2",
          "us-west-1",
          "us-west-2"
        ]
      },
      "LogStreamEventGridEnum": {
        "type": "string",
        "enum": [
          "eventgrid"
        ]
      },
      "LogStreamEventGridRegionEnum": {
        "type": "string",
        "description": "Azure Region Name",
        "enum": [
          "australiacentral",
          "australiaeast",
          "australiasoutheast",
          "brazilsouth",
          "canadacentral",
          "canadaeast",
          "centralindia",
          "centralus",
          "eastasia",
          "eastus",
          "eastus2",
          "francecentral",
          "germanywestcentral",
          "japaneast",
          "japanwest",
          "koreacentral",
          "koreasouth",
          "northcentralus",
          "northeurope",
          "norwayeast",
          "southafricanorth",
          "southcentralus",
          "southeastasia",
          "southindia",
          "swedencentral",
          "switzerlandnorth",
          "uaenorth",
          "uksouth",
          "ukwest",
          "westcentralus",
          "westeurope",
          "westindia",
          "westus",
          "westus2"
        ]
      },
      "LogStreamEventGridResponseSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the log stream",
            "format": "log-stream-id"
          },
          "name": {
            "type": "string",
            "description": "log stream name"
          },
          "status": {
            "$ref": "#/components/schemas/LogStreamStatusEnum"
          },
          "type": {
            "$ref": "#/components/schemas/LogStreamEventGridEnum"
          },
          "isPriority": {
            "type": "boolean",
            "description": "True for priority log streams, false for non-priority"
          },
          "filters": {
            "type": "array",
            "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
            "items": {
              "$ref": "#/components/schemas/LogStreamFilter"
            }
          },
          "sink": {
            "$ref": "#/components/schemas/LogStreamEventGridSink"
          }
        }
      },
      "LogStreamEventGridSink": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "azureSubscriptionId",
          "azureRegion",
          "azureResourceGroup"
        ],
        "properties": {
          "azureSubscriptionId": {
            "type": "string",
            "description": "Subscription ID"
          },
          "azureRegion": {
            "$ref": "#/components/schemas/LogStreamEventGridRegionEnum"
          },
          "azureResourceGroup": {
            "type": "string",
            "description": "Resource Group"
          },
          "azurePartnerTopic": {
            "type": "string",
            "description": "Partner Topic"
          }
        }
      },
      "LogStreamFilter": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "type": {
            "$ref": "#/components/schemas/LogStreamFilterTypeEnum"
          },
          "name": {
            "$ref": "#/components/schemas/LogStreamFilterGroupNameEnum"
          }
        }
      },
      "LogStreamFilterGroupNameEnum": {
        "type": "string",
        "description": "Category group name",
        "enum": [
          "auth.ancillary.fail",
          "auth.ancillary.success",
          "auth.login.fail",
          "auth.login.notification",
          "auth.login.success",
          "auth.logout.fail",
          "auth.logout.success",
          "auth.signup.fail",
          "auth.signup.success",
          "auth.silent_auth.fail",
          "auth.silent_auth.success",
          "auth.token_exchange.fail",
          "auth.token_exchange.success",
          "management.fail",
          "management.success",
          "scim.event",
          "system.notification",
          "user.fail",
          "user.notification",
          "user.success",
          "actions",
          "other"
        ]
      },
      "LogStreamFilterTypeEnum": {
        "type": "string",
        "description": "Filter type. Currently `category` is the only valid type.",
        "enum": [
          "category"
        ]
      },
      "LogStreamHttpContentFormatEnum": {
        "type": "string",
        "description": "HTTP JSON format",
        "enum": [
          "JSONARRAY",
          "JSONLINES",
          "JSONOBJECT"
        ]
      },
      "LogStreamHttpEnum": {
        "type": "string",
        "enum": [
          "http"
        ]
      },
      "LogStreamHttpResponseSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the log stream",
            "format": "log-stream-id"
          },
          "name": {
            "type": "string",
            "description": "log stream name"
          },
          "status": {
            "$ref": "#/components/schemas/LogStreamStatusEnum"
          },
          "type": {
            "$ref": "#/components/schemas/LogStreamHttpEnum"
          },
          "isPriority": {
            "type": "boolean",
            "description": "True for priority log streams, false for non-priority"
          },
          "filters": {
            "type": "array",
            "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
            "items": {
              "$ref": "#/components/schemas/LogStreamFilter"
            }
          },
          "sink": {
            "$ref": "#/components/schemas/LogStreamHttpSink"
          }
        }
      },
      "LogStreamHttpSink": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "httpEndpoint"
        ],
        "properties": {
          "httpAuthorization": {
            "type": "string",
            "description": "HTTP Authorization header"
          },
          "httpContentFormat": {
            "$ref": "#/components/schemas/LogStreamHttpContentFormatEnum"
          },
          "httpContentType": {
            "type": "string",
            "description": "HTTP Content-Type header"
          },
          "httpEndpoint": {
            "type": "string",
            "description": "HTTP endpoint"
          },
          "httpCustomHeaders": {
            "type": "array",
            "description": "custom HTTP headers",
            "items": {
              "$ref": "#/components/schemas/HttpCustomHeader"
            }
          }
        }
      },
      "LogStreamMixpanelEnum": {
        "type": "string",
        "enum": [
          "mixpanel"
        ]
      },
      "LogStreamMixpanelRegionEnum": {
        "type": "string",
        "description": "Mixpanel Region",
        "enum": [
          "us",
          "eu"
        ]
      },
      "LogStreamMixpanelResponseSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the log stream",
            "format": "log-stream-id"
          },
          "name": {
            "type": "string",
            "description": "log stream name"
          },
          "status": {
            "$ref": "#/components/schemas/LogStreamStatusEnum"
          },
          "type": {
            "$ref": "#/components/schemas/LogStreamMixpanelEnum"
          },
          "isPriority": {
            "type": "boolean",
            "description": "True for priority log streams, false for non-priority"
          },
          "filters": {
            "type": "array",
            "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
            "items": {
              "$ref": "#/components/schemas/LogStreamFilter"
            }
          },
          "sink": {
            "$ref": "#/components/schemas/LogStreamMixpanelSink"
          }
        }
      },
      "LogStreamMixpanelSink": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "mixpanelRegion",
          "mixpanelProjectId",
          "mixpanelServiceAccountUsername",
          "mixpanelServiceAccountPassword"
        ],
        "properties": {
          "mixpanelRegion": {
            "$ref": "#/components/schemas/LogStreamMixpanelRegionEnum"
          },
          "mixpanelProjectId": {
            "type": "string",
            "description": "Mixpanel Project Id"
          },
          "mixpanelServiceAccountUsername": {
            "type": "string",
            "description": "Mixpanel Service Account Username"
          },
          "mixpanelServiceAccountPassword": {
            "type": "string",
            "description": "Mixpanel Service Account Password"
          }
        }
      },
      "LogStreamMixpanelSinkPatch": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "mixpanelRegion",
          "mixpanelProjectId",
          "mixpanelServiceAccountUsername"
        ],
        "properties": {
          "mixpanelRegion": {
            "$ref": "#/components/schemas/LogStreamMixpanelRegionEnum"
          },
          "mixpanelProjectId": {
            "type": "string",
            "description": "Mixpanel Project Id"
          },
          "mixpanelServiceAccountUsername": {
            "type": "string",
            "description": "Mixpanel Service Account Username"
          },
          "mixpanelServiceAccountPassword": {
            "type": "string",
            "description": "Mixpanel Service Account Password"
          }
        }
      },
      "LogStreamResponseSchema": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/LogStreamHttpResponseSchema"
          },
          {
            "$ref": "#/components/schemas/LogStreamEventBridgeResponseSchema"
          },
          {
            "$ref": "#/components/schemas/LogStreamEventGridResponseSchema"
          },
          {
            "$ref": "#/components/schemas/LogStreamDatadogResponseSchema"
          },
          {
            "$ref": "#/components/schemas/LogStreamSplunkResponseSchema"
          },
          {
            "$ref": "#/components/schemas/LogStreamSumoResponseSchema"
          },
          {
            "$ref": "#/components/schemas/LogStreamSegmentResponseSchema"
          },
          {
            "$ref": "#/components/schemas/LogStreamMixpanelResponseSchema"
          }
        ]
      },
      "LogStreamSegmentEnum": {
        "type": "string",
        "enum": [
          "segment"
        ]
      },
      "LogStreamSegmentResponseSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the log stream",
            "format": "log-stream-id"
          },
          "name": {
            "type": "string",
            "description": "log stream name"
          },
          "status": {
            "$ref": "#/components/schemas/LogStreamStatusEnum"
          },
          "type": {
            "$ref": "#/components/schemas/LogStreamSegmentEnum"
          },
          "isPriority": {
            "type": "boolean",
            "description": "True for priority log streams, false for non-priority"
          },
          "filters": {
            "type": "array",
            "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
            "items": {
              "$ref": "#/components/schemas/LogStreamFilter"
            }
          },
          "sink": {
            "$ref": "#/components/schemas/LogStreamSegmentSinkWriteKey"
          }
        }
      },
      "LogStreamSegmentSink": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "segmentWriteKey": {
            "type": "string",
            "description": "Segment write key"
          }
        }
      },
      "LogStreamSegmentSinkWriteKey": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "segmentWriteKey"
        ],
        "properties": {
          "segmentWriteKey": {
            "type": "string",
            "description": "Segment write key"
          }
        }
      },
      "LogStreamSinkPatch": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/LogStreamHttpSink"
          },
          {
            "$ref": "#/components/schemas/LogStreamDatadogSink"
          },
          {
            "$ref": "#/components/schemas/LogStreamSplunkSink"
          },
          {
            "$ref": "#/components/schemas/LogStreamSumoSink"
          },
          {
            "$ref": "#/components/schemas/LogStreamSegmentSink"
          },
          {
            "$ref": "#/components/schemas/LogStreamMixpanelSinkPatch"
          }
        ]
      },
      "LogStreamSplunkEnum": {
        "type": "string",
        "enum": [
          "splunk"
        ]
      },
      "LogStreamSplunkResponseSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the log stream",
            "format": "log-stream-id"
          },
          "name": {
            "type": "string",
            "description": "log stream name"
          },
          "status": {
            "$ref": "#/components/schemas/LogStreamStatusEnum"
          },
          "type": {
            "$ref": "#/components/schemas/LogStreamSplunkEnum"
          },
          "isPriority": {
            "type": "boolean",
            "description": "True for priority log streams, false for non-priority"
          },
          "filters": {
            "type": "array",
            "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
            "items": {
              "$ref": "#/components/schemas/LogStreamFilter"
            }
          },
          "sink": {
            "$ref": "#/components/schemas/LogStreamSplunkSink"
          }
        }
      },
      "LogStreamSplunkSink": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "splunkDomain",
          "splunkToken",
          "splunkPort",
          "splunkSecure"
        ],
        "properties": {
          "splunkDomain": {
            "type": "string",
            "description": "Splunk URL Endpoint"
          },
          "splunkPort": {
            "type": "string",
            "description": "Port"
          },
          "splunkToken": {
            "type": "string",
            "description": "Splunk token"
          },
          "splunkSecure": {
            "type": "boolean",
            "description": "Verify TLS certificate"
          }
        }
      },
      "LogStreamStatusEnum": {
        "type": "string",
        "description": "The status of the log stream. Possible values: `active`, `paused`, `suspended`",
        "enum": [
          "active",
          "paused",
          "suspended"
        ]
      },
      "LogStreamSumoEnum": {
        "type": "string",
        "enum": [
          "sumo"
        ]
      },
      "LogStreamSumoResponseSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the log stream",
            "format": "log-stream-id"
          },
          "name": {
            "type": "string",
            "description": "log stream name"
          },
          "status": {
            "$ref": "#/components/schemas/LogStreamStatusEnum"
          },
          "type": {
            "$ref": "#/components/schemas/LogStreamSumoEnum"
          },
          "isPriority": {
            "type": "boolean",
            "description": "True for priority log streams, false for non-priority"
          },
          "filters": {
            "type": "array",
            "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
            "items": {
              "$ref": "#/components/schemas/LogStreamFilter"
            }
          },
          "sink": {
            "$ref": "#/components/schemas/LogStreamSumoSink"
          }
        }
      },
      "LogStreamSumoSink": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "sumoSourceAddress"
        ],
        "properties": {
          "sumoSourceAddress": {
            "type": "string",
            "description": "HTTP Source Address"
          }
        }
      },
      "MdlPresentationProperties": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "family_name": {
            "type": "boolean",
            "description": "Family Name"
          },
          "given_name": {
            "type": "boolean",
            "description": "Given Name"
          },
          "birth_date": {
            "type": "boolean",
            "description": "Birth Date"
          },
          "issue_date": {
            "type": "boolean",
            "description": "Issue Date"
          },
          "expiry_date": {
            "type": "boolean",
            "description": "Expiry Date"
          },
          "issuing_country": {
            "type": "boolean",
            "description": "Issuing Country"
          },
          "issuing_authority": {
            "type": "boolean",
            "description": "Issuing Authority"
          },
          "portrait": {
            "type": "boolean",
            "description": "Portrait"
          },
          "driving_privileges": {
            "type": "boolean",
            "description": "Driving Privileges"
          },
          "resident_address": {
            "type": "boolean",
            "description": "Resident Address"
          },
          "portrait_capture_date": {
            "type": "boolean",
            "description": "Portrait Capture Date"
          },
          "age_in_years": {
            "type": "boolean",
            "description": "Age in Years"
          },
          "age_birth_year": {
            "type": "boolean",
            "description": "Age Birth Year"
          },
          "issuing_jurisdiction": {
            "type": "boolean",
            "description": "Issuing Jurisdiction"
          },
          "nationality": {
            "type": "boolean",
            "description": "Nationality"
          },
          "resident_city": {
            "type": "boolean",
            "description": "Resident City"
          },
          "resident_state": {
            "type": "boolean",
            "description": "Resident State"
          },
          "resident_postal_code": {
            "type": "boolean",
            "description": "Resident Postal Code"
          },
          "resident_country": {
            "type": "boolean",
            "description": "Resident Country"
          },
          "family_name_national_character": {
            "type": "boolean",
            "description": "Family Name National Character"
          },
          "given_name_national_character": {
            "type": "boolean",
            "description": "Given Name National Character"
          }
        }
      },
      "MdlPresentationRequest": {
        "type": "object",
        "description": "A simplified presentation request",
        "additionalProperties": false,
        "required": [
          "org.iso.18013.5.1.mDL"
        ],
        "properties": {
          "org.iso.18013.5.1.mDL": {
            "$ref": "#/components/schemas/MdlPresentationRequestProperties"
          }
        }
      },
      "MdlPresentationRequestProperties": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "org.iso.18013.5.1"
        ],
        "properties": {
          "org.iso.18013.5.1": {
            "$ref": "#/components/schemas/MdlPresentationProperties"
          }
        }
      },
      "NativeSocialLogin": {
        "type": "object",
        "description": "Configure native social settings",
        "additionalProperties": false,
        "properties": {
          "apple": {
            "$ref": "#/components/schemas/NativeSocialLoginApple"
          },
          "facebook": {
            "$ref": "#/components/schemas/NativeSocialLoginFacebook"
          },
          "google": {
            "$ref": "#/components/schemas/NativeSocialLoginGoogle"
          }
        }
      },
      "NativeSocialLoginApple": {
        "type": "object",
        "description": "Native Social Login support for the Apple connection",
        "additionalProperties": false,
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Determine whether or not to allow signing in natively using an Apple authorization code",
            "default": false
          }
        }
      },
      "NativeSocialLoginFacebook": {
        "type": "object",
        "description": "Native Social Login support for the Facebook connection",
        "additionalProperties": false,
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Determine whether or not to allow signing in natively using Facebook",
            "default": false
          }
        }
      },
      "NativeSocialLoginGoogle": {
        "type": "object",
        "description": "Native Social Login support for the google-oauth2 connection",
        "additionalProperties": false,
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Determine whether or not to allow signing in natively using a Google ID token",
            "default": false
          }
        }
      },
      "NetworkACLMatchIpv4Cidr": {
        "type": "string",
        "oneOf": [
          {
            "type": "string",
            "format": "ipv4"
          },
          {
            "type": "string",
            "format": "cidr"
          }
        ]
      },
      "NetworkACLMatchIpv6Cidr": {
        "type": "string",
        "oneOf": [
          {
            "type": "string",
            "format": "ipv6"
          },
          {
            "type": "string",
            "format": "ipv6_cidr"
          }
        ]
      },
      "NetworkAclAction": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "block": {
            "$ref": "#/components/schemas/NetworkAclActionBlockEnum"
          },
          "allow": {
            "$ref": "#/components/schemas/NetworkAclActionAllowEnum"
          },
          "log": {
            "$ref": "#/components/schemas/NetworkAclActionLogEnum"
          },
          "redirect": {
            "$ref": "#/components/schemas/NetworkAclActionRedirectEnum"
          },
          "redirect_uri": {
            "type": "string",
            "description": "The URI to which the match or not_match requests will be routed",
            "minLength": 1,
            "maxLength": 2000
          }
        }
      },
      "NetworkAclActionAllowEnum": {
        "type": "boolean",
        "description": "Indicates the rule will allow requests that either match or not_match specific criteria",
        "enum": [
          true
        ]
      },
      "NetworkAclActionBlockEnum": {
        "type": "boolean",
        "description": "Indicates the rule will block requests that either match or not_match specific criteria",
        "enum": [
          true
        ]
      },
      "NetworkAclActionLogEnum": {
        "type": "boolean",
        "description": "Indicates the rule will log requests that either match or not_match specific criteria",
        "enum": [
          true
        ]
      },
      "NetworkAclActionRedirectEnum": {
        "type": "boolean",
        "description": "Indicates the rule will redirect requests that either match or not_match specific criteria",
        "enum": [
          true
        ]
      },
      "NetworkAclMatch": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "asns": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "geo_country_codes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "geo_subdivision_codes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ipv4_cidrs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NetworkACLMatchIpv4Cidr"
            }
          },
          "ipv6_cidrs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NetworkACLMatchIpv6Cidr"
            }
          },
          "ja3_fingerprints": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ja4_fingerprints": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "user_agents": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "NetworkAclRule": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "action",
          "scope"
        ],
        "properties": {
          "action": {
            "$ref": "#/components/schemas/NetworkAclAction"
          },
          "match": {
            "$ref": "#/components/schemas/NetworkAclMatch"
          },
          "not_match": {
            "$ref": "#/components/schemas/NetworkAclMatch"
          },
          "scope": {
            "$ref": "#/components/schemas/NetworkAclRuleScopeEnum"
          }
        }
      },
      "NetworkAclRuleScopeEnum": {
        "type": "string",
        "description": "Identifies the origin of the request as the Management API (management), Authentication API (authentication), or either (tenant)",
        "enum": [
          "management",
          "authentication",
          "tenant"
        ]
      },
      "NetworkAclsResponseContent": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "priority": {
            "type": "number"
          },
          "rule": {
            "$ref": "#/components/schemas/NetworkAclRule"
          },
          "created_at": {
            "type": "string",
            "description": "The timestamp when the Network ACL Configuration was created"
          },
          "updated_at": {
            "type": "string",
            "description": "The timestamp when the Network ACL Configuration was last updated"
          }
        }
      },
      "Organization": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "id": {
            "type": "string",
            "description": "Organization identifier.",
            "format": "organization-id"
          },
          "name": {
            "type": "string",
            "description": "The name of this organization.",
            "default": "organization-1",
            "minLength": 1,
            "maxLength": 50,
            "format": "organization-name"
          },
          "display_name": {
            "type": "string",
            "description": "Friendly name of this organization.",
            "default": "Acme Users",
            "minLength": 1,
            "maxLength": 255
          },
          "branding": {
            "$ref": "#/components/schemas/OrganizationBranding"
          },
          "metadata": {
            "$ref": "#/components/schemas/OrganizationMetadata"
          },
          "token_quota": {
            "$ref": "#/components/schemas/TokenQuota"
          }
        }
      },
      "OrganizationBranding": {
        "type": "object",
        "description": "Theme defines how to style the login pages.",
        "additionalProperties": false,
        "properties": {
          "logo_url": {
            "type": "string",
            "description": "URL of logo to display on login page.",
            "format": "strict-https-uri-or-null"
          },
          "colors": {
            "$ref": "#/components/schemas/OrganizationBrandingColors"
          }
        }
      },
      "OrganizationBrandingColors": {
        "type": "object",
        "description": "Color scheme used to customize the login pages.",
        "additionalProperties": false,
        "required": [
          "primary",
          "page_background"
        ],
        "properties": {
          "primary": {
            "type": "string",
            "description": "HEX Color for primary elements.",
            "format": "html-color"
          },
          "page_background": {
            "type": "string",
            "description": "HEX Color for background.",
            "format": "html-color"
          }
        }
      },
      "OrganizationClientGrant": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the client grant."
          },
          "client_id": {
            "type": "string",
            "description": "ID of the client."
          },
          "audience": {
            "type": "string",
            "description": "The audience (API identifier) of this client grant",
            "minLength": 1
          },
          "scope": {
            "type": "array",
            "description": "Scopes allowed for this client grant.",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "organization_usage": {
            "$ref": "#/components/schemas/OrganizationUsageEnum"
          },
          "allow_any_organization": {
            "type": "boolean",
            "description": "If enabled, any organization can be used with this grant. If disabled (default), the grant must be explicitly assigned to the desired organizations."
          }
        }
      },
      "OrganizationConnection": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "connection_id": {
            "type": "string",
            "description": "ID of the connection."
          },
          "assign_membership_on_login": {
            "type": "boolean",
            "description": "When true, all users that log in with this connection will be automatically granted membership in the organization. When false, users must be granted membership in the organization before logging in with this connection."
          },
          "show_as_button": {
            "type": "boolean",
            "description": "Determines whether a connection should be displayed on this organization’s login prompt. Only applicable for enterprise connections. Default: true."
          },
          "is_signup_enabled": {
            "type": "boolean",
            "description": "Determines whether organization signup should be enabled for this organization connection. Only applicable for database connections. Default: false."
          },
          "connection": {
            "$ref": "#/components/schemas/OrganizationConnectionInformation"
          }
        }
      },
      "OrganizationConnectionInformation": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the enabled connection."
          },
          "strategy": {
            "type": "string",
            "description": "The strategy of the enabled connection."
          }
        }
      },
      "OrganizationEnabledConnection": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "connection_id": {
            "type": "string",
            "description": "ID of the connection."
          },
          "assign_membership_on_login": {
            "type": "boolean",
            "description": "When true, all users that log in with this connection will be automatically granted membership in the organization. When false, users must be granted membership in the organization before logging in with this connection."
          },
          "show_as_button": {
            "type": "boolean",
            "description": "Determines whether a connection should be displayed on this organization’s login prompt. Only applicable for enterprise connections. Default: true."
          },
          "is_signup_enabled": {
            "type": "boolean",
            "description": "Determines whether organization signup should be enabled for this organization connection. Only applicable for database connections. Default: false."
          },
          "connection": {
            "$ref": "#/components/schemas/OrganizationConnectionInformation"
          }
        }
      },
      "OrganizationInvitation": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the user invitation.",
            "default": "uinv_0000000000000001",
            "format": "user-invitation-id"
          },
          "organization_id": {
            "type": "string",
            "description": "Organization identifier.",
            "format": "organization-id"
          },
          "inviter": {
            "$ref": "#/components/schemas/OrganizationInvitationInviter"
          },
          "invitee": {
            "$ref": "#/components/schemas/OrganizationInvitationInvitee"
          },
          "invitation_url": {
            "type": "string",
            "description": "The invitation url to be send to the invitee.",
            "default": "https://mycompany.org/login?invitation=f81dWWYW6gzGGicxT8Ha0txBkGNcAcYr&organization=org_0000000000000001&organization_name=acme",
            "format": "strict-https-uri"
          },
          "created_at": {
            "type": "string",
            "description": "The ISO 8601 formatted timestamp representing the creation time of the invitation.",
            "default": "2020-08-20T19:10:06.299Z",
            "format": "date-time"
          },
          "expires_at": {
            "type": "string",
            "description": "The ISO 8601 formatted timestamp representing the expiration time of the invitation.",
            "default": "2020-08-27T19:10:06.299Z",
            "format": "date-time"
          },
          "client_id": {
            "type": "string",
            "description": "Auth0 client ID. Used to resolve the application's login initiation endpoint.",
            "default": "AaiyAPdpYdesoKnqjj8HJqRn4T5titww",
            "format": "client-id"
          },
          "connection_id": {
            "type": "string",
            "description": "The id of the connection to force invitee to authenticate with.",
            "default": "con_0000000000000001",
            "format": "connection-id"
          },
          "app_metadata": {
            "$ref": "#/components/schemas/AppMetadata"
          },
          "user_metadata": {
            "$ref": "#/components/schemas/UserMetadata"
          },
          "roles": {
            "type": "array",
            "description": "List of roles IDs to associated with the user.",
            "items": {
              "type": "string",
              "format": "role-id"
            }
          },
          "ticket_id": {
            "type": "string",
            "description": "The id of the invitation ticket",
            "format": "ticket-id"
          }
        }
      },
      "OrganizationInvitationInvitee": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "The invitee's email.",
            "default": "john.doe@gmail.com",
            "format": "email"
          }
        }
      },
      "OrganizationInvitationInviter": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The inviter's name.",
            "default": "Jane Doe",
            "minLength": 1,
            "maxLength": 300
          }
        }
      },
      "OrganizationMember": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "user_id": {
            "type": "string",
            "description": "ID of this user."
          },
          "picture": {
            "type": "string",
            "description": "URL to a picture for this user."
          },
          "name": {
            "type": "string",
            "description": "Name of this user."
          },
          "email": {
            "type": "string",
            "description": "Email address of this user.",
            "default": "john.doe@gmail.com",
            "format": "email"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationMemberRole"
            }
          }
        }
      },
      "OrganizationMemberRole": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "ID for this role."
          },
          "name": {
            "type": "string",
            "description": "Name of this role."
          }
        }
      },
      "OrganizationMetadata": {
        "type": "object",
        "description": "Metadata associated with the organization, in the form of an object with string values (max 255 chars). Maximum of 25 metadata properties allowed.",
        "additionalProperties": true
      },
      "OrganizationUsageEnum": {
        "type": "string",
        "description": "Defines whether organizations can be used with client credentials exchanges for this grant.",
        "enum": [
          "deny",
          "allow",
          "require"
        ]
      },
      "PartialGroupsEnum": {
        "type": "string",
        "enum": [
          "login",
          "login-id",
          "login-password",
          "login-passwordless",
          "signup",
          "signup-id",
          "signup-password",
          "customized-consent"
        ]
      },
      "PatchClientCredentialRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "expires_at": {
            "type": "string",
            "nullable": true,
            "description": "The ISO 8601 formatted date representing the expiration of the credential.",
            "format": "date-time"
          }
        }
      },
      "PatchClientCredentialResponseContent": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the credential. Generated on creation.",
            "default": "cred_1m7sfABoNTTKYwTQ8qt6tX"
          },
          "name": {
            "type": "string",
            "description": "The name given to the credential by the user.",
            "default": ""
          },
          "kid": {
            "type": "string",
            "description": "The key identifier of the credential, generated on creation.",
            "default": "IZSSTECp..."
          },
          "alg": {
            "$ref": "#/components/schemas/ClientCredentialAlgorithmEnum"
          },
          "credential_type": {
            "$ref": "#/components/schemas/ClientCredentialTypeEnum"
          },
          "subject_dn": {
            "type": "string",
            "description": "The X509 certificate's Subject Distinguished Name"
          },
          "thumbprint_sha256": {
            "type": "string",
            "description": "The X509 certificate's SHA256 thumbprint"
          },
          "created_at": {
            "type": "string",
            "description": "The ISO 8601 formatted date the credential was created.",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "The ISO 8601 formatted date the credential was updated.",
            "format": "date-time"
          },
          "expires_at": {
            "type": "string",
            "description": "The ISO 8601 formatted date representing the expiration of the credential.",
            "format": "date-time"
          }
        }
      },
      "PermissionRequestPayload": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "resource_server_identifier",
          "permission_name"
        ],
        "properties": {
          "resource_server_identifier": {
            "type": "string",
            "description": "Resource server (API) identifier that this permission is for."
          },
          "permission_name": {
            "type": "string",
            "description": "Name of this permission."
          }
        }
      },
      "PermissionsResponsePayload": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "resource_server_identifier": {
            "type": "string",
            "description": "Resource server (API) identifier that this permission is for."
          },
          "permission_name": {
            "type": "string",
            "description": "Name of this permission."
          },
          "resource_server_name": {
            "type": "string",
            "description": "Resource server (API) name this permission is for."
          },
          "description": {
            "type": "string",
            "description": "Description of this permission."
          }
        }
      },
      "PostClientCredentialRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "credential_type"
        ],
        "properties": {
          "credential_type": {
            "$ref": "#/components/schemas/ClientCredentialTypeEnum"
          },
          "name": {
            "type": "string",
            "description": "Friendly name for a credential.",
            "default": "",
            "maxLength": 128
          },
          "subject_dn": {
            "type": "string",
            "description": "Subject Distinguished Name. Mutually exclusive with `pem` property. Applies to `cert_subject_dn` credential type.",
            "minLength": 1,
            "maxLength": 256
          },
          "pem": {
            "type": "string",
            "description": "PEM-formatted public key (SPKI and PKCS1) or X509 certificate. Must be JSON escaped.",
            "default": "-----BEGIN PUBLIC KEY-----\r\nMIIBIjANBg...\r\n-----END PUBLIC KEY-----\r\n"
          },
          "alg": {
            "$ref": "#/components/schemas/PublicKeyCredentialAlgorithmEnum"
          },
          "parse_expiry_from_cert": {
            "type": "boolean",
            "description": "Parse expiry from x509 certificate. If true, attempts to parse the expiry date from the provided PEM. Applies to `public_key` credential type.",
            "default": false
          },
          "expires_at": {
            "type": "string",
            "description": "The ISO 8601 formatted date representing the expiration of the credential. If not specified (not recommended), the credential never expires. Applies to `public_key` credential type.",
            "default": "2023-02-07T12:40:17.807Z",
            "format": "date-time"
          }
        }
      },
      "PostClientCredentialResponseContent": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the credential. Generated on creation.",
            "default": "cred_1m7sfABoNTTKYwTQ8qt6tX"
          },
          "name": {
            "type": "string",
            "description": "The name given to the credential by the user.",
            "default": ""
          },
          "kid": {
            "type": "string",
            "description": "The key identifier of the credential, generated on creation.",
            "default": "IZSSTECp..."
          },
          "alg": {
            "$ref": "#/components/schemas/ClientCredentialAlgorithmEnum"
          },
          "credential_type": {
            "$ref": "#/components/schemas/ClientCredentialTypeEnum"
          },
          "subject_dn": {
            "type": "string",
            "description": "The X509 certificate's Subject Distinguished Name"
          },
          "thumbprint_sha256": {
            "type": "string",
            "description": "The X509 certificate's SHA256 thumbprint"
          },
          "created_at": {
            "type": "string",
            "description": "The ISO 8601 formatted date the credential was created.",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "The ISO 8601 formatted date the credential was updated.",
            "format": "date-time"
          },
          "expires_at": {
            "type": "string",
            "description": "The ISO 8601 formatted date representing the expiration of the credential.",
            "format": "date-time"
          }
        }
      },
      "PrivateKeyJWT": {
        "type": "object",
        "description": "Defines `private_key_jwt` client authentication method. If this property is defined, the client is enabled to use the Private Key JWT authentication method.",
        "additionalProperties": false,
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "$ref": "#/components/schemas/PrivateKeyJWTCredentials"
          }
        }
      },
      "PrivateKeyJWTCredentials": {
        "type": "array",
        "description": "A list of unique and previously created credential IDs enabled on the client for Private Key JWT authentication.",
        "items": {
          "$ref": "#/components/schemas/CredentialId"
        }
      },
      "PromptGroupNameEnum": {
        "type": "string",
        "enum": [
          "login",
          "login-id",
          "login-password",
          "login-passwordless",
          "login-email-verification",
          "signup",
          "signup-id",
          "signup-password",
          "phone-identifier-enrollment",
          "phone-identifier-challenge",
          "email-identifier-challenge",
          "reset-password",
          "custom-form",
          "consent",
          "customized-consent",
          "logout",
          "mfa-push",
          "mfa-otp",
          "mfa-voice",
          "mfa-phone",
          "mfa-webauthn",
          "mfa-sms",
          "mfa-email",
          "mfa-recovery-code",
          "mfa",
          "status",
          "device-flow",
          "email-verification",
          "email-otp-challenge",
          "organizations",
          "invitation",
          "common",
          "passkeys",
          "captcha",
          "brute-force-protection"
        ]
      },
      "PromptLanguageEnum": {
        "type": "string",
        "enum": [
          "am",
          "ar",
          "ar-EG",
          "ar-SA",
          "az",
          "bg",
          "bn",
          "bs",
          "ca-ES",
          "cnr",
          "cs",
          "cy",
          "da",
          "de",
          "el",
          "en",
          "en-CA",
          "es",
          "es-419",
          "es-AR",
          "es-MX",
          "et",
          "eu-ES",
          "fa",
          "fi",
          "fr",
          "fr-CA",
          "fr-FR",
          "gl-ES",
          "gu",
          "he",
          "hi",
          "hr",
          "hu",
          "hy",
          "id",
          "is",
          "it",
          "ja",
          "ka",
          "kk",
          "kn",
          "ko",
          "lt",
          "lv",
          "mk",
          "ml",
          "mn",
          "mr",
          "ms",
          "my",
          "nb",
          "nl",
          "nn",
          "no",
          "pa",
          "pl",
          "pt",
          "pt-BR",
          "pt-PT",
          "ro",
          "ru",
          "sk",
          "sl",
          "so",
          "sq",
          "sr",
          "sv",
          "sw",
          "ta",
          "te",
          "th",
          "tl",
          "tr",
          "uk",
          "ur",
          "vi",
          "zgh",
          "zh-CN",
          "zh-HK",
          "zh-TW"
        ]
      },
      "PublicKeyCredential": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "credential_type",
          "pem"
        ],
        "properties": {
          "credential_type": {
            "$ref": "#/components/schemas/PublicKeyCredentialTypeEnum"
          },
          "name": {
            "type": "string",
            "description": "Friendly name for a credential.",
            "default": "",
            "maxLength": 128
          },
          "pem": {
            "type": "string",
            "description": "PEM-formatted public key (SPKI and PKCS1) or X509 certificate. Must be JSON escaped.",
            "default": "-----BEGIN PUBLIC KEY-----\r\nMIIBIjANBg...\r\n-----END PUBLIC KEY-----\r\n"
          },
          "alg": {
            "$ref": "#/components/schemas/PublicKeyCredentialAlgorithmEnum"
          },
          "parse_expiry_from_cert": {
            "type": "boolean",
            "description": "Parse expiry from x509 certificate. If true, attempts to parse the expiry date from the provided PEM. Applies to `public_key` credential type.",
            "default": false
          },
          "expires_at": {
            "type": "string",
            "description": "The ISO 8601 formatted date representing the expiration of the credential. If not specified (not recommended), the credential never expires. Applies to `public_key` credential type.",
            "default": "2023-02-07T12:40:17.807Z",
            "format": "date-time"
          }
        }
      },
      "PublicKeyCredentialAlgorithmEnum": {
        "type": "string",
        "description": "Algorithm which will be used with the credential. Can be one of RS256, RS384, PS256. If not specified, RS256 will be used. Applies to `public_key` credential type.",
        "default": "RS256",
        "enum": [
          "RS256",
          "RS384",
          "PS256"
        ]
      },
      "PublicKeyCredentialTypeEnum": {
        "type": "string",
        "description": "Credential type. Supported types: public_key.",
        "default": "public_key",
        "enum": [
          "public_key"
        ]
      },
      "RefreshTokenDate": {
        "nullable": true,
        "oneOf": [
          {
            "type": "string",
            "description": "The date and time when the refresh token was created",
            "format": "date-time"
          },
          {
            "$ref": "#/components/schemas/RefreshTokenDate"
          }
        ]
      },
      "RefreshTokenDevice": {
        "type": "object",
        "description": "Device used while issuing/exchanging the refresh token",
        "additionalProperties": true,
        "properties": {
          "initial_ip": {
            "type": "string",
            "description": "First IP address associated with the refresh token"
          },
          "initial_asn": {
            "type": "string",
            "description": "First autonomous system number associated with the refresh token"
          },
          "initial_user_agent": {
            "type": "string",
            "description": "First user agent associated with the refresh token"
          },
          "last_ip": {
            "type": "string",
            "description": "Last IP address associated with the refresh token"
          },
          "last_asn": {
            "type": "string",
            "description": "Last autonomous system number associated with the refresh token"
          },
          "last_user_agent": {
            "type": "string",
            "description": "Last user agent associated with the refresh token"
          }
        }
      },
      "RefreshTokenExpirationTypeEnum": {
        "type": "string",
        "description": "Refresh token expiration types, one of: expiring, non-expiring",
        "default": "non-expiring",
        "enum": [
          "expiring",
          "non-expiring"
        ]
      },
      "RefreshTokenResourceServer": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "audience": {
            "type": "string",
            "description": "Resource server ID"
          },
          "scopes": {
            "type": "string",
            "description": "List of scopes for the refresh token"
          }
        }
      },
      "RefreshTokenResponseContent": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the refresh token"
          },
          "user_id": {
            "type": "string",
            "description": "ID of the user which can be used when interacting with other APIs.",
            "default": "auth0|507f1f77bcf86cd799439020"
          },
          "created_at": {
            "$ref": "#/components/schemas/RefreshTokenDate"
          },
          "idle_expires_at": {
            "$ref": "#/components/schemas/RefreshTokenDate"
          },
          "expires_at": {
            "$ref": "#/components/schemas/RefreshTokenDate"
          },
          "device": {
            "$ref": "#/components/schemas/RefreshTokenDevice"
          },
          "client_id": {
            "type": "string",
            "description": "ID of the client application granted with this refresh token"
          },
          "session_id": {
            "$ref": "#/components/schemas/RefreshTokenSessionId"
          },
          "rotating": {
            "type": "boolean",
            "description": "True if the token is a rotating refresh token"
          },
          "resource_servers": {
            "type": "array",
            "description": "A list of the resource server IDs associated to this refresh-token and their granted scopes",
            "items": {
              "$ref": "#/components/schemas/RefreshTokenResourceServer"
            }
          },
          "last_exchanged_at": {
            "$ref": "#/components/schemas/RefreshTokenDate"
          }
        }
      },
      "RefreshTokenRotationTypeEnum": {
        "type": "string",
        "description": "Refresh token rotation types, one of: rotating, non-rotating",
        "default": "non-rotating",
        "enum": [
          "rotating",
          "non-rotating"
        ]
      },
      "RefreshTokenSessionId": {
        "type": "string",
        "nullable": true,
        "description": "ID of the authenticated session used to obtain this refresh-token"
      },
      "Role": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "ID for this role."
          },
          "name": {
            "type": "string",
            "description": "Name of this role."
          },
          "description": {
            "type": "string",
            "description": "Description of this role."
          }
        }
      },
      "RoleUser": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "user_id": {
            "type": "string",
            "description": "ID of this user."
          },
          "picture": {
            "type": "string",
            "description": "URL to a picture for this user."
          },
          "name": {
            "type": "string",
            "description": "Name of this user."
          },
          "email": {
            "type": "string",
            "description": "Email address of this user.",
            "default": "john.doe@gmail.com",
            "format": "email"
          }
        }
      },
      "RotateClientSecretResponseContent": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "client_id": {
            "type": "string",
            "description": "ID of this client.",
            "default": "AaiyAPdpYdesoKnqjj8HJqRn4T5titww"
          },
          "tenant": {
            "type": "string",
            "description": "Name of the tenant this client belongs to.",
            "default": ""
          },
          "name": {
            "type": "string",
            "description": "Name of this client (min length: 1 character, does not allow `<` or `>`).",
            "default": "My application"
          },
          "description": {
            "type": "string",
            "description": "Free text description of this client (max length: 140 characters).",
            "default": ""
          },
          "global": {
            "type": "boolean",
            "description": "Whether this is your global 'All Applications' client representing legacy tenant settings (true) or a regular client (false).",
            "default": false
          },
          "client_secret": {
            "type": "string",
            "description": "Client secret (which you must not make public).",
            "default": "MG_TNT2ver-SylNat-_VeMmd-4m0Waba0jr1troztBniSChEw0glxEmgEi2Kw40H"
          },
          "app_type": {
            "type": "string",
            "description": "Type of client used to determine which settings are applicable. Can be `spa`, `native`, `non_interactive`, or `regular_web`.",
            "default": ""
          },
          "logo_uri": {
            "type": "string",
            "description": "URL of the logo to display for this client. Recommended size is 150x150 pixels."
          },
          "is_first_party": {
            "type": "boolean",
            "description": "Whether this client a first party client (true) or not (false).",
            "default": false
          },
          "oidc_conformant": {
            "type": "boolean",
            "description": "Whether this client conforms to <a href='https://auth0.com/docs/api-auth/tutorials/adoption'>strict OIDC specifications</a> (true) or uses legacy features (false).",
            "default": false
          },
          "callbacks": {
            "type": "array",
            "description": "Comma-separated list of URLs whitelisted for Auth0 to use as a callback to the client after authentication.",
            "items": {
              "type": "string"
            }
          },
          "allowed_origins": {
            "type": "array",
            "description": "Comma-separated list of URLs allowed to make requests from JavaScript to Auth0 API (typically used with CORS). By default, all your callback URLs will be allowed. This field allows you to enter other origins if necessary. You can also use wildcards at the subdomain level (e.g., https://*.contoso.com). Query strings and hash information are not taken into account when validating these URLs.",
            "items": {
              "type": "string"
            }
          },
          "web_origins": {
            "type": "array",
            "description": "Comma-separated list of allowed origins for use with <a href='https://auth0.com/docs/cross-origin-authentication'>Cross-Origin Authentication</a>, <a href='https://auth0.com/docs/flows/concepts/device-auth'>Device Flow</a>, and <a href='https://auth0.com/docs/protocols/oauth2#how-response-mode-works'>web message response mode</a>.",
            "items": {
              "type": "string"
            }
          },
          "client_aliases": {
            "type": "array",
            "description": "List of audiences/realms for SAML protocol. Used by the wsfed addon.",
            "items": {
              "type": "string"
            }
          },
          "allowed_clients": {
            "type": "array",
            "description": "List of allow clients and API ids that are allowed to make delegation requests. Empty means all all your clients are allowed.",
            "items": {
              "type": "string"
            }
          },
          "allowed_logout_urls": {
            "type": "array",
            "description": "Comma-separated list of URLs that are valid to redirect to after logout from Auth0. Wildcards are allowed for subdomains.",
            "items": {
              "type": "string"
            }
          },
          "session_transfer": {
            "$ref": "#/components/schemas/ClientSessionTransferConfiguration"
          },
          "oidc_logout": {
            "$ref": "#/components/schemas/ClientOIDCBackchannelLogoutSettings"
          },
          "grant_types": {
            "type": "array",
            "description": "List of grant types supported for this application. Can include `authorization_code`, `implicit`, `refresh_token`, `client_credentials`, `password`, `http://auth0.com/oauth/grant-type/password-realm`, `http://auth0.com/oauth/grant-type/mfa-oob`, `http://auth0.com/oauth/grant-type/mfa-otp`, `http://auth0.com/oauth/grant-type/mfa-recovery-code`, `urn:openid:params:grant-type:ciba`, and `urn:ietf:params:oauth:grant-type:device_code`.",
            "items": {
              "type": "string"
            }
          },
          "jwt_configuration": {
            "$ref": "#/components/schemas/ClientJwtConfiguration"
          },
          "signing_keys": {
            "$ref": "#/components/schemas/ClientSigningKeys"
          },
          "encryption_key": {
            "$ref": "#/components/schemas/ClientEncryptionKey"
          },
          "sso": {
            "type": "boolean",
            "description": "Applies only to SSO clients and determines whether Auth0 will handle Single Sign On (true) or whether the Identity Provider will (false).",
            "default": false
          },
          "sso_disabled": {
            "type": "boolean",
            "description": "Whether Single Sign On is disabled (true) or enabled (true). Defaults to true.",
            "default": false
          },
          "cross_origin_authentication": {
            "type": "boolean",
            "description": "Whether this client can be used to make cross-origin authentication requests (true) or it is not allowed to make such requests (false)."
          },
          "cross_origin_loc": {
            "type": "string",
            "description": "URL of the location in your site where the cross origin verification takes place for the cross-origin auth flow when performing Auth in your own domain instead of Auth0 hosted login page.",
            "format": "url"
          },
          "custom_login_page_on": {
            "type": "boolean",
            "description": "Whether a custom login page is to be used (true) or the default provided login page (false).",
            "default": true
          },
          "custom_login_page": {
            "type": "string",
            "description": "The content (HTML, CSS, JS) of the custom login page.",
            "default": ""
          },
          "custom_login_page_preview": {
            "type": "string",
            "description": "The content (HTML, CSS, JS) of the custom login page. (Used on Previews)",
            "default": ""
          },
          "form_template": {
            "type": "string",
            "description": "HTML form template to be used for WS-Federation.",
            "default": ""
          },
          "addons": {
            "$ref": "#/components/schemas/ClientAddons"
          },
          "token_endpoint_auth_method": {
            "$ref": "#/components/schemas/ClientTokenEndpointAuthMethodEnum"
          },
          "client_metadata": {
            "$ref": "#/components/schemas/ClientMetadata"
          },
          "mobile": {
            "$ref": "#/components/schemas/ClientMobile"
          },
          "initiate_login_uri": {
            "type": "string",
            "description": "Initiate login uri, must be https",
            "format": "absolute-https-uri-or-empty"
          },
          "native_social_login": {},
          "refresh_token": {
            "$ref": "#/components/schemas/ClientRefreshTokenConfiguration"
          },
          "default_organization": {
            "$ref": "#/components/schemas/ClientDefaultOrganization"
          },
          "organization_usage": {
            "$ref": "#/components/schemas/ClientOrganizationUsageEnum"
          },
          "organization_require_behavior": {
            "$ref": "#/components/schemas/ClientOrganizationRequireBehaviorEnum"
          },
          "client_authentication_methods": {
            "$ref": "#/components/schemas/ClientAuthenticationMethod"
          },
          "require_pushed_authorization_requests": {
            "type": "boolean",
            "description": "Makes the use of Pushed Authorization Requests mandatory for this client",
            "default": false
          },
          "require_proof_of_possession": {
            "type": "boolean",
            "description": "Makes the use of Proof-of-Possession mandatory for this client",
            "default": false
          },
          "signed_request_object": {
            "$ref": "#/components/schemas/ClientSignedRequestObjectWithCredentialId"
          },
          "compliance_level": {
            "$ref": "#/components/schemas/ClientComplianceLevelEnum"
          },
          "par_request_expiry": {
            "type": "integer",
            "nullable": true,
            "description": "Specifies how long, in seconds, a Pushed Authorization Request URI remains valid"
          },
          "token_quota": {
            "$ref": "#/components/schemas/TokenQuota"
          }
        }
      },
      "ScreenGroupNameEnum": {
        "type": "string",
        "enum": [
          "login",
          "login-id",
          "login-password",
          "login-passwordless-email-code",
          "login-passwordless-email-link",
          "login-passwordless-sms-otp",
          "login-email-verification",
          "signup",
          "signup-id",
          "signup-password",
          "phone-identifier-enrollment",
          "phone-identifier-challenge",
          "email-identifier-challenge",
          "reset-password-request",
          "reset-password-email",
          "reset-password",
          "reset-password-success",
          "reset-password-error",
          "reset-password-mfa-email-challenge",
          "reset-password-mfa-otp-challenge",
          "reset-password-mfa-phone-challenge",
          "reset-password-mfa-push-challenge-push",
          "reset-password-mfa-recovery-code-challenge",
          "reset-password-mfa-sms-challenge",
          "reset-password-mfa-voice-challenge",
          "reset-password-mfa-webauthn-platform-challenge",
          "reset-password-mfa-webauthn-roaming-challenge",
          "custom-form",
          "consent",
          "customized-consent",
          "logout",
          "logout-complete",
          "logout-aborted",
          "mfa-push-welcome",
          "mfa-push-enrollment-qr",
          "mfa-push-enrollment-code",
          "mfa-push-success",
          "mfa-push-challenge-push",
          "mfa-push-list",
          "mfa-otp-enrollment-qr",
          "mfa-otp-enrollment-code",
          "mfa-otp-challenge",
          "mfa-voice-enrollment",
          "mfa-voice-challenge",
          "mfa-phone-challenge",
          "mfa-phone-enrollment",
          "mfa-webauthn-platform-enrollment",
          "mfa-webauthn-roaming-enrollment",
          "mfa-webauthn-platform-challenge",
          "mfa-webauthn-roaming-challenge",
          "mfa-webauthn-change-key-nickname",
          "mfa-webauthn-enrollment-success",
          "mfa-webauthn-error",
          "mfa-webauthn-not-available-error",
          "mfa-country-codes",
          "mfa-sms-enrollment",
          "mfa-sms-challenge",
          "mfa-sms-list",
          "mfa-email-challenge",
          "mfa-email-list",
          "mfa-recovery-code-enrollment",
          "mfa-recovery-code-challenge-new-code",
          "mfa-recovery-code-challenge",
          "mfa-detect-browser-capabilities",
          "mfa-enroll-result",
          "mfa-login-options",
          "mfa-begin-enroll-options",
          "status",
          "device-code-activation",
          "device-code-activation-allowed",
          "device-code-activation-denied",
          "device-code-confirmation",
          "email-verification-result",
          "email-otp-challenge",
          "organization-selection",
          "organization-picker",
          "accept-invitation",
          "redeem-ticket",
          "passkey-enrollment",
          "passkey-enrollment-local",
          "interstitial-captcha",
          "brute-force-protection-unblock",
          "brute-force-protection-unblock-success",
          "brute-force-protection-unblock-failure"
        ]
      },
      "SessionAuthenticationSignal": {
        "type": "object",
        "description": "Authentication signal details",
        "additionalProperties": true,
        "properties": {
          "name": {
            "type": "string",
            "description": "One of: \"federated\", \"passkey\", \"pwd\", \"sms\", \"email\", \"mfa\", \"mock\" or a custom method denoted by a URL"
          },
          "timestamp": {
            "$ref": "#/components/schemas/SessionDate"
          },
          "^type$": {
            "type": "string",
            "description": "A specific MFA factor. Only present when \"name\" is set to \"mfa\""
          }
        }
      },
      "SessionAuthenticationSignals": {
        "type": "object",
        "description": "Details about authentication signals obtained during the login flow",
        "additionalProperties": true,
        "properties": {
          "methods": {
            "type": "array",
            "description": "Contains the authentication methods a user has completed during their session",
            "items": {
              "$ref": "#/components/schemas/SessionAuthenticationSignal"
            }
          }
        }
      },
      "SessionClientMetadata": {
        "type": "object",
        "description": "Client details",
        "additionalProperties": true,
        "properties": {
          "client_id": {
            "type": "string",
            "description": "ID of client for the session"
          }
        }
      },
      "SessionDate": {
        "nullable": true,
        "oneOf": [
          {
            "type": "string",
            "description": "The date and time when the session was created",
            "format": "date-time"
          },
          {
            "type": "object",
            "description": "The date and time when the session was created",
            "additionalProperties": true
          }
        ]
      },
      "SessionDeviceMetadata": {
        "type": "object",
        "description": "Metadata related to the device used in the session",
        "additionalProperties": true,
        "properties": {
          "initial_user_agent": {
            "type": "string",
            "description": "First user agent of the device from which this user logged in"
          },
          "initial_ip": {
            "$ref": "#/components/schemas/SessionIp"
          },
          "initial_asn": {
            "type": "string",
            "description": "First autonomous system number associated with this session"
          },
          "last_user_agent": {
            "type": "string",
            "description": "Last user agent of the device from which this user logged in"
          },
          "last_ip": {
            "$ref": "#/components/schemas/SessionIp"
          },
          "last_asn": {
            "type": "string",
            "description": "Last autonomous system number from which this user logged in"
          }
        }
      },
      "SessionIp": {
        "nullable": true,
        "description": "First IP address associated with this session",
        "type": "string"
      },
      "SessionResponseContent": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the session"
          },
          "user_id": {
            "type": "string",
            "description": "ID of the user which can be used when interacting with other APIs."
          },
          "created_at": {
            "$ref": "#/components/schemas/SessionDate"
          },
          "updated_at": {
            "$ref": "#/components/schemas/SessionDate"
          },
          "authenticated_at": {
            "$ref": "#/components/schemas/SessionDate"
          },
          "idle_expires_at": {
            "$ref": "#/components/schemas/SessionDate"
          },
          "expires_at": {
            "$ref": "#/components/schemas/SessionDate"
          },
          "last_interacted_at": {
            "$ref": "#/components/schemas/SessionDate"
          },
          "device": {
            "$ref": "#/components/schemas/SessionDeviceMetadata"
          },
          "clients": {
            "type": "array",
            "description": "List of client details for the session",
            "items": {
              "$ref": "#/components/schemas/SessionClientMetadata"
            }
          },
          "authentication": {
            "$ref": "#/components/schemas/SessionAuthenticationSignals"
          }
        }
      },
      "SetCustomSigningKeysRequestBody": {
        "type": "object",
        "description": "JWKS representing an array of custom public signing keys.",
        "additionalProperties": false,
        "required": [
          "keys"
        ],
        "properties": {
          "keys": {
            "type": "array",
            "description": "An array of custom public signing keys.",
            "items": {
              "$ref": "#/components/schemas/CustomSigningKeyJWK"
            }
          }
        }
      },
      "SetCustomSigningKeysResponseContent": {
        "type": "object",
        "description": "JWKS representing an array of custom public signing keys.",
        "additionalProperties": false,
        "properties": {
          "keys": {
            "type": "array",
            "description": "An array of custom public signing keys.",
            "items": {
              "$ref": "#/components/schemas/CustomSigningKeyJWK"
            }
          }
        }
      },
      "SetEmailTemplateRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "template",
          "body",
          "from",
          "subject",
          "syntax",
          "enabled"
        ],
        "properties": {
          "template": {
            "$ref": "#/components/schemas/EmailTemplateNameEnum"
          },
          "body": {
            "type": "string",
            "nullable": true,
            "description": "Body of the email template."
          },
          "from": {
            "type": "string",
            "nullable": true,
            "description": "Senders `from` email address.",
            "default": "sender@auth0.com"
          },
          "resultUrl": {
            "type": "string",
            "nullable": true,
            "description": "URL to redirect the user to after a successful action."
          },
          "subject": {
            "type": "string",
            "nullable": true,
            "description": "Subject line of the email."
          },
          "syntax": {
            "type": "string",
            "nullable": true,
            "description": "Syntax of the template body.",
            "default": "liquid"
          },
          "urlLifetimeInSeconds": {
            "type": "number",
            "nullable": true,
            "description": "Lifetime in seconds that the link within the email will be valid for."
          },
          "includeEmailInRedirect": {
            "type": "boolean",
            "description": "Whether the `reset_email` and `verify_email` templates should include the user's email address as the `email` parameter in the returnUrl (true) or whether no email address should be included in the redirect (false). Defaults to true."
          },
          "enabled": {
            "type": "boolean",
            "nullable": true,
            "description": "Whether the template is enabled (true) or disabled (false)."
          }
        }
      },
      "SetEmailTemplateResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "template",
          "body",
          "from",
          "subject",
          "syntax",
          "enabled"
        ],
        "properties": {
          "template": {
            "$ref": "#/components/schemas/EmailTemplateNameEnum"
          },
          "body": {
            "type": "string",
            "nullable": true,
            "description": "Body of the email template."
          },
          "from": {
            "type": "string",
            "nullable": true,
            "description": "Senders `from` email address.",
            "default": "sender@auth0.com"
          },
          "resultUrl": {
            "type": "string",
            "nullable": true,
            "description": "URL to redirect the user to after a successful action."
          },
          "subject": {
            "type": "string",
            "nullable": true,
            "description": "Subject line of the email."
          },
          "syntax": {
            "type": "string",
            "nullable": true,
            "description": "Syntax of the template body.",
            "default": "liquid"
          },
          "urlLifetimeInSeconds": {
            "type": "number",
            "nullable": true,
            "description": "Lifetime in seconds that the link within the email will be valid for."
          },
          "includeEmailInRedirect": {
            "type": "boolean",
            "description": "Whether the `reset_email` and `verify_email` templates should include the user's email address as the `email` parameter in the returnUrl (true) or whether no email address should be included in the redirect (false). Defaults to true."
          },
          "enabled": {
            "type": "boolean",
            "nullable": true,
            "description": "Whether the template is enabled (true) or disabled (false)."
          }
        }
      },
      "SetNetworkAclRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "description",
          "active",
          "priority",
          "rule"
        ],
        "properties": {
          "description": {
            "type": "string",
            "maxLength": 255
          },
          "active": {
            "type": "boolean",
            "description": "Indicates whether or not this access control list is actively being used"
          },
          "priority": {
            "type": "number",
            "description": "Indicates the order in which the ACL will be evaluated relative to other ACL rules."
          },
          "rule": {
            "$ref": "#/components/schemas/NetworkAclRule"
          }
        }
      },
      "SetNetworkAclsResponseContent": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "priority": {
            "type": "number"
          },
          "rule": {
            "$ref": "#/components/schemas/NetworkAclRule"
          },
          "created_at": {
            "type": "string",
            "description": "The timestamp when the Network ACL Configuration was created"
          },
          "updated_at": {
            "type": "string",
            "description": "The timestamp when the Network ACL Configuration was last updated"
          }
        }
      },
      "SetPartialsRequestBody": {
        "type": "object",
        "description": "An object containing template partials for a group of screens.",
        "additionalProperties": true
      },
      "SetsCustomTextsByLanguageRequestBody": {
        "type": "object",
        "description": "An object containing custom dictionaries for a group of screens.",
        "additionalProperties": true
      },
      "SigningAlgorithmEnum": {
        "type": "string",
        "description": "Algorithm used to sign JWTs. Can be `HS256` or `RS256`. `PS256` available via addon.",
        "default": "HS256",
        "enum": [
          "HS256",
          "RS256",
          "RS512",
          "PS256"
        ]
      },
      "TestActionPayload": {
        "type": "object",
        "description": "The payload for the action.",
        "additionalProperties": true
      },
      "TestActionRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "payload"
        ],
        "properties": {
          "payload": {
            "$ref": "#/components/schemas/TestActionPayload"
          }
        }
      },
      "TestActionResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "payload": {
            "$ref": "#/components/schemas/TestActionResultPayload"
          }
        }
      },
      "TestActionResultPayload": {
        "type": "object",
        "description": "The resulting payload after an action was executed.",
        "additionalProperties": true
      },
      "TestCustomDomainResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "success"
        ],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Result of the operation."
          },
          "message": {
            "type": "string",
            "description": "Message describing the operation status."
          }
        }
      },
      "TestEventDataContent": {
        "type": "object",
        "description": "The raw payload of the test event.",
        "additionalProperties": true
      },
      "TestEventRequestBody": {
        "type": "object",
        "description": "The payload for sending a test event to an event stream.",
        "additionalProperties": false,
        "required": [
          "event_type"
        ],
        "properties": {
          "event_type": {
            "type": "string",
            "description": "The type of event this test event represents.",
            "maxLength": 33,
            "enum": [
              "user.created",
              "user.deleted",
              "user.updated",
              "organization.created",
              "organization.updated",
              "organization.deleted",
              "organization.member.added",
              "organization.member.deleted",
              "organization.member.role.assigned",
              "organization.member.role.deleted",
              "organization.connection.added",
              "organization.connection.updated",
              "organization.connection.removed"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/TestEventDataContent"
          }
        }
      },
      "TestEventResponseContent": {
        "type": "object",
        "description": "Metadata about a specific attempt to deliver an event",
        "additionalProperties": false,
        "required": [
          "id",
          "event_stream_id",
          "status",
          "event_type",
          "attempts"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the delivery"
          },
          "event_stream_id": {
            "type": "string",
            "description": "Unique identifier for the event stream.",
            "minLength": 26,
            "maxLength": 26,
            "format": "event-stream-id"
          },
          "status": {
            "$ref": "#/components/schemas/EventStreamDeliveryStatusEnum"
          },
          "event_type": {
            "$ref": "#/components/schemas/EventStreamDeliveryEventTypeEnum"
          },
          "attempts": {
            "type": "array",
            "description": "Results of delivery attempts",
            "items": {
              "$ref": "#/components/schemas/EventStreamDeliveryAttempt"
            }
          },
          "event": {
            "$ref": "#/components/schemas/EventStreamCloudEvent"
          }
        }
      },
      "TokenQuota": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "client_credentials"
        ],
        "x-release-lifecycle": "EA",
        "properties": {
          "client_credentials": {
            "$ref": "#/components/schemas/TokenQuotaClientCredentials"
          }
        }
      },
      "TokenQuotaClientCredentials": {
        "type": "object",
        "description": "The token quota configuration",
        "additionalProperties": false,
        "properties": {
          "enforce": {
            "type": "boolean",
            "description": "If enabled, the quota will be enforced and requests in excess of the quota will fail. If disabled, the quota will not be enforced, but notifications for requests exceeding the quota will be available in logs."
          },
          "per_day": {
            "type": "integer",
            "description": "Maximum number of issued tokens per day"
          },
          "per_hour": {
            "type": "integer",
            "description": "Maximum number of issued tokens per hour"
          }
        }
      },
      "TokenQuotaConfiguration": {
        "type": "object",
        "additionalProperties": true,
        "required": [
          "client_credentials"
        ],
        "properties": {
          "client_credentials": {
            "$ref": "#/components/schemas/TokenQuotaClientCredentials"
          }
        }
      },
      "UniversalLoginExperienceEnum": {
        "type": "string",
        "description": "Which login experience to use. Can be `new` or `classic`.",
        "enum": [
          "new",
          "classic"
        ]
      },
      "UpdateActionBindingItem": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ActionBindingWithRef"
          }
        ]
      },
      "UpdateActionBindingsRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "bindings": {
            "type": "array",
            "description": "The actions that will be bound to this trigger. The order in which they are included will be the order in which they are executed.",
            "items": {
              "$ref": "#/components/schemas/UpdateActionBindingItem"
            }
          }
        }
      },
      "UpdateActionBindingsResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "bindings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionBinding"
            }
          }
        }
      },
      "UpdateActionRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of an action.",
            "default": "my-action"
          },
          "supported_triggers": {
            "type": "array",
            "description": "The list of triggers that this action supports. At this time, an action can only target a single trigger at a time.",
            "items": {
              "$ref": "#/components/schemas/ActionTrigger"
            }
          },
          "code": {
            "type": "string",
            "description": "The source code of the action.",
            "default": "module.exports = () => {}"
          },
          "dependencies": {
            "type": "array",
            "description": "The list of third party npm modules, and their versions, that this action depends on.",
            "items": {
              "$ref": "#/components/schemas/ActionVersionDependency"
            }
          },
          "runtime": {
            "type": "string",
            "description": "The Node runtime. For example: `node12`, defaults to `node12`",
            "default": "node12"
          },
          "secrets": {
            "type": "array",
            "description": "The list of secrets that are included in an action or a version of an action.",
            "items": {
              "$ref": "#/components/schemas/ActionSecretRequest"
            }
          }
        }
      },
      "UpdateActionResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of the action.",
            "default": "910b1053-577f-4d81-a8c8-020e7319a38a"
          },
          "name": {
            "type": "string",
            "description": "The name of an action.",
            "default": "my-action"
          },
          "supported_triggers": {
            "type": "array",
            "description": "The list of triggers that this action supports. At this time, an action can only target a single trigger at a time.",
            "items": {
              "$ref": "#/components/schemas/ActionTrigger"
            }
          },
          "all_changes_deployed": {
            "type": "boolean",
            "description": "True if all of an Action's contents have been deployed.",
            "default": false
          },
          "created_at": {
            "type": "string",
            "description": "The time when this action was created.",
            "default": "2021-01-01T00:00:00.000Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "The time when this action was updated.",
            "default": "2021-01-01T00:00:00.000Z",
            "format": "date-time"
          },
          "code": {
            "type": "string",
            "description": "The source code of the action.",
            "default": "module.exports = () => {}"
          },
          "dependencies": {
            "type": "array",
            "description": "The list of third party npm modules, and their versions, that this action depends on.",
            "items": {
              "$ref": "#/components/schemas/ActionVersionDependency"
            }
          },
          "runtime": {
            "type": "string",
            "description": "The Node runtime. For example: `node12`, defaults to `node12`",
            "default": "node12"
          },
          "secrets": {
            "type": "array",
            "description": "The list of secrets that are included in an action or a version of an action.",
            "items": {
              "$ref": "#/components/schemas/ActionSecretResponse"
            }
          },
          "deployed_version": {
            "$ref": "#/components/schemas/ActionDeployedVersion"
          },
          "installed_integration_id": {
            "type": "string",
            "description": "installed_integration_id is the fk reference to the InstalledIntegration entity.",
            "default": "7d2bc0c9-c0c2-433a-9f4e-86ef80270aad"
          },
          "integration": {
            "$ref": "#/components/schemas/Integration"
          },
          "status": {
            "$ref": "#/components/schemas/ActionBuildStatusEnum"
          },
          "built_at": {
            "type": "string",
            "description": "The time when this action was built successfully.",
            "default": "2021-01-01T00:00:00.000Z",
            "format": "date-time"
          },
          "deploy": {
            "type": "boolean",
            "description": "True if the action should be deployed after creation.",
            "default": false
          }
        }
      },
      "UpdateAculRequestBody": {
        "type": "object",
        "description": "Render settings for the given screen",
        "additionalProperties": false,
        "properties": {
          "rendering_mode": {
            "$ref": "#/components/schemas/AculRenderingModeEnum"
          },
          "context_configuration": {
            "type": "array",
            "description": "Context values to make available",
            "items": {
              "type": "string"
            }
          },
          "default_head_tags_disabled": {
            "type": "boolean",
            "nullable": true,
            "description": "Override Universal Login default head tags",
            "default": false
          },
          "head_tags": {
            "type": "array",
            "description": "An array of head tags",
            "items": {
              "$ref": "#/components/schemas/AculHeadTag"
            }
          },
          "filters": {
            "$ref": "#/components/schemas/AculFilters"
          }
        }
      },
      "UpdateAculResponseContent": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "rendering_mode": {
            "$ref": "#/components/schemas/AculRenderingModeEnum"
          },
          "context_configuration": {
            "type": "array",
            "description": "Context values to make available",
            "items": {
              "type": "string"
            }
          },
          "default_head_tags_disabled": {
            "type": "boolean",
            "nullable": true,
            "description": "Override Universal Login default head tags"
          },
          "head_tags": {
            "type": "array",
            "description": "An array of head tags",
            "items": {
              "$ref": "#/components/schemas/AculHeadTag"
            }
          }
        }
      },
      "UpdateClientGrantRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "scope": {
            "type": "array",
            "description": "Scopes allowed for this client grant.",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "organization_usage": {
            "$ref": "#/components/schemas/ClientGrantOrganizationNullableUsageEnum"
          },
          "allow_any_organization": {
            "type": "boolean",
            "nullable": true,
            "description": "Controls allowing any organization to be used with this grant"
          }
        }
      },
      "UpdateClientGrantResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the client grant."
          },
          "client_id": {
            "type": "string",
            "description": "ID of the client."
          },
          "audience": {
            "type": "string",
            "description": "The audience (API identifier) of this client grant.",
            "minLength": 1
          },
          "scope": {
            "type": "array",
            "description": "Scopes allowed for this client grant.",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "organization_usage": {
            "$ref": "#/components/schemas/ClientGrantOrganizationUsageEnum"
          },
          "allow_any_organization": {
            "type": "boolean",
            "description": "If enabled, any organization can be used with this grant. If disabled (default), the grant must be explicitly assigned to the desired organizations."
          }
        }
      },
      "UpdateClientRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the client. Must contain at least one character. Does not allow '<' or '>'."
          },
          "description": {
            "type": "string",
            "description": "Free text description of the purpose of the Client. (Max character length: <code>140</code>)",
            "maxLength": 140
          },
          "client_secret": {
            "type": "string",
            "description": "The secret used to sign tokens for the client",
            "minLength": 1
          },
          "logo_uri": {
            "type": "string",
            "description": "The URL of the client logo (recommended size: 150x150)",
            "format": "absolute-uri-or-empty"
          },
          "callbacks": {
            "type": "array",
            "description": "A set of URLs that are valid to call back from Auth0 when authenticating users",
            "items": {
              "type": "string",
              "format": "callback-url"
            }
          },
          "oidc_logout": {
            "$ref": "#/components/schemas/ClientOIDCBackchannelLogoutSettings"
          },
          "oidc_backchannel_logout": {
            "$ref": "#/components/schemas/ClientOIDCBackchannelLogoutSettings"
          },
          "session_transfer": {
            "$ref": "#/components/schemas/ClientSessionTransferConfiguration"
          },
          "allowed_origins": {
            "type": "array",
            "description": "A set of URLs that represents valid origins for CORS",
            "items": {
              "type": "string",
              "format": "url-with-placeholders"
            }
          },
          "web_origins": {
            "type": "array",
            "description": "A set of URLs that represents valid web origins for use with web message response mode",
            "items": {
              "type": "string",
              "format": "url-with-placeholders"
            }
          },
          "grant_types": {
            "type": "array",
            "description": "A set of grant types that the client is authorized to use. Can include `authorization_code`, `implicit`, `refresh_token`, `client_credentials`, `password`, `http://auth0.com/oauth/grant-type/password-realm`, `http://auth0.com/oauth/grant-type/mfa-oob`, `http://auth0.com/oauth/grant-type/mfa-otp`, `http://auth0.com/oauth/grant-type/mfa-recovery-code`, `urn:openid:params:grant-type:ciba`, and `urn:ietf:params:oauth:grant-type:device_code`.",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "client_aliases": {
            "type": "array",
            "description": "List of audiences for SAML protocol",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "allowed_clients": {
            "type": "array",
            "description": "Ids of clients that will be allowed to perform delegation requests. Clients that will be allowed to make delegation request. By default, all your clients will be allowed. This field allows you to specify specific clients",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "allowed_logout_urls": {
            "type": "array",
            "description": "URLs that are valid to redirect to after logout from Auth0.",
            "items": {
              "type": "string",
              "format": "url-with-placeholders"
            }
          },
          "jwt_configuration": {
            "$ref": "#/components/schemas/ClientJwtConfiguration"
          },
          "encryption_key": {
            "$ref": "#/components/schemas/ClientEncryptionKey"
          },
          "sso": {
            "type": "boolean",
            "description": "<code>true</code> to use Auth0 instead of the IdP to do Single Sign On, <code>false</code> otherwise (default: <code>false</code>)"
          },
          "cross_origin_authentication": {
            "type": "boolean",
            "description": "<code>true</code> if this client can be used to make cross-origin authentication requests, <code>false</code> otherwise if cross origin is disabled"
          },
          "cross_origin_loc": {
            "type": "string",
            "nullable": true,
            "description": "URL for the location in your site where the cross origin verification takes place for the cross-origin auth flow when performing Auth in your own domain instead of Auth0 hosted login page.",
            "format": "url-or-null"
          },
          "sso_disabled": {
            "type": "boolean",
            "description": "<code>true</code> to disable Single Sign On, <code>false</code> otherwise (default: <code>false</code>)"
          },
          "custom_login_page_on": {
            "type": "boolean",
            "description": "<code>true</code> if the custom login page is to be used, <code>false</code> otherwise."
          },
          "token_endpoint_auth_method": {
            "$ref": "#/components/schemas/ClientTokenEndpointAuthMethodOrNullEnum"
          },
          "app_type": {
            "$ref": "#/components/schemas/ClientAppTypeEnum"
          },
          "is_first_party": {
            "type": "boolean",
            "description": "Whether this client a first party client or not",
            "default": true
          },
          "oidc_conformant": {
            "type": "boolean",
            "description": "Whether this client will conform to strict OIDC specifications",
            "default": false
          },
          "custom_login_page": {
            "type": "string",
            "description": "The content (HTML, CSS, JS) of the custom login page"
          },
          "custom_login_page_preview": {
            "type": "string"
          },
          "token_quota": {
            "$ref": "#/components/schemas/UpdateTokenQuota"
          },
          "form_template": {
            "type": "string",
            "description": "Form template for WS-Federation protocol"
          },
          "addons": {
            "$ref": "#/components/schemas/ClientAddons"
          },
          "client_metadata": {
            "$ref": "#/components/schemas/ClientMetadata"
          },
          "mobile": {
            "$ref": "#/components/schemas/ClientMobile"
          },
          "initiate_login_uri": {
            "type": "string",
            "description": "Initiate login uri, must be https",
            "format": "absolute-https-uri-or-empty"
          },
          "native_social_login": {
            "$ref": "#/components/schemas/NativeSocialLogin"
          },
          "refresh_token": {
            "$ref": "#/components/schemas/ClientRefreshTokenConfiguration"
          },
          "default_organization": {
            "$ref": "#/components/schemas/ClientDefaultOrganization"
          },
          "organization_usage": {
            "type": "string",
            "nullable": true,
            "description": "Defines how to proceed during an authentication transaction with regards an organization. Can be `deny` (default), `allow` or `require`.",
            "default": "deny",
            "enum": [
              "deny",
              "allow",
              "require",
              null
            ]
          },
          "organization_require_behavior": {
            "type": "string",
            "nullable": true,
            "description": "Defines how to proceed during an authentication transaction when `client.organization_usage: 'require'`. Can be `no_prompt` (default), `pre_login_prompt` or `post_login_prompt`. `post_login_prompt` requires `oidc_conformant: true`.",
            "default": "no_prompt",
            "enum": [
              "no_prompt",
              "pre_login_prompt",
              "post_login_prompt",
              null
            ]
          },
          "client_authentication_methods": {
            "$ref": "#/components/schemas/ClientAuthenticationMethod"
          },
          "require_pushed_authorization_requests": {
            "type": "boolean",
            "description": "Makes the use of Pushed Authorization Requests mandatory for this client",
            "default": false
          },
          "require_proof_of_possession": {
            "type": "boolean",
            "description": "Makes the use of Proof-of-Possession mandatory for this client",
            "default": false
          },
          "signed_request_object": {
            "$ref": "#/components/schemas/ClientSignedRequestObjectWithCredentialId"
          },
          "compliance_level": {
            "$ref": "#/components/schemas/ClientComplianceLevelEnum"
          },
          "par_request_expiry": {
            "type": "integer",
            "nullable": true,
            "description": "Specifies how long, in seconds, a Pushed Authorization Request URI remains valid"
          }
        }
      },
      "UpdateClientResponseContent": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "client_id": {
            "type": "string",
            "description": "ID of this client.",
            "default": "AaiyAPdpYdesoKnqjj8HJqRn4T5titww"
          },
          "tenant": {
            "type": "string",
            "description": "Name of the tenant this client belongs to.",
            "default": ""
          },
          "name": {
            "type": "string",
            "description": "Name of this client (min length: 1 character, does not allow `<` or `>`).",
            "default": "My application"
          },
          "description": {
            "type": "string",
            "description": "Free text description of this client (max length: 140 characters).",
            "default": ""
          },
          "global": {
            "type": "boolean",
            "description": "Whether this is your global 'All Applications' client representing legacy tenant settings (true) or a regular client (false).",
            "default": false
          },
          "client_secret": {
            "type": "string",
            "description": "Client secret (which you must not make public).",
            "default": "MG_TNT2ver-SylNat-_VeMmd-4m0Waba0jr1troztBniSChEw0glxEmgEi2Kw40H"
          },
          "app_type": {
            "type": "string",
            "description": "Type of client used to determine which settings are applicable. Can be `spa`, `native`, `non_interactive`, or `regular_web`.",
            "default": ""
          },
          "logo_uri": {
            "type": "string",
            "description": "URL of the logo to display for this client. Recommended size is 150x150 pixels."
          },
          "is_first_party": {
            "type": "boolean",
            "description": "Whether this client a first party client (true) or not (false).",
            "default": false
          },
          "oidc_conformant": {
            "type": "boolean",
            "description": "Whether this client conforms to <a href='https://auth0.com/docs/api-auth/tutorials/adoption'>strict OIDC specifications</a> (true) or uses legacy features (false).",
            "default": false
          },
          "callbacks": {
            "type": "array",
            "description": "Comma-separated list of URLs whitelisted for Auth0 to use as a callback to the client after authentication.",
            "items": {
              "type": "string"
            }
          },
          "allowed_origins": {
            "type": "array",
            "description": "Comma-separated list of URLs allowed to make requests from JavaScript to Auth0 API (typically used with CORS). By default, all your callback URLs will be allowed. This field allows you to enter other origins if necessary. You can also use wildcards at the subdomain level (e.g., https://*.contoso.com). Query strings and hash information are not taken into account when validating these URLs.",
            "items": {
              "type": "string"
            }
          },
          "web_origins": {
            "type": "array",
            "description": "Comma-separated list of allowed origins for use with <a href='https://auth0.com/docs/cross-origin-authentication'>Cross-Origin Authentication</a>, <a href='https://auth0.com/docs/flows/concepts/device-auth'>Device Flow</a>, and <a href='https://auth0.com/docs/protocols/oauth2#how-response-mode-works'>web message response mode</a>.",
            "items": {
              "type": "string"
            }
          },
          "client_aliases": {
            "type": "array",
            "description": "List of audiences/realms for SAML protocol. Used by the wsfed addon.",
            "items": {
              "type": "string"
            }
          },
          "allowed_clients": {
            "type": "array",
            "description": "List of allow clients and API ids that are allowed to make delegation requests. Empty means all all your clients are allowed.",
            "items": {
              "type": "string"
            }
          },
          "allowed_logout_urls": {
            "type": "array",
            "description": "Comma-separated list of URLs that are valid to redirect to after logout from Auth0. Wildcards are allowed for subdomains.",
            "items": {
              "type": "string"
            }
          },
          "session_transfer": {
            "$ref": "#/components/schemas/ClientSessionTransferConfiguration"
          },
          "oidc_logout": {
            "$ref": "#/components/schemas/ClientOIDCBackchannelLogoutSettings"
          },
          "grant_types": {
            "type": "array",
            "description": "List of grant types supported for this application. Can include `authorization_code`, `implicit`, `refresh_token`, `client_credentials`, `password`, `http://auth0.com/oauth/grant-type/password-realm`, `http://auth0.com/oauth/grant-type/mfa-oob`, `http://auth0.com/oauth/grant-type/mfa-otp`, `http://auth0.com/oauth/grant-type/mfa-recovery-code`, `urn:openid:params:grant-type:ciba`, and `urn:ietf:params:oauth:grant-type:device_code`.",
            "items": {
              "type": "string"
            }
          },
          "jwt_configuration": {
            "$ref": "#/components/schemas/ClientJwtConfiguration"
          },
          "signing_keys": {
            "$ref": "#/components/schemas/ClientSigningKeys"
          },
          "encryption_key": {
            "$ref": "#/components/schemas/ClientEncryptionKey"
          },
          "sso": {
            "type": "boolean",
            "description": "Applies only to SSO clients and determines whether Auth0 will handle Single Sign On (true) or whether the Identity Provider will (false).",
            "default": false
          },
          "sso_disabled": {
            "type": "boolean",
            "description": "Whether Single Sign On is disabled (true) or enabled (true). Defaults to true.",
            "default": false
          },
          "cross_origin_authentication": {
            "type": "boolean",
            "description": "Whether this client can be used to make cross-origin authentication requests (true) or it is not allowed to make such requests (false)."
          },
          "cross_origin_loc": {
            "type": "string",
            "description": "URL of the location in your site where the cross origin verification takes place for the cross-origin auth flow when performing Auth in your own domain instead of Auth0 hosted login page.",
            "format": "url"
          },
          "custom_login_page_on": {
            "type": "boolean",
            "description": "Whether a custom login page is to be used (true) or the default provided login page (false).",
            "default": true
          },
          "custom_login_page": {
            "type": "string",
            "description": "The content (HTML, CSS, JS) of the custom login page.",
            "default": ""
          },
          "custom_login_page_preview": {
            "type": "string",
            "description": "The content (HTML, CSS, JS) of the custom login page. (Used on Previews)",
            "default": ""
          },
          "form_template": {
            "type": "string",
            "description": "HTML form template to be used for WS-Federation.",
            "default": ""
          },
          "addons": {
            "$ref": "#/components/schemas/ClientAddons"
          },
          "token_endpoint_auth_method": {
            "$ref": "#/components/schemas/ClientTokenEndpointAuthMethodEnum"
          },
          "client_metadata": {
            "$ref": "#/components/schemas/ClientMetadata"
          },
          "mobile": {
            "$ref": "#/components/schemas/ClientMobile"
          },
          "initiate_login_uri": {
            "type": "string",
            "description": "Initiate login uri, must be https",
            "format": "absolute-https-uri-or-empty"
          },
          "native_social_login": {},
          "refresh_token": {
            "$ref": "#/components/schemas/ClientRefreshTokenConfiguration"
          },
          "default_organization": {
            "$ref": "#/components/schemas/ClientDefaultOrganization"
          },
          "organization_usage": {
            "$ref": "#/components/schemas/ClientOrganizationUsageEnum"
          },
          "organization_require_behavior": {
            "$ref": "#/components/schemas/ClientOrganizationRequireBehaviorEnum"
          },
          "client_authentication_methods": {
            "$ref": "#/components/schemas/ClientAuthenticationMethod"
          },
          "require_pushed_authorization_requests": {
            "type": "boolean",
            "description": "Makes the use of Pushed Authorization Requests mandatory for this client",
            "default": false
          },
          "require_proof_of_possession": {
            "type": "boolean",
            "description": "Makes the use of Proof-of-Possession mandatory for this client",
            "default": false
          },
          "signed_request_object": {
            "$ref": "#/components/schemas/ClientSignedRequestObjectWithCredentialId"
          },
          "compliance_level": {
            "$ref": "#/components/schemas/ClientComplianceLevelEnum"
          },
          "par_request_expiry": {
            "type": "integer",
            "nullable": true,
            "description": "Specifies how long, in seconds, a Pushed Authorization Request URI remains valid"
          },
          "token_quota": {
            "$ref": "#/components/schemas/TokenQuota"
          }
        }
      },
      "UpdateCustomDomainRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "tls_policy": {
            "$ref": "#/components/schemas/CustomDomainTlsPolicyEnum"
          },
          "custom_client_ip_header": {
            "type": "string",
            "description": "The HTTP header to fetch the client's IP address",
            "default": "true-client-ip",
            "enum": [
              "true-client-ip",
              "cf-connecting-ip",
              "x-forwarded-for",
              "x-azure-clientip",
              ""
            ]
          }
        }
      },
      "UpdateCustomDomainResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "custom_domain_id",
          "domain",
          "primary",
          "status",
          "type",
          "verification"
        ],
        "properties": {
          "custom_domain_id": {
            "type": "string",
            "description": "ID of the custom domain.",
            "default": "cd_0000000000000001"
          },
          "domain": {
            "type": "string",
            "description": "Domain name.",
            "default": "login.mycompany.com"
          },
          "primary": {
            "type": "boolean",
            "description": "Whether this is a primary domain (true) or not (false).",
            "default": false
          },
          "status": {
            "$ref": "#/components/schemas/CustomDomainStatusEnum"
          },
          "type": {
            "$ref": "#/components/schemas/CustomDomainTypeEnum"
          },
          "verification": {
            "$ref": "#/components/schemas/DomainVerification"
          },
          "custom_client_ip_header": {
            "type": "string",
            "nullable": true,
            "description": "The HTTP header to fetch the client's IP address"
          },
          "tls_policy": {
            "type": "string",
            "description": "The TLS version policy",
            "default": "recommended"
          }
        }
      },
      "UpdateEmailProviderRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "$ref": "#/components/schemas/EmailProviderNameEnum"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the provider is enabled (true) or disabled (false)."
          },
          "default_from_address": {
            "type": "string",
            "description": "Email address to use as \"from\" when no other address specified."
          },
          "credentials": {
            "$ref": "#/components/schemas/EmailProviderCredentialsSchema"
          },
          "settings": {
            "$ref": "#/components/schemas/EmailSpecificProviderSettingsWithAdditionalProperties"
          }
        }
      },
      "UpdateEmailProviderResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "getPayloadSchema": {}
        }
      },
      "UpdateEmailTemplateRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "template": {
            "$ref": "#/components/schemas/EmailTemplateNameEnum"
          },
          "body": {
            "type": "string",
            "nullable": true,
            "description": "Body of the email template."
          },
          "from": {
            "type": "string",
            "nullable": true,
            "description": "Senders `from` email address.",
            "default": "sender@auth0.com"
          },
          "resultUrl": {
            "type": "string",
            "nullable": true,
            "description": "URL to redirect the user to after a successful action."
          },
          "subject": {
            "type": "string",
            "nullable": true,
            "description": "Subject line of the email."
          },
          "syntax": {
            "type": "string",
            "nullable": true,
            "description": "Syntax of the template body.",
            "default": "liquid"
          },
          "urlLifetimeInSeconds": {
            "type": "number",
            "nullable": true,
            "description": "Lifetime in seconds that the link within the email will be valid for."
          },
          "includeEmailInRedirect": {
            "type": "boolean",
            "description": "Whether the `reset_email` and `verify_email` templates should include the user's email address as the `email` parameter in the returnUrl (true) or whether no email address should be included in the redirect (false). Defaults to true."
          },
          "enabled": {
            "type": "boolean",
            "nullable": true,
            "description": "Whether the template is enabled (true) or disabled (false)."
          }
        }
      },
      "UpdateEmailTemplateResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "template": {
            "$ref": "#/components/schemas/EmailTemplateNameEnum"
          },
          "body": {
            "type": "string",
            "nullable": true,
            "description": "Body of the email template."
          },
          "from": {
            "type": "string",
            "nullable": true,
            "description": "Senders `from` email address.",
            "default": "sender@auth0.com"
          },
          "resultUrl": {
            "type": "string",
            "nullable": true,
            "description": "URL to redirect the user to after a successful action."
          },
          "subject": {
            "type": "string",
            "nullable": true,
            "description": "Subject line of the email."
          },
          "syntax": {
            "type": "string",
            "nullable": true,
            "description": "Syntax of the template body.",
            "default": "liquid"
          },
          "urlLifetimeInSeconds": {
            "type": "number",
            "nullable": true,
            "description": "Lifetime in seconds that the link within the email will be valid for."
          },
          "includeEmailInRedirect": {
            "type": "boolean",
            "description": "Whether the `reset_email` and `verify_email` templates should include the user's email address as the `email` parameter in the returnUrl (true) or whether no email address should be included in the redirect (false). Defaults to true."
          },
          "enabled": {
            "type": "boolean",
            "nullable": true,
            "description": "Whether the template is enabled (true) or disabled (false)."
          }
        }
      },
      "UpdateEventStreamRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the event stream.",
            "minLength": 1,
            "maxLength": 128
          },
          "subscriptions": {
            "type": "array",
            "description": "List of event types subscribed to in this stream.",
            "items": {
              "$ref": "#/components/schemas/EventStreamSubscription"
            }
          },
          "destination": {
            "$ref": "#/components/schemas/EventStreamDestinationPatch"
          },
          "status": {
            "$ref": "#/components/schemas/EventStreamStatusEnum"
          }
        }
      },
      "UpdateEventStreamResponseContent": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/EventStreamWebhookResponseContent"
          },
          {
            "$ref": "#/components/schemas/EventStreamEventBridgeResponseContent"
          }
        ]
      },
      "UpdateLogStreamRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "log stream name"
          },
          "status": {
            "$ref": "#/components/schemas/LogStreamStatusEnum"
          },
          "isPriority": {
            "type": "boolean",
            "description": "True for priority log streams, false for non-priority"
          },
          "filters": {
            "type": "array",
            "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
            "items": {
              "$ref": "#/components/schemas/LogStreamFilter"
            }
          },
          "sink": {
            "$ref": "#/components/schemas/LogStreamSinkPatch"
          }
        }
      },
      "UpdateLogStreamResponseContent": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/LogStreamHttpResponseSchema"
          },
          {
            "$ref": "#/components/schemas/LogStreamEventBridgeResponseSchema"
          },
          {
            "$ref": "#/components/schemas/LogStreamEventGridResponseSchema"
          },
          {
            "$ref": "#/components/schemas/LogStreamDatadogResponseSchema"
          },
          {
            "$ref": "#/components/schemas/LogStreamSplunkResponseSchema"
          },
          {
            "$ref": "#/components/schemas/LogStreamSumoResponseSchema"
          },
          {
            "$ref": "#/components/schemas/LogStreamSegmentResponseSchema"
          },
          {
            "$ref": "#/components/schemas/LogStreamMixpanelResponseSchema"
          }
        ]
      },
      "UpdateNetworkAclRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "description": {
            "type": "string",
            "maxLength": 255
          },
          "active": {
            "type": "boolean",
            "description": "Indicates whether or not this access control list is actively being used"
          },
          "priority": {
            "type": "number",
            "description": "Indicates the order in which the ACL will be evaluated relative to other ACL rules."
          },
          "rule": {
            "$ref": "#/components/schemas/NetworkAclRule"
          }
        }
      },
      "UpdateNetworkAclResponseContent": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "priority": {
            "type": "number"
          },
          "rule": {
            "$ref": "#/components/schemas/NetworkAclRule"
          },
          "created_at": {
            "type": "string",
            "description": "The timestamp when the Network ACL Configuration was created"
          },
          "updated_at": {
            "type": "string",
            "description": "The timestamp when the Network ACL Configuration was last updated"
          }
        }
      },
      "UpdateOrganizationConnectionRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "assign_membership_on_login": {
            "type": "boolean",
            "description": "When true, all users that log in with this connection will be automatically granted membership in the organization. When false, users must be granted membership in the organization before logging in with this connection."
          },
          "is_signup_enabled": {
            "type": "boolean",
            "description": "Determines whether organization signup should be enabled for this organization connection. Only applicable for database connections. Default: false."
          },
          "show_as_button": {
            "type": "boolean",
            "description": "Determines whether a connection should be displayed on this organization’s login prompt. Only applicable for enterprise connections. Default: true."
          }
        }
      },
      "UpdateOrganizationConnectionResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "connection_id": {
            "type": "string",
            "description": "ID of the connection."
          },
          "assign_membership_on_login": {
            "type": "boolean",
            "description": "When true, all users that log in with this connection will be automatically granted membership in the organization. When false, users must be granted membership in the organization before logging in with this connection."
          },
          "show_as_button": {
            "type": "boolean",
            "description": "Determines whether a connection should be displayed on this organization’s login prompt. Only applicable for enterprise connections. Default: true."
          },
          "is_signup_enabled": {
            "type": "boolean",
            "description": "Determines whether organization signup should be enabled for this organization connection. Only applicable for database connections. Default: false."
          },
          "connection": {
            "$ref": "#/components/schemas/OrganizationConnectionInformation"
          }
        }
      },
      "UpdateOrganizationRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "display_name": {
            "type": "string",
            "description": "Friendly name of this organization.",
            "default": "Acme Users",
            "minLength": 1,
            "maxLength": 255
          },
          "name": {
            "type": "string",
            "description": "The name of this organization.",
            "default": "organization-1",
            "minLength": 1,
            "maxLength": 50,
            "format": "organization-name"
          },
          "branding": {
            "$ref": "#/components/schemas/OrganizationBranding"
          },
          "metadata": {
            "$ref": "#/components/schemas/OrganizationMetadata"
          },
          "token_quota": {
            "$ref": "#/components/schemas/UpdateTokenQuota"
          }
        }
      },
      "UpdateOrganizationResponseContent": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "id": {
            "type": "string",
            "description": "Organization identifier.",
            "format": "organization-id"
          },
          "name": {
            "type": "string",
            "description": "The name of this organization.",
            "default": "organization-1",
            "minLength": 1,
            "maxLength": 50,
            "format": "organization-name"
          },
          "display_name": {
            "type": "string",
            "description": "Friendly name of this organization.",
            "default": "Acme Users",
            "minLength": 1,
            "maxLength": 255
          },
          "branding": {
            "$ref": "#/components/schemas/OrganizationBranding"
          },
          "metadata": {
            "$ref": "#/components/schemas/OrganizationMetadata"
          },
          "token_quota": {
            "$ref": "#/components/schemas/TokenQuota"
          }
        }
      },
      "UpdateRoleRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of this role."
          },
          "description": {
            "type": "string",
            "description": "Description of this role."
          }
        }
      },
      "UpdateRoleResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "ID for this role."
          },
          "name": {
            "type": "string",
            "description": "Name of this role."
          },
          "description": {
            "type": "string",
            "description": "Description of this role."
          }
        }
      },
      "UpdateSettingsRequestBody": {
        "type": "object",
        "description": "Prompts settings",
        "additionalProperties": false,
        "properties": {
          "universal_login_experience": {
            "$ref": "#/components/schemas/UniversalLoginExperienceEnum"
          },
          "identifier_first": {
            "type": "boolean",
            "nullable": true,
            "description": "Whether identifier first is enabled or not"
          },
          "webauthn_platform_first_factor": {
            "type": "boolean",
            "nullable": true,
            "description": "Use WebAuthn with Device Biometrics as the first authentication factor"
          }
        }
      },
      "UpdateSettingsResponseContent": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "universal_login_experience": {
            "$ref": "#/components/schemas/UniversalLoginExperienceEnum"
          },
          "identifier_first": {
            "type": "boolean",
            "description": "Whether identifier first is enabled or not"
          },
          "webauthn_platform_first_factor": {
            "type": "boolean",
            "description": "Use WebAuthn with Device Biometrics as the first authentication factor"
          }
        }
      },
      "UpdateTokenQuota": {
        "type": "object",
        "nullable": true,
        "additionalProperties": false,
        "required": [
          "client_credentials"
        ],
        "x-release-lifecycle": "EA",
        "properties": {
          "client_credentials": {
            "$ref": "#/components/schemas/TokenQuotaClientCredentials"
          }
        }
      },
      "UpdateVerifiableCredentialTemplateRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "type": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "dialect": {
            "type": "string",
            "maxLength": 255
          },
          "presentation": {
            "$ref": "#/components/schemas/MdlPresentationRequest"
          },
          "well_known_trusted_issuers": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "version": {
            "type": "number"
          }
        }
      },
      "UpdateVerifiableCredentialTemplateResponseContent": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the template.",
            "default": "vct_0000000000000001"
          },
          "name": {
            "type": "string",
            "description": "The name of the template."
          },
          "type": {
            "type": "string",
            "description": "The type of the template.",
            "default": "mdl"
          },
          "dialect": {
            "type": "string",
            "description": "The dialect of the template.",
            "default": "simplified/1.0",
            "maxLength": 255
          },
          "presentation": {
            "$ref": "#/components/schemas/MdlPresentationRequest"
          },
          "custom_certificate_authority": {
            "type": "string",
            "description": "The custom certificate authority.",
            "minLength": 1,
            "maxLength": 4096
          },
          "well_known_trusted_issuers": {
            "type": "string",
            "description": "The well-known trusted issuers, comma separated.",
            "minLength": 1,
            "maxLength": 255
          },
          "created_at": {
            "type": "string",
            "description": "The date and time the template was created.",
            "default": "2021-01-01T00:00:00Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "The date and time the template was created.",
            "default": "2021-01-01T00:00:00Z",
            "format": "date-time"
          }
        }
      },
      "UserMetadata": {
        "type": "object",
        "description": "Data related to the user that does not affect the application's core functionality.",
        "additionalProperties": true
      },
      "VerifiableCredentialTemplateResponse": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the template.",
            "default": "vct_0000000000000001"
          },
          "name": {
            "type": "string",
            "description": "The name of the template."
          },
          "type": {
            "type": "string",
            "description": "The type of the template.",
            "default": "mdl"
          },
          "dialect": {
            "type": "string",
            "description": "The dialect of the template.",
            "default": "simplified/1.0",
            "maxLength": 255
          },
          "presentation": {
            "$ref": "#/components/schemas/MdlPresentationRequest"
          },
          "custom_certificate_authority": {
            "type": "string",
            "description": "The custom certificate authority.",
            "minLength": 1,
            "maxLength": 4096
          },
          "well_known_trusted_issuers": {
            "type": "string",
            "description": "The well-known trusted issuers, comma separated.",
            "minLength": 1,
            "maxLength": 255
          },
          "created_at": {
            "type": "string",
            "description": "The date and time the template was created.",
            "default": "2021-01-01T00:00:00Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "The date and time the template was created.",
            "default": "2021-01-01T00:00:00Z",
            "format": "date-time"
          }
        }
      },
      "VerifyCustomDomainResponseContent": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "custom_domain_id",
          "domain",
          "primary",
          "status",
          "type"
        ],
        "properties": {
          "custom_domain_id": {
            "type": "string",
            "description": "ID of the custom domain.",
            "default": "cd_0000000000000001"
          },
          "domain": {
            "type": "string",
            "description": "Domain name.",
            "default": "login.mycompany.com"
          },
          "primary": {
            "type": "boolean",
            "description": "Whether this is a primary domain (true) or not (false).",
            "default": false
          },
          "status": {
            "$ref": "#/components/schemas/CustomDomainStatusEnum"
          },
          "type": {
            "$ref": "#/components/schemas/CustomDomainTypeEnum"
          },
          "cname_api_key": {
            "type": "string",
            "description": "CNAME API key header.",
            "default": "d4feca..."
          },
          "origin_domain_name": {
            "type": "string",
            "description": "Intermediate address.",
            "default": "mycompany_cd_0000000000000001.edge.tenants.auth0.com"
          },
          "verification": {
            "$ref": "#/components/schemas/DomainVerification"
          },
          "custom_client_ip_header": {
            "type": "string",
            "nullable": true,
            "description": "The HTTP header to fetch the client's IP address"
          },
          "tls_policy": {
            "type": "string",
            "description": "The TLS version policy",
            "default": "recommended"
          }
        }
      },
      "connection": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the connection",
            "default": "My connection"
          },
          "display_name": {
            "type": "string",
            "description": "Connection name used in login screen"
          },
          "options": {
            "type": "object",
            "description": "In order to return options in the response, the `read:connections_options` scope must be present",
            "additionalProperties": true
          },
          "id": {
            "type": "string",
            "description": "The connection's identifier",
            "default": "con_0000000000000001"
          },
          "strategy": {
            "type": "string",
            "description": "The type of the connection, related to the identity provider",
            "default": "auth0"
          },
          "realms": {
            "type": "array",
            "description": "Defines the realms for which the connection will be used (ie: email domains). If the array is empty or the property is not specified, the connection name will be added as realm.",
            "items": {
              "type": "string",
              "description": "The realm where this connection belongs",
              "format": "connection-realm"
            }
          },
          "enabled_clients": {
            "type": "array",
            "description": "DEPRECATED property. Use the GET /connections/:id/clients endpoint to get the ids of the clients for which the connection is enabled",
            "x-release-lifecycle": "deprecated",
            "items": {
              "type": "string",
              "description": "The client id"
            }
          },
          "is_domain_connection": {
            "type": "boolean",
            "description": "True if the connection is domain level"
          },
          "show_as_button": {
            "type": "boolean",
            "description": "Enables showing a button for the connection in the login page (new experience only). If false, it will be usable only by HRD."
          },
          "metadata": {
            "type": "object",
            "description": "Metadata associated with the connection in the form of an object with string values (max 255 chars).  Maximum of 10 metadata properties allowed.",
            "additionalProperties": true
          }
        }
      },
      "connectionCreate": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "strategy"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the connection. Must start and end with an alphanumeric character and can only contain alphanumeric characters and '-'. Max length 128",
            "maxLength": 128
          },
          "display_name": {
            "type": "string",
            "description": "Connection name used in the new universal login experience",
            "maxLength": 128
          },
          "strategy": {
            "type": "string",
            "description": "The identity provider identifier for the connection",
            "enum": [
              "ad",
              "adfs",
              "amazon",
              "apple",
              "dropbox",
              "bitbucket",
              "aol",
              "auth0-oidc",
              "auth0",
              "baidu",
              "bitly",
              "box",
              "custom",
              "daccount",
              "dwolla",
              "email",
              "evernote-sandbox",
              "evernote",
              "exact",
              "facebook",
              "fitbit",
              "flickr",
              "github",
              "google-apps",
              "google-oauth2",
              "instagram",
              "ip",
              "line",
              "linkedin",
              "miicard",
              "oauth1",
              "oauth2",
              "office365",
              "oidc",
              "okta",
              "paypal",
              "paypal-sandbox",
              "pingfederate",
              "planningcenter",
              "renren",
              "salesforce-community",
              "salesforce-sandbox",
              "salesforce",
              "samlp",
              "sharepoint",
              "shopify",
              "sms",
              "soundcloud",
              "thecity-sandbox",
              "thecity",
              "thirtysevensignals",
              "twitter",
              "untappd",
              "vkontakte",
              "waad",
              "weibo",
              "windowslive",
              "wordpress",
              "yahoo",
              "yammer",
              "yandex"
            ]
          },
          "options": {
            "type": "object",
            "description": "The connection's options (depend on the connection strategy)",
            "additionalProperties": true,
            "properties": {
              "validation": {
                "type": "object",
                "nullable": true,
                "description": "Options for validation",
                "additionalProperties": false,
                "properties": {
                  "username": {
                    "type": "object",
                    "nullable": true,
                    "additionalProperties": false,
                    "required": [
                      "max",
                      "min"
                    ],
                    "properties": {
                      "min": {
                        "type": "integer"
                      },
                      "max": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "non_persistent_attrs": {
                "type": "array",
                "description": "An array of user fields that should not be stored in the Auth0 database (https://auth0.com/docs/security/data-security/denylist)",
                "items": {
                  "type": "string"
                }
              },
              "precedence": {
                "type": "array",
                "description": "Order of precedence for attribute types. If the property is not specified, the default precedence of attributes will be used.",
                "items": {
                  "type": "string",
                  "description": "Order of precedence for attribute types",
                  "enum": [
                    "email",
                    "phone_number",
                    "username"
                  ]
                }
              },
              "attributes": {
                "type": "object",
                "description": "Attribute configuration",
                "additionalProperties": false,
                "properties": {
                  "email": {
                    "type": "object",
                    "description": "Configuration for the email attribute for users.",
                    "additionalProperties": false,
                    "properties": {
                      "identifier": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "active": {
                            "type": "boolean",
                            "description": "Determines if the attribute is used for identification"
                          }
                        }
                      },
                      "profile_required": {
                        "type": "boolean",
                        "description": "Determines if property should be required for users"
                      },
                      "verification_method": {
                        "type": "string",
                        "enum": [
                          "link",
                          "otp"
                        ]
                      },
                      "signup": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "status": {
                            "type": "string",
                            "enum": [
                              "required",
                              "optional",
                              "inactive"
                            ]
                          },
                          "verification": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "active": {
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "phone_number": {
                    "type": "object",
                    "description": "Configuration for the phone number attribute for users.",
                    "additionalProperties": false,
                    "properties": {
                      "identifier": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "active": {
                            "type": "boolean",
                            "description": "Determines if the attribute is used for identification"
                          }
                        }
                      },
                      "profile_required": {
                        "type": "boolean",
                        "description": "Determines if property should be required for users"
                      },
                      "signup": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "status": {
                            "type": "string",
                            "enum": [
                              "required",
                              "optional",
                              "inactive"
                            ]
                          },
                          "verification": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "active": {
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "username": {
                    "type": "object",
                    "description": "Configuration for the username attribute for users.",
                    "additionalProperties": false,
                    "properties": {
                      "identifier": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "active": {
                            "type": "boolean",
                            "description": "Determines if the attribute is used for identification"
                          }
                        }
                      },
                      "profile_required": {
                        "type": "boolean",
                        "description": "Determines if property should be required for users"
                      },
                      "signup": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "status": {
                            "type": "string",
                            "enum": [
                              "required",
                              "optional",
                              "inactive"
                            ]
                          }
                        }
                      },
                      "validation": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "min_length": {
                            "type": "number",
                            "description": "Minimum allowed length"
                          },
                          "max_length": {
                            "type": "number",
                            "description": "Maximum allowed length"
                          },
                          "allowed_types": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "email": {
                                "type": "boolean"
                              },
                              "phone_number": {
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "enable_script_context": {
                "type": "boolean"
              },
              "enabledDatabaseCustomization": {
                "type": "boolean",
                "description": "Set to true to use a legacy user store"
              },
              "import_mode": {
                "type": "boolean",
                "description": "Enable this if you have a legacy user store and you want to gradually migrate those users to the Auth0 user store"
              },
              "customScripts": {
                "type": "object",
                "description": "A map of scripts used to integrate with a custom database.",
                "additionalProperties": true,
                "properties": {
                  "login": {
                    "type": "string",
                    "minLength": 1
                  },
                  "get_user": {
                    "type": "string",
                    "minLength": 1
                  },
                  "delete": {
                    "type": "string",
                    "minLength": 1
                  },
                  "change_password": {
                    "type": "string",
                    "minLength": 1
                  },
                  "verify": {
                    "type": "string",
                    "minLength": 1
                  },
                  "create": {
                    "type": "string",
                    "minLength": 1
                  },
                  "change_username": {
                    "type": "string",
                    "minLength": 1
                  },
                  "change_email": {
                    "type": "string",
                    "minLength": 1
                  },
                  "change_phone_number": {
                    "type": "string",
                    "minLength": 1
                  }
                }
              },
              "authentication_methods": {
                "type": "object",
                "nullable": true,
                "description": "Options for enabling authentication methods.",
                "additionalProperties": false,
                "properties": {
                  "password": {
                    "type": "object",
                    "description": "Password authentication enablement",
                    "additionalProperties": false,
                    "properties": {
                      "enabled": {
                        "type": "boolean",
                        "description": "Determines whether passwords are enabled"
                      }
                    }
                  },
                  "passkey": {
                    "type": "object",
                    "description": "Passkey authentication enablement",
                    "additionalProperties": false,
                    "properties": {
                      "enabled": {
                        "type": "boolean",
                        "description": "Determines whether passkeys are enabled"
                      }
                    }
                  }
                }
              },
              "passkey_options": {
                "type": "object",
                "nullable": true,
                "description": "Options for the passkey authentication method",
                "additionalProperties": false,
                "properties": {
                  "challenge_ui": {
                    "type": "string",
                    "description": "Controls the UI used to challenge the user for their passkey.",
                    "enum": [
                      "both",
                      "autofill",
                      "button"
                    ]
                  },
                  "progressive_enrollment_enabled": {
                    "type": "boolean",
                    "description": "Enables or disables progressive enrollment of passkeys for the connection."
                  },
                  "local_enrollment_enabled": {
                    "type": "boolean",
                    "description": "Enables or disables enrollment prompt for local passkey when user authenticates using a cross-device passkey for the connection."
                  }
                }
              },
              "passwordPolicy": {
                "type": "string",
                "nullable": true,
                "description": "Password strength level",
                "enum": [
                  "none",
                  "low",
                  "fair",
                  "good",
                  "excellent",
                  null
                ]
              },
              "password_complexity_options": {
                "type": "object",
                "nullable": true,
                "description": "Password complexity options",
                "additionalProperties": false,
                "properties": {
                  "min_length": {
                    "type": "integer",
                    "description": "Minimum password length"
                  }
                }
              },
              "password_history": {
                "type": "object",
                "nullable": true,
                "description": "Options for password history policy",
                "additionalProperties": false,
                "required": [
                  "enable"
                ],
                "properties": {
                  "enable": {
                    "type": "boolean"
                  },
                  "size": {
                    "type": "integer"
                  }
                }
              },
              "password_no_personal_info": {
                "type": "object",
                "nullable": true,
                "description": "Options for personal info in passwords policy",
                "additionalProperties": false,
                "required": [
                  "enable"
                ],
                "properties": {
                  "enable": {
                    "type": "boolean"
                  }
                }
              },
              "password_dictionary": {
                "type": "object",
                "nullable": true,
                "description": "Options for password dictionary policy",
                "additionalProperties": false,
                "required": [
                  "enable"
                ],
                "properties": {
                  "enable": {
                    "type": "boolean"
                  },
                  "dictionary": {
                    "type": "array",
                    "description": "Custom Password Dictionary. An array of up to 200 entries.",
                    "items": {
                      "type": "string",
                      "description": "Custom Password Dictionary entry. 50 characters max.",
                      "maxLength": 50
                    }
                  }
                }
              },
              "api_enable_users": {
                "type": "boolean"
              },
              "basic_profile": {
                "type": "boolean"
              },
              "ext_admin": {
                "type": "boolean"
              },
              "ext_is_suspended": {
                "type": "boolean"
              },
              "ext_agreed_terms": {
                "type": "boolean"
              },
              "ext_groups": {
                "type": "boolean"
              },
              "ext_assigned_plans": {
                "type": "boolean"
              },
              "ext_profile": {
                "type": "boolean"
              },
              "disable_self_service_change_password": {
                "type": "boolean"
              },
              "upstream_params": {
                "type": "object",
                "nullable": true,
                "description": "Options for adding parameters in the request to the upstream IdP",
                "additionalProperties": true
              },
              "set_user_root_attributes": {
                "type": "string",
                "description": "When using an external IdP, this flag determines  whether 'name', 'given_name', 'family_name', 'nickname', and 'picture' attributes are updated. In addition, it also determines whether the user is created when user doesnt exist previously. Possible values are 'on_each_login' (default value, it configures the connection to automatically create the user if necessary and update the root attributes from the external IdP with each user login. When this setting is used, root attributes cannot be independently updated), 'on_first_login' (configures the connection to create the user and set the root attributes on first login only, allowing them to be independently updated thereafter), and 'never_on_login' (configures the connection not to create the user and not to set the root attributes from the external IdP, allowing them to be independently updated).",
                "default": "on_each_login",
                "enum": [
                  "on_each_login",
                  "on_first_login",
                  "never_on_login"
                ]
              },
              "gateway_authentication": {
                "type": "object",
                "nullable": true,
                "description": "Token-based authentication settings to be applied when connection is using an sms strategy.",
                "additionalProperties": true,
                "required": [
                  "method",
                  "audience",
                  "secret"
                ],
                "properties": {
                  "method": {
                    "type": "string",
                    "description": "The Authorization header type."
                  },
                  "subject": {
                    "type": "string",
                    "description": "The subject to be added to the JWT payload."
                  },
                  "audience": {
                    "type": "string",
                    "description": "The audience to be added to the JWT payload."
                  },
                  "secret": {
                    "type": "string",
                    "description": "The secret to be used for signing tokens."
                  },
                  "secret_base64_encoded": {
                    "type": "boolean",
                    "description": "Set to true if the provided secret is base64 encoded."
                  }
                }
              }
            }
          },
          "enabled_clients": {
            "type": "array",
            "description": "DEPRECATED property. Use the PATCH /v2/connections/{id}/clients endpoint to enable the connection for a set of clients.",
            "x-release-lifecycle": "deprecated",
            "items": {
              "type": "string",
              "description": "The id of the client to for which the connection is to be enabled. ",
              "format": "client-id"
            }
          },
          "is_domain_connection": {
            "type": "boolean",
            "description": "<code>true</code> promotes to a domain-level connection so that third-party applications can use it. <code>false</code> does not promote the connection, so only first-party applications with the connection enabled can use it. (Defaults to <code>false</code>.)"
          },
          "show_as_button": {
            "type": "boolean",
            "description": "Enables showing a button for the connection in the login page (new experience only). If false, it will be usable only by HRD. (Defaults to <code>false</code>.)"
          },
          "realms": {
            "type": "array",
            "description": "Defines the realms for which the connection will be used (ie: email domains). If the array is empty or the property is not specified, the connection name will be added as realm.",
            "items": {
              "type": "string",
              "description": "The realm where this connection belongs",
              "format": "connection-realm"
            }
          },
          "metadata": {
            "type": "object",
            "description": "Metadata associated with the connection in the form of an object with string values (max 255 chars).  Maximum of 10 metadata properties allowed.",
            "additionalProperties": true
          }
        }
      },
      "connectionUpdate": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "display_name": {
            "type": "string",
            "description": "The connection name used in the new universal login experience. If display_name is not included in the request, the field will be overwritten with the name value.",
            "maxLength": 128
          },
          "options": {
            "type": "object",
            "nullable": true,
            "description": "The connection's options (depend on the connection strategy). To update these options, the `update:connections_options` scope must be present. To verify your changes, also include the `read:connections_options` scope. If this scope is not specified, you will not be able to review the updated object.",
            "additionalProperties": true,
            "properties": {
              "validation": {
                "type": "object",
                "nullable": true,
                "description": "Options for validation",
                "additionalProperties": false,
                "properties": {
                  "username": {
                    "type": "object",
                    "nullable": true,
                    "additionalProperties": false,
                    "required": [
                      "max",
                      "min"
                    ],
                    "properties": {
                      "min": {
                        "type": "integer"
                      },
                      "max": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "non_persistent_attrs": {
                "type": "array",
                "description": "An array of user fields that should not be stored in the Auth0 database (https://auth0.com/docs/security/data-security/denylist)",
                "items": {
                  "type": "string"
                }
              },
              "precedence": {
                "type": "array",
                "description": "Order of precedence for attribute types. If the property is not specified, the default precedence of attributes will be used.",
                "items": {
                  "type": "string",
                  "description": "Order of precedence for attribute types",
                  "enum": [
                    "email",
                    "phone_number",
                    "username"
                  ]
                }
              },
              "attributes": {
                "type": "object",
                "description": "Attribute configuration",
                "additionalProperties": false,
                "properties": {
                  "email": {
                    "type": "object",
                    "description": "Configuration for the email attribute for users.",
                    "additionalProperties": false,
                    "properties": {
                      "identifier": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "active": {
                            "type": "boolean",
                            "description": "Determines if the attribute is used for identification"
                          }
                        }
                      },
                      "profile_required": {
                        "type": "boolean",
                        "description": "Determines if property should be required for users"
                      },
                      "verification_method": {
                        "type": "string",
                        "enum": [
                          "link",
                          "otp"
                        ]
                      },
                      "signup": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "status": {
                            "type": "string",
                            "enum": [
                              "required",
                              "optional",
                              "inactive"
                            ]
                          },
                          "verification": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "active": {
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "phone_number": {
                    "type": "object",
                    "description": "Configuration for the phone number attribute for users.",
                    "additionalProperties": false,
                    "properties": {
                      "identifier": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "active": {
                            "type": "boolean",
                            "description": "Determines if the attribute is used for identification"
                          }
                        }
                      },
                      "profile_required": {
                        "type": "boolean",
                        "description": "Determines if property should be required for users"
                      },
                      "signup": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "status": {
                            "type": "string",
                            "enum": [
                              "required",
                              "optional",
                              "inactive"
                            ]
                          },
                          "verification": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "active": {
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "username": {
                    "type": "object",
                    "description": "Configuration for the username attribute for users.",
                    "additionalProperties": false,
                    "properties": {
                      "identifier": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "active": {
                            "type": "boolean",
                            "description": "Determines if the attribute is used for identification"
                          }
                        }
                      },
                      "profile_required": {
                        "type": "boolean",
                        "description": "Determines if property should be required for users"
                      },
                      "signup": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "status": {
                            "type": "string",
                            "enum": [
                              "required",
                              "optional",
                              "inactive"
                            ]
                          }
                        }
                      },
                      "validation": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "min_length": {
                            "type": "number",
                            "description": "Minimum allowed length"
                          },
                          "max_length": {
                            "type": "number",
                            "description": "Maximum allowed length"
                          },
                          "allowed_types": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "email": {
                                "type": "boolean"
                              },
                              "phone_number": {
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "enable_script_context": {
                "type": "boolean"
              },
              "enabledDatabaseCustomization": {
                "type": "boolean",
                "description": "Set to true to use a legacy user store"
              },
              "import_mode": {
                "type": "boolean",
                "description": "Enable this if you have a legacy user store and you want to gradually migrate those users to the Auth0 user store"
              },
              "customScripts": {
                "type": "object",
                "description": "A map of scripts used to integrate with a custom database.",
                "additionalProperties": true,
                "properties": {
                  "login": {
                    "type": "string",
                    "minLength": 1
                  },
                  "get_user": {
                    "type": "string",
                    "minLength": 1
                  },
                  "delete": {
                    "type": "string",
                    "minLength": 1
                  },
                  "change_password": {
                    "type": "string",
                    "minLength": 1
                  },
                  "verify": {
                    "type": "string",
                    "minLength": 1
                  },
                  "create": {
                    "type": "string",
                    "minLength": 1
                  },
                  "change_username": {
                    "type": "string",
                    "minLength": 1
                  },
                  "change_email": {
                    "type": "string",
                    "minLength": 1
                  },
                  "change_phone_number": {
                    "type": "string",
                    "minLength": 1
                  }
                }
              },
              "authentication_methods": {
                "type": "object",
                "nullable": true,
                "description": "Options for enabling authentication methods.",
                "additionalProperties": false,
                "properties": {
                  "password": {
                    "type": "object",
                    "description": "Password authentication enablement",
                    "additionalProperties": false,
                    "properties": {
                      "enabled": {
                        "type": "boolean",
                        "description": "Determines whether passwords are enabled"
                      }
                    }
                  },
                  "passkey": {
                    "type": "object",
                    "description": "Passkey authentication enablement",
                    "additionalProperties": false,
                    "properties": {
                      "enabled": {
                        "type": "boolean",
                        "description": "Determines whether passkeys are enabled"
                      }
                    }
                  }
                }
              },
              "passkey_options": {
                "type": "object",
                "nullable": true,
                "description": "Options for the passkey authentication method",
                "additionalProperties": false,
                "properties": {
                  "challenge_ui": {
                    "type": "string",
                    "description": "Controls the UI used to challenge the user for their passkey.",
                    "enum": [
                      "both",
                      "autofill",
                      "button"
                    ]
                  },
                  "progressive_enrollment_enabled": {
                    "type": "boolean",
                    "description": "Enables or disables progressive enrollment of passkeys for the connection."
                  },
                  "local_enrollment_enabled": {
                    "type": "boolean",
                    "description": "Enables or disables enrollment prompt for local passkey when user authenticates using a cross-device passkey for the connection."
                  }
                }
              },
              "passwordPolicy": {
                "type": "string",
                "nullable": true,
                "description": "Password strength level",
                "enum": [
                  "none",
                  "low",
                  "fair",
                  "good",
                  "excellent",
                  null
                ]
              },
              "password_complexity_options": {
                "type": "object",
                "nullable": true,
                "description": "Password complexity options",
                "additionalProperties": false,
                "properties": {
                  "min_length": {
                    "type": "integer",
                    "description": "Minimum password length"
                  }
                }
              },
              "password_history": {
                "type": "object",
                "nullable": true,
                "description": "Options for password history policy",
                "additionalProperties": false,
                "required": [
                  "enable"
                ],
                "properties": {
                  "enable": {
                    "type": "boolean"
                  },
                  "size": {
                    "type": "integer"
                  }
                }
              },
              "password_no_personal_info": {
                "type": "object",
                "nullable": true,
                "description": "Options for personal info in passwords policy",
                "additionalProperties": false,
                "required": [
                  "enable"
                ],
                "properties": {
                  "enable": {
                    "type": "boolean"
                  }
                }
              },
              "password_dictionary": {
                "type": "object",
                "nullable": true,
                "description": "Options for password dictionary policy",
                "additionalProperties": false,
                "required": [
                  "enable"
                ],
                "properties": {
                  "enable": {
                    "type": "boolean"
                  },
                  "dictionary": {
                    "type": "array",
                    "description": "Custom Password Dictionary. An array of up to 200 entries.",
                    "items": {
                      "type": "string",
                      "description": "Custom Password Dictionary entry. 50 characters max.",
                      "maxLength": 50
                    }
                  }
                }
              },
              "api_enable_users": {
                "type": "boolean"
              },
              "basic_profile": {
                "type": "boolean"
              },
              "ext_admin": {
                "type": "boolean"
              },
              "ext_is_suspended": {
                "type": "boolean"
              },
              "ext_agreed_terms": {
                "type": "boolean"
              },
              "ext_groups": {
                "type": "boolean"
              },
              "ext_assigned_plans": {
                "type": "boolean"
              },
              "ext_profile": {
                "type": "boolean"
              },
              "disable_self_service_change_password": {
                "type": "boolean"
              },
              "upstream_params": {
                "type": "object",
                "nullable": true,
                "description": "Options for adding parameters in the request to the upstream IdP",
                "additionalProperties": true
              },
              "set_user_root_attributes": {
                "type": "string",
                "description": "When using an external IdP, this flag determines  whether 'name', 'given_name', 'family_name', 'nickname', and 'picture' attributes are updated. In addition, it also determines whether the user is created when user doesnt exist previously. Possible values are 'on_each_login' (default value, it configures the connection to automatically create the user if necessary and update the root attributes from the external IdP with each user login. When this setting is used, root attributes cannot be independently updated), 'on_first_login' (configures the connection to create the user and set the root attributes on first login only, allowing them to be independently updated thereafter), and 'never_on_login' (configures the connection not to create the user and not to set the root attributes from the external IdP, allowing them to be independently updated).",
                "default": "on_each_login",
                "enum": [
                  "on_each_login",
                  "on_first_login",
                  "never_on_login"
                ]
              },
              "gateway_authentication": {
                "type": "object",
                "nullable": true,
                "description": "Token-based authentication settings to be applied when connection is using an sms strategy.",
                "additionalProperties": true,
                "required": [
                  "method",
                  "audience",
                  "secret"
                ],
                "properties": {
                  "method": {
                    "type": "string",
                    "description": "The Authorization header type."
                  },
                  "subject": {
                    "type": "string",
                    "description": "The subject to be added to the JWT payload."
                  },
                  "audience": {
                    "type": "string",
                    "description": "The audience to be added to the JWT payload."
                  },
                  "secret": {
                    "type": "string",
                    "description": "The secret to be used for signing tokens."
                  },
                  "secret_base64_encoded": {
                    "type": "boolean",
                    "description": "Set to true if the provided secret is base64 encoded."
                  }
                }
              }
            }
          },
          "enabled_clients": {
            "type": "array",
            "description": "DEPRECATED property. Use the PATCH /v2/connections/{id}/clients endpoint to enable or disable the connection for any clients.",
            "x-release-lifecycle": "deprecated",
            "items": {
              "type": "string",
              "description": "The client_id of the client to for which the connection is to be enabled",
              "format": "client-id"
            }
          },
          "is_domain_connection": {
            "type": "boolean",
            "description": "<code>true</code> promotes to a domain-level connection so that third-party applications can use it. <code>false</code> does not promote the connection, so only first-party applications with the connection enabled can use it. (Defaults to <code>false</code>.)"
          },
          "show_as_button": {
            "type": "boolean",
            "description": "Enables showing a button for the connection in the login page (new experience only). If false, it will be usable only by HRD. (Defaults to <code>false</code>.)"
          },
          "realms": {
            "type": "array",
            "description": "Defines the realms for which the connection will be used (ie: email domains). If the array is empty or the property is not specified, the connection name will be added as realm.",
            "items": {
              "type": "string",
              "description": "The realm where this connection belongs",
              "format": "connection-realm"
            }
          },
          "metadata": {
            "type": "object",
            "description": "Metadata associated with the connection in the form of an object with string values (max 255 chars).  Maximum of 10 metadata properties allowed.",
            "additionalProperties": true
          }
        }
      },
      "deviceCredential": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of this device.",
            "default": "dcr_0000000000000001"
          },
          "device_name": {
            "type": "string",
            "description": "User agent for this device",
            "default": "iPhone Mobile Safari UI/WKWebView"
          },
          "device_id": {
            "type": "string",
            "description": "Unique identifier for the device. NOTE: This field is generally not populated for refresh_tokens and rotating_refresh_tokens",
            "default": "550e8400-e29b-41d4-a716-446655440000"
          },
          "type": {
            "type": "string",
            "description": "Type of credential. Can be `public_key`, `refresh_token`, or `rotating_refresh_token`.",
            "default": "public_key",
            "enum": [
              "public_key",
              "refresh_token",
              "rotating_refresh_token"
            ]
          },
          "user_id": {
            "type": "string",
            "description": "user_id this credential is associated with.",
            "default": "usr_5457edea1b8f33391a000004"
          },
          "client_id": {
            "type": "string",
            "description": "client_id of the client (application) this credential is for.",
            "default": "AaiyAPdpYdesoKnqjj8HJqRn4T5titww"
          }
        }
      },
      "deviceCredentialCreate": {
        "type": "object",
        "additionalProperties": true,
        "required": [
          "device_name",
          "type",
          "value",
          "device_id"
        ],
        "properties": {
          "device_name": {
            "type": "string",
            "description": "Name for this device easily recognized by owner.",
            "minLength": 1
          },
          "type": {
            "type": "string",
            "description": "Type of credential. Must be `public_key`.",
            "enum": [
              "public_key"
            ]
          },
          "value": {
            "type": "string",
            "description": "Base64 encoded string containing the credential.",
            "minLength": 1
          },
          "device_id": {
            "type": "string",
            "description": "Unique identifier for the device. Recommend using <a href=\"http://developer.android.com/reference/android/provider/Settings.Secure.html#ANDROID_ID\">Android_ID</a> on Android and <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIDevice_Class/index.html#//apple_ref/occ/instp/UIDevice/identifierForVendor\">identifierForVendor</a>.",
            "maxLength": 36
          },
          "client_id": {
            "type": "string",
            "description": "client_id of the client (application) this credential is for.",
            "format": "client-id"
          }
        }
      },
      "enrollment": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "ID for this enrollment.",
            "default": "dev_0000000000000001"
          },
          "status": {
            "type": "string",
            "description": "Status of this enrollment. Can be `pending` or `confirmed`.",
            "default": "pending",
            "enum": [
              "pending",
              "confirmed"
            ]
          },
          "name": {
            "type": "string",
            "description": "Device name (only for push notification).",
            "default": "iPhone 7",
            "minLength": 1,
            "maxLength": 20
          },
          "identifier": {
            "type": "string",
            "description": "Device identifier. This is usually the phone identifier.",
            "default": "76dc-a90c-a88c-a90c-a88c-a88c-a90c"
          },
          "phone_number": {
            "type": "string",
            "description": "Phone number.",
            "default": "+1 999999999999"
          },
          "enrolled_at": {
            "type": "string",
            "description": "Enrollment date and time.",
            "default": "2016-07-12T17:56:26.804Z"
          },
          "last_auth": {
            "type": "string",
            "description": "Last authentication date and time.",
            "default": "2016-07-12T17:56:26.804Z"
          }
        }
      },
      "enrollmentCreate": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "user_id"
        ],
        "properties": {
          "user_id": {
            "type": "string",
            "description": "user_id for the enrollment ticket",
            "format": "user-id"
          },
          "email": {
            "type": "string",
            "description": "alternate email to which the enrollment email will be sent. Optional - by default, the email will be sent to the user's default address",
            "format": "email"
          },
          "send_mail": {
            "type": "boolean",
            "description": "Send an email to the user to start the enrollment"
          },
          "email_locale": {
            "type": "string",
            "description": "Optional. Specify the locale of the enrollment email. Used with send_email."
          }
        }
      },
      "factor": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "enabled"
        ],
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Whether this factor is enabled (true) or disabled (false).",
            "default": true
          },
          "trial_expired": {
            "type": "boolean",
            "description": "Whether trial limits have been exceeded.",
            "default": true
          },
          "name": {
            "type": "string",
            "description": "Factor name. Can be `sms`, `push-notification`, `email`, `duo` `otp` `webauthn-roaming`, `webauthn-platform`, or `recovery-code`.",
            "default": "sms",
            "minLength": 1,
            "enum": [
              "push-notification",
              "sms",
              "email",
              "duo",
              "otp",
              "webauthn-roaming",
              "webauthn-platform",
              "recovery-code"
            ]
          }
        }
      },
      "hook": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "triggerId": {
            "type": "string",
            "description": "Trigger ID"
          },
          "id": {
            "type": "string",
            "description": "ID of this hook.",
            "default": "00001"
          },
          "name": {
            "type": "string",
            "description": "Name of this hook.",
            "default": "hook"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether this hook will be executed (true) or ignored (false).",
            "default": true
          },
          "script": {
            "type": "string",
            "description": "Code to be executed when this hook runs.",
            "default": "module.exports = function(client, scope, audience, context, cb) cb(null, access_token); };"
          },
          "dependencies": {
            "type": "object",
            "description": "Dependencies of this hook used by webtask server.",
            "additionalProperties": true
          }
        }
      },
      "hookCreate": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "script",
          "triggerId"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of this hook.",
            "default": "my-hook"
          },
          "script": {
            "type": "string",
            "description": "Code to be executed when this hook runs.",
            "default": "module.exports = function(client, scope, audience, context, cb) cb(null, access_token); };",
            "minLength": 1
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether this hook will be executed (true) or ignored (false).",
            "default": false
          },
          "dependencies": {
            "type": "object",
            "description": "Dependencies of this hook used by webtask server.",
            "additionalProperties": true
          },
          "triggerId": {
            "type": "string",
            "description": "Execution stage of this rule. Can be `credentials-exchange`, `pre-user-registration`, `post-user-registration`, `post-change-password`, or `send-phone-message`.",
            "default": "credentials-exchange",
            "enum": [
              "credentials-exchange",
              "pre-user-registration",
              "post-user-registration",
              "post-change-password",
              "send-phone-message"
            ]
          }
        }
      },
      "hookUpdate": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of this hook.",
            "default": "my-hook"
          },
          "script": {
            "type": "string",
            "description": "Code to be executed when this hook runs.",
            "default": "module.exports = function(client, scope, audience, context, cb) cb(null, access_token); };",
            "minLength": 1
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether this hook will be executed (true) or ignored (false).",
            "default": false
          },
          "dependencies": {
            "type": "object",
            "description": "Dependencies of this hook used by webtask server.",
            "additionalProperties": true
          }
        }
      },
      "log": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "date": {
            "oneOf": [
              {
                "type": "string",
                "description": "Date when the event occurred in ISO 8601 format.",
                "default": "2016-02-23T19:57:29.532Z"
              },
              {
                "type": "object",
                "description": "Date when the event occurred in ISO 8601 format.",
                "additionalProperties": true
              }
            ]
          },
          "type": {
            "type": "string",
            "description": "Type of event.",
            "default": "sapi"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Description of this event."
          },
          "connection": {
            "type": "string",
            "description": "Name of the connection the event relates to."
          },
          "connection_id": {
            "type": "string",
            "description": "ID of the connection the event relates to."
          },
          "client_id": {
            "type": "string",
            "description": "ID of the client (application).",
            "default": "AaiyAPdpYdesoKnqjj8HJqRn4T5titww"
          },
          "client_name": {
            "type": "string",
            "description": "Name of the client (application).",
            "default": "My application Name"
          },
          "ip": {
            "type": "string",
            "description": "IP address of the log event source.",
            "default": "190.257.209.19"
          },
          "hostname": {
            "type": "string",
            "description": "Hostname the event applies to.",
            "default": "190.257.209.19"
          },
          "user_id": {
            "type": "string",
            "description": "ID of the user involved in the event.",
            "default": "auth0|56c75c4e42b6359e98374bc2"
          },
          "user_name": {
            "type": "string",
            "description": "Name of the user involved in the event."
          },
          "audience": {
            "type": "string",
            "description": "API audience the event applies to."
          },
          "scope": {
            "type": "string",
            "description": "Scope permissions applied to the event.",
            "default": ""
          },
          "strategy": {
            "type": "string",
            "description": "Name of the strategy involved in the event."
          },
          "strategy_type": {
            "type": "string",
            "description": "Type of strategy involved in the event."
          },
          "log_id": {
            "type": "string",
            "description": "Unique ID of the event."
          },
          "isMobile": {
            "type": "boolean",
            "description": "Whether the client was a mobile device (true) or desktop/laptop/server (false)."
          },
          "details": {
            "type": "object",
            "description": "Additional useful details about this event (structure is dependent upon event type).",
            "additionalProperties": true
          },
          "user_agent": {
            "type": "string",
            "description": "User agent string from the client device that caused the event."
          },
          "location_info": {
            "type": "object",
            "description": "Information about the location that triggered this event based on the `ip`.",
            "additionalProperties": true,
            "properties": {
              "country_code": {
                "type": "string",
                "description": "Two-letter <a href=\"https://www.iso.org/iso-3166-country-codes.html\">Alpha-2 ISO 3166-1</a> country code.",
                "minLength": 2,
                "maxLength": 2
              },
              "country_code3": {
                "type": "string",
                "description": "Three-letter <a href=\"https://www.iso.org/iso-3166-country-codes.html\">Alpha-3 ISO 3166-1</a> country code.",
                "minLength": 3,
                "maxLength": 3
              },
              "country_name": {
                "type": "string",
                "description": "Full country name in English."
              },
              "city_name": {
                "type": "string",
                "description": "Full city name in English."
              },
              "latitude": {
                "type": "string",
                "description": "Global latitude (horizontal) position."
              },
              "longitude": {
                "type": "string",
                "description": "Global longitude (vertical) position."
              },
              "time_zone": {
                "type": "string",
                "description": "Time zone name as found in the <a href=\"https://www.iana.org/time-zones\">tz database</a>."
              },
              "continent_code": {
                "type": "string",
                "description": "Continent the country is located within. Can be `AF` (Africa), `AN` (Antarctica), `AS` (Asia), `EU` (Europe), `NA` (North America), `OC` (Oceania) or `SA` (South America)."
              }
            }
          }
        }
      },
      "resourceServer": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the API (resource server)."
          },
          "name": {
            "type": "string",
            "description": "Friendly name for this resource server. Can not contain `<` or `>` characters."
          },
          "is_system": {
            "type": "boolean",
            "description": "Whether this is an Auth0 system API (true) or a custom API (false)."
          },
          "identifier": {
            "type": "string",
            "description": "Unique identifier for the API used as the audience parameter on authorization calls. Can not be changed once set."
          },
          "scopes": {
            "type": "array",
            "description": "List of permissions (scopes) that this API uses.",
            "items": {
              "$ref": "#/components/schemas/scope"
            }
          },
          "signing_alg": {
            "$ref": "#/components/schemas/SigningAlgorithmEnum"
          },
          "signing_secret": {
            "type": "string",
            "description": "Secret used to sign tokens when using symmetric algorithms (HS256).",
            "minLength": 16
          },
          "allow_offline_access": {
            "type": "boolean",
            "description": "Whether refresh tokens can be issued for this API (true) or not (false)."
          },
          "skip_consent_for_verifiable_first_party_clients": {
            "type": "boolean",
            "description": "Whether to skip user consent for applications flagged as first party (true) or not (false)."
          },
          "token_lifetime": {
            "type": "integer",
            "description": "Expiration value (in seconds) for access tokens issued for this API from the token endpoint."
          },
          "token_lifetime_for_web": {
            "type": "integer",
            "description": "Expiration value (in seconds) for access tokens issued for this API via Implicit or Hybrid Flows. Cannot be greater than the `token_lifetime` value."
          },
          "enforce_policies": {
            "type": "boolean",
            "description": "Whether authorization polices are enforced (true) or unenforced (false)."
          },
          "token_dialect": {
            "type": "string",
            "description": "Dialect of access tokens that should be issued. `access_token` is a JWT containing standard Auth0 claims; `rfc9068_profile` is a JWT conforming to the IETF JWT Access Token Profile. `access_token_authz` and `rfc9068_profile_authz` additionally include RBAC permissions claims.",
            "enum": [
              "access_token",
              "access_token_authz",
              "rfc9068_profile",
              "rfc9068_profile_authz"
            ]
          },
          "token_encryption": {
            "type": "object",
            "nullable": true,
            "additionalProperties": false,
            "required": [
              "format",
              "encryption_key"
            ],
            "properties": {
              "format": {
                "description": "Format of the encrypted JWT payload.",
                "enum": [
                  "compact-nested-jwe"
                ]
              },
              "encryption_key": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "alg",
                  "pem"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the encryption key.",
                    "minLength": 1,
                    "maxLength": 128
                  },
                  "alg": {
                    "type": "string",
                    "description": "Algorithm used to encrypt the token.",
                    "enum": [
                      "RSA-OAEP-256",
                      "RSA-OAEP-384",
                      "RSA-OAEP-512"
                    ]
                  },
                  "kid": {
                    "type": "string",
                    "description": "Key ID.",
                    "minLength": 1,
                    "maxLength": 128
                  },
                  "pem": {
                    "type": "string",
                    "description": "PEM-formatted public key. Must be JSON escaped.",
                    "default": "-----BEGIN PUBLIC KEY-----\r\nMIIBIjANBg...\r\n-----END PUBLIC KEY-----\r\n",
                    "minLength": 1,
                    "maxLength": 4096
                  }
                }
              }
            }
          },
          "consent_policy": {
            "type": "string",
            "nullable": true,
            "enum": [
              "transactional-authorization-with-mfa",
              null
            ]
          },
          "authorization_details": {
            "type": "array",
            "items": {}
          },
          "proof_of_possession": {
            "type": "object",
            "nullable": true,
            "description": "Proof-of-Possession configuration for access tokens",
            "additionalProperties": false,
            "required": [
              "mechanism",
              "required"
            ],
            "properties": {
              "mechanism": {
                "type": "string",
                "description": "Intended mechanism for Proof-of-Possession",
                "enum": [
                  "mtls",
                  "dpop"
                ]
              },
              "required": {
                "type": "boolean",
                "description": "Whether the use of Proof-of-Possession is required for the resource server"
              }
            }
          }
        }
      },
      "resourceServerCreate": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "identifier"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Friendly name for this resource server. Can not contain `<` or `>` characters.",
            "maxLength": 200
          },
          "identifier": {
            "type": "string",
            "description": "Unique identifier for the API used as the audience parameter on authorization calls. Can not be changed once set.",
            "minLength": 1
          },
          "scopes": {
            "type": "array",
            "description": "List of permissions (scopes) that this API uses.",
            "items": {
              "$ref": "#/components/schemas/scope"
            }
          },
          "signing_alg": {
            "$ref": "#/components/schemas/SigningAlgorithmEnum"
          },
          "signing_secret": {
            "type": "string",
            "description": "Secret used to sign tokens when using symmetric algorithms (HS256).",
            "minLength": 16
          },
          "allow_offline_access": {
            "type": "boolean",
            "description": "Whether refresh tokens can be issued for this API (true) or not (false)."
          },
          "token_lifetime": {
            "type": "integer",
            "description": "Expiration value (in seconds) for access tokens issued for this API from the token endpoint."
          },
          "token_dialect": {
            "type": "string",
            "description": "Dialect of issued access token. `access_token` is a JWT containing standard Auth0 claims; `rfc9068_profile` is a JWT conforming to the IETF JWT Access Token Profile. `access_token_authz` and `rfc9068_profile_authz` additionally include RBAC permissions claims.",
            "enum": [
              "access_token",
              "access_token_authz",
              "rfc9068_profile",
              "rfc9068_profile_authz"
            ]
          },
          "skip_consent_for_verifiable_first_party_clients": {
            "type": "boolean",
            "description": "Whether to skip user consent for applications flagged as first party (true) or not (false)."
          },
          "enforce_policies": {
            "type": "boolean",
            "description": "Whether to enforce authorization policies (true) or to ignore them (false)."
          },
          "token_encryption": {
            "type": "object",
            "nullable": true,
            "additionalProperties": false,
            "required": [
              "format",
              "encryption_key"
            ],
            "properties": {
              "format": {
                "description": "Format of the encrypted JWT payload.",
                "enum": [
                  "compact-nested-jwe"
                ]
              },
              "encryption_key": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "alg",
                  "pem"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the encryption key.",
                    "minLength": 1,
                    "maxLength": 128
                  },
                  "alg": {
                    "type": "string",
                    "description": "Algorithm used to encrypt the token.",
                    "enum": [
                      "RSA-OAEP-256",
                      "RSA-OAEP-384",
                      "RSA-OAEP-512"
                    ]
                  },
                  "kid": {
                    "type": "string",
                    "description": "Key ID.",
                    "minLength": 1,
                    "maxLength": 128
                  },
                  "pem": {
                    "type": "string",
                    "description": "PEM-formatted public key. Must be JSON escaped.",
                    "default": "-----BEGIN PUBLIC KEY-----\r\nMIIBIjANBg...\r\n-----END PUBLIC KEY-----\r\n",
                    "minLength": 1,
                    "maxLength": 4096
                  }
                }
              }
            }
          },
          "consent_policy": {
            "type": "string",
            "nullable": true,
            "enum": [
              "transactional-authorization-with-mfa",
              null
            ]
          },
          "authorization_details": {
            "type": "array",
            "items": {}
          },
          "proof_of_possession": {
            "type": "object",
            "nullable": true,
            "description": "Proof-of-Possession configuration for access tokens",
            "additionalProperties": false,
            "required": [
              "mechanism",
              "required"
            ],
            "properties": {
              "mechanism": {
                "type": "string",
                "description": "Intended mechanism for Proof-of-Possession",
                "enum": [
                  "mtls",
                  "dpop"
                ]
              },
              "required": {
                "type": "boolean",
                "description": "Whether the use of Proof-of-Possession is required for the resource server"
              }
            }
          }
        }
      },
      "resourceServerUpdate": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "Friendly name for this resource server. Can not contain `<` or `>` characters.",
            "maxLength": 200
          },
          "scopes": {
            "type": "array",
            "description": "List of permissions (scopes) that this API uses.",
            "items": {
              "$ref": "#/components/schemas/scope"
            }
          },
          "signing_alg": {
            "$ref": "#/components/schemas/SigningAlgorithmEnum"
          },
          "signing_secret": {
            "type": "string",
            "description": "Secret used to sign tokens when using symmetric algorithms (HS256).",
            "minLength": 16
          },
          "skip_consent_for_verifiable_first_party_clients": {
            "type": "boolean",
            "description": "Whether to skip user consent for applications flagged as first party (true) or not (false)."
          },
          "allow_offline_access": {
            "type": "boolean",
            "description": "Whether refresh tokens can be issued for this API (true) or not (false)."
          },
          "token_lifetime": {
            "type": "integer",
            "description": "Expiration value (in seconds) for access tokens issued for this API from the token endpoint."
          },
          "token_dialect": {
            "type": "string",
            "description": "Dialect of issued access token. `access_token` is a JWT containing standard Auth0 claims; `rfc9068_profile` is a JWT conforming to the IETF JWT Access Token Profile. `access_token_authz` and `rfc9068_profile_authz` additionally include RBAC permissions claims.",
            "enum": [
              "access_token",
              "access_token_authz",
              "rfc9068_profile",
              "rfc9068_profile_authz"
            ]
          },
          "enforce_policies": {
            "type": "boolean",
            "description": "Whether authorization policies are enforced (true) or not enforced (false)."
          },
          "token_encryption": {
            "type": "object",
            "nullable": true,
            "additionalProperties": false,
            "required": [
              "format",
              "encryption_key"
            ],
            "properties": {
              "format": {
                "description": "Format of the encrypted JWT payload.",
                "enum": [
                  "compact-nested-jwe"
                ]
              },
              "encryption_key": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "alg",
                  "pem"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the encryption key.",
                    "minLength": 1,
                    "maxLength": 128
                  },
                  "alg": {
                    "type": "string",
                    "description": "Algorithm used to encrypt the token.",
                    "enum": [
                      "RSA-OAEP-256",
                      "RSA-OAEP-384",
                      "RSA-OAEP-512"
                    ]
                  },
                  "kid": {
                    "type": "string",
                    "description": "Key ID.",
                    "minLength": 1,
                    "maxLength": 128
                  },
                  "pem": {
                    "type": "string",
                    "description": "PEM-formatted public key. Must be JSON escaped.",
                    "default": "-----BEGIN PUBLIC KEY-----\r\nMIIBIjANBg...\r\n-----END PUBLIC KEY-----\r\n",
                    "minLength": 1,
                    "maxLength": 4096
                  }
                }
              }
            }
          },
          "consent_policy": {
            "type": "string",
            "nullable": true,
            "enum": [
              "transactional-authorization-with-mfa",
              null
            ]
          },
          "authorization_details": {
            "type": "array",
            "items": {}
          },
          "proof_of_possession": {
            "type": "object",
            "nullable": true,
            "description": "Proof-of-Possession configuration for access tokens",
            "additionalProperties": false,
            "required": [
              "mechanism",
              "required"
            ],
            "properties": {
              "mechanism": {
                "type": "string",
                "description": "Intended mechanism for Proof-of-Possession",
                "enum": [
                  "mtls",
                  "dpop"
                ]
              },
              "required": {
                "type": "boolean",
                "description": "Whether the use of Proof-of-Possession is required for the resource server"
              }
            }
          }
        }
      },
      "rule": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of this rule.",
            "default": "rule_1"
          },
          "id": {
            "type": "string",
            "description": "ID of this rule.",
            "default": "con_0000000000000001"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the rule is enabled (true), or disabled (false).",
            "default": true
          },
          "script": {
            "type": "string",
            "description": "Code to be executed when this rule runs.",
            "default": "function (user, context, callback) {\n  callback(null, user, context);\n}"
          },
          "order": {
            "type": "number",
            "description": "Order that this rule should execute in relative to other rules. Lower-valued rules execute first.",
            "default": 1
          },
          "stage": {
            "type": "string",
            "description": "Execution stage of this rule. Can be `login_success`, `login_failure`, or `pre_authorize`.",
            "default": "login_success"
          }
        }
      },
      "ruleCreate": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "script"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of this rule.",
            "default": "my-rule"
          },
          "script": {
            "type": "string",
            "description": "Code to be executed when this rule runs.",
            "default": "function (user, context, callback) {\n  callback(null, user, context);\n}",
            "minLength": 1
          },
          "order": {
            "type": "number",
            "description": "Order that this rule should execute in relative to other rules. Lower-valued rules execute first.",
            "default": 2
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the rule is enabled (true), or disabled (false).",
            "default": true
          }
        }
      },
      "ruleUpdate": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "script": {
            "type": "string",
            "description": "Code to be executed when this rule runs.",
            "default": "function (user, context, callback) {\n  callback(null, user, context);\n}",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "Name of this rule.",
            "default": "my-rule"
          },
          "order": {
            "type": "number",
            "description": "Order that this rule should execute in relative to other rules. Lower-valued rules execute first.",
            "default": 2
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the rule is enabled (true), or disabled (false).",
            "default": true
          }
        }
      },
      "scope": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "type": "string",
            "description": "Value of this scope.",
            "minLength": 1
          },
          "description": {
            "type": "string",
            "description": "User-friendly description of this scope."
          }
        }
      },
      "smsTwilioFactorProvider": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "from": {
            "type": "string",
            "nullable": true,
            "description": "From number",
            "default": "+1223323",
            "minLength": 0,
            "maxLength": 64
          },
          "messaging_service_sid": {
            "type": "string",
            "nullable": true,
            "description": "Copilot SID",
            "default": "5dEkAiHLPCuQ1uJj4qNXcAnERFAL6cpq",
            "minLength": 1,
            "maxLength": 1000
          },
          "auth_token": {
            "type": "string",
            "nullable": true,
            "description": "Twilio Authentication token",
            "default": "zw5Ku6z2sxhd0ZVXto5SDHX6KPDByJPU",
            "minLength": 1,
            "maxLength": 1000
          },
          "sid": {
            "type": "string",
            "nullable": true,
            "description": "Twilio SID",
            "default": "wywA2BH4VqTpfywiDuyDAYZL3xQjoO40",
            "minLength": 1,
            "maxLength": 1000
          }
        }
      },
      "snsFactorProvider": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "aws_access_key_id": {
            "type": "string",
            "nullable": true,
            "default": "wywA2BH4VqTpfywiDuyDAYZL3xQjoO40",
            "minLength": 1,
            "maxLength": 1000
          },
          "aws_secret_access_key": {
            "type": "string",
            "nullable": true,
            "default": "B1ER5JHDGJL3C4sVAKK7SBsq806R3IpL",
            "minLength": 1,
            "maxLength": 1000
          },
          "aws_region": {
            "type": "string",
            "nullable": true,
            "default": "us-west-1",
            "minLength": 1,
            "maxLength": 1000
          },
          "sns_apns_platform_application_arn": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          },
          "sns_gcm_platform_application_arn": {
            "type": "string",
            "nullable": true,
            "default": "urn://yRMeBxgcCXh8MeTXPBAxhQnm6gP6f5nP",
            "minLength": 1,
            "maxLength": 1000
          }
        }
      },
      "ssProfile": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of the self-service Profile.",
            "default": "ssp_n7SNCL8seoyV1TuSTCnAeo"
          },
          "name": {
            "type": "string",
            "description": "The name of the self-service Profile."
          },
          "description": {
            "type": "string",
            "description": "The description of the self-service Profile."
          },
          "user_attributes": {
            "type": "array",
            "description": "List of attributes to be mapped that will be shown to the user during the SS-SSO flow.",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "name",
                "description",
                "is_optional"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Identifier of this attribute.",
                  "maxLength": 250
                },
                "description": {
                  "type": "string",
                  "description": "Description of this attribute."
                },
                "is_optional": {
                  "type": "boolean",
                  "description": "Determines if this attribute is required"
                }
              }
            }
          },
          "created_at": {
            "type": "string",
            "description": "The time when this self-service Profile was created.",
            "default": "2021-01-01T00:00:00.000Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "The time when this self-service Profile was updated.",
            "default": "2021-01-01T00:00:00.000Z",
            "format": "date-time"
          },
          "branding": {
            "type": "object",
            "additionalProperties": true,
            "properties": {
              "logo_url": {
                "type": "string",
                "maxLength": 1024,
                "format": "uri"
              },
              "colors": {
                "type": "object",
                "additionalProperties": true,
                "required": [
                  "primary"
                ],
                "properties": {
                  "primary": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "allowed_strategies": {
            "type": "array",
            "description": "List of IdP strategies that will be shown to users during the Self-Service SSO flow. Possible values: [`oidc`, `samlp`, `waad`, `google-apps`, `adfs`, `okta`, `keycloak-samlp`, `pingfederate`]",
            "items": {
              "type": "string",
              "enum": [
                "oidc",
                "samlp",
                "waad",
                "google-apps",
                "adfs",
                "okta",
                "keycloak-samlp",
                "pingfederate"
              ]
            }
          }
        }
      },
      "ssProfileCreate": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the self-service Profile.",
            "minLength": 1,
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "description": "The description of the self-service Profile.",
            "minLength": 1,
            "maxLength": 140
          },
          "branding": {
            "type": "object",
            "additionalProperties": true,
            "properties": {
              "logo_url": {
                "type": "string",
                "maxLength": 1024,
                "format": "uri"
              },
              "colors": {
                "type": "object",
                "additionalProperties": true,
                "required": [
                  "primary"
                ],
                "properties": {
                  "primary": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "allowed_strategies": {
            "type": "array",
            "description": "List of IdP strategies that will be shown to users during the Self-Service SSO flow. Possible values: [`oidc`, `samlp`, `waad`, `google-apps`, `adfs`, `okta`, `keycloak-samlp`, `pingfederate`]",
            "items": {
              "type": "string",
              "enum": [
                "oidc",
                "samlp",
                "waad",
                "google-apps",
                "adfs",
                "okta",
                "keycloak-samlp",
                "pingfederate"
              ]
            }
          },
          "user_attributes": {
            "type": "array",
            "description": "List of attributes to be mapped that will be shown to the user during the SS-SSO flow.",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "name",
                "description",
                "is_optional"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Identifier of this attribute.",
                  "maxLength": 250
                },
                "description": {
                  "type": "string",
                  "description": "Description of this attribute."
                },
                "is_optional": {
                  "type": "boolean",
                  "description": "Determines if this attribute is required"
                }
              }
            }
          }
        }
      },
      "ssProfileUpdate": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the self-service Profile.",
            "minLength": 1,
            "maxLength": 100
          },
          "description": {
            "nullable": true,
            "description": "The description of the self-service Profile.",
            "type": "string",
            "minLength": 1,
            "maxLength": 140
          },
          "branding": {
            "nullable": true,
            "type": "object",
            "additionalProperties": true,
            "properties": {
              "logo_url": {
                "type": "string",
                "maxLength": 1024,
                "format": "uri"
              },
              "colors": {
                "type": "object",
                "additionalProperties": true,
                "required": [
                  "primary"
                ],
                "properties": {
                  "primary": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "allowed_strategies": {
            "type": "array",
            "description": "List of IdP strategies that will be shown to users during the Self-Service SSO flow. Possible values: [`oidc`, `samlp`, `waad`, `google-apps`, `adfs`, `okta`, `keycloak-samlp`, `pingfederate`]",
            "items": {
              "type": "string",
              "enum": [
                "oidc",
                "samlp",
                "waad",
                "google-apps",
                "adfs",
                "okta",
                "keycloak-samlp",
                "pingfederate"
              ]
            }
          },
          "user_attributes": {
            "nullable": true,
            "description": "List of attributes to be mapped that will be shown to the user during the SS-SSO flow.",
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "name",
                "description",
                "is_optional"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Identifier of this attribute.",
                  "maxLength": 250
                },
                "description": {
                  "type": "string",
                  "description": "Description of this attribute."
                },
                "is_optional": {
                  "type": "boolean",
                  "description": "Determines if this attribute is required"
                }
              }
            }
          }
        }
      },
      "ssoAccessTicketResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ticket": {
            "type": "string",
            "description": "The URL for the created ticket."
          }
        }
      },
      "statsEntry": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "date": {
            "type": "string",
            "description": "Date these events occurred in ISO 8601 format.",
            "default": "2014-01-01T00:00:00.000Z"
          },
          "logins": {
            "type": "integer",
            "description": "Number of logins on this date.",
            "default": 100
          },
          "signups": {
            "type": "integer",
            "description": "Number of signups on this date.",
            "default": 100
          },
          "leaked_passwords": {
            "type": "integer",
            "description": "Number of breached-password detections on this date (subscription required).",
            "default": 100
          },
          "updated_at": {
            "type": "string",
            "description": "Date and time this stats entry was last updated in ISO 8601 format.",
            "default": "2014-01-01T02:00:00.000Z"
          },
          "created_at": {
            "type": "string",
            "description": "Approximate date and time the first event occurred in ISO 8601 format.",
            "default": "2014-01-01T20:00:00.000Z"
          }
        }
      },
      "templateMessages": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "enrollment_message",
          "verification_message"
        ],
        "properties": {
          "enrollment_message": {
            "type": "string",
            "description": "Message sent to the user when they are invited to enroll with a phone number.",
            "default": "{{code}} is your verification code for {{tenant.friendly_name}}. Please enter this code to verify your enrollment."
          },
          "verification_message": {
            "type": "string",
            "description": "Message sent to the user when they are prompted to verify their account.",
            "default": "{{code}} is your verification code for {{tenant.friendly_name}}"
          }
        }
      },
      "tenantSettings": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "change_password": {
            "type": "object",
            "nullable": true,
            "description": "Change Password page customization.",
            "additionalProperties": false,
            "properties": {
              "enabled": {
                "type": "boolean",
                "description": "Whether to use the custom change password HTML (true) or the default Auth0 page (false). Default is to use the Auth0 page.",
                "default": false
              },
              "html": {
                "type": "string",
                "description": "Custom change password HTML (<a href='https://github.com/Shopify/liquid/wiki/Liquid-for-Designers'>Liquid syntax</a> supported).",
                "default": ""
              }
            }
          },
          "guardian_mfa_page": {
            "type": "object",
            "nullable": true,
            "description": "Guardian page customization.",
            "additionalProperties": false,
            "properties": {
              "enabled": {
                "type": "boolean",
                "description": "Whether to use the custom Guardian HTML (true) or the default Auth0 page (false, default)",
                "default": false
              },
              "html": {
                "type": "string",
                "description": " Custom Guardian HTML (<a href='https://github.com/Shopify/liquid/wiki/Liquid-for-Designers'>Liquid syntax</a> is supported).",
                "default": ""
              }
            }
          },
          "default_audience": {
            "type": "string",
            "description": "Default audience for API authorization.",
            "default": ""
          },
          "default_directory": {
            "type": "string",
            "description": "Name of connection used for password grants at the `/token`endpoint. The following connection types are supported: LDAP, AD, Database Connections, Passwordless, Windows Azure Active Directory, ADFS.",
            "default": ""
          },
          "error_page": {
            "type": "object",
            "nullable": true,
            "description": "Error page customization.",
            "additionalProperties": false,
            "properties": {
              "html": {
                "type": "string",
                "description": "Custom Error HTML (<a href='https://github.com/Shopify/liquid/wiki/Liquid-for-Designers'>Liquid syntax</a> is supported).",
                "default": ""
              },
              "show_log_link": {
                "type": "boolean",
                "description": "Whether to show the link to log as part of the default error page (true, default) or not to show the link (false).",
                "default": false
              },
              "url": {
                "type": "string",
                "description": "URL to redirect to when an error occurs instead of showing the default error page.",
                "default": "https://mycompany.org/error",
                "format": "absolute-uri-or-empty"
              }
            }
          },
          "device_flow": {
            "type": "object",
            "nullable": true,
            "description": "Device Flow configuration",
            "additionalProperties": false,
            "properties": {
              "charset": {
                "type": "string",
                "description": "Character set used to generate a User Code. Can be `base20` or `digits`.",
                "default": "base20",
                "enum": [
                  "base20",
                  "digits"
                ]
              },
              "mask": {
                "type": "string",
                "description": "Mask used to format a generated User Code into a friendly, readable format.",
                "default": "****-****",
                "maxLength": 20
              }
            }
          },
          "default_token_quota": {
            "$ref": "#/components/schemas/DefaultTokenQuota"
          },
          "flags": {
            "type": "object",
            "description": "Flags used to change the behavior of this tenant.",
            "additionalProperties": false,
            "properties": {
              "change_pwd_flow_v1": {
                "type": "boolean",
                "description": "Whether to use the older v1 change password flow (true, not recommended except for backward compatibility) or the newer safer flow (false, recommended).",
                "default": false
              },
              "enable_apis_section": {
                "type": "boolean",
                "description": "Whether the APIs section is enabled (true) or disabled (false).",
                "default": false
              },
              "disable_impersonation": {
                "type": "boolean",
                "description": "Whether the impersonation functionality has been disabled (true) or not (false). Read-only.",
                "default": false
              },
              "enable_client_connections": {
                "type": "boolean",
                "description": "Whether all current connections should be enabled when a new client (application) is created (true, default) or not (false).",
                "default": true
              },
              "enable_pipeline2": {
                "type": "boolean",
                "description": "Whether advanced API Authorization scenarios are enabled (true) or disabled (false).",
                "default": true
              },
              "allow_legacy_delegation_grant_types": {
                "type": "boolean",
                "description": "If enabled, clients are able to add legacy delegation grants."
              },
              "allow_legacy_ro_grant_types": {
                "type": "boolean",
                "description": "If enabled, clients are able to add legacy RO grants."
              },
              "allow_legacy_tokeninfo_endpoint": {
                "type": "boolean",
                "description": "Whether the legacy `/tokeninfo` endpoint is enabled for your account (true) or unavailable (false)."
              },
              "enable_legacy_profile": {
                "type": "boolean",
                "description": "Whether ID tokens and the userinfo endpoint includes a complete user profile (true) or only OpenID Connect claims (false)."
              },
              "enable_idtoken_api2": {
                "type": "boolean",
                "description": "Whether ID tokens can be used to authorize some types of requests to API v2 (true) not not (false)."
              },
              "enable_public_signup_user_exists_error": {
                "type": "boolean",
                "description": "Whether the public sign up process shows a user_exists error (true) or a generic error (false) if the user already exists."
              },
              "enable_sso": {
                "type": "boolean",
                "description": "Whether users are prompted to confirm log in before SSO redirection (false) or are not prompted (true)."
              },
              "allow_changing_enable_sso": {
                "type": "boolean",
                "description": "Whether the `enable_sso` setting can be changed (true) or not (false)."
              },
              "disable_clickjack_protection_headers": {
                "type": "boolean",
                "description": "Whether classic Universal Login prompts include additional security headers to prevent clickjacking (true) or no safeguard (false)."
              },
              "no_disclose_enterprise_connections": {
                "type": "boolean",
                "description": "Do not Publish Enterprise Connections Information with IdP domains on the lock configuration file."
              },
              "enforce_client_authentication_on_passwordless_start": {
                "type": "boolean",
                "description": "Enforce client authentication for passwordless start."
              },
              "enable_adfs_waad_email_verification": {
                "type": "boolean",
                "description": "Enables the email verification flow during login for Azure AD and ADFS connections"
              },
              "revoke_refresh_token_grant": {
                "type": "boolean",
                "description": "Delete underlying grant when a Refresh Token is revoked via the Authentication API."
              },
              "dashboard_log_streams_next": {
                "type": "boolean",
                "description": "Enables beta access to log streaming changes"
              },
              "dashboard_insights_view": {
                "type": "boolean",
                "description": "Enables new insights activity page view"
              },
              "disable_fields_map_fix": {
                "type": "boolean",
                "description": "Disables SAML fields map fix for bad mappings with repeated attributes"
              },
              "mfa_show_factor_list_on_enrollment": {
                "type": "boolean",
                "description": "Used to allow users to pick what factor to enroll of the available MFA factors."
              },
              "remove_alg_from_jwks": {
                "type": "boolean",
                "description": "Removes alg property from jwks .well-known endpoint"
              },
              "improved_signup_bot_detection_in_classic": {
                "type": "boolean",
                "description": "Improves bot detection during signup in classic universal login"
              },
              "genai_trial": {
                "type": "boolean",
                "description": "This tenant signed up for the Auth4GenAI trail"
              },
              "enable_dynamic_client_registration": {
                "type": "boolean",
                "description": "Whether third-party developers can <a href=\"https://auth0.com/docs/api-auth/dynamic-client-registration\">dynamically register</a> applications for your APIs (true) or not (false). This flag enables dynamic client registration.",
                "default": false
              },
              "disable_management_api_sms_obfuscation": {
                "type": "boolean",
                "description": "If true, SMS phone numbers will not be obfuscated in Management API GET calls.",
                "default": true
              },
              "trust_azure_adfs_email_verified_connection_property": {
                "type": "boolean",
                "description": "Changes email_verified behavior for Azure AD/ADFS connections when enabled. Sets email_verified to false otherwise.",
                "default": false
              },
              "custom_domains_provisioning": {
                "type": "boolean",
                "description": "If true, custom domains feature will be enabled for tenant.",
                "default": false
              }
            }
          },
          "friendly_name": {
            "type": "string",
            "description": "Friendly name for this tenant.",
            "default": "My Company"
          },
          "picture_url": {
            "type": "string",
            "description": "URL of logo to be shown for this tenant (recommended size: 150x150)",
            "default": "https://mycompany.org/logo.png",
            "format": "absolute-uri-or-empty"
          },
          "support_email": {
            "type": "string",
            "description": "End-user support email address.",
            "default": "support@mycompany.org",
            "format": "email-or-empty"
          },
          "support_url": {
            "type": "string",
            "description": "End-user support URL.",
            "default": "https://mycompany.org/support",
            "format": "absolute-uri-or-empty"
          },
          "allowed_logout_urls": {
            "type": "array",
            "description": "URLs that are valid to redirect to after logout from Auth0.",
            "items": {
              "type": "string",
              "format": "url"
            }
          },
          "session_lifetime": {
            "type": "number",
            "description": "Number of hours a session will stay valid.",
            "default": 168
          },
          "idle_session_lifetime": {
            "type": "number",
            "description": "Number of hours for which a session can be inactive before the user must log in again.",
            "default": 72
          },
          "sandbox_version": {
            "type": "string",
            "description": "Selected sandbox version for the extensibility environment.",
            "default": "22"
          },
          "legacy_sandbox_version": {
            "type": "string",
            "description": "Selected sandbox version for rules and hooks extensibility.",
            "default": ""
          },
          "sandbox_versions_available": {
            "type": "array",
            "description": "Available sandbox versions for the extensibility environment.",
            "items": {
              "type": "string"
            }
          },
          "default_redirection_uri": {
            "type": "string",
            "description": "The default absolute redirection uri, must be https"
          },
          "enabled_locales": {
            "type": "array",
            "description": "Supported locales for the user interface.",
            "items": {
              "type": "string",
              "enum": [
                "am",
                "ar",
                "ar-EG",
                "ar-SA",
                "az",
                "bg",
                "bn",
                "bs",
                "ca-ES",
                "cnr",
                "cs",
                "cy",
                "da",
                "de",
                "el",
                "en",
                "en-CA",
                "es",
                "es-419",
                "es-AR",
                "es-MX",
                "et",
                "eu-ES",
                "fa",
                "fi",
                "fr",
                "fr-CA",
                "fr-FR",
                "gl-ES",
                "gu",
                "he",
                "hi",
                "hr",
                "hu",
                "hy",
                "id",
                "is",
                "it",
                "ja",
                "ka",
                "kk",
                "kn",
                "ko",
                "lt",
                "lv",
                "mk",
                "ml",
                "mn",
                "mr",
                "ms",
                "my",
                "nb",
                "nl",
                "nn",
                "no",
                "pa",
                "pl",
                "pt",
                "pt-BR",
                "pt-PT",
                "ro",
                "ru",
                "sk",
                "sl",
                "so",
                "sq",
                "sr",
                "sv",
                "sw",
                "ta",
                "te",
                "th",
                "tl",
                "tr",
                "uk",
                "ur",
                "vi",
                "zgh",
                "zh-CN",
                "zh-HK",
                "zh-TW"
              ]
            }
          },
          "session_cookie": {
            "type": "object",
            "nullable": true,
            "description": "Session cookie configuration",
            "additionalProperties": false,
            "required": [
              "mode"
            ],
            "properties": {
              "mode": {
                "type": "string",
                "description": "Behavior of the session cookie",
                "default": "persistent",
                "enum": [
                  "persistent",
                  "non-persistent"
                ]
              }
            }
          },
          "sessions": {
            "type": "object",
            "nullable": true,
            "description": "Sessions related settings for tenant",
            "additionalProperties": false,
            "properties": {
              "oidc_logout_prompt_enabled": {
                "type": "boolean",
                "description": "Whether to bypass prompting logic (false) when performing OIDC Logout",
                "default": true
              }
            }
          },
          "oidc_logout": {
            "type": "object",
            "description": "Settings related to OIDC RP-initiated Logout",
            "additionalProperties": false,
            "properties": {
              "rp_logout_end_session_endpoint_discovery": {
                "type": "boolean",
                "description": "Enable the end_session_endpoint URL in the .well-known discovery configuration",
                "default": true
              }
            }
          },
          "allow_organization_name_in_authentication_api": {
            "type": "boolean",
            "description": "Whether to accept an organization name instead of an ID on auth endpoints",
            "default": false
          },
          "customize_mfa_in_postlogin_action": {
            "type": "boolean",
            "description": "Whether to enable flexible factors for MFA in the PostLogin action",
            "default": false
          },
          "acr_values_supported": {
            "type": "array",
            "description": "Supported ACR values",
            "items": {
              "type": "string",
              "format": "acr"
            }
          },
          "mtls": {
            "type": "object",
            "nullable": true,
            "description": "mTLS configuration.",
            "additionalProperties": false,
            "properties": {
              "enable_endpoint_aliases": {
                "type": "boolean",
                "description": "If true, enables mTLS endpoint aliases",
                "default": false
              }
            }
          },
          "pushed_authorization_requests_supported": {
            "type": "boolean",
            "description": "Enables the use of Pushed Authorization Requests",
            "default": false
          },
          "authorization_response_iss_parameter_supported": {
            "type": "boolean",
            "nullable": true,
            "description": "Supports iss parameter in authorization responses",
            "default": false
          }
        }
      },
      "tenantSettingsUpdate": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "change_password": {
            "type": "object",
            "nullable": true,
            "description": "Change Password page customization.",
            "additionalProperties": false,
            "properties": {
              "enabled": {
                "type": "boolean",
                "description": "Whether to use the custom change password HTML (true) or the default Auth0 page (false). Default is to use the Auth0 page.",
                "default": false
              },
              "html": {
                "type": "string",
                "description": "Custom change password HTML (<a href='https://github.com/Shopify/liquid/wiki/Liquid-for-Designers'>Liquid syntax</a> supported).",
                "default": ""
              }
            }
          },
          "device_flow": {
            "type": "object",
            "nullable": true,
            "description": "Device Flow configuration.",
            "additionalProperties": false,
            "properties": {
              "charset": {
                "type": "string",
                "description": "Character set used to generate a User Code. Can be `base20` or `digits`.",
                "default": "base20",
                "enum": [
                  "base20",
                  "digits"
                ]
              },
              "mask": {
                "type": "string",
                "description": "Mask used to format a generated User Code into a friendly, readable format.",
                "default": "****-****"
              }
            }
          },
          "guardian_mfa_page": {
            "type": "object",
            "nullable": true,
            "description": "Guardian page customization.",
            "additionalProperties": false,
            "properties": {
              "enabled": {
                "type": "boolean",
                "description": "Whether to use the custom Guardian HTML (true) or the default Auth0 page (false, default)",
                "default": false
              },
              "html": {
                "type": "string",
                "description": " Custom Guardian HTML (<a href='https://github.com/Shopify/liquid/wiki/Liquid-for-Designers'>Liquid syntax</a> is supported).",
                "default": ""
              }
            }
          },
          "default_audience": {
            "type": "string",
            "description": "Default audience for API Authorization.",
            "default": ""
          },
          "default_directory": {
            "type": "string",
            "description": "Name of connection used for password grants at the `/token` endpoint. The following connection types are supported: LDAP, AD, Database Connections, Passwordless, Windows Azure Active Directory, ADFS.",
            "default": ""
          },
          "error_page": {
            "type": "object",
            "nullable": true,
            "description": "Error page customization.",
            "additionalProperties": false,
            "properties": {
              "html": {
                "type": "string",
                "description": "Custom Error HTML (<a href='https://github.com/Shopify/liquid/wiki/Liquid-for-Designers'>Liquid syntax</a> is supported).",
                "default": ""
              },
              "show_log_link": {
                "type": "boolean",
                "description": "Whether to show the link to log as part of the default error page (true, default) or not to show the link (false).",
                "default": false
              },
              "url": {
                "type": "string",
                "description": "URL to redirect to when an error occurs instead of showing the default error page.",
                "default": "https://mycompany.org/error",
                "format": "absolute-uri-or-empty"
              }
            }
          },
          "default_token_quota": {
            "$ref": "#/components/schemas/DefaultTokenQuota"
          },
          "flags": {
            "type": "object",
            "description": "Flags used to change the behavior of this tenant.",
            "additionalProperties": false,
            "properties": {
              "change_pwd_flow_v1": {
                "type": "boolean",
                "description": "Whether to use the older v1 change password flow (true, not recommended except for backward compatibility) or the newer safer flow (false, recommended).",
                "enum": [
                  false
                ]
              },
              "enable_client_connections": {
                "type": "boolean",
                "description": "Whether all current connections should be enabled when a new client (application) is created (true, default) or not (false)."
              },
              "enable_apis_section": {
                "type": "boolean",
                "description": "Whether the APIs section is enabled (true) or disabled (false)."
              },
              "enable_pipeline2": {
                "type": "boolean",
                "description": "Whether advanced API Authorization scenarios are enabled (true) or disabled (false)."
              },
              "enable_dynamic_client_registration": {
                "type": "boolean",
                "description": " Whether third-party developers can <a href='https://auth0.com/docs/api-auth/dynamic-client-registration'>dynamically register</a> applications for your APIs (true) or not (false). This flag enables dynamic client registration."
              },
              "enable_custom_domain_in_emails": {
                "type": "boolean",
                "description": "Whether emails sent by Auth0 for change password, verification etc. should use your verified custom domain (true) or your auth0.com sub-domain (false).  Affects all emails, links, and URLs. Email will fail if the custom domain is not verified."
              },
              "allow_legacy_tokeninfo_endpoint": {
                "type": "boolean",
                "description": "Whether the legacy `/tokeninfo` endpoint is enabled for your account (true) or unavailable (false)."
              },
              "enable_legacy_profile": {
                "type": "boolean",
                "description": "Whether ID tokens and the userinfo endpoint includes a complete user profile (true) or only OpenID Connect claims (false)."
              },
              "enable_idtoken_api2": {
                "type": "boolean",
                "description": "Whether ID tokens can be used to authorize some types of requests to API v2 (true) not not (false)."
              },
              "enable_public_signup_user_exists_error": {
                "type": "boolean",
                "description": "Whether the public sign up process shows a user_exists error (true) or a generic error (false) if the user already exists."
              },
              "allow_legacy_delegation_grant_types": {
                "type": "boolean",
                "description": " Whether the legacy delegation endpoint will be enabled for your account (true) or not available (false)."
              },
              "allow_legacy_ro_grant_types": {
                "type": "boolean",
                "description": "Whether the legacy `auth/ro` endpoint (used with resource owner password and passwordless features) will be enabled for your account (true) or not available (false)."
              },
              "enable_sso": {
                "type": "boolean",
                "description": "Whether users are prompted to confirm log in before SSO redirection (false) or are not prompted (true)."
              },
              "disable_clickjack_protection_headers": {
                "type": "boolean",
                "description": "Whether classic Universal Login prompts include additional security headers to prevent clickjacking (true) or no safeguard (false)."
              },
              "no_disclose_enterprise_connections": {
                "type": "boolean",
                "description": "Do not Publish Enterprise Connections Information with IdP domains on the lock configuration file."
              },
              "disable_management_api_sms_obfuscation": {
                "type": "boolean",
                "description": "If true, SMS phone numbers will not be obfuscated in Management API GET calls."
              },
              "enforce_client_authentication_on_passwordless_start": {
                "type": "boolean",
                "description": "Enforce client authentication for passwordless start."
              },
              "trust_azure_adfs_email_verified_connection_property": {
                "type": "boolean",
                "description": "Changes email_verified behavior for Azure AD/ADFS connections when enabled. Sets email_verified to false otherwise."
              },
              "enable_adfs_waad_email_verification": {
                "type": "boolean",
                "description": "Enables the email verification flow during login for Azure AD and ADFS connections."
              },
              "revoke_refresh_token_grant": {
                "type": "boolean",
                "description": "Delete underlying grant when a Refresh Token is revoked via the Authentication API."
              },
              "dashboard_log_streams_next": {
                "type": "boolean",
                "description": "Enables beta access to log streaming changes."
              },
              "dashboard_insights_view": {
                "type": "boolean",
                "description": "Enables new insights activity page view."
              },
              "disable_fields_map_fix": {
                "type": "boolean",
                "description": "Disables SAML fields map fix for bad mappings with repeated attributes."
              },
              "mfa_show_factor_list_on_enrollment": {
                "type": "boolean",
                "description": "Used to allow users to pick what factor to enroll of the available MFA factors."
              },
              "require_signed_request_object": {
                "type": "boolean",
                "description": "Require the use of JWT Secured Authorization Requests (JAR)"
              },
              "remove_alg_from_jwks": {
                "type": "boolean",
                "description": "Removes alg property from jwks .well-known endpoint"
              },
              "improved_signup_bot_detection_in_classic": {
                "type": "boolean",
                "description": "Improves bot detection during signup in classic universal login"
              }
            }
          },
          "friendly_name": {
            "type": "string",
            "description": "Friendly name for this tenant.",
            "default": "My Company"
          },
          "picture_url": {
            "type": "string",
            "description": "URL of logo to be shown for this tenant (recommended size: 150x150)",
            "default": "https://mycompany.org/logo.png",
            "format": "absolute-uri-or-empty"
          },
          "support_email": {
            "type": "string",
            "description": "End-user support email.",
            "default": "support@mycompany.org",
            "format": "email-or-empty"
          },
          "support_url": {
            "type": "string",
            "description": "End-user support url.",
            "default": "https://mycompany.org/support",
            "format": "absolute-uri-or-empty"
          },
          "allowed_logout_urls": {
            "type": "array",
            "description": "URLs that are valid to redirect to after logout from Auth0.",
            "items": {
              "type": "string",
              "format": "url"
            }
          },
          "session_lifetime": {
            "type": "integer",
            "description": "Number of hours a session will stay valid.",
            "default": 168
          },
          "idle_session_lifetime": {
            "type": "integer",
            "description": "Number of hours for which a session can be inactive before the user must log in again.",
            "default": 72
          },
          "sandbox_version": {
            "type": "string",
            "description": "Selected sandbox version for the extensibility environment",
            "default": "22",
            "maxLength": 8
          },
          "legacy_sandbox_version": {
            "type": "string",
            "description": "Selected legacy sandbox version for the extensibility environment",
            "maxLength": 8
          },
          "default_redirection_uri": {
            "type": "string",
            "description": "The default absolute redirection uri, must be https",
            "format": "absolute-https-uri-or-empty"
          },
          "enabled_locales": {
            "type": "array",
            "description": "Supported locales for the user interface",
            "items": {
              "type": "string",
              "enum": [
                "am",
                "ar",
                "ar-EG",
                "ar-SA",
                "az",
                "bg",
                "bn",
                "bs",
                "ca-ES",
                "cnr",
                "cs",
                "cy",
                "da",
                "de",
                "el",
                "en",
                "en-CA",
                "es",
                "es-419",
                "es-AR",
                "es-MX",
                "et",
                "eu-ES",
                "fa",
                "fi",
                "fr",
                "fr-CA",
                "fr-FR",
                "gl-ES",
                "gu",
                "he",
                "hi",
                "hr",
                "hu",
                "hy",
                "id",
                "is",
                "it",
                "ja",
                "ka",
                "kk",
                "kn",
                "ko",
                "lt",
                "lv",
                "mk",
                "ml",
                "mn",
                "mr",
                "ms",
                "my",
                "nb",
                "nl",
                "nn",
                "no",
                "pa",
                "pl",
                "pt",
                "pt-BR",
                "pt-PT",
                "ro",
                "ru",
                "sk",
                "sl",
                "so",
                "sq",
                "sr",
                "sv",
                "sw",
                "ta",
                "te",
                "th",
                "tl",
                "tr",
                "uk",
                "ur",
                "vi",
                "zgh",
                "zh-CN",
                "zh-HK",
                "zh-TW"
              ]
            }
          },
          "session_cookie": {
            "type": "object",
            "nullable": true,
            "description": "Session cookie configuration",
            "additionalProperties": false,
            "required": [
              "mode"
            ],
            "properties": {
              "mode": {
                "type": "string",
                "description": "Behavior of the session cookie",
                "default": "persistent",
                "enum": [
                  "persistent",
                  "non-persistent"
                ]
              }
            }
          },
          "sessions": {
            "type": "object",
            "nullable": true,
            "description": "Sessions related settings for tenant",
            "additionalProperties": false,
            "properties": {
              "oidc_logout_prompt_enabled": {
                "type": "boolean",
                "description": "Whether to bypass prompting logic (false) when performing OIDC Logout",
                "default": true
              }
            }
          },
          "oidc_logout": {
            "type": "object",
            "description": "Settings related to OIDC RP-initiated Logout",
            "additionalProperties": false,
            "properties": {
              "rp_logout_end_session_endpoint_discovery": {
                "type": "boolean",
                "description": "Enable the end_session_endpoint URL in the .well-known discovery configuration",
                "default": true
              }
            }
          },
          "customize_mfa_in_postlogin_action": {
            "type": "boolean",
            "nullable": true,
            "description": "Whether to enable flexible factors for MFA in the PostLogin action",
            "default": false
          },
          "allow_organization_name_in_authentication_api": {
            "type": "boolean",
            "nullable": true,
            "description": "Whether to accept an organization name instead of an ID on auth endpoints",
            "default": false
          },
          "acr_values_supported": {
            "type": "array",
            "description": "Supported ACR values",
            "items": {
              "type": "string",
              "format": "acr"
            }
          },
          "mtls": {
            "type": "object",
            "nullable": true,
            "description": "mTLS configuration.",
            "additionalProperties": false,
            "properties": {
              "enable_endpoint_aliases": {
                "type": "boolean",
                "description": "If true, enables mTLS endpoint aliases",
                "default": false
              }
            }
          },
          "pushed_authorization_requests_supported": {
            "type": "boolean",
            "nullable": true,
            "description": "Enables the use of Pushed Authorization Requests",
            "default": false
          },
          "authorization_response_iss_parameter_supported": {
            "type": "boolean",
            "nullable": true,
            "description": "Supports iss parameter in authorization responses",
            "default": false
          }
        }
      },
      "twilioFactorProvider": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "from": {
            "type": "string",
            "nullable": true,
            "description": "From number",
            "default": "+1223323",
            "minLength": 0,
            "maxLength": 64
          },
          "messaging_service_sid": {
            "type": "string",
            "nullable": true,
            "description": "Copilot SID",
            "default": "5dEkAiHLPCuQ1uJj4qNXcAnERFAL6cpq",
            "minLength": 1,
            "maxLength": 1000
          },
          "auth_token": {
            "type": "string",
            "nullable": true,
            "description": "Twilio Authentication token",
            "default": "zw5Ku6z2sxhd0ZVXto5SDHX6KPDByJPU",
            "minLength": 1,
            "maxLength": 1000
          },
          "sid": {
            "type": "string",
            "nullable": true,
            "description": "Twilio SID",
            "default": "wywA2BH4VqTpfywiDuyDAYZL3xQjoO40",
            "minLength": 1,
            "maxLength": 1000
          }
        }
      },
      "userBlock": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "blocked_for": {
            "type": "array",
            "description": "Array of identifier + IP address pairs.  IP address is optional, and may be omitted in certain circumstances (such as Account Lockout mode).",
            "items": {
              "type": "object",
              "additionalProperties": true,
              "properties": {
                "identifier": {
                  "type": "string",
                  "description": "Identifier (should be any of an `email`, `username`, or `phone_number`)",
                  "default": "john.doe@gmail.com"
                },
                "ip": {
                  "type": "string",
                  "description": "IP Address",
                  "default": "10.0.0.1"
                },
                "connection": {
                  "type": "string",
                  "description": "Connection identifier"
                }
              }
            }
          }
        }
      },
      "userCreate": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "connection"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "The user's email.",
            "default": "john.doe@gmail.com",
            "format": "email"
          },
          "phone_number": {
            "type": "string",
            "description": "The user's phone number (following the E.164 recommendation).",
            "default": "+199999999999999"
          },
          "user_metadata": {
            "$ref": "#/components/schemas/UserMetadata"
          },
          "blocked": {
            "type": "boolean",
            "description": "Whether this user was blocked by an administrator (true) or not (false).",
            "default": false
          },
          "email_verified": {
            "type": "boolean",
            "description": "Whether this email address is verified (true) or unverified (false). User will receive a verification email after creation if `email_verified` is false or not specified",
            "default": false
          },
          "phone_verified": {
            "type": "boolean",
            "description": "Whether this phone number has been verified (true) or not (false).",
            "default": false
          },
          "app_metadata": {
            "$ref": "#/components/schemas/AppMetadata"
          },
          "given_name": {
            "type": "string",
            "description": "The user's given name(s).",
            "default": "John",
            "minLength": 1,
            "maxLength": 150
          },
          "family_name": {
            "type": "string",
            "description": "The user's family name(s).",
            "default": "Doe",
            "minLength": 1,
            "maxLength": 150
          },
          "name": {
            "type": "string",
            "description": "The user's full name.",
            "default": "John Doe",
            "minLength": 1,
            "maxLength": 300
          },
          "nickname": {
            "type": "string",
            "description": "The user's nickname.",
            "default": "Johnny",
            "minLength": 1,
            "maxLength": 300
          },
          "picture": {
            "type": "string",
            "description": "A URI pointing to the user's picture.",
            "default": "https://secure.gravatar.com/avatar/15626c5e0c749cb912f9d1ad48dba440?s=480&r=pg&d=https%3A%2F%2Fssl.gstatic.com%2Fs2%2Fprofiles%2Fimages%2Fsilhouette80.png",
            "format": "strict-uri"
          },
          "user_id": {
            "type": "string",
            "description": "The external user's id provided by the identity provider.",
            "default": "abc",
            "minLength": 0,
            "maxLength": 255
          },
          "connection": {
            "type": "string",
            "description": "Name of the connection this user should be created in.",
            "default": "Initial-Connection",
            "minLength": 1
          },
          "password": {
            "type": "string",
            "description": "Initial password for this user. Only valid for auth0 connection strategy.",
            "default": "secret",
            "minLength": 1
          },
          "verify_email": {
            "type": "boolean",
            "description": "Whether the user will receive a verification email after creation (true) or no email (false). Overrides behavior of `email_verified` parameter.",
            "default": false
          },
          "username": {
            "type": "string",
            "description": "The user's username. Only valid if the connection requires a username.",
            "default": "johndoe",
            "minLength": 1,
            "maxLength": 128
          }
        }
      },
      "userEnrollment": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of this enrollment."
          },
          "status": {
            "type": "string",
            "description": "Status of this enrollment. Can be `pending` or `confirmed`.",
            "enum": [
              "pending",
              "confirmed"
            ]
          },
          "type": {
            "type": "string",
            "description": "Type of enrollment."
          },
          "name": {
            "type": "string",
            "description": "Name of enrollment (usually phone number).",
            "maxLength": 20
          },
          "identifier": {
            "type": "string",
            "description": "Device identifier (usually phone identifier) of this enrollment."
          },
          "phone_number": {
            "type": "string",
            "description": "Phone number for this enrollment."
          },
          "auth_method": {
            "type": "string",
            "description": "Authentication method for this enrollment. Can be `authenticator`, `guardian`, `sms`, `webauthn-roaming`, or `webauthn-platform`.",
            "enum": [
              "authenticator",
              "guardian",
              "sms",
              "webauthn-platform",
              "webauthn-roaming"
            ]
          },
          "enrolled_at": {
            "type": "string",
            "description": "Start date and time of this enrollment.",
            "format": "date-time"
          },
          "last_auth": {
            "type": "string",
            "description": "Last authentication date and time of this enrollment.",
            "format": "date-time"
          }
        }
      },
      "userGrant": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the grant."
          },
          "clientID": {
            "type": "string",
            "description": "ID of the client."
          },
          "user_id": {
            "type": "string",
            "description": "ID of the user."
          },
          "audience": {
            "type": "string",
            "description": "Audience of the grant."
          },
          "scope": {
            "type": "array",
            "description": "Scopes included in this grant.",
            "items": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      },
      "userIdentity": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "provider",
          "user_id",
          "connection"
        ],
        "properties": {
          "connection": {
            "type": "string",
            "description": "Connection name of this identity.",
            "default": "twitter"
          },
          "user_id": {
            "description": "user_id of this identity.",
            "oneOf": [
              {
                "type": "string",
                "default": "abc",
                "minLength": 1
              },
              {
                "type": "integer",
                "default": 191919191
              }
            ]
          },
          "provider": {
            "type": "string",
            "description": "Type of identity provider.",
            "default": "twitter"
          },
          "profileData": {
            "$ref": "#/components/schemas/userProfile"
          },
          "isSocial": {
            "type": "boolean",
            "description": "Whether the identity provider is a social provider (true) or not (false)."
          },
          "access_token": {
            "type": "string",
            "description": "IDP access token returned if scope `read:user_idp_tokens` is defined."
          },
          "access_token_secret": {
            "type": "string",
            "description": "IDP access token secret returned only if `scope read:user_idp_tokens` is defined."
          },
          "refresh_token": {
            "type": "string",
            "description": "IDP refresh token returned only if scope `read:user_idp_tokens` is defined."
          }
        }
      },
      "userProfile": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "email": {
            "type": "string",
            "description": "Email address of this user."
          },
          "email_verified": {
            "type": "boolean",
            "description": "Whether this email address is verified (true) or unverified (false)."
          },
          "name": {
            "type": "string",
            "description": "Name of this user."
          },
          "username": {
            "type": "string",
            "description": "Username of this user.",
            "default": "johndoe"
          },
          "given_name": {
            "type": "string",
            "description": "Given name/first name/forename of this user."
          },
          "phone_number": {
            "type": "string",
            "description": "Phone number for this user."
          },
          "phone_verified": {
            "type": "boolean",
            "description": "Whether this phone number is verified (true) or unverified (false)."
          },
          "family_name": {
            "type": "string",
            "description": "Family name/last name/surname of this user."
          }
        }
      },
      "userUpdate": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "blocked": {
            "type": "boolean",
            "description": "Whether this user was blocked by an administrator (true) or not (false).",
            "default": false
          },
          "email_verified": {
            "type": "boolean",
            "description": "Whether this email address is verified (true) or unverified (false). If set to false the user will not receive a verification email unless `verify_email` is set to true.",
            "default": false
          },
          "email": {
            "type": "string",
            "nullable": true,
            "description": "Email address of this user.",
            "default": "john.doe@gmail.com",
            "format": "email"
          },
          "phone_number": {
            "type": "string",
            "nullable": true,
            "description": "The user's phone number (following the E.164 recommendation).",
            "default": "+199999999999999"
          },
          "phone_verified": {
            "type": "boolean",
            "description": "Whether this phone number has been verified (true) or not (false).",
            "default": false
          },
          "user_metadata": {
            "$ref": "#/components/schemas/UserMetadata"
          },
          "app_metadata": {
            "$ref": "#/components/schemas/AppMetadata"
          },
          "given_name": {
            "type": "string",
            "nullable": true,
            "description": "Given name/first name/forename of this user.",
            "default": "John",
            "minLength": 1,
            "maxLength": 150
          },
          "family_name": {
            "type": "string",
            "nullable": true,
            "description": "Family name/last name/surname of this user.",
            "default": "Doe",
            "minLength": 1,
            "maxLength": 150
          },
          "name": {
            "type": "string",
            "nullable": true,
            "description": "Name of this user.",
            "default": "John Doe",
            "minLength": 1,
            "maxLength": 300
          },
          "nickname": {
            "type": "string",
            "nullable": true,
            "description": "Preferred nickname or alias of this user.",
            "default": "Johnny",
            "minLength": 1,
            "maxLength": 300
          },
          "picture": {
            "type": "string",
            "nullable": true,
            "description": "URL to picture, photo, or avatar of this user.",
            "default": "https://secure.gravatar.com/avatar/15626c5e0c749cb912f9d1ad48dba440?s=480&r=pg&d=https%3A%2F%2Fssl.gstatic.com%2Fs2%2Fprofiles%2Fimages%2Fsilhouette80.png",
            "format": "strict-uri"
          },
          "verify_email": {
            "type": "boolean",
            "description": "Whether this user will receive a verification email after creation (true) or no email (false). Overrides behavior of `email_verified` parameter.",
            "default": false
          },
          "verify_phone_number": {
            "type": "boolean",
            "description": "Whether this user will receive a text after changing the phone number (true) or no text (false). Only valid when changing phone number for SMS connections.",
            "default": false
          },
          "password": {
            "type": "string",
            "nullable": true,
            "description": "New password for this user. Only valid for database connections.",
            "default": "secret",
            "minLength": 1
          },
          "connection": {
            "type": "string",
            "description": "Name of the connection to target for this user update.",
            "default": "Initial-Connection",
            "minLength": 1
          },
          "client_id": {
            "type": "string",
            "description": "Auth0 client ID. Only valid when updating email address.",
            "default": "DaM8bokEXBWrTUFCiJjWn50jei6ardyX",
            "minLength": 1
          },
          "username": {
            "type": "string",
            "nullable": true,
            "description": "The user's username. Only valid if the connection requires a username.",
            "default": "johndoe",
            "minLength": 1,
            "maxLength": 128
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "jwt"
      },
      "oAuth2ClientCredentials": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://{tenantDomain}/oauth/token/",
            "x-form-parameters": {
              "audience": "https://{tenantDomain}/api/v2/"
            },
            "scopes": {
              "read:actions": "Read Actions",
              "create:actions": "Create Actions",
              "delete:actions": "Delete Actions",
              "update:actions": "Update Actions",
              "read:anomaly_blocks": "Read Anomaly Blocks",
              "delete:anomaly_blocks": "Delete Anomaly Blocks",
              "read:shields": "Read Shields",
              "create:shields": "Create Shields",
              "update:shields": "Update Shields",
              "read:attack_protection": "Read Attack Protection",
              "update:attack_protection": "Update Attack Protection",
              "read:branding": "Read Branding",
              "update:branding": "Update Branding",
              "read:phone_providers": "Read Phone Providers",
              "create:phone_providers": "Create Phone Providers",
              "update:phone_providers": "Update Phone Providers",
              "delete:phone_providers": "Delete Phone Providers",
              "read:phone_templates": "Read Phone Templates",
              "create:phone_templates": "Create Phone Templates",
              "update:phone_templates": "Update Phone Templates",
              "delete:phone_templates": "Delete Phone Templates",
              "delete:branding": "Delete Branding",
              "read:client_grants": "Read Client Grants",
              "create:client_grants": "Create Client Grants",
              "update:client_grants": "Update Client Grants",
              "delete:client_grants": "Delete Client Grants",
              "read:organization_client_grants": "Read Organization Client Grants",
              "read:clients": "Read Clients",
              "read:client_keys": "Read Client Keys",
              "read:client_credentials": "Read Client Credentials",
              "read:client_summary": "Read Client Summary",
              "create:clients": "Create Clients",
              "create:client_credentials": "Create Client Credentials",
              "update:client_credentials": "Update Client Credentials",
              "delete:client_credentials": "Delete Client Credentials",
              "update:clients": "Update Clients",
              "update:client_keys": "Update Client Keys",
              "delete:clients": "Delete Clients",
              "read:connections": "Read Connections",
              "create:connections": "Create Connections",
              "update:connections": "Update Connections",
              "delete:connections": "Delete Connections",
              "read:users": "Read Users",
              "read:connections_keys": "Read Connections Keys",
              "create:connections_keys": "Create Connections Keys",
              "update:connections_keys": "Update Connections Keys",
              "read:scim_config": "Read Scim Config",
              "create:scim_config": "Create Scim Config",
              "update:scim_config": "Update Scim Config",
              "delete:scim_config": "Delete Scim Config",
              "read:scim_token": "Read Scim Token",
              "create:scim_token": "Create Scim Token",
              "delete:scim_token": "Delete Scim Token",
              "delete:users": "Delete Users",
              "read:custom_domains": "Read Custom Domains",
              "create:custom_domains": "Create Custom Domains",
              "update:custom_domains": "Update Custom Domains",
              "delete:custom_domains": "Delete Custom Domains",
              "read:device_credentials": "Read Device Credentials",
              "create:current_user_device_credentials": "Create Current User Device Credentials",
              "delete:device_credentials": "Delete Device Credentials",
              "delete:current_user_device_credentials": "Delete Current User Device Credentials",
              "update:device_codes": "Update Device Codes",
              "read:device_codes": "Read Device Codes",
              "create:test_email_dispatch": "Create Test Email Dispatch",
              "create:email_templates": "Create Email Templates",
              "read:email_templates": "Read Email Templates",
              "update:email_templates": "Update Email Templates",
              "read:email_provider": "Read Email Provider",
              "create:email_provider": "Create Email Provider",
              "update:email_provider": "Update Email Provider",
              "delete:email_provider": "Delete Email Provider",
              "delete:email_templates": "Delete Email Templates",
              "read:email_triggers": "Read Email Triggers",
              "update:email_triggers": "Update Email Triggers",
              "read:entitlements": "Read Entitlements",
              "read:event_streams": "Read Event Streams",
              "create:event_streams": "Create Event Streams",
              "update:event_streams": "Update Event Streams",
              "delete:event_streams": "Delete Event Streams",
              "read:event_deliveries": "Read Event Deliveries",
              "update:event_deliveries": "Update Event Deliveries",
              "read:extensions": "Read Extensions",
              "read:flows": "Read Flows",
              "create:flows": "Create Flows",
              "read:flows_vault_connections": "Read Flows Vault Connections",
              "create:flows_vault_connections": "Create Flows Vault Connections",
              "update:flows_vault_connections": "Update Flows Vault Connections",
              "delete:flows_vault_connections": "Delete Flows Vault Connections",
              "read:flows_executions": "Read Flows Executions",
              "delete:flows_executions": "Delete Flows Executions",
              "update:flows": "Update Flows",
              "delete:flows": "Delete Flows",
              "read:forms": "Read Forms",
              "create:forms": "Create Forms",
              "update:forms": "Update Forms",
              "delete:forms": "Delete Forms",
              "read:grants": "Read Grants",
              "delete:grants": "Delete Grants",
              "create:guardian_enrollment_tickets": "Create Guardian Enrollment Tickets",
              "read:guardian_enrollments": "Read Guardian Enrollments",
              "delete:guardian_enrollments": "Delete Guardian Enrollments",
              "read:guardian_factors": "Read Guardian Factors",
              "update:guardian_factors": "Update Guardian Factors",
              "read:mfa_policies": "Read Mfa Policies",
              "update:mfa_policies": "Update Mfa Policies",
              "read:hooks": "Read Hooks",
              "create:hooks": "Create Hooks",
              "update:hooks": "Update Hooks",
              "delete:hooks": "Delete Hooks",
              "read:insights": "Read Insights",
              "read:stats": "Read Stats",
              "read:integrations": "Read Integrations",
              "create:integrations": "Create Integrations",
              "update:integrations": "Update Integrations",
              "delete:integrations": "Delete Integrations",
              "create:users": "Create Users",
              "update:users": "Update Users",
              "read:custom_signing_keys": "Read Custom Signing Keys",
              "create:custom_signing_keys": "Create Custom Signing Keys",
              "update:custom_signing_keys": "Update Custom Signing Keys",
              "delete:custom_signing_keys": "Delete Custom Signing Keys",
              "read:encryption_keys": "Read Encryption Keys",
              "create:encryption_keys": "Create Encryption Keys",
              "update:encryption_keys": "Update Encryption Keys",
              "delete:encryption_keys": "Delete Encryption Keys",
              "read:signing_keys": "Read Signing Keys",
              "create:signing_keys": "Create Signing Keys",
              "update:signing_keys": "Update Signing Keys",
              "read:log_streams": "Read Log Streams",
              "create:log_streams": "Create Log Streams",
              "update:log_streams": "Update Log Streams",
              "delete:log_streams": "Delete Log Streams",
              "read:logs": "Read Logs",
              "read:logs_users": "Read Logs Users",
              "read:tenant_settings": "Read Tenant Settings",
              "update:tenant_settings": "Update Tenant Settings",
              "read:network_acls": "Read Network Acls",
              "create:network_acls": "Create Network Acls",
              "update:network_acls": "Update Network Acls",
              "delete:network_acls": "Delete Network Acls",
              "read:organizations": "Read Organizations",
              "read:organizations_summary": "Read Organizations Summary",
              "create:organizations": "Create Organizations",
              "create:organization_connections": "Create Organization Connections",
              "update:organizations": "Update Organizations",
              "delete:organizations": "Delete Organizations",
              "create:organization_client_grants": "Create Organization Client Grants",
              "delete:organization_client_grants": "Delete Organization Client Grants",
              "read:organization_connections": "Read Organization Connections",
              "update:organization_connections": "Update Organization Connections",
              "delete:organization_connections": "Delete Organization Connections",
              "read:organization_invitations": "Read Organization Invitations",
              "create:organization_invitations": "Create Organization Invitations",
              "delete:organization_invitations": "Delete Organization Invitations",
              "read:organization_members": "Read Organization Members",
              "create:organization_members": "Create Organization Members",
              "delete:organization_members": "Delete Organization Members",
              "read:organization_member_roles": "Read Organization Member Roles",
              "create:organization_member_roles": "Create Organization Member Roles",
              "delete:organization_member_roles": "Delete Organization Member Roles",
              "read:prompts": "Read Prompts",
              "update:prompts": "Update Prompts",
              "read:resource_servers": "Read Resource Servers",
              "update:resource_servers": "Update Resource Servers",
              "read:refresh_tokens": "Read Refresh Tokens",
              "delete:refresh_tokens": "Delete Refresh Tokens",
              "create:resource_servers": "Create Resource Servers",
              "delete:resource_servers": "Delete Resource Servers",
              "read:roles": "Read Roles",
              "create:roles": "Create Roles",
              "update:roles": "Update Roles",
              "delete:roles": "Delete Roles",
              "read:role_members": "Read Role Members",
              "create:role_members": "Create Role Members",
              "read:rules": "Read Rules",
              "create:rules": "Create Rules",
              "update:rules": "Update Rules",
              "read:rules_configs": "Read Rules Configs",
              "update:rules_configs": "Update Rules Configs",
              "delete:rules_configs": "Delete Rules Configs",
              "delete:rules": "Delete Rules",
              "read:security_metrics": "Read Security Metrics",
              "read:self_service_profiles": "Read Self Service Profiles",
              "create:self_service_profiles": "Create Self Service Profiles",
              "update:self_service_profiles": "Update Self Service Profiles",
              "delete:self_service_profiles": "Delete Self Service Profiles",
              "read:self_service_profile_custom_texts": "Read Self Service Profile Custom Texts",
              "update:self_service_profile_custom_texts": "Update Self Service Profile Custom Texts",
              "create:sso_access_tickets": "Create Sso Access Tickets",
              "delete:sso_access_tickets": "Delete Sso Access Tickets",
              "read:sessions": "Read Sessions",
              "delete:sessions": "Delete Sessions",
              "delete:tenants": "Delete Tenants",
              "run:checks": "Run Checks",
              "read:checks": "Read Checks",
              "read:tenant_feature_flags": "Read Tenant Feature Flags",
              "read:tenant_invitations": "Read Tenant Invitations",
              "create:tenant_invitations": "Create Tenant Invitations",
              "update:tenant_invitations": "Update Tenant Invitations",
              "delete:tenant_invitations": "Delete Tenant Invitations",
              "read:tenant_members": "Read Tenant Members",
              "update:tenant_members": "Update Tenant Members",
              "delete:tenant_members": "Delete Tenant Members",
              "read:owners": "Read Owners",
              "delete:owners": "Delete Owners",
              "create:user_tickets": "Create User Tickets",
              "read:token_exchange_profiles": "Read Token Exchange Profiles",
              "create:token_exchange_profiles": "Create Token Exchange Profiles",
              "update:token_exchange_profiles": "Update Token Exchange Profiles",
              "delete:token_exchange_profiles": "Delete Token Exchange Profiles",
              "read:entity_counts": "Read Entity Counts",
              "read:user_attribute_profiles": "Read User Attribute Profiles",
              "create:user_attribute_profiles": "Create User Attribute Profiles",
              "update:user_attribute_profiles": "Update User Attribute Profiles",
              "delete:user_attribute_profiles": "Delete User Attribute Profiles",
              "read:user_idp_tokens": "Read User Idp Tokens",
              "read:current_user": "Read Current User",
              "update:users_app_metadata": "Update Users App Metadata",
              "update:current_user_metadata": "Update Current User Metadata",
              "delete:current_user": "Delete Current User",
              "read:user_application_passwords": "Read User Application Passwords",
              "create:user_application_passwords": "Create User Application Passwords",
              "delete:user_application_passwords": "Delete User Application Passwords",
              "read:authentication_methods": "Read Authentication Methods",
              "update:authentication_methods": "Update Authentication Methods",
              "create:authentication_methods": "Create Authentication Methods",
              "delete:authentication_methods": "Delete Authentication Methods",
              "read:federated_connections_tokens": "Read Federated Connections Tokens",
              "delete:federated_connections_tokens": "Delete Federated Connections Tokens",
              "update:current_user_identities": "Update Current User Identities",
              "delete:role_members": "Delete Role Members",
              "read:vdcs_templates": "Read Vdcs Templates",
              "create:vdcs_templates": "Create Vdcs Templates",
              "update:vdcs_templates": "Update Vdcs Templates",
              "delete:vdcs_templates": "Delete Vdcs Templates"
            }
          }
        }
      }
    }
  }
}