{
    "swagger": "2.0",
    "x-explorer-enabled": false,
    "info": {
        "title": "vidaoo API",
        "description": "VIDAOO provides the best Unified Meeting Experience platform that brings HD video conferencing, mobility and web meetings together as a cloud service.",
        "contact": {
            "name": "Vidaoo Customer Support",
            "url": "https://xcally.atlassian.net/servicedesk/customer/portal/4"
        },
        "x-logo": {
            "url": "./logo.png",
            "altText": "Vidaoo Logo"
        },
        "license": {
            "name": "EULA",
            "url": "https://vidaoo.xcally.com/"
        },
        "version": "2.13.0"
    },
    "host": "api-vidaoo.xcally.com",
    "schemes": [
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "parameters": {
        "Populate": {
            "in": "query",
            "name": "populate",
            "type": "array",
            "items": {
                "type": "string"
            },
            "description": "Populated fields"
        },
        "Fields": {
            "in": "query",
            "name": "fields",
            "type": "array",
            "items": {
                "type": "string"
            },
            "description": "Filtered fields"
        },
        "Page": {
            "in": "query",
            "name": "page",
            "type": "number",
            "description": "Page number",
            "default": 1
        },
        "PageSize": {
            "in": "query",
            "name": "pageSize",
            "type": "number",
            "description": "Page size",
            "default": 10
        },
        "Sort": {
            "in": "query",
            "name": "sort",
            "type": "string",
            "description": "Sorting",
            "example": "-createdAt"
        },
        "Query": {
            "in": "query",
            "name": "query",
            "type": "object",
            "description": "Custom query"
        },
        "ButtonId": {
            "in": "path",
            "name": "id",
            "description": "The button ID",
            "type": "string",
            "pattern": "/^[0-9a-fA-F]{24}$/",
            "required": true
        },
        "SessionId": {
            "in": "path",
            "name": "id",
            "description": "The session ID",
            "type": "integer",
            "required": true
        },
        "TokenId": {
            "in": "path",
            "name": "id",
            "description": "The token ID",
            "type": "string",
            "pattern": "/^[0-9a-fA-F]{24}$/",
            "required": true
        },
        "LogId": {
            "in": "path",
            "name": "id",
            "description": "The log ID",
            "type": "string",
            "pattern": "/^[0-9a-fA-F]{24}$/",
            "required": true
        },
        "TicketId": {
            "in": "path",
            "name": "id",
            "description": "The ticket ID",
            "type": "string",
            "pattern": "/^[0-9a-fA-F]{24}$/",
            "required": true
        },
        "RoleId": {
            "in": "path",
            "name": "id",
            "description": "The role ID",
            "type": "string",
            "pattern": "/^[0-9a-fA-F]{24}$/",
            "required": true
        },
        "MeetingId": {
            "in": "path",
            "name": "id",
            "description": "The meeting ID",
            "type": "string",
            "pattern": "/^[0-9a-fA-F]{24}$/",
            "required": true
        },
        "ReportId": {
            "in": "path",
            "name": "id",
            "description": "The report ID",
            "type": "string",
            "pattern": "/^[0-9a-fA-F]{24}$/",
            "required": true
        },
        "AutomationId": {
            "in": "path",
            "name": "id",
            "description": "The automation ID",
            "type": "string",
            "pattern": "/^[0-9a-fA-F]{24}$/",
            "required": true
        },
        "UserId": {
            "in": "path",
            "name": "id",
            "description": "The user ID",
            "type": "string",
            "required": true
        },
        "AccountId": {
            "in": "path",
            "name": "id",
            "description": "The account ID",
            "type": "string",
            "required": true
        },
        "BackgroundId": {
            "in": "path",
            "name": "id",
            "description": "The background ID",
            "type": "string",
            "required": true
        },
        "DeviceId": {
            "in": "path",
            "name": "id",
            "description": "The device ID",
            "type": "string",
            "pattern": "/^[0-9a-fA-F]{24}$/",
            "required": true
        },
        "RecordingId": {
            "in": "path",
            "name": "id",
            "description": "The recording ID",
            "type": "string",
            "required": true
        }
    },
    "definitions": {
        "ErrorMessage": {
            "type": "object",
            "description": "Error Object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the error",
                    "required": true
                },
                "message": {
                    "type": "string",
                    "description": "The error message"
                },
                "code": {
                    "type": "integer",
                    "description": "The error code"
                },
                "type": {
                    "type": "string",
                    "description": "The error type"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    },
                    "description": "The error data"
                }
            }
        },
        "Pagination": {
            "type": "object",
            "description": "Pagination Object",
            "properties": {
                "total": {
                    "type": "integer",
                    "description": "The number of all records available"
                },
                "page": {
                    "type": "integer",
                    "description": "The page number of current results"
                },
                "pageSize": {
                    "type": "integer",
                    "description": "The number of records returned within a single API call"
                },
                "totalPages": {
                    "type": "integer",
                    "description": "The number of items returned on this page"
                }
            }
        },
        "AuthenticationToken": {
            "type": "object",
            "description": "Token Object",
            "properties": {
                "access_token": {
                    "type": "string",
                    "description": "Token value",
                    "readOnly": true
                },
                "type": {
                    "type": "string",
                    "description": "Token type",
                    "enum": [
                        "bearer"
                    ],
                    "x-enum-descriptions": [
                        "Used for authentication login with client."
                    ],
                    "readOnly": true
                }
            }
        },
        "SessionToken": {
            "type": "object",
            "description": "Token Object",
            "properties": {
                "access_token": {
                    "type": "string",
                    "description": "Token value",
                    "readOnly": true
                },
                "type": {
                    "type": "string",
                    "description": "Token type",
                    "enum": [
                        "wss"
                    ],
                    "x-enum-descriptions": [
                        "Used for starting meeting with client."
                    ],
                    "readOnly": true
                }
            }
        },
        "ButtonRequiredProperties": {
            "type": "object",
            "required": [
                "name",
                "url"
            ]
        },
        "ButtonProperties": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Button id",
                    "readOnly": true
                },
                "name": {
                    "type": "string",
                    "description": "Button name"
                },
                "url": {
                    "type": "string",
                    "format": "uri",
                    "description": "Specifies the URL of the page to open"
                },
                "target": {
                    "type": "string",
                    "description": " Specifies the target attribute or the name of the window",
                    "default": "_blank"
                },
                "specs": {
                    "type": "string",
                    "description": "A comma-separated list of items, no whitespaces",
                    "default": null
                },
                "device_id": {
                    "type": "string",
                    "description": "Device id",
                    "deprecated": true
                },
                "icon": {
                    "type": "string",
                    "description": "Icon of the button, you can found it at this URL: https://fontawesome.com/icons?d=gallery&m=free",
                    "default": "fas fa-check"
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Create button date",
                    "readOnly": true
                },
                "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Last update button date",
                    "readOnly": true
                }
            }
        },
        "SessionRequiredProperties": {
            "type": "object",
            "required": [
                "name"
            ]
        },
        "SessionProperties": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Session id",
                    "readOnly": true
                },
                "name": {
                    "type": "string",
                    "description": "Session name"
                },
                "duration": {
                    "type": "integer",
                    "description": "Session duration in seconds",
                    "readOnly": true
                },
                "reason": {
                    "type": "string",
                    "enum": [
                        "lastParticipantLeft",
                        "sessionClosedByServer",
                        "vidaooServerStopped"
                    ],
                    "description": "Session reason",
                    "readOnly": true
                },
                "startedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Start session date",
                    "readOnly": true
                },
                "endedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "End session date",
                    "readOnly": true
                },
                "join_url": {
                    "type": "string",
                    "description": "Virtual Join url",
                    "readOnly": true
                },
                "device_id": {
                    "type": "string",
                    "description": "Device id"
                },
                "owner_id": {
                    "type": "string",
                    "description": "Owner id",
                    "readOnly": true
                },
                "metadata": {
                    "type": "object",
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
                    "default": null
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Create session date",
                    "readOnly": true
                },
                "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Last update session date",
                    "readOnly": true
                }
            }
        },
        "TokenRequiredProperties": {
            "type": "object",
            "required": [
                "label",
                "owner_id"
            ]
        },
        "TokenProperties": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Token id",
                    "readOnly": true
                },
                "label": {
                    "type": "string",
                    "description": "Token label"
                },
                "owner_id": {
                    "type": "string",
                    "description": "The ID of token's owner"
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Create token date",
                    "readOnly": true
                },
                "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Last update token date",
                    "readOnly": true
                }
            }
        },
        "LogRequiredProperties": {
            "type": "object",
            "required": [
                "service_id",
                "service",
                "message",
                "level"
            ]
        },
        "LogProperties": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Log id",
                    "readOnly": true
                },
                "log_id": {
                    "type": "string",
                    "pattern": "/^[0-9a-fA-F]{24}$/",
                    "description": "Parent log id",
                    "default": null
                },
                "service_id": {
                    "type": "string",
                    "pattern": "/^[0-9a-fA-F]{24}$/",
                    "description": "Parent service id"
                },
                "service": {
                    "type": "string",
                    "description": "The name of the service composed of < version >.< service >.< method >",
                    "minimum": 1
                },
                "message": {
                    "type": "string",
                    "description": "The message summary log",
                    "minimum": 1
                },
                "data": {
                    "type": "string",
                    "description": "The output message log. It could be an object or a string.",
                    "default": null
                },
                "level": {
                    "type": "string",
                    "enum": [
                        "ALL",
                        "DEBUG",
                        "INFO",
                        "WARN",
                        "ERROR",
                        "FATAL",
                        "OFF",
                        "TRACE"
                    ],
                    "description": "Logging severity levels"
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Create log date",
                    "readOnly": true
                },
                "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Last update log date",
                    "readOnly": true
                }
            }
        },
        "TicketRequiredProperties": {
            "type": "object",
            "required": [
                "summary",
                "description"
            ]
        },
        "TicketProperties": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Ticket id",
                    "readOnly": true
                },
                "__id": {
                    "type": "string",
                    "description": "Service Desk id",
                    "readOnly": true
                },
                "user_id": {
                    "type": "string",
                    "description": "Owner",
                    "readOnly": true
                },
                "key": {
                    "type": "string",
                    "description": "Ticket key",
                    "readOnly": true
                },
                "summary": {
                    "type": "string",
                    "description": "Ticket summary"
                },
                "status": {
                    "type": "string",
                    "description": "Ticket status",
                    "readOnly": true,
                    "example": "TO DO"
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Create ticket date",
                    "readOnly": true
                },
                "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Update ticket date",
                    "readOnly": true
                }
            }
        },
        "RoleRequiredProperties": {
            "type": "object",
            "required": [
                "name",
                "permissions"
            ]
        },
        "RoleProperties": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Role id",
                    "readOnly": true
                },
                "name": {
                    "type": "string",
                    "description": "Role's name"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "automations.create",
                            "automations.list",
                            "automations.get",
                            "automations.update",
                            "automations.remove",
                            "automations.create.send_mail",
                            "automations.create.webhook",
                            "automations.create.sip_invite",
                            "buttons.create",
                            "buttons.list",
                            "buttons.update",
                            "buttons.remove",
                            "buttons.get",
                            "devices.create",
                            "devices.list",
                            "devices.update",
                            "devices.remove",
                            "devices.get",
                            "backgrounds.get",
                            "backgrounds.remove",
                            "backgrounds.upload",
                            "logs.get",
                            "logs.list",
                            "$join.close",
                            "$join.startrecording",
                            "$join.screensharing",
                            "$join.capturepicture",
                            "$join.extrabuttons",
                            "$join.camera",
                            "$join.microphone",
                            "$join.fullscreen",
                            "$join.background",
                            "recordings.list",
                            "recordings.create",
                            "recordings.get",
                            "recordings.update",
                            "recordings.remove",
                            "meetings.reports.create",
                            "meetings.reports.list",
                            "meetings.reports.get",
                            "meetings.reports.remove",
                            "meetings.reports.download",
                            "roles.create",
                            "roles.list",
                            "roles.get",
                            "roles.update",
                            "roles.remove",
                            "sessions.create",
                            "sessions.list",
                            "sessions.get",
                            "sessions.update",
                            "sessions.close",
                            "meetings.create",
                            "meetings.list",
                            "meetings.get",
                            "meetings.update",
                            "meetings.remove",
                            "meetings.close",
                            "monitoring",
                            "$audio",
                            "$video",
                            "$chat",
                            "tickets.list",
                            "tickets.create",
                            "tickets.get",
                            "tickets.remove",
                            "tokens.create",
                            "tokens.list",
                            "tokens.remove",
                            "users.create",
                            "users.list",
                            "users.update",
                            "users.remove",
                            "users.get"
                        ]
                    },
                    "description": "Array of permissions"
                },
                "default": {
                    "type": "boolean",
                    "description": "Role default",
                    "readOnly": true,
                    "example": true
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Create button date",
                    "readOnly": true
                },
                "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Last update button date",
                    "readOnly": true
                }
            }
        },
        "MeetingRequiredProperties": {
            "type": "object",
            "required": [
                "topic"
            ]
        },
        "MeetingProperties": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "pattern": "/^[0-9a-fA-F]{24}$/",
                    "example": "5f03232f2a9c980122ece603",
                    "description": "Meeting id",
                    "readOnly": true
                },
                "topic": {
                    "type": "string",
                    "description": "Meeting topic"
                },
                "duration": {
                    "type": "integer",
                    "description": "Meeting duration in minutes",
                    "default": null
                },
                "scheduledAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Meeting date",
                    "default": null
                },
                "endedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "End meeting",
                    "default": null,
                    "readOnly": true
                },
                "join_url": {
                    "type": "url",
                    "description": "Virtual Join url",
                    "example": "https://vidaoo.xcally.com/join-native/5ec525bb3e18e90018690c88",
                    "readOnly": true
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "scheduled",
                        "quick"
                    ],
                    "description": "Meeting type",
                    "readOnly": true
                },
                "participants": {
                    "type": "array",
                    "items": {
                        "type": "email"
                    },
                    "example": [
                        "john.doe@vidaoo.com",
                        "jane.miller@vidaoo.com"
                    ],
                    "description": "Participants list",
                    "default": null
                },
                "buttons": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "pattern": "/^[0-9a-fA-F]{24}$/"
                    },
                    "example": [
                        "5e8c9419f9af80e283168b4f",
                        "5e8c9a22f9af80e283168b50"
                    ],
                    "description": "Buttons list",
                    "default": null
                },
                "metadata": {
                    "type": "object",
                    "description": "Set of key-value pairs that you can attach to an object.This can be useful for storing additional information about the object in a structured format.",
                    "default": null
                },
                "note": {
                    "type": "string",
                    "description": "Meeting note",
                    "default": null
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Create session date",
                    "readOnly": true
                },
                "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Last update session date",
                    "readOnly": true
                },
                "participantsInfo": {
                    "type": "array",
                    "description": "Information about participants in the meeting.This fields is computed at the end of the meeting",
                    "default": [],
                    "readOnly": true
                },
                "maxConcurrentParticipants": {
                    "type": "number",
                    "description": "Maximum number of concurrent participant in the meeting.This fields is computed at the end of the meeting",
                    "default": null,
                    "readOnly": true
                },
                "feedback": {
                    "type": "boolean",
                    "description": "Feedback page when the meeting ends",
                    "default": true
                },
                "guestRedirectionUrl": {
                    "type": "string",
                    "description": "Participants will be automatically redirected to this URL after leaving the meeting. NB: only works for GUEST participants.",
                    "default": null
                },
                "creator": {
                    "type": "string",
                    "description": "Creator of the meeting",
                    "readOnly": true
                },
                "numRecordings": {
                    "type": "number",
                    "description": "Number of recordings started in the meeting.This fields is computed at the end of the meeting",
                    "default": null,
                    "readOnly": true
                },
                "numExtMessages": {
                    "type": "number",
                    "description": "Number of messages sent in the meeting.This fields is computed at the end of the meeting",
                    "default": null,
                    "readOnly": true
                },
                "numParticipants": {
                    "type": "number",
                    "description": "Number of participants in the meeting.This fields is computed at the end of the meeting",
                    "default": null,
                    "readOnly": true
                }
            }
        },
        "ReportMeetingsRequiredProperties": {
            "type": "object",
            "required": [
                "format"
            ]
        },
        "ReportMeetingsProperties": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Report id",
                    "readOnly": true
                },
                "title": {
                    "type": "string",
                    "description": "Report title"
                },
                "status": {
                    "enum": [
                        "ready",
                        "processing",
                        "error"
                    ],
                    "description": "Report status",
                    "readOnly": true
                },
                "size": {
                    "type": "number",
                    "description": "Report file size in byte",
                    "readOnly": true
                },
                "service": {
                    "type": "string",
                    "description": "Service that generates the report",
                    "readOnly": true
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Create report date",
                    "readOnly": true
                },
                "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Last update report date",
                    "readOnly": true
                },
                "format": {
                    "enum": [
                        "xlsx",
                        "csv"
                    ],
                    "description": "Format file report"
                },
                "s3": {
                    "type": "object",
                    "description": "S3 report's details",
                    "readOnly": true
                }
            }
        },
        "ReportDownloadProperties": {
            "type": "object",
            "properties": {
                "url": {
                    "type": "string",
                    "description": "Report URL"
                },
                "expiration": {
                    "type": "number",
                    "description": "URL expiration in seconds"
                }
            }
        },
        "AutomationRequiredProperties": {
            "type": "object",
            "required": [
                "when",
                "actions",
                "name"
            ]
        },
        "AutomationProperties": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Automation id",
                    "readOnly": true
                },
                "when": {
                    "type": "string",
                    "enum": [
                        "v1.meetings.create",
                        "v1.meetings.start"
                    ],
                    "description": "The action that when is call active the automation"
                },
                "conditions": {
                    "type": "array",
                    "default": [],
                    "items": {
                        "type": "object",
                        "required": [
                            "field",
                            "operator",
                            "value"
                        ],
                        "properties": {
                            "field": {
                                "type": "string",
                                "enum": [
                                    "user_id",
                                    "roles"
                                ],
                                "description": "Field of the condition"
                            },
                            "operator": {
                                "type": "string",
                                "enum": [
                                    "=",
                                    "!="
                                ],
                                "description": "Operator of the condition"
                            },
                            "value": {
                                "type": "string",
                                "description": "The value of field"
                            }
                        }
                    }
                },
                "actions": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/WebhookProperties"
                            },
                            {
                                "$ref": "#/definitions/SendMailProperties"
                            },
                            {
                                "$ref": "#/definitions/SipInviteProperties"
                            }
                        ]
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Automation is enable or not",
                    "default": false
                },
                "name": {
                    "type": "string",
                    "description": "Automation name"
                },
                "description": {
                    "type": "string",
                    "description": "Automation description",
                    "default": null
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Create automation date",
                    "readOnly": true
                },
                "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Last update automation date",
                    "readOnly": true
                }
            }
        },
        "WebhookProperties": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "webhook"
                    ]
                },
                "webhook": {
                    "type": "object",
                    "description": "Make http requests from vidaoo.",
                    "required": [
                        "url",
                        "method"
                    ],
                    "properties": {
                        "url": {
                            "type": "url",
                            "description": " Is the server URL that will be used for the request"
                        },
                        "method": {
                            "type": "string",
                            "enum": [
                                "GET",
                                "POST",
                                "DELETE",
                                "PUT",
                                "PATCH"
                            ],
                            "description": " Is the request method to be used when making the request"
                        },
                        "headers": {
                            "type": "object",
                            "description": "Are custom headers to be sent. Here you can use the variables: user and data between tags “<$” and “$>” (es. <$data.topic$>).",
                            "default": null
                        },
                        "body": {
                            "type": "object",
                            "description": "Is the data to be sent as the request body. Only applicable for request methods 'PUT', 'POST', and 'PATCH'.                                 Here you can use the variables: user and data between tags “<$” and “$>” (es. <$data.topic$>).",
                            "default": null
                        }
                    }
                }
            }
        },
        "SendMailProperties": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "send_mail"
                    ]
                },
                "send_mail": {
                    "type": "object",
                    "description": "Send email from vidaoo.",
                    "required": [
                        "to",
                        "subject",
                        "body"
                    ],
                    "properties": {
                        "to": {
                                    "type": "array",
                                    "items": {
                                        "type": "email",
                                        "description": "Example: [ \"john.doe@xcally.com\" , \"jane.miller@gmail.com\" ]"
                                    } 
                        },
                        "subject": {
                            "type": "string",
                            "description": "The subject of email",
                            "minimum": 1,
                            "maximum": 5000
                        },
                        "body": {
                            "type": "string",
                            "description": "The body of email",
                            "minimum": 1,
                            "maximum": 5000
                        }
                    }
                }
            }
        },
        "SipInviteProperties": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "sip_invite"
                    ]
                },
                "sip_invite": {
                    "type": "object",
                    "description": "Sip invite from vidaoo.",
                    "required": [
                        "sipUri",
                        "callingNumber",
                        "calledNumber"
                    ],
                    "properties": {
                        "sipUri": {
                            "type": "string",
                            "description": "A SIP URI is the SIP addressing schema to call another person via SIP."
                        },
                        "callingNumber": {
                            "type": "string",
                            "description": "Calling party number",
                            "minimum": 1
                        },
                        "calledNumber": {
                            "type": "string",
                            "description": "Called party number",
                            "minimum": 1
                        },
                        "auth": {
                            "type": "object",
                            "default": null,
                            "required": [
                                "username",
                                "password"
                            ],
                            "description": "Only in case need authentication",
                            "properties": {
                                "username": {
                                    "type": "string",
                                    "description": "Your authentication username"
                                },
                                "password": {
                                    "type": "string",
                                    "description": "Your authentication username"
                                }
                            }
                        }
                    }
                }
            }
        },
        "UserRequiredProperties": {
            "type": "object",
            "required": [
                "username"
            ]
        },
        "UserProperties": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "User id",
                    "readOnly": true
                },
                "account_id": {
                    "type": "string",
                    "description": "Account id",
                    "readOnly": true
                },
                "username": {
                    "type": "string",
                    "minLength": 3,
                    "description": "User name",
                    "example": "john.doe"
                },
                "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User email",
                    "example": "john.doe@xcally.com"
                },
                "avatar": {
                    "type": "string",
                    "format": "uri",
                    "description": "User avatar",
                    "example": "https://gravatar.com/avatar/87f448a74e3c4e2ab9525dc4b26621d1?s=64&d=robohash",
                    "readOnly": true
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "User roles"
                },
                "status": {
                    "type": "boolean",
                    "default": true,
                    "description": "User status"
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Create user date",
                    "readOnly": true
                },
                "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Last update user date",
                    "readOnly": true
                },
                "dashboard": {
                    "type": "boolean",
                    "default": true,
                    "description": "Set it to false if only API key user is needed"
                }
            }
        },
        "AccountRequiredProperties": {
            "type": "object",
            "required": [
                "firstName",
                "lastName",
                "email"
            ]
        },
        "AccountProperties": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Account id",
                    "readOnly": true
                },
                "firstName": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Account first name",
                    "example": "John"
                },
                "lastName": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Account last name",
                    "example": "Doe"
                },
                "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Account email"
                },
                "avatar": {
                    "type": "string",
                    "format": "uri",
                    "description": "Account avatar",
                    "example": "https://gravatar.com/avatar/87f448a74e3c4e2ab9525dc4b26621d1?s=64&d=robohash",
                    "readOnly": true
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Account roles",
                    "readOnly": true
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Account permissions",
                    "readOnly": true
                },
                "status": {
                    "type": "integer",
                    "enum": [
                        0,
                        1
                    ],
                    "default": 1,
                    "description": "Account status: 0=Disabled, 1=Enabled",
                    "readOnly": true
                },
                "max_sessions": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 250,
                    "default": 1,
                    "description": "Max number of concurrent sessions"
                },
                "plan": {
                    "type": "string",
                    "description": "Account Plan"
                },
                "recording": {
                    "type": "object",
                    "properties": {
                        "auto": {
                            "type": "boolean",
                            "default": false,
                            "description": "Recording automatically: true or false"
                        }
                    },
                    "description": "Recording options"
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Create account date",
                    "readOnly": true
                },
                "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Last update account date",
                    "readOnly": true
                }
            }
        },
        "PlanProperties": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Plan id",
                    "readOnly": true
                },
                "name": {
                    "type": "string",
                    "description": "Plan name",
                    "example": "free",
                    "readOnly": true
                },
                "amount": {
                    "type": "integer",
                    "description": "Plan amount",
                    "readOnly": true
                },
                "currency": {
                    "type": "string",
                    "description": "Plan currency",
                    "example": "usd",
                    "readOnly": true
                },
                "image": {
                    "type": "string",
                    "description": "Plan image url",
                    "readOnly": true
                },
                "description": {
                    "type": "string",
                    "description": "Plan description",
                    "readOnly": true
                },
                "interval": {
                    "type": "string",
                    "description": "Plan interval",
                    "example": "month",
                    "readOnly": true
                },
                "metadata": {
                    "type": "object",
                    "description": "Plan metadata",
                    "readOnly": true
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Create plan date",
                    "readOnly": true
                }
            }
        },
        "PlanMeProperties": {
            "type": "object",
            "properties": {
                "expiration": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A date in the future at which the subscription will automatically get canceled",
                    "readOnly": true
                },
                "subscriptionPeriodEnd": {
                    "type": "string",
                    "format": "date-time",
                    "description": "End of the current period that the subscription has been invoiced for.",
                    "readOnly": true
                },
                "defaultPaymentMethod": {
                    "type": "object",
                    "properties": {
                        "brand": {
                            "type": "string",
                            "description": "Card brand",
                            "example": "visa",
                            "readOnly": true
                        },
                        "last4": {
                            "type": "string",
                            "description": "The last four digits of the card",
                            "example": "4242",
                            "readOnly": true
                        }
                    }
                }
            }
        },
        "BackgroundProperties": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Background id",
                    "readOnly": true
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Create recording date",
                    "readOnly": true
                },
                "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Last update recording date",
                    "readOnly": true
                },
                "preview": {
                    "type": "object",
                    "description": "Background preview",
                    "properties": {
                        "type": {
                            "type": "string",
                            "example": "Buffer",
                            "readOnly": true
                        },
                        "data": {
                            "type": "array",
                            "readOnly": true
                        }
                    }
                }
            }
        },
        "BackgroundDownloadProperties": {
            "type": "object",
            "properties": {
                "url": {
                    "type": "string",
                    "description": "Background URL"
                },
                "expiration": {
                    "type": "number",
                    "description": "URL expiration in seconds"
                }
            }
        },
        "DeviceRequiredProperties": {
            "type": "object",
            "required": [
                "name",
                "notifyUrl"
            ]
        },
        "DeviceProperties": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Device id",
                    "readOnly": true
                },
                "name": {
                    "type": "string",
                    "description": "Device name",
                    "minLength": 2
                },
                "notifyUrl": {
                    "type": "string",
                    "format": "uri",
                    "description": "xCALLY Openchannel notify URL"
                },
                "videoUrl": {
                    "type": "string",
                    "format": "uri",
                    "description": "",
                    "default": null
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Create device date",
                    "readOnly": true
                },
                "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Last update device date",
                    "readOnly": true
                }
            }
        },
        "RecordingRequiredProperties": {
            "type": "object",
            "required": []
        },
        "RecordingProperties": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Recording id",
                    "readOnly": true
                },
                "__id": {
                    "type": "string",
                    "description": "Gateway Recording id",
                    "readOnly": true
                },
                "name": {
                    "type": "string",
                    "description": "Recording name",
                    "readOnly": true
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "started",
                        "stopped",
                        "ready",
                        "failed"
                    ],
                    "description": "Recordings status",
                    "default": "started",
                    "readOnly": true
                },
                "url": {
                    "type": "string",
                    "description": "Recording URL",
                    "default": null,
                    "readOnly": true,
                    "deprecated": true
                },
                "urls_individual_recordings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Individual recordings URLSs",
                    "default": null,
                    "readOnly": true,
                    "deprecated": true
                },
                "size": {
                    "type": "integer",
                    "description": "Recording size in bytes",
                    "default": 0,
                    "readOnly": true
                },
                "duration": {
                    "type": "integer",
                    "description": "Recording duration in seconds",
                    "default": 0,
                    "readOnly": true
                },
                "reason": {
                    "type": "string",
                    "enum": [
                        "recordingStoppedByServer",
                        "lastParticipantLeft",
                        "sessionClosedByServer",
                        "automaticStop",
                        "mediaServerDisconnect",
                        "vidaooServerStopped"
                    ],
                    "description": "Recording reason",
                    "default": null,
                    "readOnly": true
                },
                "startedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Start recording date",
                    "readOnly": true
                },
                "endedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "End recording date",
                    "default": null,
                    "readOnly": true
                },
                "session_id": {
                    "type": "string",
                    "description": "Recording Session Id"
                },
                "meeting_id": {
                    "type": "string",
                    "description": "Recording Meeting Id"
                },
                "cname": {
                    "type": "string",
                    "description": "Custom name. This can be useful for storing additional information about the recording name.",
                    "minimum": 1,
                    "default": null
                },
                "metadata": {
                    "type": "object",
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
                    "default": null
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Create recording date",
                    "readOnly": true
                },
                "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Last update recording date",
                    "readOnly": true
                },
                "staticUrl": {
                    "type": "string",
                    "description": "Static recording's url. It keeps track for other recording's location",
                    "format": "uri",
                    "readOnly": true,
                    "default": null
                }
            }
        },
        "RecordingDownloadProperties": {
            "type": "object",
            "properties": {
                "url": {
                    "type": "string",
                    "description": "Recording URL"
                },
                "expiration": {
                    "type": "number",
                    "description": "URL expiration in seconds"
                }
            }
        }
    },
    "paths": {
        "/api/v1​​​​​​​​/accounts​​​​​​​​/:id/recording​​​​​​​​": {
            "put": {
                "summary": "Update recording config",
                "description": "Update recording config",
                "parameters": [
                    {
                        "$ref": "#/parameters/AccountId"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "description": "Account object",
                        "schema": {
                            "allOf": [
                                {
                                    "type": "object",
                                    "required": [
                                        "auto"
                                    ],
                                    "properties": {
                                        "auto": {
                                            "type": "string",
                                            "description": "Recording automatically true or false"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Account Recording Mode Returned",
                        "schema": {
                            "$ref": "#/definitions/AccountProperties"
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorMessage"
                        }
                    }
                },
                "operationId": "v1.accounts.updateRecording",
                "tags": [
                    "Accounts"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "$account"
                        ]
                    }
                ]
            }
        },
        "/api/v1​​​​​​​​/accounts​​​​​​​​/change-password​​​​​​​​": {
            "put": {
                "summary": "Change account's password",
                "description": "Change account's password",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "required": [
                                "oldPassword",
                                "newPassword"
                            ],
                            "properties": {
                                "oldPassword": {
                                    "type": "string",
                                    "description": "Old password"
                                },
                                "newPassword": {
                                    "type": "string",
                                    "format": "password",
                                    "minLength": 8,
                                    "description": "New password"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token Returned",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationToken"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorMessage"
                        }
                    }
                },
                "operationId": "v1.accounts.changePassword",
                "tags": [
                    "Accounts"
                ],
                "security": []
            }
        },
        "/api/v1​​​​​​​​/accounts​​​​​​​​/checkout-session​​​​​​​​": {
            "post": {
                "summary": "Create a checkout session",
                "description": "Stripe hosted payment page. It is possible to pay for one-time purchase subscription to Vidaoo",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "required": [
                                "quantity",
                                "priceId",
                                "success_url",
                                "cancel_url"
                            ],
                            "properties": {
                                "quantity": {
                                    "type": "number",
                                    "description": "Quantity of concurrent meetings you want to buy"
                                },
                                "priceId": {
                                    "type": "string",
                                    "description": "The product Id that you want to buy"
                                },
                                "success_url": {
                                    "type": "string",
                                    "description": "The URL redirect when payment is complete"
                                },
                                "cancel_url": {
                                    "type": "string",
                                    "description": "The URL redirect when payment is canceled"
                                },
                                "locale": {
                                    "type": "string",
                                    "description": "The IETF language tag of the locale Checkout is displayed in. If blank or auto, the browser’s locale is used"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "type": "string",
                            "example": "cs_test_kk6i4zYKTVNCkF43Bs3yScZRR07Srf9109aNmE5FvH8JHKtiZ1WxkLC3"
                        },
                        "description": "Unique identifier for the checkout session"
                    }
                },
                "operationId": "v1.accounts.stripeCreateCheckoutSession",
                "tags": [
                    "Accounts"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "$account",
                            "$checkout"
                        ]
                    }
                ]
            }
        },
        "/api/v1​​​​​​​​/accounts​​​​​​​​/customer-portal​​​​​​​​": {
            "post": {
                "summary": "Get customer portal URL",
                "description": "The customer portal is a Stripe-hosted UI for subscription and billing management.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "required": [
                                "returnUrl"
                            ],
                            "properties": {
                                "returnUrl": {
                                    "type": "string",
                                    "description": "The default URL to redirect customers to when they click on the portal’s link to return to your website."
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "type": "string",
                            "example": "https://billing.stripe.com/session/_K7K2DGktkU8ACbfj53CAGEc3MLQHsnS"
                        },
                        "description": "The short-lived URL of the session that gives customers access to the customer portal"
                    }
                },
                "operationId": "v1.accounts.stripeGetCustomerPortal",
                "tags": [
                    "Accounts"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "$account"
                        ]
                    }
                ]
            }
        },
        "/api/v1​​​​​​​​/accounts​​​​​​​​/forgot-password​​​​​​​​": {
            "get": {
                "summary": "Forgot account's password",
                "description": "Forgot account's password",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "required": [
                                "email"
                            ],
                            "properties": {
                                "email": {
                                    "type": "string",
                                    "format": "email",
                                    "description": "Account email"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "If a Vidaoo account exists, it will receive an email with a link to reset your password."
                    }
                },
                "operationId": "v1.accounts.forgotPassword",
                "tags": [
                    "Accounts"
                ],
                "security": []
            }
        },
        "/api/v1​​​​​​​​/accounts​​​​​​​​/health​​​​​​​​": {
            "get": {
                "summary": "Health check API endpoint",
                "description": "Health check API endpoint",
                "responses": {
                    "200": {
                        "description": "Microservice status",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "operationId": "v1.accounts.health",
                "tags": [
                    "Accounts"
                ],
                "security": []
            }
        },
        "/api/v1​​​​​​​​/accounts​​​​​​​​/login​​​​​​​​": {
            "post": {
                "summary": "Retrieve a account's token",
                "description": "Retrieve a account's token",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "required": [
                                "email",
                                "password"
                            ],
                            "properties": {
                                "email": {
                                    "type": "string",
                                    "format": "email",
                                    "description": "Account email"
                                },
                                "password": {
                                    "type": "string",
                                    "description": "Account password"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token Returned",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationToken"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorMessage"
                        }
                    }
                },
                "operationId": "v1.accounts.login",
                "tags": [
                    "Accounts"
                ],
                "security": []
            }
        },
        "/api/v1​​​​​​​​/accounts​​​​​​​​/me​​​​​​​​": {
            "get": {
                "summary": "Own account's details",
                "description": "Own account's details",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Own Account Returned",
                        "schema": {
                            "$ref": "#/definitions/AccountProperties"
                        }
                    }
                },
                "operationId": "v1.accounts.me",
                "tags": [
                    "Accounts"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "$account"
                        ]
                    }
                ]
            }
        },
        "/api/v1​​​​​​​​/accounts​​​​​​​​/register​​​​​​​​": {
            "post": {
                "summary": "Register an account",
                "description": "Register an account",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "description": "Account object",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/AccountProperties"
                                },
                                {
                                    "$ref": "#/definitions/AccountRequiredProperties"
                                },
                                {
                                    "type": "object",
                                    "required": [
                                        "password"
                                    ],
                                    "properties": {
                                        "password": {
                                            "type": "string",
                                            "minLength": 8,
                                            "description": "Account password"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Account Created",
                        "schema": {
                            "$ref": "#/definitions/AccountProperties"
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorMessage"
                        }
                    }
                },
                "operationId": "v1.accounts.register",
                "tags": [
                    "Accounts"
                ],
                "security": []
            }
        },
        "/api/v1​​​​​​​​/accounts​​​​​​​​/reset-password​​​​​​​​": {
            "post": {
                "summary": "Reset account's password",
                "description": "Reset account's password",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "required": [
                                "token",
                                "password"
                            ],
                            "properties": {
                                "token": {
                                    "type": "string",
                                    "description": "Token generated"
                                },
                                "password": {
                                    "type": "string",
                                    "format": "password",
                                    "minLength": 8,
                                    "description": "New password"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token Returned",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationToken"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorMessage"
                        }
                    }
                },
                "operationId": "v1.accounts.resetPassword",
                "tags": [
                    "Accounts"
                ],
                "security": []
            }
        },
        "/api/v1​​​​​​​​/accounts​​​​​​​​/verify​​​​​​​​": {
            "post": {
                "summary": "Verify an account's token",
                "description": "Verify an account's token",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "required": [
                                "token"
                            ],
                            "properties": {
                                "token": {
                                    "type": "string",
                                    "description": "Verify Token"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token Returned",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationToken"
                        }
                    }
                },
                "operationId": "v1.accounts.verify",
                "tags": [
                    "Accounts"
                ],
                "security": []
            }
        },
        "/api/v1​​​​​​​​/automations​​​​​​​​/:id​​​​​​​​": {
            "get": {
                "summary": "Retrieve a automation",
                "description": "Retrieve a automations details",
                "parameters": [
                    {
                        "$ref": "#/parameters/AutomationId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Automation Returned",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/AutomationProperties"
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Automation not found"
                    }
                },
                "operationId": "v1.automations.get",
                "tags": [
                    "Automations"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "automations.get"
                        ]
                    }
                ]
            },
            "put": {
                "summary": "Update an automation",
                "description": "Update an automation",
                "parameters": [
                    {
                        "$ref": "#/parameters/AutomationId"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "description": "Automation object",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/AutomationProperties"
                                }
                            ],
                            "oneOf": [
                                {
                                    "$ref": "#/definitions/WebhookProperties"
                                },
                                {
                                    "$ref": "#/definitions/SendMailProperties"
                                },
                                {
                                    "$ref": "#/definitions/SipInviteProperties"
                                }
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Automation Returned",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/AutomationProperties"
                                }
                            ]
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorMessage"
                        }
                    }
                },
                "operationId": "v1.automations.update",
                "tags": [
                    "Automations"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "automations.update"
                        ]
                    }
                ]
            },
            "delete": {
                "summary": "Remove an automation",
                "description": "Remove an automation",
                "parameters": [
                    {
                        "$ref": "#/parameters/AutomationId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Automation Returned",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/AutomationProperties"
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Automation not found"
                    }
                },
                "operationId": "v1.automations.remove",
                "tags": [
                    "Automations"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "automations.remove"
                        ]
                    }
                ]
            }
        },
        "/api/v1​​​​​​​​/automations​​​​​​​​/events​​​​​​​​": {
            "get": {
                "summary": "List of events",
                "description": "List of events",
                "responses": {
                    "200": {
                        "description": "Automation Events Returned",
                        "schema": {
                            "properties": {
                                "rows": {
                                    "type": "array",
                                    "example": [
                                        "v1.meetings.create",
                                        "v1.meetings.start"
                                    ],
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "v1.meetings.create",
                                            "v1.meetings.start"
                                        ]
                                    },
                                    "description": "Array of events"
                                }
                            }
                        }
                    }
                },
                "operationId": "v1.automations.listEvents",
                "tags": [
                    "Automations"
                ],
                "security": []
            }
        },
        "/api/v1​​​​​​​​/automations​​​​​​​​/health​​​​​​​​": {
            "get": {
                "summary": "Health check API endpoint",
                "description": "Health check API endpoint",
                "responses": {
                    "200": {
                        "description": "Microservice status",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "operationId": "v1.automations.health",
                "tags": [
                    "Automations"
                ],
                "security": []
            }
        },
        "/api/v1​​​​​​​​/automations​​​​​​​​​​​​​​​​": {
            "get": {
                "summary": "List of automations",
                "description": "List of automations",
                "parameters": [
                    {
                        "$ref": "#/parameters/Populate"
                    },
                    {
                        "$ref": "#/parameters/Fields"
                    },
                    {
                        "$ref": "#/parameters/Page"
                    },
                    {
                        "$ref": "#/parameters/PageSize"
                    },
                    {
                        "$ref": "#/parameters/Sort"
                    },
                    {
                        "$ref": "#/parameters/Query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Automations Returned",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/Pagination"
                                },
                                {
                                    "properties": {
                                        "rows": {
                                            "type": "array",
                                            "description": "Array of automations",
                                            "items": {
                                                "allOf": [
                                                    {
                                                        "$ref": "#/definitions/AutomationProperties"
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                },
                "operationId": "v1.automations.list",
                "tags": [
                    "Automations"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "automations.list"
                        ]
                    }
                ]
            },
            "post": {
                "summary": "Create an automation",
                "description": "Create an automation",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "description": "Automation object",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/AutomationProperties"
                                },
                                {
                                    "$ref": "#/definitions/AutomationRequiredProperties"
                                }
                            ]
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Automation Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/AutomationProperties"
                                }
                            ]
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorMessage"
                        }
                    }
                },
                "operationId": "v1.automations.create",
                "tags": [
                    "Automations"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "automations.create"
                        ]
                    }
                ]
            }
        },
        "/api/v1​​​​​​​​/backgrounds​​​​​​​​/:id/download​​​​​​​​": {
            "get": {
                "summary": "Download a background",
                "description": "Generate a signed URL to download the background",
                "parameters": [
                    {
                        "$ref": "#/parameters/BackgroundId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Background URL object returned",
                        "schema": {
                            "$ref": "#/definitions/BackgroundDownloadProperties"
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorMessage"
                        }
                    }
                },
                "operationId": "v1.backgrounds.download",
                "tags": [
                    "Backgrounds"
                ],
                "security": []
            }
        },
        "/api/v1​​​​​​​​/backgrounds​​​​​​​​/:id​​​​​​​​": {
            "get": {
                "summary": "Retrieve a background",
                "description": "Retrieve background's details",
                "parameters": [
                    {
                        "$ref": "#/parameters/BackgroundId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Background returned",
                        "schema": {
                            "$ref": "#/definitions/BackgroundProperties"
                        }
                    },
                    "404": {
                        "description": "Background not found"
                    }
                },
                "operationId": "v1.backgrounds.get",
                "tags": [
                    "Backgrounds"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "backgrounds.get"
                        ]
                    }
                ]
            },
            "delete": {
                "summary": "Delete a background",
                "description": "Delete a background",
                "parameters": [
                    {
                        "$ref": "#/parameters/BackgroundId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Background Returned",
                        "schema": {
                            "$ref": "#/definitions/BackgroundProperties"
                        }
                    },
                    "404": {
                        "description": "Background not found"
                    }
                },
                "operationId": "v1.backgrounds.remove",
                "tags": [
                    "Backgrounds"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "backgrounds.remove"
                        ]
                    }
                ]
            }
        },
        "/api/v1​​​​​​​​/backgrounds​​​​​​​​​​​​​​​​": {
            "get": {
                "summary": "List backgrounds",
                "description": "List backgrounds",
                "parameters": [
                    {
                        "$ref": "#/parameters/Populate"
                    },
                    {
                        "$ref": "#/parameters/Fields"
                    },
                    {
                        "$ref": "#/parameters/Page"
                    },
                    {
                        "$ref": "#/parameters/PageSize"
                    },
                    {
                        "$ref": "#/parameters/Sort"
                    },
                    {
                        "$ref": "#/parameters/Query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Backgrounds returned",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/Pagination"
                                },
                                {
                                    "properties": {
                                        "rows": {
                                            "type": "array",
                                            "description": "Array of background objects",
                                            "items": {
                                                "$ref": "#/definitions/BackgroundProperties"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                },
                "operationId": "v1.backgrounds.list",
                "tags": [
                    "Backgrounds"
                ],
                "security": []
            }
        },
        "/api/v1​​​​​​​​/buttons​​​​​​​​/:id​​​​​​​​": {
            "get": {
                "summary": "Retrieve a button",
                "description": "Retrieve a button's details",
                "parameters": [
                    {
                        "$ref": "#/parameters/ButtonId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Button Returned",
                        "schema": {
                            "$ref": "#/definitions/ButtonProperties"
                        }
                    },
                    "404": {
                        "description": "Button not found"
                    }
                },
                "operationId": "v1.buttons.get",
                "tags": [
                    "Buttons"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "buttons.get"
                        ]
                    }
                ]
            },
            "put": {
                "summary": "Update a button",
                "description": "Update a button",
                "parameters": [
                    {
                        "$ref": "#/parameters/ButtonId"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "description": "Button object",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/ButtonProperties"
                                }
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Button Returned",
                        "schema": {
                            "$ref": "#/definitions/ButtonProperties"
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorMessage"
                        }
                    }
                },
                "operationId": "v1.buttons.update",
                "tags": [
                    "Buttons"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "buttons.update"
                        ]
                    }
                ]
            },
            "delete": {
                "summary": "Delete a button",
                "description": "Delete a button",
                "parameters": [
                    {
                        "$ref": "#/parameters/ButtonId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Button Returned",
                        "schema": {
                            "$ref": "#/definitions/ButtonProperties"
                        }
                    },
                    "404": {
                        "description": "Button not found"
                    }
                },
                "operationId": "v1.buttons.remove",
                "tags": [
                    "Buttons"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "buttons.remove"
                        ]
                    }
                ]
            }
        },
        "/api/v1​​​​​​​​/buttons​​​​​​​​/health​​​​​​​​": {
            "get": {
                "summary": "Health check API endpoint",
                "description": "Health check API endpoint",
                "responses": {
                    "200": {
                        "description": "Microservice status",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "operationId": "v1.buttons.health",
                "tags": [
                    "Buttons"
                ],
                "security": []
            }
        },
        "/api/v1​​​​​​​​/buttons​​​​​​​​​​​​​​​​": {
            "get": {
                "summary": "List of buttons",
                "description": "List of buttons",
                "parameters": [
                    {
                        "$ref": "#/parameters/Populate"
                    },
                    {
                        "$ref": "#/parameters/Fields"
                    },
                    {
                        "$ref": "#/parameters/Page"
                    },
                    {
                        "$ref": "#/parameters/PageSize"
                    },
                    {
                        "$ref": "#/parameters/Sort"
                    },
                    {
                        "$ref": "#/parameters/Query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Buttons Returned",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/Pagination"
                                },
                                {
                                    "properties": {
                                        "rows": {
                                            "type": "array",
                                            "description": "Array of button objects",
                                            "items": {
                                                "$ref": "#/definitions/ButtonProperties"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                },
                "operationId": "v1.buttons.list",
                "tags": [
                    "Buttons"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "buttons.list"
                        ]
                    }
                ]
            },
            "post": {
                "summary": "Create a button",
                "description": "Create a custom button",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "description": "Button object",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/ButtonProperties"
                                },
                                {
                                    "$ref": "#/definitions/ButtonRequiredProperties"
                                }
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Button Created",
                        "schema": {
                            "$ref": "#/definitions/ButtonProperties"
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorMessage"
                        }
                    }
                },
                "operationId": "v1.buttons.create",
                "tags": [
                    "Buttons"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "buttons.create"
                        ]
                    }
                ]
            }
        },
        "/api/v1​​​​​​​​/devices​​​​​​​​/:id​​​​​​​​": {
            "get": {
                "summary": "Retrieve a device",
                "description": "Retrieve a device's details",
                "parameters": [
                    {
                        "$ref": "#/parameters/DeviceId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Device Returned",
                        "schema": {
                            "$ref": "#/definitions/DeviceProperties"
                        }
                    },
                    "404": {
                        "description": "Device not found"
                    }
                },
                "operationId": "v1.devices.get",
                "tags": [
                    "Devices"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "devices.get"
                        ]
                    }
                ]
            },
            "put": {
                "summary": "Update a device",
                "description": "Update a device",
                "parameters": [
                    {
                        "$ref": "#/parameters/DeviceId"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "description": "Device object",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/DeviceProperties"
                                }
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Device Returned",
                        "schema": {
                            "$ref": "#/definitions/DeviceProperties"
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorMessage"
                        }
                    }
                },
                "operationId": "v1.devices.update",
                "tags": [
                    "Devices"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "devices.update"
                        ]
                    }
                ]
            },
            "delete": {
                "summary": "Delete a device",
                "description": "Delete a device",
                "parameters": [
                    {
                        "$ref": "#/parameters/DeviceId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Device Returned",
                        "schema": {
                            "$ref": "#/definitions/DeviceProperties"
                        }
                    },
                    "404": {
                        "description": "Device not found"
                    }
                },
                "operationId": "v1.devices.remove",
                "tags": [
                    "Devices"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "devices.remove"
                        ]
                    }
                ]
            }
        },
        "/api/v1​​​​​​​​/devices​​​​​​​​/health​​​​​​​​": {
            "get": {
                "summary": "Health check API endpoint",
                "description": "Health check API endpoint",
                "responses": {
                    "200": {
                        "description": "Microservice status",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "operationId": "v1.devices.health",
                "tags": [
                    "Devices"
                ],
                "security": []
            }
        },
        "/api/v1​​​​​​​​/devices​​​​​​​​​​​​​​​​": {
            "get": {
                "summary": "List devices",
                "description": "List devices",
                "parameters": [
                    {
                        "$ref": "#/parameters/Populate"
                    },
                    {
                        "$ref": "#/parameters/Fields"
                    },
                    {
                        "$ref": "#/parameters/Page"
                    },
                    {
                        "$ref": "#/parameters/PageSize"
                    },
                    {
                        "$ref": "#/parameters/Sort"
                    },
                    {
                        "$ref": "#/parameters/Query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Devices Returned",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/Pagination"
                                },
                                {
                                    "properties": {
                                        "rows": {
                                            "type": "array",
                                            "description": "Array of device objects",
                                            "items": {
                                                "$ref": "#/definitions/DeviceProperties"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                },
                "operationId": "v1.devices.list",
                "tags": [
                    "Devices"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "devices.list"
                        ]
                    }
                ]
            },
            "post": {
                "summary": "Create a device",
                "description": "Create a device",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "description": "Device object",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/DeviceProperties"
                                },
                                {
                                    "$ref": "#/definitions/DeviceRequiredProperties"
                                }
                            ]
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Device Created",
                        "schema": {
                            "$ref": "#/definitions/DeviceProperties"
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorMessage"
                        }
                    }
                },
                "operationId": "v1.devices.create",
                "tags": [
                    "Devices"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "devices.create"
                        ]
                    }
                ]
            }
        },
        "/api/v1​​​​​​​​/extmessages​​​​​​​​/health​​​​​​​​": {
            "get": {
                "summary": "Health check API endpoint",
                "description": "Health check API endpoint",
                "responses": {
                    "200": {
                        "description": "Microservice status",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "operationId": "v1.extmessages.health",
                "tags": [
                    "Extmessages"
                ],
                "security": []
            }
        },
        "/api/v1​​​​​​​​/logs​​​​​​​​/:id​​​​​​​​": {
            "get": {
                "summary": "Retrieve a log",
                "description": "Retrieve a logs details",
                "parameters": [
                    {
                        "$ref": "#/parameters/LogId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Log Returned",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/LogProperties"
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Log not found"
                    }
                },
                "operationId": "v1.logs.get",
                "tags": [
                    "Logs"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "logs.get"
                        ]
                    }
                ]
            }
        },
        "/api/v1​​​​​​​​/logs​​​​​​​​/health​​​​​​​​": {
            "get": {
                "summary": "Health check API endpoint",
                "description": "Health check API endpoint",
                "responses": {
                    "200": {
                        "description": "Microservice status",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "operationId": "v1.logs.health",
                "tags": [
                    "Logs"
                ],
                "security": []
            }
        },
        "/api/v1​​​​​​​​/logs​​​​​​​​​​​​​​​​": {
            "get": {
                "summary": "List of logs",
                "description": "List of logs",
                "parameters": [
                    {
                        "$ref": "#/parameters/Populate"
                    },
                    {
                        "$ref": "#/parameters/Fields"
                    },
                    {
                        "$ref": "#/parameters/Page"
                    },
                    {
                        "$ref": "#/parameters/PageSize"
                    },
                    {
                        "$ref": "#/parameters/Sort"
                    },
                    {
                        "$ref": "#/parameters/Query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Logs Returned",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/Pagination"
                                },
                                {
                                    "properties": {
                                        "rows": {
                                            "type": "array",
                                            "description": "Array of logs",
                                            "items": {
                                                "allOf": [
                                                    {
                                                        "$ref": "#/definitions/LogProperties"
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                },
                "operationId": "v1.logs.list",
                "tags": [
                    "Logs"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "logs.list"
                        ]
                    }
                ]
            }
        },
        "/api/v1​​​​​​​​/meetings​​​​​​​​/:id/close​​​​​​​​": {
            "post": {
                "summary": "Close meeting",
                "description": "Close meeting",
                "parameters": [
                    {
                        "$ref": "#/parameters/MeetingId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Meeting Closed",
                        "schema": {
                            "$ref": "#/definitions/MeetingProperties"
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorMessage"
                        }
                    }
                },
                "operationId": "v1.meetings.close",
                "tags": [
                    "Meetings"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "meetings.close"
                        ]
                    }
                ]
            }
        },
        "/api/v1​​​​​​​​/meetings​​​​​​​​/:id/feedback​​​​​​​​": {
            "post": {
                "summary": "Give a feedback on meeting",
                "description": "Give a feedback on meeting",
                "parameters": [
                    {
                        "$ref": "#/parameters/MeetingId"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "description": "Feedback object",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "socketId": {
                                    "type": "string",
                                    "example": "gCLbbYq5ppXf4je7AAAB",
                                    "description": "Socket id used in meeting",
                                    "required": true
                                },
                                "stars": {
                                    "description": "Stars",
                                    "type": "integer",
                                    "example": 5,
                                    "minimum": 1,
                                    "maximum": 5,
                                    "required": true
                                },
                                "notes": {
                                    "description": "Notes",
                                    "example": "Awesome meeting!",
                                    "type": "string",
                                    "minLength": 1,
                                    "maxLength": 4096
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {},
                    "422": {
                        "description": "Error Validation",
                        "schema": {
                            "$ref": "#/definitions/ErrorMessage"
                        }
                    }
                },
                "operationId": "v1.meetings.feedback",
                "tags": [
                    "Meetings"
                ],
                "security": []
            }
        },
        "/api/v1​​​​​​​​/meetings​​​​​​​​/:id​​​​​​​​": {
            "get": {
                "summary": "Retrieve a meeting",
                "description": "Retrieve a meeting's details",
                "parameters": [
                    {
                        "$ref": "#/parameters/MeetingId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Meeting Returned",
                        "schema": {
                            "$ref": "#/definitions/MeetingProperties"
                        }
                    },
                    "404": {
                        "description": "Meeting not found"
                    }
                },
                "operationId": "v1.meetings.get",
                "tags": [
                    "Meetings"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "meetings.get"
                        ]
                    }
                ]
            },
            "put": {
                "summary": "Update a meeting",
                "description": "Update a meeting",
                "parameters": [
                    {
                        "$ref": "#/parameters/MeetingId"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "description": "Meeting object",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/MeetingProperties"
                                }
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Meeting Returned",
                        "schema": {
                            "$ref": "#/definitions/MeetingProperties"
                        }
                    },
                    "404": {
                        "description": "Meeting not found"
                    }
                },
                "operationId": "v1.meetings.update",
                "tags": [
                    "Meetings"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "meetings.update"
                        ]
                    }
                ]
            },
            "delete": {
                "summary": "Delete a meeting",
                "description": "Delete a meeting",
                "parameters": [
                    {
                        "$ref": "#/parameters/MeetingId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Meeting Returned",
                        "schema": {
                            "$ref": "#/definitions/MeetingProperties"
                        }
                    },
                    "404": {
                        "description": "Meeting not found"
                    }
                },
                "operationId": "v1.meetings.remove",
                "tags": [
                    "Meetings"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "meetings.remove"
                        ]
                    }
                ]
            }
        },
        "/api/v1​​​​​​​​/meetings​​​​​​​​/health​​​​​​​​": {
            "get": {
                "summary": "Health check API endpoint",
                "description": "Health check API endpoint",
                "responses": {
                    "200": {
                        "description": "Microservice status",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "operationId": "v1.meetings.health",
                "tags": [
                    "Meetings"
                ],
                "security": []
            }
        },
        "/api/v1​​​​​​​​/meetings​​​​​​​​/reports/:id/download​​​​​​​​": {
            "get": {
                "summary": "Download a report of meetings",
                "description": "Generate a signed URL with which download the report of meetings",
                "parameters": [
                    {
                        "$ref": "#/parameters/ReportId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Report URL object returned",
                        "schema": {
                            "$ref": "#/definitions/ReportDownloadProperties"
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorMessage"
                        }
                    }
                },
                "operationId": "v1.meetings.reports.download",
                "tags": [
                    "Meetings"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "meetings.reports.download"
                        ]
                    }
                ]
            }
        },
        "/api/v1​​​​​​​​/meetings​​​​​​​​/reports/:id​​​​​​​​": {
            "get": {
                "summary": "Retrieve a report of meetings",
                "description": "Retrieve a report's details",
                "parameters": [
                    {
                        "$ref": "#/parameters/ReportId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Report Returned",
                        "schema": {
                            "$ref": "#/definitions/ReportMeetingsProperties"
                        }
                    },
                    "404": {
                        "description": "Report not found"
                    }
                },
                "operationId": "v1.meetings.reports.get",
                "tags": [
                    "Meetings"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "meetings.reports.get"
                        ]
                    }
                ]
            },
            "delete": {
                "summary": "Delete a report of meetings",
                "description": "Delete a report",
                "parameters": [
                    {
                        "$ref": "#/parameters/ReportId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Report Returned",
                        "schema": {
                            "$ref": "#/definitions/ReportMeetingsProperties"
                        }
                    },
                    "404": {
                        "description": "Report not found"
                    }
                },
                "operationId": "v1.meetings.reports.remove",
                "tags": [
                    "Meetings"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "meetings.reports.remove"
                        ]
                    }
                ]
            }
        },
        "/api/v1​​​​​​​​/meetings​​​​​​​​/reports​​​​​​​​": {
            "post": {
                "summary": "Create a report of meetings",
                "description": "Create a report of meetings",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "description": "Report object",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/ReportMeetingsProperties"
                                },
                                {
                                    "$ref": "#/definitions/ReportMeetingsRequiredProperties"
                                }
                            ]
                        }
                    },
                    {
                        "$ref": "#/parameters/Query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Report created",
                        "schema": {
                            "$ref": "#/definitions/ReportMeetingsProperties"
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorMessage"
                        }
                    }
                },
                "operationId": "v1.meetings.reports.create",
                "tags": [
                    "Meetings"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "meetings.reports.create"
                        ]
                    }
                ]
            },
            "get": {
                "summary": "List of reports of meetings",
                "description": "List of reports of meetings",
                "parameters": [
                    {
                        "$ref": "#/parameters/Page"
                    },
                    {
                        "$ref": "#/parameters/PageSize"
                    },
                    {
                        "$ref": "#/parameters/Sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Reports of meetings returned",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/Pagination"
                                },
                                {
                                    "properties": {
                                        "rows": {
                                            "type": "array",
                                            "description": "Array of reports",
                                            "items": {
                                                "$ref": "#/definitions/ReportMeetingsProperties"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                },
                "operationId": "v1.meetings.reports.list",
                "tags": [
                    "Meetings"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "meetings.reports.list"
                        ]
                    }
                ]
            }
        },
        "/api/v1​​​​​​​​/meetings​​​​​​​​​​​​​​​​": {
            "get": {
                "summary": "List meetings",
                "description": "List live meetings or past meetings",
                "parameters": [
                    {
                        "$ref": "#/parameters/Populate"
                    },
                    {
                        "$ref": "#/parameters/Fields"
                    },
                    {
                        "$ref": "#/parameters/Page"
                    },
                    {
                        "$ref": "#/parameters/PageSize"
                    },
                    {
                        "$ref": "#/parameters/Sort"
                    },
                    {
                        "$ref": "#/parameters/Query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Meetings Returned",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/Pagination"
                                },
                                {
                                    "properties": {
                                        "rows": {
                                            "type": "array",
                                            "description": "Array of meeting objects",
                                            "items": {
                                                "$ref": "#/definitions/MeetingProperties"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                },
                "operationId": "v1.meetings.list",
                "tags": [
                    "Meetings"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "meetings.list"
                        ]
                    }
                ]
            },
            "post": {
                "summary": "Create a meeting",
                "description": "Create a meeting",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "description": "Meeting object",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/MeetingProperties"
                                },
                                {
                                    "$ref": "#/definitions/MeetingRequiredProperties"
                                }
                            ]
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Meeting Created",
                        "schema": {
                            "$ref": "#/definitions/MeetingProperties"
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorMessage"
                        }
                    }
                },
                "operationId": "v1.meetings.create",
                "tags": [
                    "Meetings"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "meetings.create"
                        ]
                    }
                ]
            }
        },
        "/api/v1​​​​​​​​/plans​​​​​​​​/health​​​​​​​​": {
            "get": {
                "summary": "Health check API endpoint",
                "description": "Health check API endpoint",
                "responses": {
                    "200": {
                        "description": "Microservice status",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "operationId": "v1.plans.health",
                "tags": [
                    "Plans"
                ],
                "security": []
            }
        },
        "/api/v1​​​​​​​​/plans​​​​​​​​/me​​​​​​​​": {
            "get": {
                "summary": "Own plan's details",
                "description": "Own plan's details",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Own Plan Returned",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/PlanProperties"
                                },
                                {
                                    "$ref": "#/definitions/PlanMeProperties"
                                }
                            ]
                        }
                    }
                },
                "operationId": "v1.plans.me",
                "tags": [
                    "Plans"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "$account"
                        ]
                    }
                ]
            }
        },
        "/api/v1​​​​​​​​/plans​​​​​​​​​​​​​​​​": {
            "get": {
                "summary": "List plans",
                "description": "List plans",
                "parameters": [
                    {
                        "$ref": "#/parameters/Page"
                    },
                    {
                        "$ref": "#/parameters/PageSize"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Plans Returned",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/Pagination"
                                },
                                {
                                    "properties": {
                                        "rows": {
                                            "type": "array",
                                            "description": "Array of plan objects",
                                            "items": {
                                                "$ref": "#/definitions/PlanProperties"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                },
                "operationId": "v1.plans.list",
                "tags": [
                    "Plans"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "$account"
                        ]
                    }
                ]
            }
        },
        "/api/v1​​​​​​​​/recordings​​​​​​​​/:id/download​​​​​​​​": {
            "get": {
                "summary": "Download a recording",
                "description": "Generate a signed URL to download the recording",
                "parameters": [
                    {
                        "$ref": "#/parameters/RecordingId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Recording URL object returned",
                        "schema": {
                            "$ref": "#/definitions/RecordingDownloadProperties"
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorMessage"
                        }
                    }
                },
                "operationId": "v1.recordings.download",
                "tags": [
                    "Recordings"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "recordings.get"
                        ]
                    }
                ]
            }
        },
        "/api/v1​​​​​​​​/recordings​​​​​​​​/:id/stop​​​​​​​​": {
            "post": {
                "summary": "Stop a recording",
                "description": "Stop a recording",
                "parameters": [
                    {
                        "$ref": "#/parameters/RecordingId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Recording Stopped",
                        "schema": {
                            "$ref": "#/definitions/RecordingProperties"
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorMessage"
                        }
                    }
                },
                "operationId": "v1.recordings.stop",
                "tags": [
                    "Recordings"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "recordings.create"
                        ]
                    }
                ]
            }
        },
        "/api/v1​​​​​​​​/recordings​​​​​​​​/:id​​​​​​​​": {
            "get": {
                "summary": "Retrieve a recording",
                "description": "Retrieve a recording's details",
                "parameters": [
                    {
                        "$ref": "#/parameters/RecordingId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Recording Returned",
                        "schema": {
                            "$ref": "#/definitions/RecordingProperties"
                        }
                    },
                    "404": {
                        "description": "Recording not found"
                    }
                },
                "operationId": "v1.recordings.get",
                "tags": [
                    "Recordings"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "recordings.get"
                        ]
                    }
                ]
            },
            "put": {
                "summary": "Update a recording",
                "description": "Update a recording",
                "parameters": [
                    {
                        "$ref": "#/parameters/RecordingId"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "description": "Request body",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "cname": {
                                    "type": "string",
                                    "description": "Custom name. This can be useful for storing additional information about the recording name.",
                                    "minimum": 1,
                                    "default": null
                                },
                                "staticUrl": {
                                    "type": "string",
                                    "description": "Static recording's url. It keeps track for other recording's location.This field can only be specified after deleting the recording file using the DELETE call with fileOnly set to true.",
                                    "format": "uri",
                                    "default": null
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Recording Returned",
                        "schema": {
                            "$ref": "#/definitions/RecordingProperties"
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorMessage"
                        }
                    }
                },
                "operationId": "v1.recordings.update",
                "tags": [
                    "Recordings"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "recordings.update"
                        ]
                    }
                ]
            },
            "delete": {
                "summary": "Delete a recording",
                "description": "Delete a recording",
                "parameters": [
                    {
                        "$ref": "#/parameters/RecordingId"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Request body",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "fileOnly": {
                                    "type": "boolean",
                                    "description": "Delete the media file but not the entity",
                                    "default": false
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Recording Returned",
                        "schema": {
                            "$ref": "#/definitions/RecordingProperties"
                        }
                    },
                    "404": {
                        "description": "Recording not found"
                    }
                },
                "operationId": "v1.recordings.remove",
                "tags": [
                    "Recordings"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "recordings.remove"
                        ]
                    }
                ]
            }
        },
        "/api/v1​​​​​​​​/recordings​​​​​​​​/health​​​​​​​​": {
            "get": {
                "summary": "Health check API endpoint",
                "description": "Health check API endpoint",
                "responses": {
                    "200": {
                        "description": "Microservice status",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "operationId": "v1.recordings.health",
                "tags": [
                    "Recordings"
                ],
                "security": []
            }
        },
        "/api/v1​​​​​​​​/recordings​​​​​​​​​​​​​​​​": {
            "get": {
                "summary": "List recordings",
                "description": "List recordings",
                "parameters": [
                    {
                        "$ref": "#/parameters/Populate"
                    },
                    {
                        "$ref": "#/parameters/Fields"
                    },
                    {
                        "$ref": "#/parameters/Page"
                    },
                    {
                        "$ref": "#/parameters/PageSize"
                    },
                    {
                        "$ref": "#/parameters/Sort"
                    },
                    {
                        "$ref": "#/parameters/Query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Recordings Returned",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/Pagination"
                                },
                                {
                                    "properties": {
                                        "rows": {
                                            "type": "array",
                                            "description": "Array of recording objects",
                                            "items": {
                                                "$ref": "#/definitions/RecordingProperties"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                },
                "operationId": "v1.recordings.list",
                "tags": [
                    "Recordings"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "recordings.list"
                        ]
                    }
                ]
            },
            "post": {
                "summary": "Start a recording",
                "description": "Start a recording",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "description": "Recording object",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/RecordingProperties"
                                },
                                {
                                    "$ref": "#/definitions/RecordingRequiredProperties"
                                }
                            ]
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Recording Started",
                        "schema": {
                            "$ref": "#/definitions/RecordingProperties"
                        }
                    },
                    "404": {
                        "description": "Session not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorMessage"
                        }
                    }
                },
                "operationId": "v1.recordings.create",
                "tags": [
                    "Recordings"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "recordings.create"
                        ]
                    }
                ]
            }
        },
        "/api/v1​​​​​​​​/reports​​​​​​​​/health​​​​​​​​": {
            "get": {
                "summary": "Health check API endpoint",
                "description": "Health check API endpoint",
                "responses": {
                    "200": {
                        "description": "Microservice status",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "operationId": "v1.reports.health",
                "tags": [
                    "Reports"
                ],
                "security": []
            }
        },
        "/api/v1​​​​​​​​/roles​​​​​​​​/:id​​​​​​​​": {
            "get": {
                "summary": "Retrieve a role",
                "description": "Retrieve a role's details",
                "parameters": [
                    {
                        "$ref": "#/parameters/RoleId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role Returned",
                        "schema": {
                            "$ref": "#/definitions/RoleProperties"
                        }
                    },
                    "404": {
                        "description": "Role not found"
                    }
                },
                "operationId": "v1.roles.get",
                "tags": [
                    "Roles"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "roles.get"
                        ]
                    }
                ]
            },
            "put": {
                "summary": "Update a role",
                "description": "Update a role",
                "parameters": [
                    {
                        "$ref": "#/parameters/RoleId"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "description": "Role object",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/RoleProperties"
                                }
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role Returned",
                        "schema": {
                            "$ref": "#/definitions/RoleProperties"
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorMessage"
                        }
                    }
                },
                "operationId": "v1.roles.update",
                "tags": [
                    "Roles"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "roles.update"
                        ]
                    }
                ]
            },
            "delete": {
                "summary": "Delete a role",
                "description": "Delete a role",
                "parameters": [
                    {
                        "$ref": "#/parameters/RoleId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role Returned",
                        "schema": {
                            "$ref": "#/definitions/RoleProperties"
                        }
                    },
                    "404": {
                        "description": "Role not found"
                    }
                },
                "operationId": "v1.roles.remove",
                "tags": [
                    "Roles"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "roles.remove"
                        ]
                    }
                ]
            }
        },
        "/api/v1​​​​​​​​/roles​​​​​​​​/health​​​​​​​​": {
            "get": {
                "summary": "Health check API endpoint",
                "description": "Health check API endpoint",
                "responses": {
                    "200": {
                        "description": "Microservice status",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "operationId": "v1.roles.health",
                "tags": [
                    "Roles"
                ],
                "security": []
            }
        },
        "/api/v1​​​​​​​​/roles​​​​​​​​/permissions​​​​​​​​": {
            "get": {
                "summary": "List of permissions",
                "description": "List of permissions",
                "responses": {
                    "200": {
                        "description": "Roles Permissions Returned",
                        "schema": {
                            "properties": {
                                "rows": {
                                    "type": "array",
                                    "example": [
                                        "automations.create",
                                        "automations.list",
                                        "automations.get",
                                        "automations.update",
                                        "automations.remove",
                                        "automations.create.send_mail",
                                        "automations.create.webhook",
                                        "automations.create.sip_invite",
                                        "buttons.create",
                                        "buttons.list",
                                        "buttons.update",
                                        "buttons.remove",
                                        "buttons.get",
                                        "devices.create",
                                        "devices.list",
                                        "devices.update",
                                        "devices.remove",
                                        "devices.get",
                                        "backgrounds.get",
                                        "backgrounds.remove",
                                        "backgrounds.upload",
                                        "logs.get",
                                        "logs.list",
                                        "$join.close",
                                        "$join.startrecording",
                                        "$join.screensharing",
                                        "$join.capturepicture",
                                        "$join.extrabuttons",
                                        "$join.camera",
                                        "$join.microphone",
                                        "$join.fullscreen",
                                        "$join.background",
                                        "recordings.list",
                                        "recordings.create",
                                        "recordings.get",
                                        "recordings.update",
                                        "recordings.remove",
                                        "meetings.reports.create",
                                        "meetings.reports.list",
                                        "meetings.reports.get",
                                        "meetings.reports.remove",
                                        "meetings.reports.download",
                                        "roles.create",
                                        "roles.list",
                                        "roles.get",
                                        "roles.update",
                                        "roles.remove",
                                        "sessions.create",
                                        "sessions.list",
                                        "sessions.get",
                                        "sessions.update",
                                        "sessions.close",
                                        "meetings.create",
                                        "meetings.list",
                                        "meetings.get",
                                        "meetings.update",
                                        "meetings.remove",
                                        "meetings.close",
                                        "monitoring",
                                        "$audio",
                                        "$video",
                                        "$chat",
                                        "tickets.list",
                                        "tickets.create",
                                        "tickets.get",
                                        "tickets.remove",
                                        "tokens.create",
                                        "tokens.list",
                                        "tokens.remove",
                                        "users.create",
                                        "users.list",
                                        "users.update",
                                        "users.remove",
                                        "users.get"
                                    ],
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "automations.create",
                                            "automations.list",
                                            "automations.get",
                                            "automations.update",
                                            "automations.remove",
                                            "automations.create.send_mail",
                                            "automations.create.webhook",
                                            "automations.create.sip_invite",
                                            "buttons.create",
                                            "buttons.list",
                                            "buttons.update",
                                            "buttons.remove",
                                            "buttons.get",
                                            "devices.create",
                                            "devices.list",
                                            "devices.update",
                                            "devices.remove",
                                            "devices.get",
                                            "backgrounds.get",
                                            "backgrounds.remove",
                                            "backgrounds.upload",
                                            "logs.get",
                                            "logs.list",
                                            "$join.close",
                                            "$join.startrecording",
                                            "$join.screensharing",
                                            "$join.capturepicture",
                                            "$join.extrabuttons",
                                            "$join.camera",
                                            "$join.microphone",
                                            "$join.fullscreen",
                                            "$join.background",
                                            "recordings.list",
                                            "recordings.create",
                                            "recordings.get",
                                            "recordings.update",
                                            "recordings.remove",
                                            "meetings.reports.create",
                                            "meetings.reports.list",
                                            "meetings.reports.get",
                                            "meetings.reports.remove",
                                            "meetings.reports.download",
                                            "roles.create",
                                            "roles.list",
                                            "roles.get",
                                            "roles.update",
                                            "roles.remove",
                                            "sessions.create",
                                            "sessions.list",
                                            "sessions.get",
                                            "sessions.update",
                                            "sessions.close",
                                            "meetings.create",
                                            "meetings.list",
                                            "meetings.get",
                                            "meetings.update",
                                            "meetings.remove",
                                            "meetings.close",
                                            "monitoring",
                                            "$audio",
                                            "$video",
                                            "$chat",
                                            "tickets.list",
                                            "tickets.create",
                                            "tickets.get",
                                            "tickets.remove",
                                            "tokens.create",
                                            "tokens.list",
                                            "tokens.remove",
                                            "users.create",
                                            "users.list",
                                            "users.update",
                                            "users.remove",
                                            "users.get"
                                        ]
                                    },
                                    "description": "Array of permissions"
                                }
                            }
                        }
                    }
                },
                "operationId": "v1.roles.listPermissions",
                "tags": [
                    "Roles"
                ],
                "security": []
            }
        },
        "/api/v1​​​​​​​​/roles​​​​​​​​​​​​​​​​": {
            "get": {
                "operationId": "v1.roles.list",
                "tags": [
                    "Roles"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "roles.list"
                        ]
                    }
                ]
            },
            "post": {
                "summary": "Create a role",
                "description": "Create a role",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "description": "Role object",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/RoleProperties"
                                },
                                {
                                    "$ref": "#/definitions/RoleRequiredProperties"
                                }
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role Created",
                        "schema": {
                            "$ref": "#/definitions/RoleProperties"
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorMessage"
                        }
                    }
                },
                "list": {
                    "summary": "List of roles",
                    "description": "List of roles",
                    "parameters": [
                        {
                            "$ref": "#/parameters/Populate"
                        },
                        {
                            "$ref": "#/parameters/Fields"
                        },
                        {
                            "$ref": "#/parameters/Page"
                        },
                        {
                            "$ref": "#/parameters/PageSize"
                        },
                        {
                            "$ref": "#/parameters/Sort"
                        },
                        {
                            "$ref": "#/parameters/Query"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Roles Returned",
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/Pagination"
                                    },
                                    {
                                        "properties": {
                                            "rows": {
                                                "type": "array",
                                                "description": "Array of role objects",
                                                "items": {
                                                    "$ref": "#/definitions/RoleProperties"
                                                }
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    }
                },
                "operationId": "v1.roles.create",
                "tags": [
                    "Roles"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "roles.create"
                        ]
                    }
                ]
            }
        },
        "/api/v1​​​​​​​​/sessions​​​​​​​​/:id/close​​​​​​​​": {
            "post": {
                "summary": "Close own session",
                "description": "Close own session",
                "parameters": [
                    {
                        "$ref": "#/parameters/SessionId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Session Closed",
                        "schema": {
                            "$ref": "#/definitions/SessionProperties"
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorMessage"
                        }
                    }
                },
                "operationId": "v1.sessions.close",
                "tags": [
                    "Sessions"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "sessions.close"
                        ]
                    }
                ]
            }
        },
        "/api/v1​​​​​​​​/sessions​​​​​​​​/:id/owner​​​​​​​​": {
            "put": {
                "summary": "Update a session's owner",
                "description": "Update a session's owner",
                "parameters": [
                    {
                        "$ref": "#/parameters/SessionId"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "required": [
                                "ownerToken"
                            ],
                            "properties": {
                                "ownerToken": {
                                    "type": "string",
                                    "description": "Owner Token"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Session Returned",
                        "schema": {
                            "$ref": "#/definitions/SessionProperties"
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorMessage"
                        }
                    }
                },
                "operationId": "v1.sessions.updateOwner",
                "tags": [
                    "Sessions"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "sessions.update"
                        ]
                    }
                ]
            }
        },
        "/api/v1​​​​​​​​/sessions​​​​​​​​/:id/token​​​​​​​​": {
            "get": {
                "summary": "Retrieve a session's token",
                "description": "Retrieve a session's token",
                "parameters": [
                    {
                        "$ref": "#/parameters/SessionId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token Returned",
                        "schema": {
                            "$ref": "#/definitions/SessionToken"
                        }
                    },
                    "404": {
                        "description": "Session not found"
                    }
                },
                "operationId": "v1.sessions.token",
                "tags": [
                    "Sessions"
                ],
                "security": []
            }
        },
        "/api/v1​​​​​​​​/sessions​​​​​​​​/:id​​​​​​​​": {
            "get": {
                "summary": "Retrieve a session",
                "description": "Retrieve a session's details",
                "parameters": [
                    {
                        "$ref": "#/parameters/SessionId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Session Returned",
                        "schema": {
                            "$ref": "#/definitions/SessionProperties"
                        }
                    },
                    "404": {
                        "description": "Session not found"
                    }
                },
                "operationId": "v1.sessions.get",
                "tags": [
                    "Sessions"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "sessions.get"
                        ]
                    }
                ]
            }
        },
        "/api/v1​​​​​​​​/sessions​​​​​​​​/health​​​​​​​​": {
            "get": {
                "summary": "Health check API endpoint",
                "description": "Health check API endpoint",
                "responses": {
                    "200": {
                        "description": "Microservice status",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "operationId": "v1.sessions.health",
                "tags": [
                    "Sessions"
                ],
                "security": []
            }
        },
        "/api/v1​​​​​​​​/sessions​​​​​​​​​​​​​​​​": {
            "get": {
                "summary": "List sessions",
                "description": "List live sessions or past sessions",
                "parameters": [
                    {
                        "$ref": "#/parameters/Populate"
                    },
                    {
                        "$ref": "#/parameters/Fields"
                    },
                    {
                        "$ref": "#/parameters/Page"
                    },
                    {
                        "$ref": "#/parameters/PageSize"
                    },
                    {
                        "$ref": "#/parameters/Sort"
                    },
                    {
                        "$ref": "#/parameters/Query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sessions Returned",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/Pagination"
                                },
                                {
                                    "properties": {
                                        "rows": {
                                            "type": "array",
                                            "description": "Array of session objects",
                                            "items": {
                                                "$ref": "#/definitions/SessionProperties"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                },
                "operationId": "v1.sessions.list",
                "tags": [
                    "Sessions"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "sessions.list"
                        ]
                    }
                ]
            },
            "post": {
                "summary": "Create a session",
                "description": "Create a session for a device",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "description": "Session object",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/SessionProperties"
                                },
                                {
                                    "$ref": "#/definitions/SessionRequiredProperties"
                                }
                            ]
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Session Created",
                        "schema": {
                            "$ref": "#/definitions/SessionProperties"
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorMessage"
                        }
                    }
                },
                "operationId": "v1.sessions.create",
                "tags": [
                    "Sessions"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "sessions.create"
                        ]
                    }
                ]
            }
        },
        "/api/v1​​​​​​​​/tickets​​​​​​​​/:id​​​​​​​​": {
            "get": {
                "summary": "Retrieve a ticket",
                "description": "Retrieve a ticket's details",
                "parameters": [
                    {
                        "$ref": "#/parameters/TicketId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ticket Returned",
                        "schema": {
                            "$ref": "#/definitions/TicketProperties"
                        }
                    },
                    "404": {
                        "description": "Ticket not found"
                    }
                },
                "operationId": "v1.tickets.get",
                "tags": [
                    "Tickets"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "tickets.get"
                        ]
                    }
                ]
            },
            "delete": {
                "summary": "Delete a ticket",
                "description": "Delete a ticket",
                "parameters": [
                    {
                        "$ref": "#/parameters/TicketId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ticket Returned",
                        "schema": {
                            "$ref": "#/definitions/TicketProperties"
                        }
                    },
                    "404": {
                        "description": "Ticket not found"
                    }
                },
                "operationId": "v1.tickets.remove",
                "tags": [
                    "Tickets"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "tickets.remove"
                        ]
                    }
                ]
            }
        },
        "/api/v1​​​​​​​​/tickets​​​​​​​​/health​​​​​​​​": {
            "get": {
                "summary": "Health check API endpoint",
                "description": "Health check API endpoint",
                "responses": {
                    "200": {
                        "description": "Microservice status",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "operationId": "v1.tickets.health",
                "tags": [
                    "Tickets"
                ],
                "security": []
            }
        },
        "/api/v1​​​​​​​​/tickets​​​​​​​​​​​​​​​​": {
            "get": {
                "summary": "List tickets",
                "description": "List tickets",
                "parameters": [
                    {
                        "$ref": "#/parameters/Populate"
                    },
                    {
                        "$ref": "#/parameters/Fields"
                    },
                    {
                        "$ref": "#/parameters/Page"
                    },
                    {
                        "$ref": "#/parameters/PageSize"
                    },
                    {
                        "$ref": "#/parameters/Sort"
                    },
                    {
                        "$ref": "#/parameters/Query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tickets Returned",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/Pagination"
                                },
                                {
                                    "properties": {
                                        "rows": {
                                            "type": "array",
                                            "description": "Array of ticket objects",
                                            "items": {
                                                "$ref": "#/definitions/TicketProperties"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                },
                "operationId": "v1.tickets.list",
                "tags": [
                    "Tickets"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "tickets.list"
                        ]
                    }
                ]
            },
            "post": {
                "summary": "Create a ticket",
                "description": "Create a ticket",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "description": "Ticket object",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/TicketProperties"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "description": {
                                            "type": "string",
                                            "description": "Ticket description",
                                            "minLength": 250
                                        }
                                    }
                                },
                                {
                                    "$ref": "#/definitions/TicketRequiredProperties"
                                }
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ticket Created",
                        "schema": {
                            "$ref": "#/definitions/TicketProperties"
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorMessage"
                        }
                    }
                },
                "operationId": "v1.tickets.create",
                "tags": [
                    "Tickets"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "tickets.create"
                        ]
                    }
                ]
            }
        },
        "/api/v1​​​​​​​​/tokens​​​​​​​​/:id​​​​​​​​": {
            "delete": {
                "summary": "Delete a token",
                "description": "Delete a token",
                "parameters": [
                    {
                        "$ref": "#/parameters/TokenId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token Returned",
                        "schema": {
                            "$ref": "#/definitions/TokenProperties"
                        }
                    },
                    "404": {
                        "description": "Token not found"
                    }
                },
                "operationId": "v1.tokens.remove",
                "tags": [
                    "Tokens"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "tokens.remove"
                        ]
                    }
                ]
            }
        },
        "/api/v1​​​​​​​​/tokens​​​​​​​​/health​​​​​​​​": {
            "get": {
                "summary": "Health check API endpoint",
                "description": "Health check API endpoint",
                "responses": {
                    "200": {
                        "description": "Microservice status",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "operationId": "v1.tokens.health",
                "tags": [
                    "Tokens"
                ],
                "security": []
            }
        },
        "/api/v1​​​​​​​​/tokens​​​​​​​​​​​​​​​​": {
            "get": {
                "summary": "List of tokens",
                "description": "List of tokens",
                "parameters": [
                    {
                        "$ref": "#/parameters/Populate"
                    },
                    {
                        "$ref": "#/parameters/Fields"
                    },
                    {
                        "$ref": "#/parameters/Page"
                    },
                    {
                        "$ref": "#/parameters/PageSize"
                    },
                    {
                        "$ref": "#/parameters/Sort"
                    },
                    {
                        "$ref": "#/parameters/Query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tokens Returned",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/Pagination"
                                },
                                {
                                    "properties": {
                                        "rows": {
                                            "type": "array",
                                            "description": "Array of token objects",
                                            "items": {
                                                "$ref": "#/definitions/TokenProperties"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                },
                "operationId": "v1.tokens.list",
                "tags": [
                    "Tokens"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "tokens.list"
                        ]
                    }
                ]
            },
            "post": {
                "summary": "Create a token",
                "description": "Create a custom token",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "description": "Token object",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/TokenProperties"
                                },
                                {
                                    "$ref": "#/definitions/TokenRequiredProperties"
                                }
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/TokenProperties"
                                }
                            ],
                            "type": "object",
                            "properties": {
                                "key": {
                                    "type": "string",
                                    "description": "Token key",
                                    "readOnly": true
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorMessage"
                        }
                    }
                },
                "operationId": "v1.tokens.create",
                "tags": [
                    "Tokens"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "tokens.create"
                        ]
                    }
                ]
            }
        },
        "/api/v1​​​​​​​​/users​​​​​​​​/:id/reset-password​​​​​​​​": {
            "post": {
                "summary": "Reset user's password",
                "description": "Reset user's password",
                "parameters": [
                    {
                        "$ref": "#/parameters/UserId"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "required": [
                                "password"
                            ],
                            "properties": {
                                "password": {
                                    "type": "string",
                                    "format": "password",
                                    "minLength": 8,
                                    "description": "New password"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token Returned",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationToken"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorMessage"
                        }
                    }
                },
                "operationId": "v1.users.resetPassword",
                "tags": [
                    "Users"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "users.update"
                        ]
                    }
                ]
            }
        },
        "/api/v1​​​​​​​​/users​​​​​​​​/:id​​​​​​​​": {
            "get": {
                "summary": "Retrieve a user",
                "description": "Retrieve a user's details",
                "parameters": [
                    {
                        "$ref": "#/parameters/UserId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User Returned",
                        "schema": {
                            "$ref": "#/definitions/UserProperties"
                        }
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "operationId": "v1.users.get",
                "tags": [
                    "Users"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "users.get"
                        ]
                    }
                ]
            },
            "put": {
                "summary": "Update a user",
                "description": "Update a user",
                "parameters": [
                    {
                        "$ref": "#/parameters/UserId"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "description": "Button object",
                        "schema": {
                            "properties": {
                                "status": {
                                    "type": "boolean",
                                    "description": "User status"
                                },
                                "roles": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "User roles"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User Returned",
                        "schema": {
                            "$ref": "#/definitions/UserProperties"
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorMessage"
                        }
                    }
                },
                "operationId": "v1.users.update",
                "tags": [
                    "Users"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "users.update"
                        ]
                    }
                ]
            },
            "delete": {
                "summary": "Delete a user",
                "description": "Delete a user",
                "parameters": [
                    {
                        "$ref": "#/parameters/UserId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User Returned",
                        "schema": {
                            "$ref": "#/definitions/UserProperties"
                        }
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "operationId": "v1.users.remove",
                "tags": [
                    "Users"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "users.remove"
                        ]
                    }
                ]
            }
        },
        "/api/v1​​​​​​​​/users​​​​​​​​/change-password​​​​​​​​": {
            "put": {
                "summary": "Change user's password",
                "description": "Change user's password",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "required": [
                                "oldPassword",
                                "newPassword"
                            ],
                            "properties": {
                                "oldPassword": {
                                    "type": "string",
                                    "description": "Old password"
                                },
                                "newPassword": {
                                    "type": "string",
                                    "format": "password",
                                    "minLength": 8,
                                    "description": "New password"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token Returned",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationToken"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ErrorMessage"
                        }
                    }
                },
                "operationId": "v1.users.changePassword",
                "tags": [
                    "Users"
                ],
                "security": []
            }
        },
        "/api/v1​​​​​​​​/users​​​​​​​​/health​​​​​​​​": {
            "get": {
                "summary": "Health check API endpoint",
                "description": "Health check API endpoint",
                "responses": {
                    "200": {
                        "description": "Microservice status",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "operationId": "v1.users.health",
                "tags": [
                    "Users"
                ],
                "security": []
            }
        },
        "/api/v1​​​​​​​​/users​​​​​​​​/login​​​​​​​​": {
            "post": {
                "summary": "Retrieve a user's token",
                "description": "Retrieve a user's token",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "required": [
                                "account_id",
                                "email",
                                "password"
                            ],
                            "properties": {
                                "account_id": {
                                    "type": "string",
                                    "description": "User's account belongs"
                                },
                                "email": {
                                    "type": "string",
                                    "format": "email",
                                    "description": "User email or username"
                                },
                                "password": {
                                    "type": "string",
                                    "description": "User password"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token Returned",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationToken"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorMessage"
                        }
                    }
                },
                "operationId": "v1.users.login",
                "tags": [
                    "Users"
                ],
                "security": []
            }
        },
        "/api/v1​​​​​​​​/users​​​​​​​​/me​​​​​​​​": {
            "get": {
                "summary": "Own user's details",
                "description": "Own user's details",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Own User Returned",
                        "schema": {
                            "$ref": "#/definitions/UserProperties"
                        }
                    }
                },
                "operationId": "v1.users.me",
                "tags": [
                    "Users"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "$user"
                        ]
                    }
                ]
            }
        },
        "/api/v1​​​​​​​​/users​​​​​​​​​​​​​​​​": {
            "get": {
                "summary": "List users",
                "description": "List users",
                "parameters": [
                    {
                        "$ref": "#/parameters/Populate"
                    },
                    {
                        "$ref": "#/parameters/Fields"
                    },
                    {
                        "$ref": "#/parameters/Page"
                    },
                    {
                        "$ref": "#/parameters/PageSize"
                    },
                    {
                        "$ref": "#/parameters/Sort"
                    },
                    {
                        "$ref": "#/parameters/Query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Users Returned",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/Pagination"
                                },
                                {
                                    "properties": {
                                        "rows": {
                                            "type": "array",
                                            "description": "Array of user objects",
                                            "items": {
                                                "$ref": "#/definitions/UserProperties"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                },
                "operationId": "v1.users.list",
                "tags": [
                    "Users"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "users.list"
                        ]
                    }
                ]
            },
            "post": {
                "summary": "Create a user",
                "description": "Create a user",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "description": "User object",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/UserProperties"
                                },
                                {
                                    "$ref": "#/definitions/UserRequiredProperties"
                                },
                                {
                                    "type": "object",
                                    "required": [
                                        "password"
                                    ],
                                    "properties": {
                                        "password": {
                                            "type": "string",
                                            "minLength": 8,
                                            "description": "User password. It is NOT required if dashboard parameter is set to false"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User Created",
                        "schema": {
                            "$ref": "#/definitions/UserProperties"
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorMessage"
                        }
                    }
                },
                "operationId": "v1.users.create",
                "tags": [
                    "Users"
                ],
                "security": [
                    {
                        "bearerAuth": [
                            "users.create"
                        ]
                    }
                ]
            }
        },
        "/upload/v1​​​​​​​​/backgrounds​​​​​​​​/v1/backgrounds​​​​​​​​": {
            "post": {
                "basePath": "/upload/v1",
                "summary": "Upload background image",
                "description": "Upload background image",
                "consumes": [
                    "multipart/form-data"
                ],
                "parameters": [
                    {
                        "in": "formData",
                        "name": "upfile",
                        "type": "file",
                        "description": "Background Image."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Info background uploaded",
                        "schema": {
                            "$ref": "#/definitions/BackgroundProperties"
                        }
                    }
                },
                "operationId": "v1.backgrounds.upload",
                "tags": [
                    "Backgrounds"
                ],
                "security": []
            }
        }
    },
    "securityDefinitions": {
        "bearerAuth": {
            "description": "<p>For accessing the API a valid JWT token must be passed in all the queries in the 'Authorization' header.<p>                                <p>The following syntax must be used in the '<b>Authorization</b>' header:</p>                                <p><code>Bearer xxxxxx.yyyyyyy.zzzzzz</code></p>",
            "type": "http",
            "scheme": "bearer"
        },
        "apiKey": {
            "description": "<p>For accessing the API a valid KEY must be passed in all the queries in the 'X-APIKEY' header.<p>                                <p>The following syntax must be used in the '<b>X-APIKEY</b>' header:</p>                                <p><code>b2904ce8b97f4b736a435e71ff552f71dfd37f5597ec0f598e</code></p>",
            "type": "apiKey",
            "name": "X-APIKEY",
            "in": "header"
        }
    },
    "tags": [
        {
            "name": "Recordings",
            "description": "Recordings operations"
        }
    ]
}